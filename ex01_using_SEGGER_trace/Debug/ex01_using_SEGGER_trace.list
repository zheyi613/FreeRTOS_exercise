
ex01_using_SEGGER_trace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800dd4c  0800dd4c  0001dd4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df3c  0800df3c  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  0800df3c  0800df3c  0001df3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df44  0800df44  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df44  0800df44  0001df44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df48  0800df48  0001df48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800df4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000adc0  20000168  0800e0b4  00020168  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000af28  0800e0b4  0002af28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .debug_info   000261e1  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000058b8  00000000  00000000  00046379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020a0  00000000  00000000  0004bc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001df0  00000000  00000000  0004dcd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f109  00000000  00000000  0004fac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bbf3  00000000  00000000  0006ebd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ada9f  00000000  00000000  0009a7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00148263  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c40  00000000  00000000  001482b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000168 	.word	0x20000168
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dd34 	.word	0x0800dd34

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000016c 	.word	0x2000016c
 80001dc:	0800dd34 	.word	0x0800dd34

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	2000856c 	.word	0x2000856c
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800062a:	463b      	mov	r3, r7
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000636:	4b21      	ldr	r3, [pc, #132]	; (80006bc <MX_ADC1_Init+0x98>)
 8000638:	4a21      	ldr	r2, [pc, #132]	; (80006c0 <MX_ADC1_Init+0x9c>)
 800063a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <MX_ADC1_Init+0x98>)
 800063e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000642:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000644:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <MX_ADC1_Init+0x98>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800064a:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <MX_ADC1_Init+0x98>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000650:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <MX_ADC1_Init+0x98>)
 8000652:	2200      	movs	r2, #0
 8000654:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000656:	4b19      	ldr	r3, [pc, #100]	; (80006bc <MX_ADC1_Init+0x98>)
 8000658:	2200      	movs	r2, #0
 800065a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <MX_ADC1_Init+0x98>)
 8000660:	2200      	movs	r2, #0
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000664:	4b15      	ldr	r3, [pc, #84]	; (80006bc <MX_ADC1_Init+0x98>)
 8000666:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <MX_ADC1_Init+0xa0>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <MX_ADC1_Init+0x98>)
 800066c:	2200      	movs	r2, #0
 800066e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_ADC1_Init+0x98>)
 8000672:	2201      	movs	r2, #1
 8000674:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_ADC1_Init+0x98>)
 8000678:	2200      	movs	r2, #0
 800067a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_ADC1_Init+0x98>)
 8000680:	2201      	movs	r2, #1
 8000682:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000684:	480d      	ldr	r0, [pc, #52]	; (80006bc <MX_ADC1_Init+0x98>)
 8000686:	f000 fd67 	bl	8001158 <HAL_ADC_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000690:	f000 fa70 	bl	8000b74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000694:	2304      	movs	r3, #4
 8000696:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000698:	2301      	movs	r3, #1
 800069a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a0:	463b      	mov	r3, r7
 80006a2:	4619      	mov	r1, r3
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_ADC1_Init+0x98>)
 80006a6:	f000 fd9b 	bl	80011e0 <HAL_ADC_ConfigChannel>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006b0:	f000 fa60 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000184 	.word	0x20000184
 80006c0:	40012000 	.word	0x40012000
 80006c4:	0f000001 	.word	0x0f000001

080006c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	; 0x28
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a17      	ldr	r2, [pc, #92]	; (8000744 <HAL_ADC_MspInit+0x7c>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d127      	bne.n	800073a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	4b16      	ldr	r3, [pc, #88]	; (8000748 <HAL_ADC_MspInit+0x80>)
 80006f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006f2:	4a15      	ldr	r2, [pc, #84]	; (8000748 <HAL_ADC_MspInit+0x80>)
 80006f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006f8:	6453      	str	r3, [r2, #68]	; 0x44
 80006fa:	4b13      	ldr	r3, [pc, #76]	; (8000748 <HAL_ADC_MspInit+0x80>)
 80006fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <HAL_ADC_MspInit+0x80>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a0e      	ldr	r2, [pc, #56]	; (8000748 <HAL_ADC_MspInit+0x80>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <HAL_ADC_MspInit+0x80>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000722:	2310      	movs	r3, #16
 8000724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000726:	2303      	movs	r3, #3
 8000728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	4619      	mov	r1, r3
 8000734:	4805      	ldr	r0, [pc, #20]	; (800074c <HAL_ADC_MspInit+0x84>)
 8000736:	f001 f853 	bl	80017e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800073a:	bf00      	nop
 800073c:	3728      	adds	r7, #40	; 0x28
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40012000 	.word	0x40012000
 8000748:	40023800 	.word	0x40023800
 800074c:	40020000 	.word	0x40020000

08000750 <DWT_Init>:
 */

#include "dwt_delay.h"

void DWT_Init(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <DWT_Init+0x2c>)
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	4a08      	ldr	r2, [pc, #32]	; (800077c <DWT_Init+0x2c>)
 800075a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800075e:	60d3      	str	r3, [r2, #12]
        #if (__CORTEX_M == 7)
                DWT->LAR = 0xC5ACCE55; /* Use in Core-M7 */
        #endif
        DWT->CYCCNT = 0;
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <DWT_Init+0x30>)
 8000762:	2200      	movs	r2, #0
 8000764:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;     
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <DWT_Init+0x30>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a05      	ldr	r2, [pc, #20]	; (8000780 <DWT_Init+0x30>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6013      	str	r3, [r2, #0]
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000edf0 	.word	0xe000edf0
 8000780:	e0001000 	.word	0xe0001000

08000784 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	; 0x28
 8000788:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	4b27      	ldr	r3, [pc, #156]	; (800083c <MX_GPIO_Init+0xb8>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a26      	ldr	r2, [pc, #152]	; (800083c <MX_GPIO_Init+0xb8>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b24      	ldr	r3, [pc, #144]	; (800083c <MX_GPIO_Init+0xb8>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	4b20      	ldr	r3, [pc, #128]	; (800083c <MX_GPIO_Init+0xb8>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a1f      	ldr	r2, [pc, #124]	; (800083c <MX_GPIO_Init+0xb8>)
 80007c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b1d      	ldr	r3, [pc, #116]	; (800083c <MX_GPIO_Init+0xb8>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	4b19      	ldr	r3, [pc, #100]	; (800083c <MX_GPIO_Init+0xb8>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a18      	ldr	r2, [pc, #96]	; (800083c <MX_GPIO_Init+0xb8>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b16      	ldr	r3, [pc, #88]	; (800083c <MX_GPIO_Init+0xb8>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <MX_GPIO_Init+0xb8>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a11      	ldr	r2, [pc, #68]	; (800083c <MX_GPIO_Init+0xb8>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_GPIO_Init+0xb8>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000810:	480b      	ldr	r0, [pc, #44]	; (8000840 <MX_GPIO_Init+0xbc>)
 8000812:	f001 f969 	bl	8001ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8000816:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	2301      	movs	r3, #1
 800081e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4619      	mov	r1, r3
 800082e:	4804      	ldr	r0, [pc, #16]	; (8000840 <MX_GPIO_Init+0xbc>)
 8000830:	f000 ffd6 	bl	80017e0 <HAL_GPIO_Init>

}
 8000834:	bf00      	nop
 8000836:	3728      	adds	r7, #40	; 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40023800 	.word	0x40023800
 8000840:	40020800 	.word	0x40020800

08000844 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_I2C1_Init+0x50>)
 800084a:	4a13      	ldr	r2, [pc, #76]	; (8000898 <MX_I2C1_Init+0x54>)
 800084c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_I2C1_Init+0x50>)
 8000850:	4a12      	ldr	r2, [pc, #72]	; (800089c <MX_I2C1_Init+0x58>)
 8000852:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_I2C1_Init+0x50>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_I2C1_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_I2C1_Init+0x50>)
 8000862:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000866:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <MX_I2C1_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_I2C1_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <MX_I2C1_Init+0x50>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_I2C1_Init+0x50>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000880:	4804      	ldr	r0, [pc, #16]	; (8000894 <MX_I2C1_Init+0x50>)
 8000882:	f001 f94b 	bl	8001b1c <HAL_I2C_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800088c:	f000 f972 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	200001cc 	.word	0x200001cc
 8000898:	40005400 	.word	0x40005400
 800089c:	000186a0 	.word	0x000186a0

080008a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a19      	ldr	r2, [pc, #100]	; (8000924 <HAL_I2C_MspInit+0x84>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d12b      	bne.n	800091a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <HAL_I2C_MspInit+0x88>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a17      	ldr	r2, [pc, #92]	; (8000928 <HAL_I2C_MspInit+0x88>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <HAL_I2C_MspInit+0x88>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008de:	23c0      	movs	r3, #192	; 0xc0
 80008e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008e2:	2312      	movs	r3, #18
 80008e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ea:	2303      	movs	r3, #3
 80008ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008ee:	2304      	movs	r3, #4
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	480c      	ldr	r0, [pc, #48]	; (800092c <HAL_I2C_MspInit+0x8c>)
 80008fa:	f000 ff71 	bl	80017e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <HAL_I2C_MspInit+0x88>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	4a08      	ldr	r2, [pc, #32]	; (8000928 <HAL_I2C_MspInit+0x88>)
 8000908:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800090c:	6413      	str	r3, [r2, #64]	; 0x40
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_I2C_MspInit+0x88>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800091a:	bf00      	nop
 800091c:	3728      	adds	r7, #40	; 0x28
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40005400 	.word	0x40005400
 8000928:	40023800 	.word	0x40023800
 800092c:	40020400 	.word	0x40020400

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000936:	f000 fba9 	bl	800108c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093a:	f000 f861 	bl	8000a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093e:	f7ff ff21 	bl	8000784 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000942:	f7ff fe6f 	bl	8000624 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000946:	f7ff ff7d 	bl	8000844 <MX_I2C1_Init>
  MX_SPI1_Init();
 800094a:	f000 f919 	bl	8000b80 <MX_SPI1_Init>
  MX_TIM2_Init();
 800094e:	f000 faa1 	bl	8000e94 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000952:	f00c f841 	bl	800c9d8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  vSetVarulMaxPRIGROUPValue();
 8000956:	f007 fd59 	bl	800840c <vSetVarulMaxPRIGROUPValue>
  DWT_Init();
 800095a:	f7ff fef9 	bl	8000750 <DWT_Init>
  SEGGER_SYSVIEW_Conf();
 800095e:	f009 ff29 	bl	800a7b4 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000962:	f00b fa59 	bl	800be18 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler, "task1", 200, "Hello world from task1\n\r", 2, &task1_handle);
 8000966:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <main+0xac>)
 8000968:	9301      	str	r3, [sp, #4]
 800096a:	2302      	movs	r3, #2
 800096c:	9300      	str	r3, [sp, #0]
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <main+0xb0>)
 8000970:	22c8      	movs	r2, #200	; 0xc8
 8000972:	491c      	ldr	r1, [pc, #112]	; (80009e4 <main+0xb4>)
 8000974:	481c      	ldr	r0, [pc, #112]	; (80009e8 <main+0xb8>)
 8000976:	f006 f95f 	bl	8006c38 <xTaskCreate>
 800097a:	4603      	mov	r3, r0
 800097c:	4a1b      	ldr	r2, [pc, #108]	; (80009ec <main+0xbc>)
 800097e:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000980:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <main+0xbc>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d00a      	beq.n	800099e <main+0x6e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800098c:	f383 8811 	msr	BASEPRI, r3
 8000990:	f3bf 8f6f 	isb	sy
 8000994:	f3bf 8f4f 	dsb	sy
 8000998:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800099a:	bf00      	nop
 800099c:	e7fe      	b.n	800099c <main+0x6c>

  status = xTaskCreate(task2_handler, "task2", 200, "Hello world from task2\n\r", 2, &task2_handle);
 800099e:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <main+0xc0>)
 80009a0:	9301      	str	r3, [sp, #4]
 80009a2:	2302      	movs	r3, #2
 80009a4:	9300      	str	r3, [sp, #0]
 80009a6:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <main+0xc4>)
 80009a8:	22c8      	movs	r2, #200	; 0xc8
 80009aa:	4913      	ldr	r1, [pc, #76]	; (80009f8 <main+0xc8>)
 80009ac:	4813      	ldr	r0, [pc, #76]	; (80009fc <main+0xcc>)
 80009ae:	f006 f943 	bl	8006c38 <xTaskCreate>
 80009b2:	4603      	mov	r3, r0
 80009b4:	4a0d      	ldr	r2, [pc, #52]	; (80009ec <main+0xbc>)
 80009b6:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <main+0xbc>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d00a      	beq.n	80009d6 <main+0xa6>
        __asm volatile
 80009c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009c4:	f383 8811 	msr	BASEPRI, r3
 80009c8:	f3bf 8f6f 	isb	sy
 80009cc:	f3bf 8f4f 	dsb	sy
 80009d0:	603b      	str	r3, [r7, #0]
    }
 80009d2:	bf00      	nop
 80009d4:	e7fe      	b.n	80009d4 <main+0xa4>

  vTaskStartScheduler();
 80009d6:	f006 fa85 	bl	8006ee4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009da:	e7fe      	b.n	80009da <main+0xaa>
 80009dc:	20000220 	.word	0x20000220
 80009e0:	0800dd4c 	.word	0x0800dd4c
 80009e4:	0800dd68 	.word	0x0800dd68
 80009e8:	08000ad9 	.word	0x08000ad9
 80009ec:	20000228 	.word	0x20000228
 80009f0:	20000224 	.word	0x20000224
 80009f4:	0800dd70 	.word	0x0800dd70
 80009f8:	0800dd8c 	.word	0x0800dd8c
 80009fc:	08000b15 	.word	0x08000b15

08000a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b094      	sub	sp, #80	; 0x50
 8000a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a06:	f107 0320 	add.w	r3, r7, #32
 8000a0a:	2230      	movs	r2, #48	; 0x30
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f00c fd14 	bl	800d43c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a24:	2300      	movs	r3, #0
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	4b29      	ldr	r3, [pc, #164]	; (8000ad0 <SystemClock_Config+0xd0>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	4a28      	ldr	r2, [pc, #160]	; (8000ad0 <SystemClock_Config+0xd0>)
 8000a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a32:	6413      	str	r3, [r2, #64]	; 0x40
 8000a34:	4b26      	ldr	r3, [pc, #152]	; (8000ad0 <SystemClock_Config+0xd0>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a40:	2300      	movs	r3, #0
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	4b23      	ldr	r3, [pc, #140]	; (8000ad4 <SystemClock_Config+0xd4>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a4c:	4a21      	ldr	r2, [pc, #132]	; (8000ad4 <SystemClock_Config+0xd4>)
 8000a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a52:	6013      	str	r3, [r2, #0]
 8000a54:	4b1f      	ldr	r3, [pc, #124]	; (8000ad4 <SystemClock_Config+0xd4>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a60:	2301      	movs	r3, #1
 8000a62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000a74:	2319      	movs	r3, #25
 8000a76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a78:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a7c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a7e:	2304      	movs	r3, #4
 8000a80:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a82:	2307      	movs	r3, #7
 8000a84:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a86:	f107 0320 	add.w	r3, r7, #32
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f002 fc08 	bl	80032a0 <HAL_RCC_OscConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a96:	f000 f86d 	bl	8000b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aaa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	2102      	movs	r1, #2
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f002 fe6a 	bl	8003790 <HAL_RCC_ClockConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ac2:	f000 f857 	bl	8000b74 <Error_Handler>
  }
}
 8000ac6:	bf00      	nop
 8000ac8:	3750      	adds	r7, #80	; 0x50
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40007000 	.word	0x40007000

08000ad8 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void *parameters)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b09c      	sub	sp, #112	; 0x70
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  char msg[100];
  while (1) {
    // CDC_Transmit_FS((uint8_t *)parameters, strlen((char *)parameters));
//    printf("%s", (char *)parameters);
	snprintf(msg, 100, "%s", (char *)parameters);
 8000ae0:	f107 000c 	add.w	r0, r7, #12
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a09      	ldr	r2, [pc, #36]	; (8000b0c <task1_handler+0x34>)
 8000ae8:	2164      	movs	r1, #100	; 0x64
 8000aea:	f00c fcaf 	bl	800d44c <sniprintf>
	SEGGER_SYSVIEW_PrintfTarget(msg);
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	4618      	mov	r0, r3
 8000af4:	f00b ff00 	bl	800c8f8 <SEGGER_SYSVIEW_PrintfTarget>
    taskYIELD();
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <task1_handler+0x38>)
 8000afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	f3bf 8f4f 	dsb	sy
 8000b04:	f3bf 8f6f 	isb	sy
	snprintf(msg, 100, "%s", (char *)parameters);
 8000b08:	e7ea      	b.n	8000ae0 <task1_handler+0x8>
 8000b0a:	bf00      	nop
 8000b0c:	0800dd94 	.word	0x0800dd94
 8000b10:	e000ed04 	.word	0xe000ed04

08000b14 <task2_handler>:
  }
}

static void task2_handler(void *parameters)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b09c      	sub	sp, #112	; 0x70
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  char msg[100];
  while (1) {
    // CDC_Transmit_FS((uint8_t *)parameters, strlen((char *)parameters));
//    printf("%s", (char *)parameters);
    snprintf(msg, 100, "%s", (char *)parameters);
 8000b1c:	f107 000c 	add.w	r0, r7, #12
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a09      	ldr	r2, [pc, #36]	; (8000b48 <task2_handler+0x34>)
 8000b24:	2164      	movs	r1, #100	; 0x64
 8000b26:	f00c fc91 	bl	800d44c <sniprintf>
    SEGGER_SYSVIEW_PrintfTarget(msg);
 8000b2a:	f107 030c 	add.w	r3, r7, #12
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f00b fee2 	bl	800c8f8 <SEGGER_SYSVIEW_PrintfTarget>
    taskYIELD();
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <task2_handler+0x38>)
 8000b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	f3bf 8f4f 	dsb	sy
 8000b40:	f3bf 8f6f 	isb	sy
    snprintf(msg, 100, "%s", (char *)parameters);
 8000b44:	e7ea      	b.n	8000b1c <task2_handler+0x8>
 8000b46:	bf00      	nop
 8000b48:	0800dd94 	.word	0x0800dd94
 8000b4c:	e000ed04 	.word	0xe000ed04

08000b50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d101      	bne.n	8000b66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b62:	f000 fab5 	bl	80010d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40010000 	.word	0x40010000

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <Error_Handler+0x8>
	...

08000b80 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b84:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <MX_SPI1_Init+0x64>)
 8000b86:	4a18      	ldr	r2, [pc, #96]	; (8000be8 <MX_SPI1_Init+0x68>)
 8000b88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b8a:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <MX_SPI1_Init+0x64>)
 8000b8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b92:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <MX_SPI1_Init+0x64>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <MX_SPI1_Init+0x64>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_SPI1_Init+0x64>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <MX_SPI1_Init+0x64>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_SPI1_Init+0x64>)
 8000bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <MX_SPI1_Init+0x64>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bb8:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <MX_SPI1_Init+0x64>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <MX_SPI1_Init+0x64>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <MX_SPI1_Init+0x64>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <MX_SPI1_Init+0x64>)
 8000bcc:	220a      	movs	r2, #10
 8000bce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bd0:	4804      	ldr	r0, [pc, #16]	; (8000be4 <MX_SPI1_Init+0x64>)
 8000bd2:	f002 ffef 	bl	8003bb4 <HAL_SPI_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bdc:	f7ff ffca 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	2000022c 	.word	0x2000022c
 8000be8:	40013000 	.word	0x40013000

08000bec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	; 0x28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a19      	ldr	r2, [pc, #100]	; (8000c70 <HAL_SPI_MspInit+0x84>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d12b      	bne.n	8000c66 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <HAL_SPI_MspInit+0x88>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <HAL_SPI_MspInit+0x88>)
 8000c18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <HAL_SPI_MspInit+0x88>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_SPI_MspInit+0x88>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a10      	ldr	r2, [pc, #64]	; (8000c74 <HAL_SPI_MspInit+0x88>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_SPI_MspInit+0x88>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c46:	23e0      	movs	r3, #224	; 0xe0
 8000c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c52:	2303      	movs	r3, #3
 8000c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c56:	2305      	movs	r3, #5
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	; (8000c78 <HAL_SPI_MspInit+0x8c>)
 8000c62:	f000 fdbd 	bl	80017e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c66:	bf00      	nop
 8000c68:	3728      	adds	r7, #40	; 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40013000 	.word	0x40013000
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020000 	.word	0x40020000

08000c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	4a0f      	ldr	r2, [pc, #60]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c90:	6453      	str	r3, [r2, #68]	; 0x44
 8000c92:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	603b      	str	r3, [r7, #0]
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	4a08      	ldr	r2, [pc, #32]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cac:	6413      	str	r3, [r2, #64]	; 0x40
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40023800 	.word	0x40023800

08000ccc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08c      	sub	sp, #48	; 0x30
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	4b2e      	ldr	r3, [pc, #184]	; (8000d9c <HAL_InitTick+0xd0>)
 8000ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce4:	4a2d      	ldr	r2, [pc, #180]	; (8000d9c <HAL_InitTick+0xd0>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	6453      	str	r3, [r2, #68]	; 0x44
 8000cec:	4b2b      	ldr	r3, [pc, #172]	; (8000d9c <HAL_InitTick+0xd0>)
 8000cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cf8:	f107 020c 	add.w	r2, r7, #12
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	4611      	mov	r1, r2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f002 ff24 	bl	8003b50 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d08:	f002 ff0e 	bl	8003b28 <HAL_RCC_GetPCLK2Freq>
 8000d0c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d10:	4a23      	ldr	r2, [pc, #140]	; (8000da0 <HAL_InitTick+0xd4>)
 8000d12:	fba2 2303 	umull	r2, r3, r2, r3
 8000d16:	0c9b      	lsrs	r3, r3, #18
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d1c:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <HAL_InitTick+0xd8>)
 8000d1e:	4a22      	ldr	r2, [pc, #136]	; (8000da8 <HAL_InitTick+0xdc>)
 8000d20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d22:	4b20      	ldr	r3, [pc, #128]	; (8000da4 <HAL_InitTick+0xd8>)
 8000d24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d28:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d2a:	4a1e      	ldr	r2, [pc, #120]	; (8000da4 <HAL_InitTick+0xd8>)
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d30:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <HAL_InitTick+0xd8>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d36:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <HAL_InitTick+0xd8>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3c:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <HAL_InitTick+0xd8>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000d42:	4818      	ldr	r0, [pc, #96]	; (8000da4 <HAL_InitTick+0xd8>)
 8000d44:	f002 ffbf 	bl	8003cc6 <HAL_TIM_Base_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000d4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d11b      	bne.n	8000d8e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000d56:	4813      	ldr	r0, [pc, #76]	; (8000da4 <HAL_InitTick+0xd8>)
 8000d58:	f003 f80e 	bl	8003d78 <HAL_TIM_Base_Start_IT>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000d62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d111      	bne.n	8000d8e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d6a:	2019      	movs	r0, #25
 8000d6c:	f000 fd2a 	bl	80017c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b0f      	cmp	r3, #15
 8000d74:	d808      	bhi.n	8000d88 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000d76:	2200      	movs	r2, #0
 8000d78:	6879      	ldr	r1, [r7, #4]
 8000d7a:	2019      	movs	r0, #25
 8000d7c:	f000 fd06 	bl	800178c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d80:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <HAL_InitTick+0xe0>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
 8000d86:	e002      	b.n	8000d8e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3730      	adds	r7, #48	; 0x30
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	431bde83 	.word	0x431bde83
 8000da4:	20000284 	.word	0x20000284
 8000da8:	40010000 	.word	0x40010000
 8000dac:	20000004 	.word	0x20000004

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <NMI_Handler+0x4>

08000db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <BusFault_Handler+0x4>

08000dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <UsageFault_Handler+0x4>

08000dce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000de2:	f003 f87a 	bl	8003eda <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000284 	.word	0x20000284

08000df0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <OTG_FS_IRQHandler+0x10>)
 8000df6:	f001 f925 	bl	8002044 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2000a7ec 	.word	0x2000a7ec

08000e04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e0c:	4a14      	ldr	r2, [pc, #80]	; (8000e60 <_sbrk+0x5c>)
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <_sbrk+0x60>)
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e18:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <_sbrk+0x64>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d102      	bne.n	8000e26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <_sbrk+0x64>)
 8000e22:	4a12      	ldr	r2, [pc, #72]	; (8000e6c <_sbrk+0x68>)
 8000e24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d207      	bcs.n	8000e44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e34:	f00c faba 	bl	800d3ac <__errno>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	220c      	movs	r2, #12
 8000e3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e42:	e009      	b.n	8000e58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <_sbrk+0x64>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e4a:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <_sbrk+0x64>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	4a05      	ldr	r2, [pc, #20]	; (8000e68 <_sbrk+0x64>)
 8000e54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e56:	68fb      	ldr	r3, [r7, #12]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3718      	adds	r7, #24
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20010000 	.word	0x20010000
 8000e64:	00000400 	.word	0x00000400
 8000e68:	200002cc 	.word	0x200002cc
 8000e6c:	2000af28 	.word	0x2000af28

08000e70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <SystemInit+0x20>)
 8000e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e7a:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <SystemInit+0x20>)
 8000e7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	; 0x28
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e9a:	f107 0320 	add.w	r3, r7, #32
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
 8000eb0:	611a      	str	r2, [r3, #16]
 8000eb2:	615a      	str	r2, [r3, #20]
 8000eb4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eb6:	4b33      	ldr	r3, [pc, #204]	; (8000f84 <MX_TIM2_Init+0xf0>)
 8000eb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ebc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ebe:	4b31      	ldr	r3, [pc, #196]	; (8000f84 <MX_TIM2_Init+0xf0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec4:	4b2f      	ldr	r3, [pc, #188]	; (8000f84 <MX_TIM2_Init+0xf0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000eca:	4b2e      	ldr	r3, [pc, #184]	; (8000f84 <MX_TIM2_Init+0xf0>)
 8000ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed2:	4b2c      	ldr	r3, [pc, #176]	; (8000f84 <MX_TIM2_Init+0xf0>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed8:	4b2a      	ldr	r3, [pc, #168]	; (8000f84 <MX_TIM2_Init+0xf0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ede:	4829      	ldr	r0, [pc, #164]	; (8000f84 <MX_TIM2_Init+0xf0>)
 8000ee0:	f002 ffac 	bl	8003e3c <HAL_TIM_PWM_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000eea:	f7ff fe43 	bl	8000b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ef6:	f107 0320 	add.w	r3, r7, #32
 8000efa:	4619      	mov	r1, r3
 8000efc:	4821      	ldr	r0, [pc, #132]	; (8000f84 <MX_TIM2_Init+0xf0>)
 8000efe:	f003 fbeb 	bl	80046d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000f08:	f7ff fe34 	bl	8000b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f0c:	2360      	movs	r3, #96	; 0x60
 8000f0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	2200      	movs	r2, #0
 8000f20:	4619      	mov	r1, r3
 8000f22:	4818      	ldr	r0, [pc, #96]	; (8000f84 <MX_TIM2_Init+0xf0>)
 8000f24:	f003 f8e2 	bl	80040ec <HAL_TIM_PWM_ConfigChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000f2e:	f7ff fe21 	bl	8000b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	2204      	movs	r2, #4
 8000f36:	4619      	mov	r1, r3
 8000f38:	4812      	ldr	r0, [pc, #72]	; (8000f84 <MX_TIM2_Init+0xf0>)
 8000f3a:	f003 f8d7 	bl	80040ec <HAL_TIM_PWM_ConfigChannel>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000f44:	f7ff fe16 	bl	8000b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	2208      	movs	r2, #8
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	480d      	ldr	r0, [pc, #52]	; (8000f84 <MX_TIM2_Init+0xf0>)
 8000f50:	f003 f8cc 	bl	80040ec <HAL_TIM_PWM_ConfigChannel>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8000f5a:	f7ff fe0b 	bl	8000b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	220c      	movs	r2, #12
 8000f62:	4619      	mov	r1, r3
 8000f64:	4807      	ldr	r0, [pc, #28]	; (8000f84 <MX_TIM2_Init+0xf0>)
 8000f66:	f003 f8c1 	bl	80040ec <HAL_TIM_PWM_ConfigChannel>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8000f70:	f7ff fe00 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f74:	4803      	ldr	r0, [pc, #12]	; (8000f84 <MX_TIM2_Init+0xf0>)
 8000f76:	f000 f827 	bl	8000fc8 <HAL_TIM_MspPostInit>

}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	; 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200002d0 	.word	0x200002d0

08000f88 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f98:	d10d      	bne.n	8000fb6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	4a08      	ldr	r2, [pc, #32]	; (8000fc4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	40023800 	.word	0x40023800

08000fc8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fe8:	d11e      	bne.n	8001028 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	4b10      	ldr	r3, [pc, #64]	; (8001030 <HAL_TIM_MspPostInit+0x68>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a0f      	ldr	r2, [pc, #60]	; (8001030 <HAL_TIM_MspPostInit+0x68>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <HAL_TIM_MspPostInit+0x68>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8001006:	f248 030e 	movw	r3, #32782	; 0x800e
 800100a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001018:	2301      	movs	r3, #1
 800101a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	4619      	mov	r1, r3
 8001022:	4804      	ldr	r0, [pc, #16]	; (8001034 <HAL_TIM_MspPostInit+0x6c>)
 8001024:	f000 fbdc 	bl	80017e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001028:	bf00      	nop
 800102a:	3720      	adds	r7, #32
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40023800 	.word	0x40023800
 8001034:	40020000 	.word	0x40020000

08001038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001038:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001070 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800103c:	480d      	ldr	r0, [pc, #52]	; (8001074 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800103e:	490e      	ldr	r1, [pc, #56]	; (8001078 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001040:	4a0e      	ldr	r2, [pc, #56]	; (800107c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001044:	e002      	b.n	800104c <LoopCopyDataInit>

08001046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104a:	3304      	adds	r3, #4

0800104c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800104c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001050:	d3f9      	bcc.n	8001046 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001052:	4a0b      	ldr	r2, [pc, #44]	; (8001080 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001054:	4c0b      	ldr	r4, [pc, #44]	; (8001084 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001058:	e001      	b.n	800105e <LoopFillZerobss>

0800105a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800105c:	3204      	adds	r2, #4

0800105e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001060:	d3fb      	bcc.n	800105a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001062:	f7ff ff05 	bl	8000e70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001066:	f00c f9a7 	bl	800d3b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800106a:	f7ff fc61 	bl	8000930 <main>
  bx  lr    
 800106e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001070:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001078:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 800107c:	0800df4c 	.word	0x0800df4c
  ldr r2, =_sbss
 8001080:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8001084:	2000af28 	.word	0x2000af28

08001088 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001088:	e7fe      	b.n	8001088 <ADC_IRQHandler>
	...

0800108c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <HAL_Init+0x40>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a0d      	ldr	r2, [pc, #52]	; (80010cc <HAL_Init+0x40>)
 8001096:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800109a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <HAL_Init+0x40>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <HAL_Init+0x40>)
 80010a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <HAL_Init+0x40>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a07      	ldr	r2, [pc, #28]	; (80010cc <HAL_Init+0x40>)
 80010ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b4:	2003      	movs	r0, #3
 80010b6:	f000 fb5e 	bl	8001776 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ba:	200f      	movs	r0, #15
 80010bc:	f7ff fe06 	bl	8000ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c0:	f7ff fddc 	bl	8000c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023c00 	.word	0x40023c00

080010d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_IncTick+0x20>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_IncTick+0x24>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <HAL_IncTick+0x24>)
 80010e2:	6013      	str	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20000318 	.word	0x20000318

080010f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return uwTick;
 80010fc:	4b03      	ldr	r3, [pc, #12]	; (800110c <HAL_GetTick+0x14>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	20000318 	.word	0x20000318

08001110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001118:	f7ff ffee 	bl	80010f8 <HAL_GetTick>
 800111c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001128:	d005      	beq.n	8001136 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <HAL_Delay+0x44>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	461a      	mov	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4413      	add	r3, r2
 8001134:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001136:	bf00      	nop
 8001138:	f7ff ffde 	bl	80010f8 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	429a      	cmp	r2, r3
 8001146:	d8f7      	bhi.n	8001138 <HAL_Delay+0x28>
  {
  }
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000008 	.word	0x20000008

08001158 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001160:	2300      	movs	r3, #0
 8001162:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e033      	b.n	80011d6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	2b00      	cmp	r3, #0
 8001174:	d109      	bne.n	800118a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff faa6 	bl	80006c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f003 0310 	and.w	r3, r3, #16
 8001192:	2b00      	cmp	r3, #0
 8001194:	d118      	bne.n	80011c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800119e:	f023 0302 	bic.w	r3, r3, #2
 80011a2:	f043 0202 	orr.w	r2, r3, #2
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f000 f93a 	bl	8001424 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f023 0303 	bic.w	r3, r3, #3
 80011be:	f043 0201 	orr.w	r2, r3, #1
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	641a      	str	r2, [r3, #64]	; 0x40
 80011c6:	e001      	b.n	80011cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d101      	bne.n	80011fc <HAL_ADC_ConfigChannel+0x1c>
 80011f8:	2302      	movs	r3, #2
 80011fa:	e105      	b.n	8001408 <HAL_ADC_ConfigChannel+0x228>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2201      	movs	r2, #1
 8001200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b09      	cmp	r3, #9
 800120a:	d925      	bls.n	8001258 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	68d9      	ldr	r1, [r3, #12]
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	b29b      	uxth	r3, r3
 8001218:	461a      	mov	r2, r3
 800121a:	4613      	mov	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4413      	add	r3, r2
 8001220:	3b1e      	subs	r3, #30
 8001222:	2207      	movs	r2, #7
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43da      	mvns	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	400a      	ands	r2, r1
 8001230:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	68d9      	ldr	r1, [r3, #12]
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	b29b      	uxth	r3, r3
 8001242:	4618      	mov	r0, r3
 8001244:	4603      	mov	r3, r0
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	4403      	add	r3, r0
 800124a:	3b1e      	subs	r3, #30
 800124c:	409a      	lsls	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	430a      	orrs	r2, r1
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	e022      	b.n	800129e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6919      	ldr	r1, [r3, #16]
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	b29b      	uxth	r3, r3
 8001264:	461a      	mov	r2, r3
 8001266:	4613      	mov	r3, r2
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	4413      	add	r3, r2
 800126c:	2207      	movs	r2, #7
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43da      	mvns	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	400a      	ands	r2, r1
 800127a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6919      	ldr	r1, [r3, #16]
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	b29b      	uxth	r3, r3
 800128c:	4618      	mov	r0, r3
 800128e:	4603      	mov	r3, r0
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	4403      	add	r3, r0
 8001294:	409a      	lsls	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	430a      	orrs	r2, r1
 800129c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b06      	cmp	r3, #6
 80012a4:	d824      	bhi.n	80012f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	4613      	mov	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4413      	add	r3, r2
 80012b6:	3b05      	subs	r3, #5
 80012b8:	221f      	movs	r2, #31
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43da      	mvns	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	400a      	ands	r2, r1
 80012c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	4618      	mov	r0, r3
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	4613      	mov	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	3b05      	subs	r3, #5
 80012e2:	fa00 f203 	lsl.w	r2, r0, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	430a      	orrs	r2, r1
 80012ec:	635a      	str	r2, [r3, #52]	; 0x34
 80012ee:	e04c      	b.n	800138a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b0c      	cmp	r3, #12
 80012f6:	d824      	bhi.n	8001342 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	3b23      	subs	r3, #35	; 0x23
 800130a:	221f      	movs	r2, #31
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43da      	mvns	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	400a      	ands	r2, r1
 8001318:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	b29b      	uxth	r3, r3
 8001326:	4618      	mov	r0, r3
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	4613      	mov	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	3b23      	subs	r3, #35	; 0x23
 8001334:	fa00 f203 	lsl.w	r2, r0, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	430a      	orrs	r2, r1
 800133e:	631a      	str	r2, [r3, #48]	; 0x30
 8001340:	e023      	b.n	800138a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	3b41      	subs	r3, #65	; 0x41
 8001354:	221f      	movs	r2, #31
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43da      	mvns	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	400a      	ands	r2, r1
 8001362:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	b29b      	uxth	r3, r3
 8001370:	4618      	mov	r0, r3
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	3b41      	subs	r3, #65	; 0x41
 800137e:	fa00 f203 	lsl.w	r2, r0, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	430a      	orrs	r2, r1
 8001388:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800138a:	4b22      	ldr	r3, [pc, #136]	; (8001414 <HAL_ADC_ConfigChannel+0x234>)
 800138c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a21      	ldr	r2, [pc, #132]	; (8001418 <HAL_ADC_ConfigChannel+0x238>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d109      	bne.n	80013ac <HAL_ADC_ConfigChannel+0x1cc>
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b12      	cmp	r3, #18
 800139e:	d105      	bne.n	80013ac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a19      	ldr	r2, [pc, #100]	; (8001418 <HAL_ADC_ConfigChannel+0x238>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d123      	bne.n	80013fe <HAL_ADC_ConfigChannel+0x21e>
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b10      	cmp	r3, #16
 80013bc:	d003      	beq.n	80013c6 <HAL_ADC_ConfigChannel+0x1e6>
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b11      	cmp	r3, #17
 80013c4:	d11b      	bne.n	80013fe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b10      	cmp	r3, #16
 80013d8:	d111      	bne.n	80013fe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <HAL_ADC_ConfigChannel+0x23c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a10      	ldr	r2, [pc, #64]	; (8001420 <HAL_ADC_ConfigChannel+0x240>)
 80013e0:	fba2 2303 	umull	r2, r3, r2, r3
 80013e4:	0c9a      	lsrs	r2, r3, #18
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013f0:	e002      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	3b01      	subs	r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f9      	bne.n	80013f2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	40012300 	.word	0x40012300
 8001418:	40012000 	.word	0x40012000
 800141c:	20000000 	.word	0x20000000
 8001420:	431bde83 	.word	0x431bde83

08001424 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800142c:	4b79      	ldr	r3, [pc, #484]	; (8001614 <ADC_Init+0x1f0>)
 800142e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	431a      	orrs	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001458:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6859      	ldr	r1, [r3, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	021a      	lsls	r2, r3, #8
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800147c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6859      	ldr	r1, [r3, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	430a      	orrs	r2, r1
 800148e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800149e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6899      	ldr	r1, [r3, #8]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68da      	ldr	r2, [r3, #12]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b6:	4a58      	ldr	r2, [pc, #352]	; (8001618 <ADC_Init+0x1f4>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d022      	beq.n	8001502 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6899      	ldr	r1, [r3, #8]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6899      	ldr	r1, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	e00f      	b.n	8001522 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001510:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001520:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0202 	bic.w	r2, r2, #2
 8001530:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6899      	ldr	r1, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	7e1b      	ldrb	r3, [r3, #24]
 800153c:	005a      	lsls	r2, r3, #1
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	430a      	orrs	r2, r1
 8001544:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 3020 	ldrb.w	r3, [r3, #32]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d01b      	beq.n	8001588 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800155e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800156e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6859      	ldr	r1, [r3, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157a:	3b01      	subs	r3, #1
 800157c:	035a      	lsls	r2, r3, #13
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	e007      	b.n	8001598 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001596:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80015a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	051a      	lsls	r2, r3, #20
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6899      	ldr	r1, [r3, #8]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015da:	025a      	lsls	r2, r3, #9
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6899      	ldr	r1, [r3, #8]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	029a      	lsls	r2, r3, #10
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	609a      	str	r2, [r3, #8]
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	40012300 	.word	0x40012300
 8001618:	0f000001 	.word	0x0f000001

0800161c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <__NVIC_SetPriorityGrouping+0x44>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001638:	4013      	ands	r3, r2
 800163a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800164c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800164e:	4a04      	ldr	r2, [pc, #16]	; (8001660 <__NVIC_SetPriorityGrouping+0x44>)
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	60d3      	str	r3, [r2, #12]
}
 8001654:	bf00      	nop
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <__NVIC_GetPriorityGrouping+0x18>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	0a1b      	lsrs	r3, r3, #8
 800166e:	f003 0307 	and.w	r3, r3, #7
}
 8001672:	4618      	mov	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	2b00      	cmp	r3, #0
 8001690:	db0b      	blt.n	80016aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	f003 021f 	and.w	r2, r3, #31
 8001698:	4907      	ldr	r1, [pc, #28]	; (80016b8 <__NVIC_EnableIRQ+0x38>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	095b      	lsrs	r3, r3, #5
 80016a0:	2001      	movs	r0, #1
 80016a2:	fa00 f202 	lsl.w	r2, r0, r2
 80016a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000e100 	.word	0xe000e100

080016bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	6039      	str	r1, [r7, #0]
 80016c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	db0a      	blt.n	80016e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	490c      	ldr	r1, [pc, #48]	; (8001708 <__NVIC_SetPriority+0x4c>)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	0112      	lsls	r2, r2, #4
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	440b      	add	r3, r1
 80016e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e4:	e00a      	b.n	80016fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4908      	ldr	r1, [pc, #32]	; (800170c <__NVIC_SetPriority+0x50>)
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	3b04      	subs	r3, #4
 80016f4:	0112      	lsls	r2, r2, #4
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	440b      	add	r3, r1
 80016fa:	761a      	strb	r2, [r3, #24]
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000e100 	.word	0xe000e100
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001710:	b480      	push	{r7}
 8001712:	b089      	sub	sp, #36	; 0x24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f1c3 0307 	rsb	r3, r3, #7
 800172a:	2b04      	cmp	r3, #4
 800172c:	bf28      	it	cs
 800172e:	2304      	movcs	r3, #4
 8001730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3304      	adds	r3, #4
 8001736:	2b06      	cmp	r3, #6
 8001738:	d902      	bls.n	8001740 <NVIC_EncodePriority+0x30>
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3b03      	subs	r3, #3
 800173e:	e000      	b.n	8001742 <NVIC_EncodePriority+0x32>
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001744:	f04f 32ff 	mov.w	r2, #4294967295
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43da      	mvns	r2, r3
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	401a      	ands	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001758:	f04f 31ff 	mov.w	r1, #4294967295
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	fa01 f303 	lsl.w	r3, r1, r3
 8001762:	43d9      	mvns	r1, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001768:	4313      	orrs	r3, r2
         );
}
 800176a:	4618      	mov	r0, r3
 800176c:	3724      	adds	r7, #36	; 0x24
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ff4c 	bl	800161c <__NVIC_SetPriorityGrouping>
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
 8001798:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800179e:	f7ff ff61 	bl	8001664 <__NVIC_GetPriorityGrouping>
 80017a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	68b9      	ldr	r1, [r7, #8]
 80017a8:	6978      	ldr	r0, [r7, #20]
 80017aa:	f7ff ffb1 	bl	8001710 <NVIC_EncodePriority>
 80017ae:	4602      	mov	r2, r0
 80017b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b4:	4611      	mov	r1, r2
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff ff80 	bl	80016bc <__NVIC_SetPriority>
}
 80017bc:	bf00      	nop
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff ff54 	bl	8001680 <__NVIC_EnableIRQ>
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b089      	sub	sp, #36	; 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	e159      	b.n	8001ab0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017fc:	2201      	movs	r2, #1
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	4013      	ands	r3, r2
 800180e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	429a      	cmp	r2, r3
 8001816:	f040 8148 	bne.w	8001aaa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	2b01      	cmp	r3, #1
 8001824:	d005      	beq.n	8001832 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800182e:	2b02      	cmp	r3, #2
 8001830:	d130      	bne.n	8001894 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	2203      	movs	r2, #3
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4013      	ands	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4313      	orrs	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001868:	2201      	movs	r2, #1
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	091b      	lsrs	r3, r3, #4
 800187e:	f003 0201 	and.w	r2, r3, #1
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	2b03      	cmp	r3, #3
 800189e:	d017      	beq.n	80018d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	2203      	movs	r2, #3
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d123      	bne.n	8001924 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	08da      	lsrs	r2, r3, #3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3208      	adds	r2, #8
 80018e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	220f      	movs	r2, #15
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	691a      	ldr	r2, [r3, #16]
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	08da      	lsrs	r2, r3, #3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3208      	adds	r2, #8
 800191e:	69b9      	ldr	r1, [r7, #24]
 8001920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	2203      	movs	r2, #3
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0203 	and.w	r2, r3, #3
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 80a2 	beq.w	8001aaa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b57      	ldr	r3, [pc, #348]	; (8001ac8 <HAL_GPIO_Init+0x2e8>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	4a56      	ldr	r2, [pc, #344]	; (8001ac8 <HAL_GPIO_Init+0x2e8>)
 8001970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001974:	6453      	str	r3, [r2, #68]	; 0x44
 8001976:	4b54      	ldr	r3, [pc, #336]	; (8001ac8 <HAL_GPIO_Init+0x2e8>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001982:	4a52      	ldr	r2, [pc, #328]	; (8001acc <HAL_GPIO_Init+0x2ec>)
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	089b      	lsrs	r3, r3, #2
 8001988:	3302      	adds	r3, #2
 800198a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800198e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	220f      	movs	r2, #15
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4013      	ands	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a49      	ldr	r2, [pc, #292]	; (8001ad0 <HAL_GPIO_Init+0x2f0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d019      	beq.n	80019e2 <HAL_GPIO_Init+0x202>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a48      	ldr	r2, [pc, #288]	; (8001ad4 <HAL_GPIO_Init+0x2f4>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d013      	beq.n	80019de <HAL_GPIO_Init+0x1fe>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a47      	ldr	r2, [pc, #284]	; (8001ad8 <HAL_GPIO_Init+0x2f8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d00d      	beq.n	80019da <HAL_GPIO_Init+0x1fa>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a46      	ldr	r2, [pc, #280]	; (8001adc <HAL_GPIO_Init+0x2fc>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d007      	beq.n	80019d6 <HAL_GPIO_Init+0x1f6>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a45      	ldr	r2, [pc, #276]	; (8001ae0 <HAL_GPIO_Init+0x300>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d101      	bne.n	80019d2 <HAL_GPIO_Init+0x1f2>
 80019ce:	2304      	movs	r3, #4
 80019d0:	e008      	b.n	80019e4 <HAL_GPIO_Init+0x204>
 80019d2:	2307      	movs	r3, #7
 80019d4:	e006      	b.n	80019e4 <HAL_GPIO_Init+0x204>
 80019d6:	2303      	movs	r3, #3
 80019d8:	e004      	b.n	80019e4 <HAL_GPIO_Init+0x204>
 80019da:	2302      	movs	r3, #2
 80019dc:	e002      	b.n	80019e4 <HAL_GPIO_Init+0x204>
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <HAL_GPIO_Init+0x204>
 80019e2:	2300      	movs	r3, #0
 80019e4:	69fa      	ldr	r2, [r7, #28]
 80019e6:	f002 0203 	and.w	r2, r2, #3
 80019ea:	0092      	lsls	r2, r2, #2
 80019ec:	4093      	lsls	r3, r2
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019f4:	4935      	ldr	r1, [pc, #212]	; (8001acc <HAL_GPIO_Init+0x2ec>)
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	089b      	lsrs	r3, r3, #2
 80019fa:	3302      	adds	r3, #2
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a02:	4b38      	ldr	r3, [pc, #224]	; (8001ae4 <HAL_GPIO_Init+0x304>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a26:	4a2f      	ldr	r2, [pc, #188]	; (8001ae4 <HAL_GPIO_Init+0x304>)
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ae4 <HAL_GPIO_Init+0x304>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a50:	4a24      	ldr	r2, [pc, #144]	; (8001ae4 <HAL_GPIO_Init+0x304>)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a56:	4b23      	ldr	r3, [pc, #140]	; (8001ae4 <HAL_GPIO_Init+0x304>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4013      	ands	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a7a:	4a1a      	ldr	r2, [pc, #104]	; (8001ae4 <HAL_GPIO_Init+0x304>)
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a80:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <HAL_GPIO_Init+0x304>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aa4:	4a0f      	ldr	r2, [pc, #60]	; (8001ae4 <HAL_GPIO_Init+0x304>)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3301      	adds	r3, #1
 8001aae:	61fb      	str	r3, [r7, #28]
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	2b0f      	cmp	r3, #15
 8001ab4:	f67f aea2 	bls.w	80017fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ab8:	bf00      	nop
 8001aba:	bf00      	nop
 8001abc:	3724      	adds	r7, #36	; 0x24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40013800 	.word	0x40013800
 8001ad0:	40020000 	.word	0x40020000
 8001ad4:	40020400 	.word	0x40020400
 8001ad8:	40020800 	.word	0x40020800
 8001adc:	40020c00 	.word	0x40020c00
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40013c00 	.word	0x40013c00

08001ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	807b      	strh	r3, [r7, #2]
 8001af4:	4613      	mov	r3, r2
 8001af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001af8:	787b      	ldrb	r3, [r7, #1]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001afe:	887a      	ldrh	r2, [r7, #2]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b04:	e003      	b.n	8001b0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b06:	887b      	ldrh	r3, [r7, #2]
 8001b08:	041a      	lsls	r2, r3, #16
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	619a      	str	r2, [r3, #24]
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
	...

08001b1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e12b      	b.n	8001d86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d106      	bne.n	8001b48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7fe feac 	bl	80008a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2224      	movs	r2, #36	; 0x24
 8001b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0201 	bic.w	r2, r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b80:	f001 ffbe 	bl	8003b00 <HAL_RCC_GetPCLK1Freq>
 8001b84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	4a81      	ldr	r2, [pc, #516]	; (8001d90 <HAL_I2C_Init+0x274>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d807      	bhi.n	8001ba0 <HAL_I2C_Init+0x84>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4a80      	ldr	r2, [pc, #512]	; (8001d94 <HAL_I2C_Init+0x278>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	bf94      	ite	ls
 8001b98:	2301      	movls	r3, #1
 8001b9a:	2300      	movhi	r3, #0
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	e006      	b.n	8001bae <HAL_I2C_Init+0x92>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4a7d      	ldr	r2, [pc, #500]	; (8001d98 <HAL_I2C_Init+0x27c>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	bf94      	ite	ls
 8001ba8:	2301      	movls	r3, #1
 8001baa:	2300      	movhi	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e0e7      	b.n	8001d86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	4a78      	ldr	r2, [pc, #480]	; (8001d9c <HAL_I2C_Init+0x280>)
 8001bba:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbe:	0c9b      	lsrs	r3, r3, #18
 8001bc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	4a6a      	ldr	r2, [pc, #424]	; (8001d90 <HAL_I2C_Init+0x274>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d802      	bhi.n	8001bf0 <HAL_I2C_Init+0xd4>
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	3301      	adds	r3, #1
 8001bee:	e009      	b.n	8001c04 <HAL_I2C_Init+0xe8>
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001bf6:	fb02 f303 	mul.w	r3, r2, r3
 8001bfa:	4a69      	ldr	r2, [pc, #420]	; (8001da0 <HAL_I2C_Init+0x284>)
 8001bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001c00:	099b      	lsrs	r3, r3, #6
 8001c02:	3301      	adds	r3, #1
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	430b      	orrs	r3, r1
 8001c0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	495c      	ldr	r1, [pc, #368]	; (8001d90 <HAL_I2C_Init+0x274>)
 8001c20:	428b      	cmp	r3, r1
 8001c22:	d819      	bhi.n	8001c58 <HAL_I2C_Init+0x13c>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	1e59      	subs	r1, r3, #1
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c32:	1c59      	adds	r1, r3, #1
 8001c34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c38:	400b      	ands	r3, r1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00a      	beq.n	8001c54 <HAL_I2C_Init+0x138>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1e59      	subs	r1, r3, #1
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c52:	e051      	b.n	8001cf8 <HAL_I2C_Init+0x1dc>
 8001c54:	2304      	movs	r3, #4
 8001c56:	e04f      	b.n	8001cf8 <HAL_I2C_Init+0x1dc>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d111      	bne.n	8001c84 <HAL_I2C_Init+0x168>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	1e58      	subs	r0, r3, #1
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6859      	ldr	r1, [r3, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	440b      	add	r3, r1
 8001c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c72:	3301      	adds	r3, #1
 8001c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	bf0c      	ite	eq
 8001c7c:	2301      	moveq	r3, #1
 8001c7e:	2300      	movne	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	e012      	b.n	8001caa <HAL_I2C_Init+0x18e>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	1e58      	subs	r0, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6859      	ldr	r1, [r3, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	440b      	add	r3, r1
 8001c92:	0099      	lsls	r1, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	bf0c      	ite	eq
 8001ca4:	2301      	moveq	r3, #1
 8001ca6:	2300      	movne	r3, #0
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_I2C_Init+0x196>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e022      	b.n	8001cf8 <HAL_I2C_Init+0x1dc>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10e      	bne.n	8001cd8 <HAL_I2C_Init+0x1bc>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	1e58      	subs	r0, r3, #1
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6859      	ldr	r1, [r3, #4]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	440b      	add	r3, r1
 8001cc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ccc:	3301      	adds	r3, #1
 8001cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cd6:	e00f      	b.n	8001cf8 <HAL_I2C_Init+0x1dc>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	1e58      	subs	r0, r3, #1
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6859      	ldr	r1, [r3, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	0099      	lsls	r1, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cee:	3301      	adds	r3, #1
 8001cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	6809      	ldr	r1, [r1, #0]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69da      	ldr	r2, [r3, #28]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	6911      	ldr	r1, [r2, #16]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68d2      	ldr	r2, [r2, #12]
 8001d32:	4311      	orrs	r1, r2
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	430b      	orrs	r3, r1
 8001d3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695a      	ldr	r2, [r3, #20]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0201 	orr.w	r2, r2, #1
 8001d66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2220      	movs	r2, #32
 8001d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	000186a0 	.word	0x000186a0
 8001d94:	001e847f 	.word	0x001e847f
 8001d98:	003d08ff 	.word	0x003d08ff
 8001d9c:	431bde83 	.word	0x431bde83
 8001da0:	10624dd3 	.word	0x10624dd3

08001da4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001da6:	b08f      	sub	sp, #60	; 0x3c
 8001da8:	af0a      	add	r7, sp, #40	; 0x28
 8001daa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e10f      	b.n	8001fd6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d106      	bne.n	8001dd6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f00a ffe1 	bl	800cd98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2203      	movs	r2, #3
 8001dda:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d102      	bne.n	8001df0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f002 fe06 	bl	8004a06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	687e      	ldr	r6, [r7, #4]
 8001e02:	466d      	mov	r5, sp
 8001e04:	f106 0410 	add.w	r4, r6, #16
 8001e08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e14:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e18:	1d33      	adds	r3, r6, #4
 8001e1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e1c:	6838      	ldr	r0, [r7, #0]
 8001e1e:	f002 fcdd 	bl	80047dc <USB_CoreInit>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d005      	beq.n	8001e34 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e0d0      	b.n	8001fd6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f002 fdf4 	bl	8004a28 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e40:	2300      	movs	r3, #0
 8001e42:	73fb      	strb	r3, [r7, #15]
 8001e44:	e04a      	b.n	8001edc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e46:	7bfa      	ldrb	r2, [r7, #15]
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	4413      	add	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	440b      	add	r3, r1
 8001e54:	333d      	adds	r3, #61	; 0x3d
 8001e56:	2201      	movs	r2, #1
 8001e58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e5a:	7bfa      	ldrb	r2, [r7, #15]
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	4413      	add	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	440b      	add	r3, r1
 8001e68:	333c      	adds	r3, #60	; 0x3c
 8001e6a:	7bfa      	ldrb	r2, [r7, #15]
 8001e6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e6e:	7bfa      	ldrb	r2, [r7, #15]
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	b298      	uxth	r0, r3
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	440b      	add	r3, r1
 8001e80:	3344      	adds	r3, #68	; 0x44
 8001e82:	4602      	mov	r2, r0
 8001e84:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e86:	7bfa      	ldrb	r2, [r7, #15]
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4413      	add	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	440b      	add	r3, r1
 8001e94:	3340      	adds	r3, #64	; 0x40
 8001e96:	2200      	movs	r2, #0
 8001e98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e9a:	7bfa      	ldrb	r2, [r7, #15]
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	440b      	add	r3, r1
 8001ea8:	3348      	adds	r3, #72	; 0x48
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001eae:	7bfa      	ldrb	r2, [r7, #15]
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	4413      	add	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	440b      	add	r3, r1
 8001ebc:	334c      	adds	r3, #76	; 0x4c
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ec2:	7bfa      	ldrb	r2, [r7, #15]
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	4413      	add	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	440b      	add	r3, r1
 8001ed0:	3354      	adds	r3, #84	; 0x54
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	73fb      	strb	r3, [r7, #15]
 8001edc:	7bfa      	ldrb	r2, [r7, #15]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d3af      	bcc.n	8001e46 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	73fb      	strb	r3, [r7, #15]
 8001eea:	e044      	b.n	8001f76 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001eec:	7bfa      	ldrb	r2, [r7, #15]
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f02:	7bfa      	ldrb	r2, [r7, #15]
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f14:	7bfa      	ldrb	r2, [r7, #15]
 8001f16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f2e:	7bfa      	ldrb	r2, [r7, #15]
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	4613      	mov	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4413      	add	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f44:	7bfa      	ldrb	r2, [r7, #15]
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f5a:	7bfa      	ldrb	r2, [r7, #15]
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	4413      	add	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	440b      	add	r3, r1
 8001f68:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
 8001f72:	3301      	adds	r3, #1
 8001f74:	73fb      	strb	r3, [r7, #15]
 8001f76:	7bfa      	ldrb	r2, [r7, #15]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d3b5      	bcc.n	8001eec <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	603b      	str	r3, [r7, #0]
 8001f86:	687e      	ldr	r6, [r7, #4]
 8001f88:	466d      	mov	r5, sp
 8001f8a:	f106 0410 	add.w	r4, r6, #16
 8001f8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f9e:	1d33      	adds	r3, r6, #4
 8001fa0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fa2:	6838      	ldr	r0, [r7, #0]
 8001fa4:	f002 fd8c 	bl	8004ac0 <USB_DevInit>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d005      	beq.n	8001fba <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e00d      	b.n	8001fd6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f003 fedb 	bl	8005d8a <USB_DevDisconnect>

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fde <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b084      	sub	sp, #16
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <HAL_PCD_Start+0x1c>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e020      	b.n	800203c <HAL_PCD_Start+0x5e>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002006:	2b01      	cmp	r3, #1
 8002008:	d109      	bne.n	800201e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800200e:	2b01      	cmp	r3, #1
 8002010:	d005      	beq.n	800201e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002016:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f002 fcde 	bl	80049e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f003 fe8b 	bl	8005d48 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002044:	b590      	push	{r4, r7, lr}
 8002046:	b08d      	sub	sp, #52	; 0x34
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f003 ff49 	bl	8005ef2 <USB_GetMode>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	f040 848a 	bne.w	800297c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f003 fead 	bl	8005dcc <USB_ReadInterrupts>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 8480 	beq.w	800297a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	0a1b      	lsrs	r3, r3, #8
 8002084:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f003 fe9a 	bl	8005dcc <USB_ReadInterrupts>
 8002098:	4603      	mov	r3, r0
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d107      	bne.n	80020b2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f002 0202 	and.w	r2, r2, #2
 80020b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f003 fe88 	bl	8005dcc <USB_ReadInterrupts>
 80020bc:	4603      	mov	r3, r0
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	2b10      	cmp	r3, #16
 80020c4:	d161      	bne.n	800218a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	699a      	ldr	r2, [r3, #24]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0210 	bic.w	r2, r2, #16
 80020d4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	f003 020f 	and.w	r2, r3, #15
 80020e2:	4613      	mov	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	4413      	add	r3, r2
 80020f2:	3304      	adds	r3, #4
 80020f4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	0c5b      	lsrs	r3, r3, #17
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d124      	bne.n	800214c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002108:	4013      	ands	r3, r2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d035      	beq.n	800217a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	091b      	lsrs	r3, r3, #4
 8002116:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002118:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800211c:	b29b      	uxth	r3, r3
 800211e:	461a      	mov	r2, r3
 8002120:	6a38      	ldr	r0, [r7, #32]
 8002122:	f003 fcbf 	bl	8005aa4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	691a      	ldr	r2, [r3, #16]
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	091b      	lsrs	r3, r3, #4
 800212e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002132:	441a      	add	r2, r3
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	6a1a      	ldr	r2, [r3, #32]
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	091b      	lsrs	r3, r3, #4
 8002140:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002144:	441a      	add	r2, r3
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	621a      	str	r2, [r3, #32]
 800214a:	e016      	b.n	800217a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	0c5b      	lsrs	r3, r3, #17
 8002150:	f003 030f 	and.w	r3, r3, #15
 8002154:	2b06      	cmp	r3, #6
 8002156:	d110      	bne.n	800217a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800215e:	2208      	movs	r2, #8
 8002160:	4619      	mov	r1, r3
 8002162:	6a38      	ldr	r0, [r7, #32]
 8002164:	f003 fc9e 	bl	8005aa4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	6a1a      	ldr	r2, [r3, #32]
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	091b      	lsrs	r3, r3, #4
 8002170:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002174:	441a      	add	r2, r3
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	699a      	ldr	r2, [r3, #24]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f042 0210 	orr.w	r2, r2, #16
 8002188:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f003 fe1c 	bl	8005dcc <USB_ReadInterrupts>
 8002194:	4603      	mov	r3, r0
 8002196:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800219a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800219e:	f040 80a7 	bne.w	80022f0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f003 fe21 	bl	8005df2 <USB_ReadDevAllOutEpInterrupt>
 80021b0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80021b2:	e099      	b.n	80022e8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80021b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 808e 	beq.w	80022dc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	4611      	mov	r1, r2
 80021ca:	4618      	mov	r0, r3
 80021cc:	f003 fe45 	bl	8005e5a <USB_ReadDevOutEPInterrupt>
 80021d0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00c      	beq.n	80021f6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	015a      	lsls	r2, r3, #5
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	4413      	add	r3, r2
 80021e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e8:	461a      	mov	r2, r3
 80021ea:	2301      	movs	r3, #1
 80021ec:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80021ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 fec3 	bl	8002f7c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00c      	beq.n	800221a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	015a      	lsls	r2, r3, #5
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	4413      	add	r3, r2
 8002208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800220c:	461a      	mov	r2, r3
 800220e:	2308      	movs	r3, #8
 8002210:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002212:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 ff99 	bl	800314c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	f003 0310 	and.w	r3, r3, #16
 8002220:	2b00      	cmp	r3, #0
 8002222:	d008      	beq.n	8002236 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	015a      	lsls	r2, r3, #5
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	4413      	add	r3, r2
 800222c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002230:	461a      	mov	r2, r3
 8002232:	2310      	movs	r3, #16
 8002234:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d030      	beq.n	80022a2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002240:	6a3b      	ldr	r3, [r7, #32]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002248:	2b80      	cmp	r3, #128	; 0x80
 800224a:	d109      	bne.n	8002260 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	69fa      	ldr	r2, [r7, #28]
 8002256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800225a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800225e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002262:	4613      	mov	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	4413      	add	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	4413      	add	r3, r2
 8002272:	3304      	adds	r3, #4
 8002274:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	78db      	ldrb	r3, [r3, #3]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d108      	bne.n	8002290 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	2200      	movs	r2, #0
 8002282:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	b2db      	uxtb	r3, r3
 8002288:	4619      	mov	r1, r3
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f00a fe80 	bl	800cf90 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	015a      	lsls	r2, r3, #5
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	4413      	add	r3, r2
 8002298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800229c:	461a      	mov	r2, r3
 800229e:	2302      	movs	r3, #2
 80022a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	f003 0320 	and.w	r3, r3, #32
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d008      	beq.n	80022be <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	015a      	lsls	r2, r3, #5
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	4413      	add	r3, r2
 80022b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022b8:	461a      	mov	r2, r3
 80022ba:	2320      	movs	r3, #32
 80022bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d009      	beq.n	80022dc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	015a      	lsls	r2, r3, #5
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	4413      	add	r3, r2
 80022d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d4:	461a      	mov	r2, r3
 80022d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022da:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	3301      	adds	r3, #1
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80022e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e4:	085b      	lsrs	r3, r3, #1
 80022e6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80022e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f47f af62 	bne.w	80021b4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f003 fd69 	bl	8005dcc <USB_ReadInterrupts>
 80022fa:	4603      	mov	r3, r0
 80022fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002300:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002304:	f040 80db 	bne.w	80024be <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f003 fd8a 	bl	8005e26 <USB_ReadDevAllInEpInterrupt>
 8002312:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002318:	e0cd      	b.n	80024b6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800231a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 80c2 	beq.w	80024aa <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	4611      	mov	r1, r2
 8002330:	4618      	mov	r0, r3
 8002332:	f003 fdb0 	bl	8005e96 <USB_ReadDevInEPInterrupt>
 8002336:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d057      	beq.n	80023f2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	f003 030f 	and.w	r3, r3, #15
 8002348:	2201      	movs	r2, #1
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	43db      	mvns	r3, r3
 800235c:	69f9      	ldr	r1, [r7, #28]
 800235e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002362:	4013      	ands	r3, r2
 8002364:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	015a      	lsls	r2, r3, #5
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	4413      	add	r3, r2
 800236e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002372:	461a      	mov	r2, r3
 8002374:	2301      	movs	r3, #1
 8002376:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d132      	bne.n	80023e6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002384:	4613      	mov	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4413      	add	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	334c      	adds	r3, #76	; 0x4c
 8002390:	6819      	ldr	r1, [r3, #0]
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002396:	4613      	mov	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	4413      	add	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4403      	add	r3, r0
 80023a0:	3348      	adds	r3, #72	; 0x48
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4419      	add	r1, r3
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023aa:	4613      	mov	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	4413      	add	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4403      	add	r3, r0
 80023b4:	334c      	adds	r3, #76	; 0x4c
 80023b6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d113      	bne.n	80023e6 <HAL_PCD_IRQHandler+0x3a2>
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c2:	4613      	mov	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4413      	add	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	440b      	add	r3, r1
 80023cc:	3354      	adds	r3, #84	; 0x54
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d108      	bne.n	80023e6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023de:	461a      	mov	r2, r3
 80023e0:	2101      	movs	r1, #1
 80023e2:	f003 fdb7 	bl	8005f54 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	4619      	mov	r1, r3
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f00a fd54 	bl	800ce9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	015a      	lsls	r2, r3, #5
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	4413      	add	r3, r2
 8002404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002408:	461a      	mov	r2, r3
 800240a:	2308      	movs	r3, #8
 800240c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	f003 0310 	and.w	r3, r3, #16
 8002414:	2b00      	cmp	r3, #0
 8002416:	d008      	beq.n	800242a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	015a      	lsls	r2, r3, #5
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	4413      	add	r3, r2
 8002420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002424:	461a      	mov	r2, r3
 8002426:	2310      	movs	r3, #16
 8002428:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002430:	2b00      	cmp	r3, #0
 8002432:	d008      	beq.n	8002446 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	015a      	lsls	r2, r3, #5
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	4413      	add	r3, r2
 800243c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002440:	461a      	mov	r2, r3
 8002442:	2340      	movs	r3, #64	; 0x40
 8002444:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d023      	beq.n	8002498 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002452:	6a38      	ldr	r0, [r7, #32]
 8002454:	f002 fc98 	bl	8004d88 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800245a:	4613      	mov	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	4413      	add	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	3338      	adds	r3, #56	; 0x38
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	4413      	add	r3, r2
 8002468:	3304      	adds	r3, #4
 800246a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	78db      	ldrb	r3, [r3, #3]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d108      	bne.n	8002486 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	2200      	movs	r2, #0
 8002478:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	b2db      	uxtb	r3, r3
 800247e:	4619      	mov	r1, r3
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f00a fd97 	bl	800cfb4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	015a      	lsls	r2, r3, #5
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	4413      	add	r3, r2
 800248e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002492:	461a      	mov	r2, r3
 8002494:	2302      	movs	r3, #2
 8002496:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80024a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 fcdb 	bl	8002e60 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	3301      	adds	r3, #1
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80024b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b2:	085b      	lsrs	r3, r3, #1
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80024b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f47f af2e 	bne.w	800231a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f003 fc82 	bl	8005dcc <USB_ReadInterrupts>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024d2:	d122      	bne.n	800251a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	69fa      	ldr	r2, [r7, #28]
 80024de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024e2:	f023 0301 	bic.w	r3, r3, #1
 80024e6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d108      	bne.n	8002504 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80024fa:	2100      	movs	r1, #0
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 fec3 	bl	8003288 <HAL_PCDEx_LPM_Callback>
 8002502:	e002      	b.n	800250a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f00a fd35 	bl	800cf74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	695a      	ldr	r2, [r3, #20]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002518:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f003 fc54 	bl	8005dcc <USB_ReadInterrupts>
 8002524:	4603      	mov	r3, r0
 8002526:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800252a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800252e:	d112      	bne.n	8002556 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b01      	cmp	r3, #1
 800253e:	d102      	bne.n	8002546 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f00a fcf1 	bl	800cf28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	695a      	ldr	r2, [r3, #20]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002554:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f003 fc36 	bl	8005dcc <USB_ReadInterrupts>
 8002560:	4603      	mov	r3, r0
 8002562:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800256a:	f040 80b7 	bne.w	80026dc <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	69fa      	ldr	r2, [r7, #28]
 8002578:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800257c:	f023 0301 	bic.w	r3, r3, #1
 8002580:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2110      	movs	r1, #16
 8002588:	4618      	mov	r0, r3
 800258a:	f002 fbfd 	bl	8004d88 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800258e:	2300      	movs	r3, #0
 8002590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002592:	e046      	b.n	8002622 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002596:	015a      	lsls	r2, r3, #5
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	4413      	add	r3, r2
 800259c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025a0:	461a      	mov	r2, r3
 80025a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80025a6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80025a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025aa:	015a      	lsls	r2, r3, #5
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025b8:	0151      	lsls	r1, r2, #5
 80025ba:	69fa      	ldr	r2, [r7, #28]
 80025bc:	440a      	add	r2, r1
 80025be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80025c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80025c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80025c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025d4:	461a      	mov	r2, r3
 80025d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80025da:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80025dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025de:	015a      	lsls	r2, r3, #5
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025ec:	0151      	lsls	r1, r2, #5
 80025ee:	69fa      	ldr	r2, [r7, #28]
 80025f0:	440a      	add	r2, r1
 80025f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80025f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80025fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80025fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fe:	015a      	lsls	r2, r3, #5
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	4413      	add	r3, r2
 8002604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800260c:	0151      	lsls	r1, r2, #5
 800260e:	69fa      	ldr	r2, [r7, #28]
 8002610:	440a      	add	r2, r1
 8002612:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002616:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800261a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800261c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261e:	3301      	adds	r3, #1
 8002620:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002628:	429a      	cmp	r2, r3
 800262a:	d3b3      	bcc.n	8002594 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	69fa      	ldr	r2, [r7, #28]
 8002636:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800263a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800263e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	2b00      	cmp	r3, #0
 8002646:	d016      	beq.n	8002676 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800264e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002652:	69fa      	ldr	r2, [r7, #28]
 8002654:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002658:	f043 030b 	orr.w	r3, r3, #11
 800265c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002668:	69fa      	ldr	r2, [r7, #28]
 800266a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800266e:	f043 030b 	orr.w	r3, r3, #11
 8002672:	6453      	str	r3, [r2, #68]	; 0x44
 8002674:	e015      	b.n	80026a2 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	69fa      	ldr	r2, [r7, #28]
 8002680:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002684:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002688:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800268c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	69fa      	ldr	r2, [r7, #28]
 8002698:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800269c:	f043 030b 	orr.w	r3, r3, #11
 80026a0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	69fa      	ldr	r2, [r7, #28]
 80026ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80026b4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6818      	ldr	r0, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026c6:	461a      	mov	r2, r3
 80026c8:	f003 fc44 	bl	8005f54 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	695a      	ldr	r2, [r3, #20]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80026da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f003 fb73 	bl	8005dcc <USB_ReadInterrupts>
 80026e6:	4603      	mov	r3, r0
 80026e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026f0:	d124      	bne.n	800273c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f003 fc09 	bl	8005f0e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f002 fbbe 	bl	8004e82 <USB_GetDevSpeed>
 8002706:	4603      	mov	r3, r0
 8002708:	461a      	mov	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681c      	ldr	r4, [r3, #0]
 8002712:	f001 f9e9 	bl	8003ae8 <HAL_RCC_GetHCLKFreq>
 8002716:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800271c:	b2db      	uxtb	r3, r3
 800271e:	461a      	mov	r2, r3
 8002720:	4620      	mov	r0, r4
 8002722:	f002 f8bd 	bl	80048a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f00a fbdf 	bl	800ceea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695a      	ldr	r2, [r3, #20]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800273a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f003 fb43 	bl	8005dcc <USB_ReadInterrupts>
 8002746:	4603      	mov	r3, r0
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b08      	cmp	r3, #8
 800274e:	d10a      	bne.n	8002766 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f00a fbbc 	bl	800cece <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695a      	ldr	r2, [r3, #20]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f002 0208 	and.w	r2, r2, #8
 8002764:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f003 fb2e 	bl	8005dcc <USB_ReadInterrupts>
 8002770:	4603      	mov	r3, r0
 8002772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002776:	2b80      	cmp	r3, #128	; 0x80
 8002778:	d122      	bne.n	80027c0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002786:	2301      	movs	r3, #1
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
 800278a:	e014      	b.n	80027b6 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002790:	4613      	mov	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4413      	add	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d105      	bne.n	80027b0 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	4619      	mov	r1, r3
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 fb27 	bl	8002dfe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	3301      	adds	r3, #1
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027bc:	429a      	cmp	r2, r3
 80027be:	d3e5      	bcc.n	800278c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f003 fb01 	bl	8005dcc <USB_ReadInterrupts>
 80027ca:	4603      	mov	r3, r0
 80027cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027d4:	d13b      	bne.n	800284e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027d6:	2301      	movs	r3, #1
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
 80027da:	e02b      	b.n	8002834 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	015a      	lsls	r2, r3, #5
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f0:	4613      	mov	r3, r2
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	4413      	add	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	3340      	adds	r3, #64	; 0x40
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d115      	bne.n	800282e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002802:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002804:	2b00      	cmp	r3, #0
 8002806:	da12      	bge.n	800282e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280c:	4613      	mov	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	333f      	adds	r3, #63	; 0x3f
 8002818:	2201      	movs	r2, #1
 800281a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	b2db      	uxtb	r3, r3
 8002820:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002824:	b2db      	uxtb	r3, r3
 8002826:	4619      	mov	r1, r3
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 fae8 	bl	8002dfe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	3301      	adds	r3, #1
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800283a:	429a      	cmp	r2, r3
 800283c:	d3ce      	bcc.n	80027dc <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695a      	ldr	r2, [r3, #20]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800284c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f003 faba 	bl	8005dcc <USB_ReadInterrupts>
 8002858:	4603      	mov	r3, r0
 800285a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800285e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002862:	d155      	bne.n	8002910 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002864:	2301      	movs	r3, #1
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
 8002868:	e045      	b.n	80028f6 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	015a      	lsls	r2, r3, #5
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	4413      	add	r3, r2
 8002872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287e:	4613      	mov	r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	4413      	add	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	440b      	add	r3, r1
 8002888:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d12e      	bne.n	80028f0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002892:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002894:	2b00      	cmp	r3, #0
 8002896:	da2b      	bge.n	80028f0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80028a4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d121      	bne.n	80028f0 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b0:	4613      	mov	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	4413      	add	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80028be:	2201      	movs	r2, #1
 80028c0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10a      	bne.n	80028f0 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	69fa      	ldr	r2, [r7, #28]
 80028e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028ec:	6053      	str	r3, [r2, #4]
            break;
 80028ee:	e007      	b.n	8002900 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	3301      	adds	r3, #1
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d3b4      	bcc.n	800286a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	695a      	ldr	r2, [r3, #20]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800290e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f003 fa59 	bl	8005dcc <USB_ReadInterrupts>
 800291a:	4603      	mov	r3, r0
 800291c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002924:	d10a      	bne.n	800293c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f00a fb56 	bl	800cfd8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695a      	ldr	r2, [r3, #20]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800293a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f003 fa43 	bl	8005dcc <USB_ReadInterrupts>
 8002946:	4603      	mov	r3, r0
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b04      	cmp	r3, #4
 800294e:	d115      	bne.n	800297c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f00a fb46 	bl	800cff4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6859      	ldr	r1, [r3, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	430a      	orrs	r2, r1
 8002976:	605a      	str	r2, [r3, #4]
 8002978:	e000      	b.n	800297c <HAL_PCD_IRQHandler+0x938>
      return;
 800297a:	bf00      	nop
    }
  }
}
 800297c:	3734      	adds	r7, #52	; 0x34
 800297e:	46bd      	mov	sp, r7
 8002980:	bd90      	pop	{r4, r7, pc}

08002982 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	460b      	mov	r3, r1
 800298c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002994:	2b01      	cmp	r3, #1
 8002996:	d101      	bne.n	800299c <HAL_PCD_SetAddress+0x1a>
 8002998:	2302      	movs	r3, #2
 800299a:	e013      	b.n	80029c4 <HAL_PCD_SetAddress+0x42>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	78fa      	ldrb	r2, [r7, #3]
 80029a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	78fa      	ldrb	r2, [r7, #3]
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f003 f9a1 	bl	8005cfc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	4608      	mov	r0, r1
 80029d6:	4611      	mov	r1, r2
 80029d8:	461a      	mov	r2, r3
 80029da:	4603      	mov	r3, r0
 80029dc:	70fb      	strb	r3, [r7, #3]
 80029de:	460b      	mov	r3, r1
 80029e0:	803b      	strh	r3, [r7, #0]
 80029e2:	4613      	mov	r3, r2
 80029e4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	da0f      	bge.n	8002a12 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029f2:	78fb      	ldrb	r3, [r7, #3]
 80029f4:	f003 020f 	and.w	r2, r3, #15
 80029f8:	4613      	mov	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	4413      	add	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	3338      	adds	r3, #56	; 0x38
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	4413      	add	r3, r2
 8002a06:	3304      	adds	r3, #4
 8002a08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	705a      	strb	r2, [r3, #1]
 8002a10:	e00f      	b.n	8002a32 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a12:	78fb      	ldrb	r3, [r7, #3]
 8002a14:	f003 020f 	and.w	r2, r3, #15
 8002a18:	4613      	mov	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	4413      	add	r3, r2
 8002a28:	3304      	adds	r3, #4
 8002a2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a32:	78fb      	ldrb	r3, [r7, #3]
 8002a34:	f003 030f 	and.w	r3, r3, #15
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002a3e:	883a      	ldrh	r2, [r7, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	78ba      	ldrb	r2, [r7, #2]
 8002a48:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	785b      	ldrb	r3, [r3, #1]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d004      	beq.n	8002a5c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a5c:	78bb      	ldrb	r3, [r7, #2]
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d102      	bne.n	8002a68 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d101      	bne.n	8002a76 <HAL_PCD_EP_Open+0xaa>
 8002a72:	2302      	movs	r3, #2
 8002a74:	e00e      	b.n	8002a94 <HAL_PCD_EP_Open+0xc8>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68f9      	ldr	r1, [r7, #12]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f002 fa21 	bl	8004ecc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002a92:	7afb      	ldrb	r3, [r7, #11]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002aa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	da0f      	bge.n	8002ad0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ab0:	78fb      	ldrb	r3, [r7, #3]
 8002ab2:	f003 020f 	and.w	r2, r3, #15
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	4413      	add	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	3338      	adds	r3, #56	; 0x38
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2201      	movs	r2, #1
 8002acc:	705a      	strb	r2, [r3, #1]
 8002ace:	e00f      	b.n	8002af0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ad0:	78fb      	ldrb	r3, [r7, #3]
 8002ad2:	f003 020f 	and.w	r2, r3, #15
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	4413      	add	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002af0:	78fb      	ldrb	r3, [r7, #3]
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d101      	bne.n	8002b0a <HAL_PCD_EP_Close+0x6e>
 8002b06:	2302      	movs	r3, #2
 8002b08:	e00e      	b.n	8002b28 <HAL_PCD_EP_Close+0x8c>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68f9      	ldr	r1, [r7, #12]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f002 fa5f 	bl	8004fdc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	607a      	str	r2, [r7, #4]
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b40:	7afb      	ldrb	r3, [r7, #11]
 8002b42:	f003 020f 	and.w	r2, r3, #15
 8002b46:	4613      	mov	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4413      	add	r3, r2
 8002b56:	3304      	adds	r3, #4
 8002b58:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b72:	7afb      	ldrb	r3, [r7, #11]
 8002b74:	f003 030f 	and.w	r3, r3, #15
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d102      	bne.n	8002b8c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b8c:	7afb      	ldrb	r3, [r7, #11]
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d109      	bne.n	8002baa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6818      	ldr	r0, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	6979      	ldr	r1, [r7, #20]
 8002ba4:	f002 fd3e 	bl	8005624 <USB_EP0StartXfer>
 8002ba8:	e008      	b.n	8002bbc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6818      	ldr	r0, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	6979      	ldr	r1, [r7, #20]
 8002bb8:	f002 faec 	bl	8005194 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	460b      	mov	r3, r1
 8002bd0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002bd2:	78fb      	ldrb	r3, [r7, #3]
 8002bd4:	f003 020f 	and.w	r2, r3, #15
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	4413      	add	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002be8:	681b      	ldr	r3, [r3, #0]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b086      	sub	sp, #24
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	60f8      	str	r0, [r7, #12]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
 8002c02:	460b      	mov	r3, r1
 8002c04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c06:	7afb      	ldrb	r3, [r7, #11]
 8002c08:	f003 020f 	and.w	r2, r3, #15
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	3338      	adds	r3, #56	; 0x38
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	4413      	add	r3, r2
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	2201      	movs	r2, #1
 8002c34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c36:	7afb      	ldrb	r3, [r7, #11]
 8002c38:	f003 030f 	and.w	r3, r3, #15
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d102      	bne.n	8002c50 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c50:	7afb      	ldrb	r3, [r7, #11]
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d109      	bne.n	8002c6e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	461a      	mov	r2, r3
 8002c66:	6979      	ldr	r1, [r7, #20]
 8002c68:	f002 fcdc 	bl	8005624 <USB_EP0StartXfer>
 8002c6c:	e008      	b.n	8002c80 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	461a      	mov	r2, r3
 8002c7a:	6979      	ldr	r1, [r7, #20]
 8002c7c:	f002 fa8a 	bl	8005194 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	460b      	mov	r3, r1
 8002c94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c96:	78fb      	ldrb	r3, [r7, #3]
 8002c98:	f003 020f 	and.w	r2, r3, #15
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d901      	bls.n	8002ca8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e050      	b.n	8002d4a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ca8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	da0f      	bge.n	8002cd0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	f003 020f 	and.w	r2, r3, #15
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	4413      	add	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	3338      	adds	r3, #56	; 0x38
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	705a      	strb	r2, [r3, #1]
 8002cce:	e00d      	b.n	8002cec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cf2:	78fb      	ldrb	r3, [r7, #3]
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_PCD_EP_SetStall+0x82>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e01e      	b.n	8002d4a <HAL_PCD_EP_SetStall+0xc0>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68f9      	ldr	r1, [r7, #12]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f002 ff1a 	bl	8005b54 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10a      	bne.n	8002d40 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6818      	ldr	r0, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	b2d9      	uxtb	r1, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f003 f90a 	bl	8005f54 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b084      	sub	sp, #16
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d5e:	78fb      	ldrb	r3, [r7, #3]
 8002d60:	f003 020f 	and.w	r2, r3, #15
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d901      	bls.n	8002d70 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e042      	b.n	8002df6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	da0f      	bge.n	8002d98 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	f003 020f 	and.w	r2, r3, #15
 8002d7e:	4613      	mov	r3, r2
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	4413      	add	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	3338      	adds	r3, #56	; 0x38
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2201      	movs	r2, #1
 8002d94:	705a      	strb	r2, [r3, #1]
 8002d96:	e00f      	b.n	8002db8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d98:	78fb      	ldrb	r3, [r7, #3]
 8002d9a:	f003 020f 	and.w	r2, r3, #15
 8002d9e:	4613      	mov	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	4413      	add	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	4413      	add	r3, r2
 8002dae:	3304      	adds	r3, #4
 8002db0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dbe:	78fb      	ldrb	r3, [r7, #3]
 8002dc0:	f003 030f 	and.w	r3, r3, #15
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d101      	bne.n	8002dd8 <HAL_PCD_EP_ClrStall+0x86>
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	e00e      	b.n	8002df6 <HAL_PCD_EP_ClrStall+0xa4>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68f9      	ldr	r1, [r7, #12]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f002 ff22 	bl	8005c30 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b084      	sub	sp, #16
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	460b      	mov	r3, r1
 8002e08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002e0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	da0c      	bge.n	8002e2c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e12:	78fb      	ldrb	r3, [r7, #3]
 8002e14:	f003 020f 	and.w	r2, r3, #15
 8002e18:	4613      	mov	r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	3338      	adds	r3, #56	; 0x38
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	4413      	add	r3, r2
 8002e26:	3304      	adds	r3, #4
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	e00c      	b.n	8002e46 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e2c:	78fb      	ldrb	r3, [r7, #3]
 8002e2e:	f003 020f 	and.w	r2, r3, #15
 8002e32:	4613      	mov	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4413      	add	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	4413      	add	r3, r2
 8002e42:	3304      	adds	r3, #4
 8002e44:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68f9      	ldr	r1, [r7, #12]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f002 fd41 	bl	80058d4 <USB_EPStopXfer>
 8002e52:	4603      	mov	r3, r0
 8002e54:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002e56:	7afb      	ldrb	r3, [r7, #11]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08a      	sub	sp, #40	; 0x28
 8002e64:	af02      	add	r7, sp, #8
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	4613      	mov	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	3338      	adds	r3, #56	; 0x38
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	4413      	add	r3, r2
 8002e84:	3304      	adds	r3, #4
 8002e86:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a1a      	ldr	r2, [r3, #32]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d901      	bls.n	8002e98 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e06c      	b.n	8002f72 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	699a      	ldr	r2, [r3, #24]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	69fa      	ldr	r2, [r7, #28]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d902      	bls.n	8002eb4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	3303      	adds	r3, #3
 8002eb8:	089b      	lsrs	r3, r3, #2
 8002eba:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ebc:	e02b      	b.n	8002f16 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	699a      	ldr	r2, [r3, #24]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d902      	bls.n	8002eda <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	3303      	adds	r3, #3
 8002ede:	089b      	lsrs	r3, r3, #2
 8002ee0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6919      	ldr	r1, [r3, #16]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	6978      	ldr	r0, [r7, #20]
 8002efa:	f002 fd95 	bl	8005a28 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	691a      	ldr	r2, [r3, #16]
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	441a      	add	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a1a      	ldr	r2, [r3, #32]
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	441a      	add	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	015a      	lsls	r2, r3, #5
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d809      	bhi.n	8002f40 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a1a      	ldr	r2, [r3, #32]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d203      	bcs.n	8002f40 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1be      	bne.n	8002ebe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	699a      	ldr	r2, [r3, #24]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d811      	bhi.n	8002f70 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	2201      	movs	r2, #1
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	43db      	mvns	r3, r3
 8002f66:	6939      	ldr	r1, [r7, #16]
 8002f68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3720      	adds	r7, #32
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	333c      	adds	r3, #60	; 0x3c
 8002f94:	3304      	adds	r3, #4
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d17b      	bne.n	80030aa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d015      	beq.n	8002fe8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	4a61      	ldr	r2, [pc, #388]	; (8003144 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	f240 80b9 	bls.w	8003138 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 80b3 	beq.w	8003138 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	015a      	lsls	r2, r3, #5
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fde:	461a      	mov	r2, r3
 8002fe0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fe4:	6093      	str	r3, [r2, #8]
 8002fe6:	e0a7      	b.n	8003138 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	f003 0320 	and.w	r3, r3, #32
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d009      	beq.n	8003006 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	015a      	lsls	r2, r3, #5
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ffe:	461a      	mov	r2, r3
 8003000:	2320      	movs	r3, #32
 8003002:	6093      	str	r3, [r2, #8]
 8003004:	e098      	b.n	8003138 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800300c:	2b00      	cmp	r3, #0
 800300e:	f040 8093 	bne.w	8003138 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	4a4b      	ldr	r2, [pc, #300]	; (8003144 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d90f      	bls.n	800303a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00a      	beq.n	800303a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	015a      	lsls	r2, r3, #5
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	4413      	add	r3, r2
 800302c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003030:	461a      	mov	r2, r3
 8003032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003036:	6093      	str	r3, [r2, #8]
 8003038:	e07e      	b.n	8003138 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	4613      	mov	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	4413      	add	r3, r2
 800304c:	3304      	adds	r3, #4
 800304e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	69da      	ldr	r2, [r3, #28]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	0159      	lsls	r1, r3, #5
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	440b      	add	r3, r1
 800305c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003066:	1ad2      	subs	r2, r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d114      	bne.n	800309c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d109      	bne.n	800308e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6818      	ldr	r0, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003084:	461a      	mov	r2, r3
 8003086:	2101      	movs	r1, #1
 8003088:	f002 ff64 	bl	8005f54 <USB_EP0_OutStart>
 800308c:	e006      	b.n	800309c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	691a      	ldr	r2, [r3, #16]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	441a      	add	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	4619      	mov	r1, r3
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f009 fede 	bl	800ce64 <HAL_PCD_DataOutStageCallback>
 80030a8:	e046      	b.n	8003138 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	4a26      	ldr	r2, [pc, #152]	; (8003148 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d124      	bne.n	80030fc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00a      	beq.n	80030d2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c8:	461a      	mov	r2, r3
 80030ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ce:	6093      	str	r3, [r2, #8]
 80030d0:	e032      	b.n	8003138 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f003 0320 	and.w	r3, r3, #32
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d008      	beq.n	80030ee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	015a      	lsls	r2, r3, #5
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e8:	461a      	mov	r2, r3
 80030ea:	2320      	movs	r3, #32
 80030ec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	4619      	mov	r1, r3
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f009 feb5 	bl	800ce64 <HAL_PCD_DataOutStageCallback>
 80030fa:	e01d      	b.n	8003138 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d114      	bne.n	800312c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	4613      	mov	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	4413      	add	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	440b      	add	r3, r1
 8003110:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d108      	bne.n	800312c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6818      	ldr	r0, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003124:	461a      	mov	r2, r3
 8003126:	2100      	movs	r1, #0
 8003128:	f002 ff14 	bl	8005f54 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	4619      	mov	r1, r3
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f009 fe96 	bl	800ce64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3720      	adds	r7, #32
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	4f54300a 	.word	0x4f54300a
 8003148:	4f54310a 	.word	0x4f54310a

0800314c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	333c      	adds	r3, #60	; 0x3c
 8003164:	3304      	adds	r3, #4
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	4413      	add	r3, r2
 8003172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	4a15      	ldr	r2, [pc, #84]	; (80031d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d90e      	bls.n	80031a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003188:	2b00      	cmp	r3, #0
 800318a:	d009      	beq.n	80031a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4413      	add	r3, r2
 8003194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003198:	461a      	mov	r2, r3
 800319a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800319e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f009 fe4d 	bl	800ce40 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <PCD_EP_OutSetupPacket_int+0x88>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d90c      	bls.n	80031c8 <PCD_EP_OutSetupPacket_int+0x7c>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d108      	bne.n	80031c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031c0:	461a      	mov	r2, r3
 80031c2:	2101      	movs	r1, #1
 80031c4:	f002 fec6 	bl	8005f54 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	4f54300a 	.word	0x4f54300a

080031d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	70fb      	strb	r3, [r7, #3]
 80031e4:	4613      	mov	r3, r2
 80031e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80031f0:	78fb      	ldrb	r3, [r7, #3]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d107      	bne.n	8003206 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80031f6:	883b      	ldrh	r3, [r7, #0]
 80031f8:	0419      	lsls	r1, r3, #16
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	430a      	orrs	r2, r1
 8003202:	629a      	str	r2, [r3, #40]	; 0x28
 8003204:	e028      	b.n	8003258 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320c:	0c1b      	lsrs	r3, r3, #16
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	4413      	add	r3, r2
 8003212:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003214:	2300      	movs	r3, #0
 8003216:	73fb      	strb	r3, [r7, #15]
 8003218:	e00d      	b.n	8003236 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	7bfb      	ldrb	r3, [r7, #15]
 8003220:	3340      	adds	r3, #64	; 0x40
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	0c1b      	lsrs	r3, r3, #16
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	4413      	add	r3, r2
 800322e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	3301      	adds	r3, #1
 8003234:	73fb      	strb	r3, [r7, #15]
 8003236:	7bfa      	ldrb	r2, [r7, #15]
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	3b01      	subs	r3, #1
 800323c:	429a      	cmp	r2, r3
 800323e:	d3ec      	bcc.n	800321a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003240:	883b      	ldrh	r3, [r7, #0]
 8003242:	0418      	lsls	r0, r3, #16
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6819      	ldr	r1, [r3, #0]
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	3b01      	subs	r3, #1
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	4302      	orrs	r2, r0
 8003250:	3340      	adds	r3, #64	; 0x40
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	460b      	mov	r3, r1
 8003270:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	887a      	ldrh	r2, [r7, #2]
 8003278:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e267      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d075      	beq.n	80033aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032be:	4b88      	ldr	r3, [pc, #544]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 030c 	and.w	r3, r3, #12
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d00c      	beq.n	80032e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ca:	4b85      	ldr	r3, [pc, #532]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d112      	bne.n	80032fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032d6:	4b82      	ldr	r3, [pc, #520]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032e2:	d10b      	bne.n	80032fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e4:	4b7e      	ldr	r3, [pc, #504]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d05b      	beq.n	80033a8 <HAL_RCC_OscConfig+0x108>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d157      	bne.n	80033a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e242      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003304:	d106      	bne.n	8003314 <HAL_RCC_OscConfig+0x74>
 8003306:	4b76      	ldr	r3, [pc, #472]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a75      	ldr	r2, [pc, #468]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 800330c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	e01d      	b.n	8003350 <HAL_RCC_OscConfig+0xb0>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800331c:	d10c      	bne.n	8003338 <HAL_RCC_OscConfig+0x98>
 800331e:	4b70      	ldr	r3, [pc, #448]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a6f      	ldr	r2, [pc, #444]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 8003324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	4b6d      	ldr	r3, [pc, #436]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a6c      	ldr	r2, [pc, #432]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 8003330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e00b      	b.n	8003350 <HAL_RCC_OscConfig+0xb0>
 8003338:	4b69      	ldr	r3, [pc, #420]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a68      	ldr	r2, [pc, #416]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 800333e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	4b66      	ldr	r3, [pc, #408]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a65      	ldr	r2, [pc, #404]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 800334a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800334e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d013      	beq.n	8003380 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003358:	f7fd fece 	bl	80010f8 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003360:	f7fd feca 	bl	80010f8 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b64      	cmp	r3, #100	; 0x64
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e207      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003372:	4b5b      	ldr	r3, [pc, #364]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0f0      	beq.n	8003360 <HAL_RCC_OscConfig+0xc0>
 800337e:	e014      	b.n	80033aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003380:	f7fd feba 	bl	80010f8 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003388:	f7fd feb6 	bl	80010f8 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b64      	cmp	r3, #100	; 0x64
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e1f3      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800339a:	4b51      	ldr	r3, [pc, #324]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0xe8>
 80033a6:	e000      	b.n	80033aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d063      	beq.n	800347e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033b6:	4b4a      	ldr	r3, [pc, #296]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00b      	beq.n	80033da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033c2:	4b47      	ldr	r3, [pc, #284]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033ca:	2b08      	cmp	r3, #8
 80033cc:	d11c      	bne.n	8003408 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ce:	4b44      	ldr	r3, [pc, #272]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d116      	bne.n	8003408 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033da:	4b41      	ldr	r3, [pc, #260]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d005      	beq.n	80033f2 <HAL_RCC_OscConfig+0x152>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d001      	beq.n	80033f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e1c7      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f2:	4b3b      	ldr	r3, [pc, #236]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	4937      	ldr	r1, [pc, #220]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003406:	e03a      	b.n	800347e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d020      	beq.n	8003452 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003410:	4b34      	ldr	r3, [pc, #208]	; (80034e4 <HAL_RCC_OscConfig+0x244>)
 8003412:	2201      	movs	r2, #1
 8003414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003416:	f7fd fe6f 	bl	80010f8 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800341e:	f7fd fe6b 	bl	80010f8 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e1a8      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003430:	4b2b      	ldr	r3, [pc, #172]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0f0      	beq.n	800341e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343c:	4b28      	ldr	r3, [pc, #160]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	4925      	ldr	r1, [pc, #148]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 800344c:	4313      	orrs	r3, r2
 800344e:	600b      	str	r3, [r1, #0]
 8003450:	e015      	b.n	800347e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003452:	4b24      	ldr	r3, [pc, #144]	; (80034e4 <HAL_RCC_OscConfig+0x244>)
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003458:	f7fd fe4e 	bl	80010f8 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003460:	f7fd fe4a 	bl	80010f8 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e187      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003472:	4b1b      	ldr	r3, [pc, #108]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d036      	beq.n	80034f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d016      	beq.n	80034c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003492:	4b15      	ldr	r3, [pc, #84]	; (80034e8 <HAL_RCC_OscConfig+0x248>)
 8003494:	2201      	movs	r2, #1
 8003496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003498:	f7fd fe2e 	bl	80010f8 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034a0:	f7fd fe2a 	bl	80010f8 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e167      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034b2:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 80034b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0f0      	beq.n	80034a0 <HAL_RCC_OscConfig+0x200>
 80034be:	e01b      	b.n	80034f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034c0:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <HAL_RCC_OscConfig+0x248>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c6:	f7fd fe17 	bl	80010f8 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034cc:	e00e      	b.n	80034ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ce:	f7fd fe13 	bl	80010f8 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d907      	bls.n	80034ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e150      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
 80034e0:	40023800 	.word	0x40023800
 80034e4:	42470000 	.word	0x42470000
 80034e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ec:	4b88      	ldr	r3, [pc, #544]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80034ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1ea      	bne.n	80034ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 8097 	beq.w	8003634 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003506:	2300      	movs	r3, #0
 8003508:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800350a:	4b81      	ldr	r3, [pc, #516]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10f      	bne.n	8003536 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	60bb      	str	r3, [r7, #8]
 800351a:	4b7d      	ldr	r3, [pc, #500]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	4a7c      	ldr	r2, [pc, #496]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 8003520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003524:	6413      	str	r3, [r2, #64]	; 0x40
 8003526:	4b7a      	ldr	r3, [pc, #488]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352e:	60bb      	str	r3, [r7, #8]
 8003530:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003532:	2301      	movs	r3, #1
 8003534:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003536:	4b77      	ldr	r3, [pc, #476]	; (8003714 <HAL_RCC_OscConfig+0x474>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353e:	2b00      	cmp	r3, #0
 8003540:	d118      	bne.n	8003574 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003542:	4b74      	ldr	r3, [pc, #464]	; (8003714 <HAL_RCC_OscConfig+0x474>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a73      	ldr	r2, [pc, #460]	; (8003714 <HAL_RCC_OscConfig+0x474>)
 8003548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800354c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800354e:	f7fd fdd3 	bl	80010f8 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003556:	f7fd fdcf 	bl	80010f8 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e10c      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003568:	4b6a      	ldr	r3, [pc, #424]	; (8003714 <HAL_RCC_OscConfig+0x474>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0f0      	beq.n	8003556 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d106      	bne.n	800358a <HAL_RCC_OscConfig+0x2ea>
 800357c:	4b64      	ldr	r3, [pc, #400]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 800357e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003580:	4a63      	ldr	r2, [pc, #396]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 8003582:	f043 0301 	orr.w	r3, r3, #1
 8003586:	6713      	str	r3, [r2, #112]	; 0x70
 8003588:	e01c      	b.n	80035c4 <HAL_RCC_OscConfig+0x324>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	2b05      	cmp	r3, #5
 8003590:	d10c      	bne.n	80035ac <HAL_RCC_OscConfig+0x30c>
 8003592:	4b5f      	ldr	r3, [pc, #380]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 8003594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003596:	4a5e      	ldr	r2, [pc, #376]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 8003598:	f043 0304 	orr.w	r3, r3, #4
 800359c:	6713      	str	r3, [r2, #112]	; 0x70
 800359e:	4b5c      	ldr	r3, [pc, #368]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80035a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a2:	4a5b      	ldr	r2, [pc, #364]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	6713      	str	r3, [r2, #112]	; 0x70
 80035aa:	e00b      	b.n	80035c4 <HAL_RCC_OscConfig+0x324>
 80035ac:	4b58      	ldr	r3, [pc, #352]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80035ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b0:	4a57      	ldr	r2, [pc, #348]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80035b2:	f023 0301 	bic.w	r3, r3, #1
 80035b6:	6713      	str	r3, [r2, #112]	; 0x70
 80035b8:	4b55      	ldr	r3, [pc, #340]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80035ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035bc:	4a54      	ldr	r2, [pc, #336]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80035be:	f023 0304 	bic.w	r3, r3, #4
 80035c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d015      	beq.n	80035f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035cc:	f7fd fd94 	bl	80010f8 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d2:	e00a      	b.n	80035ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035d4:	f7fd fd90 	bl	80010f8 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e0cb      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ea:	4b49      	ldr	r3, [pc, #292]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80035ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0ee      	beq.n	80035d4 <HAL_RCC_OscConfig+0x334>
 80035f6:	e014      	b.n	8003622 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f8:	f7fd fd7e 	bl	80010f8 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035fe:	e00a      	b.n	8003616 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003600:	f7fd fd7a 	bl	80010f8 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	f241 3288 	movw	r2, #5000	; 0x1388
 800360e:	4293      	cmp	r3, r2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e0b5      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003616:	4b3e      	ldr	r3, [pc, #248]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 8003618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1ee      	bne.n	8003600 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003622:	7dfb      	ldrb	r3, [r7, #23]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d105      	bne.n	8003634 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003628:	4b39      	ldr	r3, [pc, #228]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	4a38      	ldr	r2, [pc, #224]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 800362e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003632:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 80a1 	beq.w	8003780 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800363e:	4b34      	ldr	r3, [pc, #208]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
 8003646:	2b08      	cmp	r3, #8
 8003648:	d05c      	beq.n	8003704 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d141      	bne.n	80036d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003652:	4b31      	ldr	r3, [pc, #196]	; (8003718 <HAL_RCC_OscConfig+0x478>)
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003658:	f7fd fd4e 	bl	80010f8 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003660:	f7fd fd4a 	bl	80010f8 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e087      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003672:	4b27      	ldr	r3, [pc, #156]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f0      	bne.n	8003660 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69da      	ldr	r2, [r3, #28]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	019b      	lsls	r3, r3, #6
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003694:	085b      	lsrs	r3, r3, #1
 8003696:	3b01      	subs	r3, #1
 8003698:	041b      	lsls	r3, r3, #16
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a0:	061b      	lsls	r3, r3, #24
 80036a2:	491b      	ldr	r1, [pc, #108]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036a8:	4b1b      	ldr	r3, [pc, #108]	; (8003718 <HAL_RCC_OscConfig+0x478>)
 80036aa:	2201      	movs	r2, #1
 80036ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ae:	f7fd fd23 	bl	80010f8 <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b6:	f7fd fd1f 	bl	80010f8 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e05c      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c8:	4b11      	ldr	r3, [pc, #68]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0f0      	beq.n	80036b6 <HAL_RCC_OscConfig+0x416>
 80036d4:	e054      	b.n	8003780 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d6:	4b10      	ldr	r3, [pc, #64]	; (8003718 <HAL_RCC_OscConfig+0x478>)
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036dc:	f7fd fd0c 	bl	80010f8 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e4:	f7fd fd08 	bl	80010f8 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e045      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f6:	4b06      	ldr	r3, [pc, #24]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f0      	bne.n	80036e4 <HAL_RCC_OscConfig+0x444>
 8003702:	e03d      	b.n	8003780 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d107      	bne.n	800371c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e038      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
 8003710:	40023800 	.word	0x40023800
 8003714:	40007000 	.word	0x40007000
 8003718:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800371c:	4b1b      	ldr	r3, [pc, #108]	; (800378c <HAL_RCC_OscConfig+0x4ec>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d028      	beq.n	800377c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003734:	429a      	cmp	r2, r3
 8003736:	d121      	bne.n	800377c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003742:	429a      	cmp	r2, r3
 8003744:	d11a      	bne.n	800377c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800374c:	4013      	ands	r3, r2
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003752:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003754:	4293      	cmp	r3, r2
 8003756:	d111      	bne.n	800377c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003762:	085b      	lsrs	r3, r3, #1
 8003764:	3b01      	subs	r3, #1
 8003766:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003768:	429a      	cmp	r2, r3
 800376a:	d107      	bne.n	800377c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003776:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003778:	429a      	cmp	r2, r3
 800377a:	d001      	beq.n	8003780 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e000      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40023800 	.word	0x40023800

08003790 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0cc      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037a4:	4b68      	ldr	r3, [pc, #416]	; (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d90c      	bls.n	80037cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b2:	4b65      	ldr	r3, [pc, #404]	; (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ba:	4b63      	ldr	r3, [pc, #396]	; (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d001      	beq.n	80037cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0b8      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d020      	beq.n	800381a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d005      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037e4:	4b59      	ldr	r3, [pc, #356]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	4a58      	ldr	r2, [pc, #352]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037fc:	4b53      	ldr	r3, [pc, #332]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	4a52      	ldr	r2, [pc, #328]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003806:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003808:	4b50      	ldr	r3, [pc, #320]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	494d      	ldr	r1, [pc, #308]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	4313      	orrs	r3, r2
 8003818:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	d044      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d107      	bne.n	800383e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382e:	4b47      	ldr	r3, [pc, #284]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d119      	bne.n	800386e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e07f      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d003      	beq.n	800384e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800384a:	2b03      	cmp	r3, #3
 800384c:	d107      	bne.n	800385e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384e:	4b3f      	ldr	r3, [pc, #252]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d109      	bne.n	800386e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e06f      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385e:	4b3b      	ldr	r3, [pc, #236]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e067      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800386e:	4b37      	ldr	r3, [pc, #220]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f023 0203 	bic.w	r2, r3, #3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	4934      	ldr	r1, [pc, #208]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 800387c:	4313      	orrs	r3, r2
 800387e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003880:	f7fd fc3a 	bl	80010f8 <HAL_GetTick>
 8003884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003886:	e00a      	b.n	800389e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003888:	f7fd fc36 	bl	80010f8 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	f241 3288 	movw	r2, #5000	; 0x1388
 8003896:	4293      	cmp	r3, r2
 8003898:	d901      	bls.n	800389e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e04f      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389e:	4b2b      	ldr	r3, [pc, #172]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 020c 	and.w	r2, r3, #12
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d1eb      	bne.n	8003888 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038b0:	4b25      	ldr	r3, [pc, #148]	; (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d20c      	bcs.n	80038d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038be:	4b22      	ldr	r3, [pc, #136]	; (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c6:	4b20      	ldr	r3, [pc, #128]	; (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d001      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e032      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038e4:	4b19      	ldr	r3, [pc, #100]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	4916      	ldr	r1, [pc, #88]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d009      	beq.n	8003916 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003902:	4b12      	ldr	r3, [pc, #72]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	490e      	ldr	r1, [pc, #56]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	4313      	orrs	r3, r2
 8003914:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003916:	f000 f821 	bl	800395c <HAL_RCC_GetSysClockFreq>
 800391a:	4602      	mov	r2, r0
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	091b      	lsrs	r3, r3, #4
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	490a      	ldr	r1, [pc, #40]	; (8003950 <HAL_RCC_ClockConfig+0x1c0>)
 8003928:	5ccb      	ldrb	r3, [r1, r3]
 800392a:	fa22 f303 	lsr.w	r3, r2, r3
 800392e:	4a09      	ldr	r2, [pc, #36]	; (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 8003930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003932:	4b09      	ldr	r3, [pc, #36]	; (8003958 <HAL_RCC_ClockConfig+0x1c8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7fd f9c8 	bl	8000ccc <HAL_InitTick>

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40023c00 	.word	0x40023c00
 800394c:	40023800 	.word	0x40023800
 8003950:	0800deb8 	.word	0x0800deb8
 8003954:	20000000 	.word	0x20000000
 8003958:	20000004 	.word	0x20000004

0800395c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800395c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003960:	b090      	sub	sp, #64	; 0x40
 8003962:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	637b      	str	r3, [r7, #52]	; 0x34
 8003968:	2300      	movs	r3, #0
 800396a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800396c:	2300      	movs	r3, #0
 800396e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003974:	4b59      	ldr	r3, [pc, #356]	; (8003adc <HAL_RCC_GetSysClockFreq+0x180>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 030c 	and.w	r3, r3, #12
 800397c:	2b08      	cmp	r3, #8
 800397e:	d00d      	beq.n	800399c <HAL_RCC_GetSysClockFreq+0x40>
 8003980:	2b08      	cmp	r3, #8
 8003982:	f200 80a1 	bhi.w	8003ac8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <HAL_RCC_GetSysClockFreq+0x34>
 800398a:	2b04      	cmp	r3, #4
 800398c:	d003      	beq.n	8003996 <HAL_RCC_GetSysClockFreq+0x3a>
 800398e:	e09b      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003990:	4b53      	ldr	r3, [pc, #332]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003992:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003994:	e09b      	b.n	8003ace <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003996:	4b53      	ldr	r3, [pc, #332]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003998:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800399a:	e098      	b.n	8003ace <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800399c:	4b4f      	ldr	r3, [pc, #316]	; (8003adc <HAL_RCC_GetSysClockFreq+0x180>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039a6:	4b4d      	ldr	r3, [pc, #308]	; (8003adc <HAL_RCC_GetSysClockFreq+0x180>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d028      	beq.n	8003a04 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039b2:	4b4a      	ldr	r3, [pc, #296]	; (8003adc <HAL_RCC_GetSysClockFreq+0x180>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	099b      	lsrs	r3, r3, #6
 80039b8:	2200      	movs	r2, #0
 80039ba:	623b      	str	r3, [r7, #32]
 80039bc:	627a      	str	r2, [r7, #36]	; 0x24
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039c4:	2100      	movs	r1, #0
 80039c6:	4b47      	ldr	r3, [pc, #284]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x188>)
 80039c8:	fb03 f201 	mul.w	r2, r3, r1
 80039cc:	2300      	movs	r3, #0
 80039ce:	fb00 f303 	mul.w	r3, r0, r3
 80039d2:	4413      	add	r3, r2
 80039d4:	4a43      	ldr	r2, [pc, #268]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x188>)
 80039d6:	fba0 1202 	umull	r1, r2, r0, r2
 80039da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039dc:	460a      	mov	r2, r1
 80039de:	62ba      	str	r2, [r7, #40]	; 0x28
 80039e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039e2:	4413      	add	r3, r2
 80039e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e8:	2200      	movs	r2, #0
 80039ea:	61bb      	str	r3, [r7, #24]
 80039ec:	61fa      	str	r2, [r7, #28]
 80039ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80039f6:	f7fc fc93 	bl	8000320 <__aeabi_uldivmod>
 80039fa:	4602      	mov	r2, r0
 80039fc:	460b      	mov	r3, r1
 80039fe:	4613      	mov	r3, r2
 8003a00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a02:	e053      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a04:	4b35      	ldr	r3, [pc, #212]	; (8003adc <HAL_RCC_GetSysClockFreq+0x180>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	099b      	lsrs	r3, r3, #6
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	613b      	str	r3, [r7, #16]
 8003a0e:	617a      	str	r2, [r7, #20]
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a16:	f04f 0b00 	mov.w	fp, #0
 8003a1a:	4652      	mov	r2, sl
 8003a1c:	465b      	mov	r3, fp
 8003a1e:	f04f 0000 	mov.w	r0, #0
 8003a22:	f04f 0100 	mov.w	r1, #0
 8003a26:	0159      	lsls	r1, r3, #5
 8003a28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a2c:	0150      	lsls	r0, r2, #5
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	ebb2 080a 	subs.w	r8, r2, sl
 8003a36:	eb63 090b 	sbc.w	r9, r3, fp
 8003a3a:	f04f 0200 	mov.w	r2, #0
 8003a3e:	f04f 0300 	mov.w	r3, #0
 8003a42:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a46:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a4a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a4e:	ebb2 0408 	subs.w	r4, r2, r8
 8003a52:	eb63 0509 	sbc.w	r5, r3, r9
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	00eb      	lsls	r3, r5, #3
 8003a60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a64:	00e2      	lsls	r2, r4, #3
 8003a66:	4614      	mov	r4, r2
 8003a68:	461d      	mov	r5, r3
 8003a6a:	eb14 030a 	adds.w	r3, r4, sl
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	eb45 030b 	adc.w	r3, r5, fp
 8003a74:	607b      	str	r3, [r7, #4]
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a82:	4629      	mov	r1, r5
 8003a84:	028b      	lsls	r3, r1, #10
 8003a86:	4621      	mov	r1, r4
 8003a88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a8c:	4621      	mov	r1, r4
 8003a8e:	028a      	lsls	r2, r1, #10
 8003a90:	4610      	mov	r0, r2
 8003a92:	4619      	mov	r1, r3
 8003a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a96:	2200      	movs	r2, #0
 8003a98:	60bb      	str	r3, [r7, #8]
 8003a9a:	60fa      	str	r2, [r7, #12]
 8003a9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003aa0:	f7fc fc3e 	bl	8000320 <__aeabi_uldivmod>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003aac:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <HAL_RCC_GetSysClockFreq+0x180>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	0c1b      	lsrs	r3, r3, #16
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003abc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ac6:	e002      	b.n	8003ace <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ac8:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003aca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003acc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3740      	adds	r7, #64	; 0x40
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ada:	bf00      	nop
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	00f42400 	.word	0x00f42400
 8003ae4:	017d7840 	.word	0x017d7840

08003ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aec:	4b03      	ldr	r3, [pc, #12]	; (8003afc <HAL_RCC_GetHCLKFreq+0x14>)
 8003aee:	681b      	ldr	r3, [r3, #0]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	20000000 	.word	0x20000000

08003b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b04:	f7ff fff0 	bl	8003ae8 <HAL_RCC_GetHCLKFreq>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	0a9b      	lsrs	r3, r3, #10
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	4903      	ldr	r1, [pc, #12]	; (8003b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b16:	5ccb      	ldrb	r3, [r1, r3]
 8003b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40023800 	.word	0x40023800
 8003b24:	0800dec8 	.word	0x0800dec8

08003b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b2c:	f7ff ffdc 	bl	8003ae8 <HAL_RCC_GetHCLKFreq>
 8003b30:	4602      	mov	r2, r0
 8003b32:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	0b5b      	lsrs	r3, r3, #13
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	4903      	ldr	r1, [pc, #12]	; (8003b4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b3e:	5ccb      	ldrb	r3, [r1, r3]
 8003b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	0800dec8 	.word	0x0800dec8

08003b50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	220f      	movs	r2, #15
 8003b5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b60:	4b12      	ldr	r3, [pc, #72]	; (8003bac <HAL_RCC_GetClockConfig+0x5c>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 0203 	and.w	r2, r3, #3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b6c:	4b0f      	ldr	r3, [pc, #60]	; (8003bac <HAL_RCC_GetClockConfig+0x5c>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b78:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <HAL_RCC_GetClockConfig+0x5c>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003b84:	4b09      	ldr	r3, [pc, #36]	; (8003bac <HAL_RCC_GetClockConfig+0x5c>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	08db      	lsrs	r3, r3, #3
 8003b8a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b92:	4b07      	ldr	r3, [pc, #28]	; (8003bb0 <HAL_RCC_GetClockConfig+0x60>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0207 	and.w	r2, r3, #7
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	601a      	str	r2, [r3, #0]
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	40023c00 	.word	0x40023c00

08003bb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e07b      	b.n	8003cbe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d108      	bne.n	8003be0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bd6:	d009      	beq.n	8003bec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	61da      	str	r2, [r3, #28]
 8003bde:	e005      	b.n	8003bec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d106      	bne.n	8003c0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fc fff0 	bl	8000bec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c70:	ea42 0103 	orr.w	r1, r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c78:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	0c1b      	lsrs	r3, r3, #16
 8003c8a:	f003 0104 	and.w	r1, r3, #4
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	f003 0210 	and.w	r2, r3, #16
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	69da      	ldr	r2, [r3, #28]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b082      	sub	sp, #8
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e041      	b.n	8003d5c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d106      	bne.n	8003cf2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f839 	bl	8003d64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	3304      	adds	r3, #4
 8003d02:	4619      	mov	r1, r3
 8003d04:	4610      	mov	r0, r2
 8003d06:	f000 fadb 	bl	80042c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d001      	beq.n	8003d90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e044      	b.n	8003e1a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a1e      	ldr	r2, [pc, #120]	; (8003e28 <HAL_TIM_Base_Start_IT+0xb0>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d018      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x6c>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dba:	d013      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x6c>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1a      	ldr	r2, [pc, #104]	; (8003e2c <HAL_TIM_Base_Start_IT+0xb4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d00e      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x6c>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a19      	ldr	r2, [pc, #100]	; (8003e30 <HAL_TIM_Base_Start_IT+0xb8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d009      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x6c>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a17      	ldr	r2, [pc, #92]	; (8003e34 <HAL_TIM_Base_Start_IT+0xbc>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d004      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x6c>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a16      	ldr	r2, [pc, #88]	; (8003e38 <HAL_TIM_Base_Start_IT+0xc0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d111      	bne.n	8003e08 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b06      	cmp	r3, #6
 8003df4:	d010      	beq.n	8003e18 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f042 0201 	orr.w	r2, r2, #1
 8003e04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e06:	e007      	b.n	8003e18 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0201 	orr.w	r2, r2, #1
 8003e16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	40010000 	.word	0x40010000
 8003e2c:	40000400 	.word	0x40000400
 8003e30:	40000800 	.word	0x40000800
 8003e34:	40000c00 	.word	0x40000c00
 8003e38:	40014000 	.word	0x40014000

08003e3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e041      	b.n	8003ed2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d106      	bne.n	8003e68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fd f890 	bl	8000f88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3304      	adds	r3, #4
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4610      	mov	r0, r2
 8003e7c:	f000 fa20 	bl	80042c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b082      	sub	sp, #8
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d122      	bne.n	8003f36 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d11b      	bne.n	8003f36 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f06f 0202 	mvn.w	r2, #2
 8003f06:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	f003 0303 	and.w	r3, r3, #3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f9b1 	bl	8004284 <HAL_TIM_IC_CaptureCallback>
 8003f22:	e005      	b.n	8003f30 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f9a3 	bl	8004270 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f9b4 	bl	8004298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b04      	cmp	r3, #4
 8003f42:	d122      	bne.n	8003f8a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f003 0304 	and.w	r3, r3, #4
 8003f4e:	2b04      	cmp	r3, #4
 8003f50:	d11b      	bne.n	8003f8a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f06f 0204 	mvn.w	r2, #4
 8003f5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f987 	bl	8004284 <HAL_TIM_IC_CaptureCallback>
 8003f76:	e005      	b.n	8003f84 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f979 	bl	8004270 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f98a 	bl	8004298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	f003 0308 	and.w	r3, r3, #8
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d122      	bne.n	8003fde <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f003 0308 	and.w	r3, r3, #8
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d11b      	bne.n	8003fde <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f06f 0208 	mvn.w	r2, #8
 8003fae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2204      	movs	r2, #4
 8003fb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	f003 0303 	and.w	r3, r3, #3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f95d 	bl	8004284 <HAL_TIM_IC_CaptureCallback>
 8003fca:	e005      	b.n	8003fd8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 f94f 	bl	8004270 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f960 	bl	8004298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	f003 0310 	and.w	r3, r3, #16
 8003fe8:	2b10      	cmp	r3, #16
 8003fea:	d122      	bne.n	8004032 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f003 0310 	and.w	r3, r3, #16
 8003ff6:	2b10      	cmp	r3, #16
 8003ff8:	d11b      	bne.n	8004032 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f06f 0210 	mvn.w	r2, #16
 8004002:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2208      	movs	r2, #8
 8004008:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004014:	2b00      	cmp	r3, #0
 8004016:	d003      	beq.n	8004020 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f933 	bl	8004284 <HAL_TIM_IC_CaptureCallback>
 800401e:	e005      	b.n	800402c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 f925 	bl	8004270 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f936 	bl	8004298 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b01      	cmp	r3, #1
 800403e:	d10e      	bne.n	800405e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b01      	cmp	r3, #1
 800404c:	d107      	bne.n	800405e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f06f 0201 	mvn.w	r2, #1
 8004056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7fc fd79 	bl	8000b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004068:	2b80      	cmp	r3, #128	; 0x80
 800406a:	d10e      	bne.n	800408a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004076:	2b80      	cmp	r3, #128	; 0x80
 8004078:	d107      	bne.n	800408a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 fb9f 	bl	80047c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004094:	2b40      	cmp	r3, #64	; 0x40
 8004096:	d10e      	bne.n	80040b6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a2:	2b40      	cmp	r3, #64	; 0x40
 80040a4:	d107      	bne.n	80040b6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f8fb 	bl	80042ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f003 0320 	and.w	r3, r3, #32
 80040c0:	2b20      	cmp	r3, #32
 80040c2:	d10e      	bne.n	80040e2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f003 0320 	and.w	r3, r3, #32
 80040ce:	2b20      	cmp	r3, #32
 80040d0:	d107      	bne.n	80040e2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f06f 0220 	mvn.w	r2, #32
 80040da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fb69 	bl	80047b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040e2:	bf00      	nop
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
	...

080040ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004102:	2b01      	cmp	r3, #1
 8004104:	d101      	bne.n	800410a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004106:	2302      	movs	r3, #2
 8004108:	e0ae      	b.n	8004268 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b0c      	cmp	r3, #12
 8004116:	f200 809f 	bhi.w	8004258 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800411a:	a201      	add	r2, pc, #4	; (adr r2, 8004120 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800411c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004120:	08004155 	.word	0x08004155
 8004124:	08004259 	.word	0x08004259
 8004128:	08004259 	.word	0x08004259
 800412c:	08004259 	.word	0x08004259
 8004130:	08004195 	.word	0x08004195
 8004134:	08004259 	.word	0x08004259
 8004138:	08004259 	.word	0x08004259
 800413c:	08004259 	.word	0x08004259
 8004140:	080041d7 	.word	0x080041d7
 8004144:	08004259 	.word	0x08004259
 8004148:	08004259 	.word	0x08004259
 800414c:	08004259 	.word	0x08004259
 8004150:	08004217 	.word	0x08004217
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68b9      	ldr	r1, [r7, #8]
 800415a:	4618      	mov	r0, r3
 800415c:	f000 f930 	bl	80043c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699a      	ldr	r2, [r3, #24]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0208 	orr.w	r2, r2, #8
 800416e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699a      	ldr	r2, [r3, #24]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0204 	bic.w	r2, r2, #4
 800417e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6999      	ldr	r1, [r3, #24]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	691a      	ldr	r2, [r3, #16]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	619a      	str	r2, [r3, #24]
      break;
 8004192:	e064      	b.n	800425e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68b9      	ldr	r1, [r7, #8]
 800419a:	4618      	mov	r0, r3
 800419c:	f000 f976 	bl	800448c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699a      	ldr	r2, [r3, #24]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6999      	ldr	r1, [r3, #24]
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	021a      	lsls	r2, r3, #8
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	619a      	str	r2, [r3, #24]
      break;
 80041d4:	e043      	b.n	800425e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68b9      	ldr	r1, [r7, #8]
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 f9c1 	bl	8004564 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69da      	ldr	r2, [r3, #28]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f042 0208 	orr.w	r2, r2, #8
 80041f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69da      	ldr	r2, [r3, #28]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0204 	bic.w	r2, r2, #4
 8004200:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	69d9      	ldr	r1, [r3, #28]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	691a      	ldr	r2, [r3, #16]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	61da      	str	r2, [r3, #28]
      break;
 8004214:	e023      	b.n	800425e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68b9      	ldr	r1, [r7, #8]
 800421c:	4618      	mov	r0, r3
 800421e:	f000 fa0b 	bl	8004638 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	69da      	ldr	r2, [r3, #28]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004230:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	69da      	ldr	r2, [r3, #28]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004240:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	69d9      	ldr	r1, [r3, #28]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	021a      	lsls	r2, r3, #8
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	61da      	str	r2, [r3, #28]
      break;
 8004256:	e002      	b.n	800425e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	75fb      	strb	r3, [r7, #23]
      break;
 800425c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004266:	7dfb      	ldrb	r3, [r7, #23]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a34      	ldr	r2, [pc, #208]	; (80043a4 <TIM_Base_SetConfig+0xe4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d00f      	beq.n	80042f8 <TIM_Base_SetConfig+0x38>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042de:	d00b      	beq.n	80042f8 <TIM_Base_SetConfig+0x38>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a31      	ldr	r2, [pc, #196]	; (80043a8 <TIM_Base_SetConfig+0xe8>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d007      	beq.n	80042f8 <TIM_Base_SetConfig+0x38>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a30      	ldr	r2, [pc, #192]	; (80043ac <TIM_Base_SetConfig+0xec>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d003      	beq.n	80042f8 <TIM_Base_SetConfig+0x38>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a2f      	ldr	r2, [pc, #188]	; (80043b0 <TIM_Base_SetConfig+0xf0>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d108      	bne.n	800430a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a25      	ldr	r2, [pc, #148]	; (80043a4 <TIM_Base_SetConfig+0xe4>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d01b      	beq.n	800434a <TIM_Base_SetConfig+0x8a>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004318:	d017      	beq.n	800434a <TIM_Base_SetConfig+0x8a>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a22      	ldr	r2, [pc, #136]	; (80043a8 <TIM_Base_SetConfig+0xe8>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d013      	beq.n	800434a <TIM_Base_SetConfig+0x8a>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a21      	ldr	r2, [pc, #132]	; (80043ac <TIM_Base_SetConfig+0xec>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d00f      	beq.n	800434a <TIM_Base_SetConfig+0x8a>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a20      	ldr	r2, [pc, #128]	; (80043b0 <TIM_Base_SetConfig+0xf0>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d00b      	beq.n	800434a <TIM_Base_SetConfig+0x8a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a1f      	ldr	r2, [pc, #124]	; (80043b4 <TIM_Base_SetConfig+0xf4>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d007      	beq.n	800434a <TIM_Base_SetConfig+0x8a>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a1e      	ldr	r2, [pc, #120]	; (80043b8 <TIM_Base_SetConfig+0xf8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d003      	beq.n	800434a <TIM_Base_SetConfig+0x8a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a1d      	ldr	r2, [pc, #116]	; (80043bc <TIM_Base_SetConfig+0xfc>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d108      	bne.n	800435c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	4313      	orrs	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	4313      	orrs	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a08      	ldr	r2, [pc, #32]	; (80043a4 <TIM_Base_SetConfig+0xe4>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d103      	bne.n	8004390 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	691a      	ldr	r2, [r3, #16]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	615a      	str	r2, [r3, #20]
}
 8004396:	bf00      	nop
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	40010000 	.word	0x40010000
 80043a8:	40000400 	.word	0x40000400
 80043ac:	40000800 	.word	0x40000800
 80043b0:	40000c00 	.word	0x40000c00
 80043b4:	40014000 	.word	0x40014000
 80043b8:	40014400 	.word	0x40014400
 80043bc:	40014800 	.word	0x40014800

080043c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0201 	bic.w	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0303 	bic.w	r3, r3, #3
 80043f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f023 0302 	bic.w	r3, r3, #2
 8004408:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4313      	orrs	r3, r2
 8004412:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a1c      	ldr	r2, [pc, #112]	; (8004488 <TIM_OC1_SetConfig+0xc8>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d10c      	bne.n	8004436 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f023 0308 	bic.w	r3, r3, #8
 8004422:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	4313      	orrs	r3, r2
 800442c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f023 0304 	bic.w	r3, r3, #4
 8004434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a13      	ldr	r2, [pc, #76]	; (8004488 <TIM_OC1_SetConfig+0xc8>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d111      	bne.n	8004462 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800444c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	621a      	str	r2, [r3, #32]
}
 800447c:	bf00      	nop
 800447e:	371c      	adds	r7, #28
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	40010000 	.word	0x40010000

0800448c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800448c:	b480      	push	{r7}
 800448e:	b087      	sub	sp, #28
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	f023 0210 	bic.w	r2, r3, #16
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	021b      	lsls	r3, r3, #8
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f023 0320 	bic.w	r3, r3, #32
 80044d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	011b      	lsls	r3, r3, #4
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a1e      	ldr	r2, [pc, #120]	; (8004560 <TIM_OC2_SetConfig+0xd4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d10d      	bne.n	8004508 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	011b      	lsls	r3, r3, #4
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004506:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a15      	ldr	r2, [pc, #84]	; (8004560 <TIM_OC2_SetConfig+0xd4>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d113      	bne.n	8004538 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004516:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800451e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	4313      	orrs	r3, r2
 800452a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4313      	orrs	r3, r2
 8004536:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	621a      	str	r2, [r3, #32]
}
 8004552:	bf00      	nop
 8004554:	371c      	adds	r7, #28
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	40010000 	.word	0x40010000

08004564 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f023 0303 	bic.w	r3, r3, #3
 800459a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	021b      	lsls	r3, r3, #8
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a1d      	ldr	r2, [pc, #116]	; (8004634 <TIM_OC3_SetConfig+0xd0>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d10d      	bne.n	80045de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	021b      	lsls	r3, r3, #8
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a14      	ldr	r2, [pc, #80]	; (8004634 <TIM_OC3_SetConfig+0xd0>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d113      	bne.n	800460e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	4313      	orrs	r3, r2
 8004600:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	011b      	lsls	r3, r3, #4
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4313      	orrs	r3, r2
 800460c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	621a      	str	r2, [r3, #32]
}
 8004628:	bf00      	nop
 800462a:	371c      	adds	r7, #28
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	40010000 	.word	0x40010000

08004638 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004638:	b480      	push	{r7}
 800463a:	b087      	sub	sp, #28
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800466e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	021b      	lsls	r3, r3, #8
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4313      	orrs	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004682:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	031b      	lsls	r3, r3, #12
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	4313      	orrs	r3, r2
 800468e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a10      	ldr	r2, [pc, #64]	; (80046d4 <TIM_OC4_SetConfig+0x9c>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d109      	bne.n	80046ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800469e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	019b      	lsls	r3, r3, #6
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	621a      	str	r2, [r3, #32]
}
 80046c6:	bf00      	nop
 80046c8:	371c      	adds	r7, #28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	40010000 	.word	0x40010000

080046d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e050      	b.n	8004792 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004716:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	4313      	orrs	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a1c      	ldr	r2, [pc, #112]	; (80047a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d018      	beq.n	8004766 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800473c:	d013      	beq.n	8004766 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a18      	ldr	r2, [pc, #96]	; (80047a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d00e      	beq.n	8004766 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a16      	ldr	r2, [pc, #88]	; (80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d009      	beq.n	8004766 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a15      	ldr	r2, [pc, #84]	; (80047ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d004      	beq.n	8004766 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a13      	ldr	r2, [pc, #76]	; (80047b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d10c      	bne.n	8004780 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800476c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	4313      	orrs	r3, r2
 8004776:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	40010000 	.word	0x40010000
 80047a4:	40000400 	.word	0x40000400
 80047a8:	40000800 	.word	0x40000800
 80047ac:	40000c00 	.word	0x40000c00
 80047b0:	40014000 	.word	0x40014000

080047b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047dc:	b084      	sub	sp, #16
 80047de:	b580      	push	{r7, lr}
 80047e0:	b084      	sub	sp, #16
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
 80047e6:	f107 001c 	add.w	r0, r7, #28
 80047ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d122      	bne.n	800483a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800481c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800481e:	2b01      	cmp	r3, #1
 8004820:	d105      	bne.n	800482e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f001 fbee 	bl	8006010 <USB_CoreReset>
 8004834:	4603      	mov	r3, r0
 8004836:	73fb      	strb	r3, [r7, #15]
 8004838:	e01a      	b.n	8004870 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f001 fbe2 	bl	8006010 <USB_CoreReset>
 800484c:	4603      	mov	r3, r0
 800484e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004852:	2b00      	cmp	r3, #0
 8004854:	d106      	bne.n	8004864 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	639a      	str	r2, [r3, #56]	; 0x38
 8004862:	e005      	b.n	8004870 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004868:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004872:	2b01      	cmp	r3, #1
 8004874:	d10b      	bne.n	800488e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f043 0206 	orr.w	r2, r3, #6
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f043 0220 	orr.w	r2, r3, #32
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800488e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800489a:	b004      	add	sp, #16
 800489c:	4770      	bx	lr
	...

080048a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	4613      	mov	r3, r2
 80048ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80048ae:	79fb      	ldrb	r3, [r7, #7]
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d165      	bne.n	8004980 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	4a41      	ldr	r2, [pc, #260]	; (80049bc <USB_SetTurnaroundTime+0x11c>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d906      	bls.n	80048ca <USB_SetTurnaroundTime+0x2a>
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	4a40      	ldr	r2, [pc, #256]	; (80049c0 <USB_SetTurnaroundTime+0x120>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d202      	bcs.n	80048ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80048c4:	230f      	movs	r3, #15
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	e062      	b.n	8004990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	4a3c      	ldr	r2, [pc, #240]	; (80049c0 <USB_SetTurnaroundTime+0x120>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d306      	bcc.n	80048e0 <USB_SetTurnaroundTime+0x40>
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	4a3b      	ldr	r2, [pc, #236]	; (80049c4 <USB_SetTurnaroundTime+0x124>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d202      	bcs.n	80048e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80048da:	230e      	movs	r3, #14
 80048dc:	617b      	str	r3, [r7, #20]
 80048de:	e057      	b.n	8004990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	4a38      	ldr	r2, [pc, #224]	; (80049c4 <USB_SetTurnaroundTime+0x124>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d306      	bcc.n	80048f6 <USB_SetTurnaroundTime+0x56>
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	4a37      	ldr	r2, [pc, #220]	; (80049c8 <USB_SetTurnaroundTime+0x128>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d202      	bcs.n	80048f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80048f0:	230d      	movs	r3, #13
 80048f2:	617b      	str	r3, [r7, #20]
 80048f4:	e04c      	b.n	8004990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	4a33      	ldr	r2, [pc, #204]	; (80049c8 <USB_SetTurnaroundTime+0x128>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d306      	bcc.n	800490c <USB_SetTurnaroundTime+0x6c>
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	4a32      	ldr	r2, [pc, #200]	; (80049cc <USB_SetTurnaroundTime+0x12c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d802      	bhi.n	800490c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004906:	230c      	movs	r3, #12
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	e041      	b.n	8004990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	4a2f      	ldr	r2, [pc, #188]	; (80049cc <USB_SetTurnaroundTime+0x12c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d906      	bls.n	8004922 <USB_SetTurnaroundTime+0x82>
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	4a2e      	ldr	r2, [pc, #184]	; (80049d0 <USB_SetTurnaroundTime+0x130>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d802      	bhi.n	8004922 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800491c:	230b      	movs	r3, #11
 800491e:	617b      	str	r3, [r7, #20]
 8004920:	e036      	b.n	8004990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	4a2a      	ldr	r2, [pc, #168]	; (80049d0 <USB_SetTurnaroundTime+0x130>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d906      	bls.n	8004938 <USB_SetTurnaroundTime+0x98>
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	4a29      	ldr	r2, [pc, #164]	; (80049d4 <USB_SetTurnaroundTime+0x134>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d802      	bhi.n	8004938 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004932:	230a      	movs	r3, #10
 8004934:	617b      	str	r3, [r7, #20]
 8004936:	e02b      	b.n	8004990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	4a26      	ldr	r2, [pc, #152]	; (80049d4 <USB_SetTurnaroundTime+0x134>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d906      	bls.n	800494e <USB_SetTurnaroundTime+0xae>
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	4a25      	ldr	r2, [pc, #148]	; (80049d8 <USB_SetTurnaroundTime+0x138>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d202      	bcs.n	800494e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004948:	2309      	movs	r3, #9
 800494a:	617b      	str	r3, [r7, #20]
 800494c:	e020      	b.n	8004990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	4a21      	ldr	r2, [pc, #132]	; (80049d8 <USB_SetTurnaroundTime+0x138>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d306      	bcc.n	8004964 <USB_SetTurnaroundTime+0xc4>
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	4a20      	ldr	r2, [pc, #128]	; (80049dc <USB_SetTurnaroundTime+0x13c>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d802      	bhi.n	8004964 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800495e:	2308      	movs	r3, #8
 8004960:	617b      	str	r3, [r7, #20]
 8004962:	e015      	b.n	8004990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	4a1d      	ldr	r2, [pc, #116]	; (80049dc <USB_SetTurnaroundTime+0x13c>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d906      	bls.n	800497a <USB_SetTurnaroundTime+0xda>
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	4a1c      	ldr	r2, [pc, #112]	; (80049e0 <USB_SetTurnaroundTime+0x140>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d202      	bcs.n	800497a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004974:	2307      	movs	r3, #7
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	e00a      	b.n	8004990 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800497a:	2306      	movs	r3, #6
 800497c:	617b      	str	r3, [r7, #20]
 800497e:	e007      	b.n	8004990 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004980:	79fb      	ldrb	r3, [r7, #7]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d102      	bne.n	800498c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004986:	2309      	movs	r3, #9
 8004988:	617b      	str	r3, [r7, #20]
 800498a:	e001      	b.n	8004990 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800498c:	2309      	movs	r3, #9
 800498e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	029b      	lsls	r3, r3, #10
 80049a4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80049a8:	431a      	orrs	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	371c      	adds	r7, #28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	00d8acbf 	.word	0x00d8acbf
 80049c0:	00e4e1c0 	.word	0x00e4e1c0
 80049c4:	00f42400 	.word	0x00f42400
 80049c8:	01067380 	.word	0x01067380
 80049cc:	011a499f 	.word	0x011a499f
 80049d0:	01312cff 	.word	0x01312cff
 80049d4:	014ca43f 	.word	0x014ca43f
 80049d8:	016e3600 	.word	0x016e3600
 80049dc:	01a6ab1f 	.word	0x01a6ab1f
 80049e0:	01e84800 	.word	0x01e84800

080049e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f043 0201 	orr.w	r2, r3, #1
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f023 0201 	bic.w	r2, r3, #1
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d115      	bne.n	8004a76 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a56:	2001      	movs	r0, #1
 8004a58:	f7fc fb5a 	bl	8001110 <HAL_Delay>
      ms++;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f001 fa45 	bl	8005ef2 <USB_GetMode>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d01e      	beq.n	8004aac <USB_SetCurrentMode+0x84>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2b31      	cmp	r3, #49	; 0x31
 8004a72:	d9f0      	bls.n	8004a56 <USB_SetCurrentMode+0x2e>
 8004a74:	e01a      	b.n	8004aac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a76:	78fb      	ldrb	r3, [r7, #3]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d115      	bne.n	8004aa8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a88:	2001      	movs	r0, #1
 8004a8a:	f7fc fb41 	bl	8001110 <HAL_Delay>
      ms++;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	3301      	adds	r3, #1
 8004a92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f001 fa2c 	bl	8005ef2 <USB_GetMode>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d005      	beq.n	8004aac <USB_SetCurrentMode+0x84>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2b31      	cmp	r3, #49	; 0x31
 8004aa4:	d9f0      	bls.n	8004a88 <USB_SetCurrentMode+0x60>
 8004aa6:	e001      	b.n	8004aac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e005      	b.n	8004ab8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2b32      	cmp	r3, #50	; 0x32
 8004ab0:	d101      	bne.n	8004ab6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e000      	b.n	8004ab8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ac0:	b084      	sub	sp, #16
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b086      	sub	sp, #24
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004ace:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ada:	2300      	movs	r3, #0
 8004adc:	613b      	str	r3, [r7, #16]
 8004ade:	e009      	b.n	8004af4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	3340      	adds	r3, #64	; 0x40
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	2200      	movs	r2, #0
 8004aec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	3301      	adds	r3, #1
 8004af2:	613b      	str	r3, [r7, #16]
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	2b0e      	cmp	r3, #14
 8004af8:	d9f2      	bls.n	8004ae0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d11c      	bne.n	8004b3a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b0e:	f043 0302 	orr.w	r3, r3, #2
 8004b12:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b18:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b24:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b30:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	639a      	str	r2, [r3, #56]	; 0x38
 8004b38:	e00b      	b.n	8004b52 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b58:	461a      	mov	r2, r3
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b64:	4619      	mov	r1, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	680b      	ldr	r3, [r1, #0]
 8004b70:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d10c      	bne.n	8004b92 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d104      	bne.n	8004b88 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b7e:	2100      	movs	r1, #0
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f965 	bl	8004e50 <USB_SetDevSpeed>
 8004b86:	e008      	b.n	8004b9a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b88:	2101      	movs	r1, #1
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f960 	bl	8004e50 <USB_SetDevSpeed>
 8004b90:	e003      	b.n	8004b9a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b92:	2103      	movs	r1, #3
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f95b 	bl	8004e50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b9a:	2110      	movs	r1, #16
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f8f3 	bl	8004d88 <USB_FlushTxFifo>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d001      	beq.n	8004bac <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f91f 	bl	8004df0 <USB_FlushRxFifo>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bce:	461a      	mov	r2, r3
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bda:	461a      	mov	r2, r3
 8004bdc:	2300      	movs	r3, #0
 8004bde:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004be0:	2300      	movs	r3, #0
 8004be2:	613b      	str	r3, [r7, #16]
 8004be4:	e043      	b.n	8004c6e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bfc:	d118      	bne.n	8004c30 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10a      	bne.n	8004c1a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c10:	461a      	mov	r2, r3
 8004c12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c16:	6013      	str	r3, [r2, #0]
 8004c18:	e013      	b.n	8004c42 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	015a      	lsls	r2, r3, #5
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	4413      	add	r3, r2
 8004c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c26:	461a      	mov	r2, r3
 8004c28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	e008      	b.n	8004c42 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	2300      	movs	r3, #0
 8004c40:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4e:	461a      	mov	r2, r3
 8004c50:	2300      	movs	r3, #0
 8004c52:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c60:	461a      	mov	r2, r3
 8004c62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	613b      	str	r3, [r7, #16]
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d3b7      	bcc.n	8004be6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c76:	2300      	movs	r3, #0
 8004c78:	613b      	str	r3, [r7, #16]
 8004c7a:	e043      	b.n	8004d04 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c92:	d118      	bne.n	8004cc6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10a      	bne.n	8004cb0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	015a      	lsls	r2, r3, #5
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004cac:	6013      	str	r3, [r2, #0]
 8004cae:	e013      	b.n	8004cd8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004cc2:	6013      	str	r3, [r2, #0]
 8004cc4:	e008      	b.n	8004cd8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	015a      	lsls	r2, r3, #5
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004cfc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	3301      	adds	r3, #1
 8004d02:	613b      	str	r3, [r7, #16]
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d3b7      	bcc.n	8004c7c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d1e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004d2c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d105      	bne.n	8004d40 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	f043 0210 	orr.w	r2, r3, #16
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	699a      	ldr	r2, [r3, #24]
 8004d44:	4b0f      	ldr	r3, [pc, #60]	; (8004d84 <USB_DevInit+0x2c4>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d005      	beq.n	8004d5e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	f043 0208 	orr.w	r2, r3, #8
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d107      	bne.n	8004d74 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d6c:	f043 0304 	orr.w	r3, r3, #4
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d80:	b004      	add	sp, #16
 8004d82:	4770      	bx	lr
 8004d84:	803c3800 	.word	0x803c3800

08004d88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4a13      	ldr	r2, [pc, #76]	; (8004dec <USB_FlushTxFifo+0x64>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d901      	bls.n	8004da8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e01b      	b.n	8004de0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	daf2      	bge.n	8004d96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	019b      	lsls	r3, r3, #6
 8004db8:	f043 0220 	orr.w	r2, r3, #32
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	4a08      	ldr	r2, [pc, #32]	; (8004dec <USB_FlushTxFifo+0x64>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d901      	bls.n	8004dd2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e006      	b.n	8004de0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f003 0320 	and.w	r3, r3, #32
 8004dda:	2b20      	cmp	r3, #32
 8004ddc:	d0f0      	beq.n	8004dc0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	00030d40 	.word	0x00030d40

08004df0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4a11      	ldr	r2, [pc, #68]	; (8004e4c <USB_FlushRxFifo+0x5c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d901      	bls.n	8004e0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e018      	b.n	8004e40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	daf2      	bge.n	8004dfc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e16:	2300      	movs	r3, #0
 8004e18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2210      	movs	r2, #16
 8004e1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	3301      	adds	r3, #1
 8004e24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4a08      	ldr	r2, [pc, #32]	; (8004e4c <USB_FlushRxFifo+0x5c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d901      	bls.n	8004e32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e006      	b.n	8004e40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	f003 0310 	and.w	r3, r3, #16
 8004e3a:	2b10      	cmp	r3, #16
 8004e3c:	d0f0      	beq.n	8004e20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	00030d40 	.word	0x00030d40

08004e50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	78fb      	ldrb	r3, [r7, #3]
 8004e6a:	68f9      	ldr	r1, [r7, #12]
 8004e6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e70:	4313      	orrs	r3, r2
 8004e72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b087      	sub	sp, #28
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 0306 	and.w	r3, r3, #6
 8004e9a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d102      	bne.n	8004ea8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	75fb      	strb	r3, [r7, #23]
 8004ea6:	e00a      	b.n	8004ebe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d002      	beq.n	8004eb4 <USB_GetDevSpeed+0x32>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2b06      	cmp	r3, #6
 8004eb2:	d102      	bne.n	8004eba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	75fb      	strb	r3, [r7, #23]
 8004eb8:	e001      	b.n	8004ebe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004eba:	230f      	movs	r3, #15
 8004ebc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	371c      	adds	r7, #28
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	785b      	ldrb	r3, [r3, #1]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d13a      	bne.n	8004f5e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eee:	69da      	ldr	r2, [r3, #28]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	f003 030f 	and.w	r3, r3, #15
 8004ef8:	2101      	movs	r1, #1
 8004efa:	fa01 f303 	lsl.w	r3, r1, r3
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	68f9      	ldr	r1, [r7, #12]
 8004f02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f06:	4313      	orrs	r3, r2
 8004f08:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d155      	bne.n	8004fcc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	791b      	ldrb	r3, [r3, #4]
 8004f3a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f3c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	059b      	lsls	r3, r3, #22
 8004f42:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f44:	4313      	orrs	r3, r2
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	0151      	lsls	r1, r2, #5
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	440a      	add	r2, r1
 8004f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f5a:	6013      	str	r3, [r2, #0]
 8004f5c:	e036      	b.n	8004fcc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f64:	69da      	ldr	r2, [r3, #28]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	2101      	movs	r1, #1
 8004f70:	fa01 f303 	lsl.w	r3, r1, r3
 8004f74:	041b      	lsls	r3, r3, #16
 8004f76:	68f9      	ldr	r1, [r7, #12]
 8004f78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	015a      	lsls	r2, r3, #5
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4413      	add	r3, r2
 8004f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d11a      	bne.n	8004fcc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	015a      	lsls	r2, r3, #5
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	791b      	ldrb	r3, [r3, #4]
 8004fb0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004fb2:	430b      	orrs	r3, r1
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	0151      	lsls	r1, r2, #5
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	440a      	add	r2, r1
 8004fbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
	...

08004fdc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	785b      	ldrb	r3, [r3, #1]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d161      	bne.n	80050bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	015a      	lsls	r2, r3, #5
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800500a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800500e:	d11f      	bne.n	8005050 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4413      	add	r3, r2
 8005018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	0151      	lsls	r1, r2, #5
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	440a      	add	r2, r1
 8005026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800502a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800502e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4413      	add	r3, r2
 8005038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	0151      	lsls	r1, r2, #5
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	440a      	add	r2, r1
 8005046:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800504a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800504e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005056:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	f003 030f 	and.w	r3, r3, #15
 8005060:	2101      	movs	r1, #1
 8005062:	fa01 f303 	lsl.w	r3, r1, r3
 8005066:	b29b      	uxth	r3, r3
 8005068:	43db      	mvns	r3, r3
 800506a:	68f9      	ldr	r1, [r7, #12]
 800506c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005070:	4013      	ands	r3, r2
 8005072:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507a:	69da      	ldr	r2, [r3, #28]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	f003 030f 	and.w	r3, r3, #15
 8005084:	2101      	movs	r1, #1
 8005086:	fa01 f303 	lsl.w	r3, r1, r3
 800508a:	b29b      	uxth	r3, r3
 800508c:	43db      	mvns	r3, r3
 800508e:	68f9      	ldr	r1, [r7, #12]
 8005090:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005094:	4013      	ands	r3, r2
 8005096:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	0159      	lsls	r1, r3, #5
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	440b      	add	r3, r1
 80050ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b2:	4619      	mov	r1, r3
 80050b4:	4b35      	ldr	r3, [pc, #212]	; (800518c <USB_DeactivateEndpoint+0x1b0>)
 80050b6:	4013      	ands	r3, r2
 80050b8:	600b      	str	r3, [r1, #0]
 80050ba:	e060      	b.n	800517e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050d2:	d11f      	bne.n	8005114 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	0151      	lsls	r1, r2, #5
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	440a      	add	r2, r1
 80050ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	0151      	lsls	r1, r2, #5
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	440a      	add	r2, r1
 800510a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800510e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005112:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800511a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	f003 030f 	and.w	r3, r3, #15
 8005124:	2101      	movs	r1, #1
 8005126:	fa01 f303 	lsl.w	r3, r1, r3
 800512a:	041b      	lsls	r3, r3, #16
 800512c:	43db      	mvns	r3, r3
 800512e:	68f9      	ldr	r1, [r7, #12]
 8005130:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005134:	4013      	ands	r3, r2
 8005136:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800513e:	69da      	ldr	r2, [r3, #28]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	f003 030f 	and.w	r3, r3, #15
 8005148:	2101      	movs	r1, #1
 800514a:	fa01 f303 	lsl.w	r3, r1, r3
 800514e:	041b      	lsls	r3, r3, #16
 8005150:	43db      	mvns	r3, r3
 8005152:	68f9      	ldr	r1, [r7, #12]
 8005154:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005158:	4013      	ands	r3, r2
 800515a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	0159      	lsls	r1, r3, #5
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	440b      	add	r3, r1
 8005172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005176:	4619      	mov	r1, r3
 8005178:	4b05      	ldr	r3, [pc, #20]	; (8005190 <USB_DeactivateEndpoint+0x1b4>)
 800517a:	4013      	ands	r3, r2
 800517c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	ec337800 	.word	0xec337800
 8005190:	eff37800 	.word	0xeff37800

08005194 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b08a      	sub	sp, #40	; 0x28
 8005198:	af02      	add	r7, sp, #8
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	4613      	mov	r3, r2
 80051a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	785b      	ldrb	r3, [r3, #1]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	f040 815c 	bne.w	800546e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d132      	bne.n	8005224 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	0151      	lsls	r1, r2, #5
 80051d0:	69fa      	ldr	r2, [r7, #28]
 80051d2:	440a      	add	r2, r1
 80051d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	0151      	lsls	r1, r2, #5
 80051f4:	69fa      	ldr	r2, [r7, #28]
 80051f6:	440a      	add	r2, r1
 80051f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005200:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	0151      	lsls	r1, r2, #5
 8005214:	69fa      	ldr	r2, [r7, #28]
 8005216:	440a      	add	r2, r1
 8005218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800521c:	0cdb      	lsrs	r3, r3, #19
 800521e:	04db      	lsls	r3, r3, #19
 8005220:	6113      	str	r3, [r2, #16]
 8005222:	e074      	b.n	800530e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	4413      	add	r3, r2
 800522c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	0151      	lsls	r1, r2, #5
 8005236:	69fa      	ldr	r2, [r7, #28]
 8005238:	440a      	add	r2, r1
 800523a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800523e:	0cdb      	lsrs	r3, r3, #19
 8005240:	04db      	lsls	r3, r3, #19
 8005242:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	0151      	lsls	r1, r2, #5
 8005256:	69fa      	ldr	r2, [r7, #28]
 8005258:	440a      	add	r2, r1
 800525a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800525e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005262:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005266:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005274:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	6999      	ldr	r1, [r3, #24]
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	440b      	add	r3, r1
 8005280:	1e59      	subs	r1, r3, #1
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	fbb1 f3f3 	udiv	r3, r1, r3
 800528a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800528c:	4b9d      	ldr	r3, [pc, #628]	; (8005504 <USB_EPStartXfer+0x370>)
 800528e:	400b      	ands	r3, r1
 8005290:	69b9      	ldr	r1, [r7, #24]
 8005292:	0148      	lsls	r0, r1, #5
 8005294:	69f9      	ldr	r1, [r7, #28]
 8005296:	4401      	add	r1, r0
 8005298:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800529c:	4313      	orrs	r3, r2
 800529e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ac:	691a      	ldr	r2, [r3, #16]
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052b6:	69b9      	ldr	r1, [r7, #24]
 80052b8:	0148      	lsls	r0, r1, #5
 80052ba:	69f9      	ldr	r1, [r7, #28]
 80052bc:	4401      	add	r1, r0
 80052be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80052c2:	4313      	orrs	r3, r2
 80052c4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	791b      	ldrb	r3, [r3, #4]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d11f      	bne.n	800530e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	015a      	lsls	r2, r3, #5
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	4413      	add	r3, r2
 80052d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	0151      	lsls	r1, r2, #5
 80052e0:	69fa      	ldr	r2, [r7, #28]
 80052e2:	440a      	add	r2, r1
 80052e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052e8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80052ec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	0151      	lsls	r1, r2, #5
 8005300:	69fa      	ldr	r2, [r7, #28]
 8005302:	440a      	add	r2, r1
 8005304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005308:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800530c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800530e:	79fb      	ldrb	r3, [r7, #7]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d14b      	bne.n	80053ac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d009      	beq.n	8005330 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005328:	461a      	mov	r2, r3
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	791b      	ldrb	r3, [r3, #4]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d128      	bne.n	800538a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005344:	2b00      	cmp	r3, #0
 8005346:	d110      	bne.n	800536a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	015a      	lsls	r2, r3, #5
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	4413      	add	r3, r2
 8005350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	0151      	lsls	r1, r2, #5
 800535a:	69fa      	ldr	r2, [r7, #28]
 800535c:	440a      	add	r2, r1
 800535e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005362:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005366:	6013      	str	r3, [r2, #0]
 8005368:	e00f      	b.n	800538a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	4413      	add	r3, r2
 8005372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	0151      	lsls	r1, r2, #5
 800537c:	69fa      	ldr	r2, [r7, #28]
 800537e:	440a      	add	r2, r1
 8005380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005388:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	015a      	lsls	r2, r3, #5
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	4413      	add	r3, r2
 8005392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	0151      	lsls	r1, r2, #5
 800539c:	69fa      	ldr	r2, [r7, #28]
 800539e:	440a      	add	r2, r1
 80053a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053a8:	6013      	str	r3, [r2, #0]
 80053aa:	e133      	b.n	8005614 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	0151      	lsls	r1, r2, #5
 80053be:	69fa      	ldr	r2, [r7, #28]
 80053c0:	440a      	add	r2, r1
 80053c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053ca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	791b      	ldrb	r3, [r3, #4]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d015      	beq.n	8005400 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 811b 	beq.w	8005614 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	f003 030f 	and.w	r3, r3, #15
 80053ee:	2101      	movs	r1, #1
 80053f0:	fa01 f303 	lsl.w	r3, r1, r3
 80053f4:	69f9      	ldr	r1, [r7, #28]
 80053f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053fa:	4313      	orrs	r3, r2
 80053fc:	634b      	str	r3, [r1, #52]	; 0x34
 80053fe:	e109      	b.n	8005614 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800540c:	2b00      	cmp	r3, #0
 800540e:	d110      	bne.n	8005432 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	0151      	lsls	r1, r2, #5
 8005422:	69fa      	ldr	r2, [r7, #28]
 8005424:	440a      	add	r2, r1
 8005426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800542a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800542e:	6013      	str	r3, [r2, #0]
 8005430:	e00f      	b.n	8005452 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	4413      	add	r3, r2
 800543a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	0151      	lsls	r1, r2, #5
 8005444:	69fa      	ldr	r2, [r7, #28]
 8005446:	440a      	add	r2, r1
 8005448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800544c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005450:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	6919      	ldr	r1, [r3, #16]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	781a      	ldrb	r2, [r3, #0]
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	b298      	uxth	r0, r3
 8005460:	79fb      	ldrb	r3, [r7, #7]
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	4603      	mov	r3, r0
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 fade 	bl	8005a28 <USB_WritePacket>
 800546c:	e0d2      	b.n	8005614 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	015a      	lsls	r2, r3, #5
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	4413      	add	r3, r2
 8005476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	0151      	lsls	r1, r2, #5
 8005480:	69fa      	ldr	r2, [r7, #28]
 8005482:	440a      	add	r2, r1
 8005484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005488:	0cdb      	lsrs	r3, r3, #19
 800548a:	04db      	lsls	r3, r3, #19
 800548c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	4413      	add	r3, r2
 8005496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	0151      	lsls	r1, r2, #5
 80054a0:	69fa      	ldr	r2, [r7, #28]
 80054a2:	440a      	add	r2, r1
 80054a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054b0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d126      	bne.n	8005508 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c6:	691a      	ldr	r2, [r3, #16]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054d0:	69b9      	ldr	r1, [r7, #24]
 80054d2:	0148      	lsls	r0, r1, #5
 80054d4:	69f9      	ldr	r1, [r7, #28]
 80054d6:	4401      	add	r1, r0
 80054d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054dc:	4313      	orrs	r3, r2
 80054de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	0151      	lsls	r1, r2, #5
 80054f2:	69fa      	ldr	r2, [r7, #28]
 80054f4:	440a      	add	r2, r1
 80054f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054fe:	6113      	str	r3, [r2, #16]
 8005500:	e03a      	b.n	8005578 <USB_EPStartXfer+0x3e4>
 8005502:	bf00      	nop
 8005504:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	699a      	ldr	r2, [r3, #24]
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	4413      	add	r3, r2
 8005512:	1e5a      	subs	r2, r3, #1
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	fbb2 f3f3 	udiv	r3, r2, r3
 800551c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	8afa      	ldrh	r2, [r7, #22]
 8005524:	fb03 f202 	mul.w	r2, r3, r2
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	4413      	add	r3, r2
 8005534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005538:	691a      	ldr	r2, [r3, #16]
 800553a:	8afb      	ldrh	r3, [r7, #22]
 800553c:	04d9      	lsls	r1, r3, #19
 800553e:	4b38      	ldr	r3, [pc, #224]	; (8005620 <USB_EPStartXfer+0x48c>)
 8005540:	400b      	ands	r3, r1
 8005542:	69b9      	ldr	r1, [r7, #24]
 8005544:	0148      	lsls	r0, r1, #5
 8005546:	69f9      	ldr	r1, [r7, #28]
 8005548:	4401      	add	r1, r0
 800554a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800554e:	4313      	orrs	r3, r2
 8005550:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	015a      	lsls	r2, r3, #5
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	4413      	add	r3, r2
 800555a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555e:	691a      	ldr	r2, [r3, #16]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	69db      	ldr	r3, [r3, #28]
 8005564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005568:	69b9      	ldr	r1, [r7, #24]
 800556a:	0148      	lsls	r0, r1, #5
 800556c:	69f9      	ldr	r1, [r7, #28]
 800556e:	4401      	add	r1, r0
 8005570:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005574:	4313      	orrs	r3, r2
 8005576:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005578:	79fb      	ldrb	r3, [r7, #7]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d10d      	bne.n	800559a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d009      	beq.n	800559a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	6919      	ldr	r1, [r3, #16]
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	4413      	add	r3, r2
 8005592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005596:	460a      	mov	r2, r1
 8005598:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	791b      	ldrb	r3, [r3, #4]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d128      	bne.n	80055f4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d110      	bne.n	80055d4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	015a      	lsls	r2, r3, #5
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	4413      	add	r3, r2
 80055ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	0151      	lsls	r1, r2, #5
 80055c4:	69fa      	ldr	r2, [r7, #28]
 80055c6:	440a      	add	r2, r1
 80055c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055d0:	6013      	str	r3, [r2, #0]
 80055d2:	e00f      	b.n	80055f4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	69ba      	ldr	r2, [r7, #24]
 80055e4:	0151      	lsls	r1, r2, #5
 80055e6:	69fa      	ldr	r2, [r7, #28]
 80055e8:	440a      	add	r2, r1
 80055ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	0151      	lsls	r1, r2, #5
 8005606:	69fa      	ldr	r2, [r7, #28]
 8005608:	440a      	add	r2, r1
 800560a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800560e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005612:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3720      	adds	r7, #32
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	1ff80000 	.word	0x1ff80000

08005624 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005624:	b480      	push	{r7}
 8005626:	b087      	sub	sp, #28
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	4613      	mov	r3, r2
 8005630:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	785b      	ldrb	r3, [r3, #1]
 8005640:	2b01      	cmp	r3, #1
 8005642:	f040 80ce 	bne.w	80057e2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d132      	bne.n	80056b4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	0151      	lsls	r1, r2, #5
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	440a      	add	r2, r1
 8005664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005668:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800566c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005670:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	4413      	add	r3, r2
 800567a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	0151      	lsls	r1, r2, #5
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	440a      	add	r2, r1
 8005688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800568c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005690:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	4413      	add	r3, r2
 800569a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	0151      	lsls	r1, r2, #5
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	440a      	add	r2, r1
 80056a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ac:	0cdb      	lsrs	r3, r3, #19
 80056ae:	04db      	lsls	r3, r3, #19
 80056b0:	6113      	str	r3, [r2, #16]
 80056b2:	e04e      	b.n	8005752 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	0151      	lsls	r1, r2, #5
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	440a      	add	r2, r1
 80056ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ce:	0cdb      	lsrs	r3, r3, #19
 80056d0:	04db      	lsls	r3, r3, #19
 80056d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	0151      	lsls	r1, r2, #5
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	440a      	add	r2, r1
 80056ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056f6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	699a      	ldr	r2, [r3, #24]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	429a      	cmp	r2, r3
 8005702:	d903      	bls.n	800570c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	68da      	ldr	r2, [r3, #12]
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	4413      	add	r3, r2
 8005714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	0151      	lsls	r1, r2, #5
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	440a      	add	r2, r1
 8005722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005726:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800572a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	4413      	add	r3, r2
 8005734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005738:	691a      	ldr	r2, [r3, #16]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005742:	6939      	ldr	r1, [r7, #16]
 8005744:	0148      	lsls	r0, r1, #5
 8005746:	6979      	ldr	r1, [r7, #20]
 8005748:	4401      	add	r1, r0
 800574a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800574e:	4313      	orrs	r3, r2
 8005750:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005752:	79fb      	ldrb	r3, [r7, #7]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d11e      	bne.n	8005796 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d009      	beq.n	8005774 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	4413      	add	r3, r2
 8005768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576c:	461a      	mov	r2, r3
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	0151      	lsls	r1, r2, #5
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	440a      	add	r2, r1
 800578a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800578e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005792:	6013      	str	r3, [r2, #0]
 8005794:	e097      	b.n	80058c6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	015a      	lsls	r2, r3, #5
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	4413      	add	r3, r2
 800579e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	0151      	lsls	r1, r2, #5
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	440a      	add	r2, r1
 80057ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057b4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f000 8083 	beq.w	80058c6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	f003 030f 	and.w	r3, r3, #15
 80057d0:	2101      	movs	r1, #1
 80057d2:	fa01 f303 	lsl.w	r3, r1, r3
 80057d6:	6979      	ldr	r1, [r7, #20]
 80057d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057dc:	4313      	orrs	r3, r2
 80057de:	634b      	str	r3, [r1, #52]	; 0x34
 80057e0:	e071      	b.n	80058c6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	0151      	lsls	r1, r2, #5
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	440a      	add	r2, r1
 80057f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057fc:	0cdb      	lsrs	r3, r3, #19
 80057fe:	04db      	lsls	r3, r3, #19
 8005800:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	4413      	add	r3, r2
 800580a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	0151      	lsls	r1, r2, #5
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	440a      	add	r2, r1
 8005818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800581c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005820:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005824:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	68da      	ldr	r2, [r3, #12]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	015a      	lsls	r2, r3, #5
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	4413      	add	r3, r2
 8005846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	0151      	lsls	r1, r2, #5
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	440a      	add	r2, r1
 8005854:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005858:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800585c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	015a      	lsls	r2, r3, #5
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	4413      	add	r3, r2
 8005866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586a:	691a      	ldr	r2, [r3, #16]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005874:	6939      	ldr	r1, [r7, #16]
 8005876:	0148      	lsls	r0, r1, #5
 8005878:	6979      	ldr	r1, [r7, #20]
 800587a:	4401      	add	r1, r0
 800587c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005880:	4313      	orrs	r3, r2
 8005882:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005884:	79fb      	ldrb	r3, [r7, #7]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d10d      	bne.n	80058a6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d009      	beq.n	80058a6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	6919      	ldr	r1, [r3, #16]
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	4413      	add	r3, r2
 800589e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a2:	460a      	mov	r2, r1
 80058a4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	0151      	lsls	r1, r2, #5
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	440a      	add	r2, r1
 80058bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	371c      	adds	r7, #28
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058de:	2300      	movs	r3, #0
 80058e0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	785b      	ldrb	r3, [r3, #1]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d14a      	bne.n	8005988 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005906:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800590a:	f040 8086 	bne.w	8005a1a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	7812      	ldrb	r2, [r2, #0]
 8005922:	0151      	lsls	r1, r2, #5
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	440a      	add	r2, r1
 8005928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800592c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005930:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	7812      	ldrb	r2, [r2, #0]
 8005946:	0151      	lsls	r1, r2, #5
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	440a      	add	r2, r1
 800594c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005950:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005954:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	3301      	adds	r3, #1
 800595a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005962:	4293      	cmp	r3, r2
 8005964:	d902      	bls.n	800596c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	75fb      	strb	r3, [r7, #23]
          break;
 800596a:	e056      	b.n	8005a1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	4413      	add	r3, r2
 8005976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005980:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005984:	d0e7      	beq.n	8005956 <USB_EPStopXfer+0x82>
 8005986:	e048      	b.n	8005a1a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	4413      	add	r3, r2
 8005992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800599c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059a0:	d13b      	bne.n	8005a1a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	683a      	ldr	r2, [r7, #0]
 80059b4:	7812      	ldrb	r2, [r2, #0]
 80059b6:	0151      	lsls	r1, r2, #5
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	440a      	add	r2, r1
 80059bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059c4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	7812      	ldrb	r2, [r2, #0]
 80059da:	0151      	lsls	r1, r2, #5
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	440a      	add	r2, r1
 80059e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	3301      	adds	r3, #1
 80059ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d902      	bls.n	8005a00 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	75fb      	strb	r3, [r7, #23]
          break;
 80059fe:	e00c      	b.n	8005a1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a18:	d0e7      	beq.n	80059ea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	371c      	adds	r7, #28
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b089      	sub	sp, #36	; 0x24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	4611      	mov	r1, r2
 8005a34:	461a      	mov	r2, r3
 8005a36:	460b      	mov	r3, r1
 8005a38:	71fb      	strb	r3, [r7, #7]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005a46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d123      	bne.n	8005a96 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a4e:	88bb      	ldrh	r3, [r7, #4]
 8005a50:	3303      	adds	r3, #3
 8005a52:	089b      	lsrs	r3, r3, #2
 8005a54:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a56:	2300      	movs	r3, #0
 8005a58:	61bb      	str	r3, [r7, #24]
 8005a5a:	e018      	b.n	8005a8e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a5c:	79fb      	ldrb	r3, [r7, #7]
 8005a5e:	031a      	lsls	r2, r3, #12
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a68:	461a      	mov	r2, r3
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	3301      	adds	r3, #1
 8005a74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	3301      	adds	r3, #1
 8005a86:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	61bb      	str	r3, [r7, #24]
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d3e2      	bcc.n	8005a5c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3724      	adds	r7, #36	; 0x24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b08b      	sub	sp, #44	; 0x2c
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005aba:	88fb      	ldrh	r3, [r7, #6]
 8005abc:	089b      	lsrs	r3, r3, #2
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005ac2:	88fb      	ldrh	r3, [r7, #6]
 8005ac4:	f003 0303 	and.w	r3, r3, #3
 8005ac8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005aca:	2300      	movs	r3, #0
 8005acc:	623b      	str	r3, [r7, #32]
 8005ace:	e014      	b.n	8005afa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	601a      	str	r2, [r3, #0]
    pDest++;
 8005adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ade:	3301      	adds	r3, #1
 8005ae0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aea:	3301      	adds	r3, #1
 8005aec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	3301      	adds	r3, #1
 8005af2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	3301      	adds	r3, #1
 8005af8:	623b      	str	r3, [r7, #32]
 8005afa:	6a3a      	ldr	r2, [r7, #32]
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d3e6      	bcc.n	8005ad0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005b02:	8bfb      	ldrh	r3, [r7, #30]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d01e      	beq.n	8005b46 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b12:	461a      	mov	r2, r3
 8005b14:	f107 0310 	add.w	r3, r7, #16
 8005b18:	6812      	ldr	r2, [r2, #0]
 8005b1a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	fa22 f303 	lsr.w	r3, r2, r3
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	701a      	strb	r2, [r3, #0]
      i++;
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	3301      	adds	r3, #1
 8005b32:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	3301      	adds	r3, #1
 8005b38:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005b3a:	8bfb      	ldrh	r3, [r7, #30]
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005b40:	8bfb      	ldrh	r3, [r7, #30]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1ea      	bne.n	8005b1c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	372c      	adds	r7, #44	; 0x2c
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	785b      	ldrb	r3, [r3, #1]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d12c      	bne.n	8005bca <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	db12      	blt.n	8005ba8 <USB_EPSetStall+0x54>
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00f      	beq.n	8005ba8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	0151      	lsls	r1, r2, #5
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	440a      	add	r2, r1
 8005b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ba6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	0151      	lsls	r1, r2, #5
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	440a      	add	r2, r1
 8005bbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bc6:	6013      	str	r3, [r2, #0]
 8005bc8:	e02b      	b.n	8005c22 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	015a      	lsls	r2, r3, #5
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	db12      	blt.n	8005c02 <USB_EPSetStall+0xae>
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00f      	beq.n	8005c02 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	0151      	lsls	r1, r2, #5
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	440a      	add	r2, r1
 8005bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bfc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c00:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	0151      	lsls	r1, r2, #5
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	440a      	add	r2, r1
 8005c18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c20:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	785b      	ldrb	r3, [r3, #1]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d128      	bne.n	8005c9e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	0151      	lsls	r1, r2, #5
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	440a      	add	r2, r1
 8005c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c6a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	791b      	ldrb	r3, [r3, #4]
 8005c70:	2b03      	cmp	r3, #3
 8005c72:	d003      	beq.n	8005c7c <USB_EPClearStall+0x4c>
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	791b      	ldrb	r3, [r3, #4]
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d138      	bne.n	8005cee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	0151      	lsls	r1, r2, #5
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	440a      	add	r2, r1
 8005c92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c9a:	6013      	str	r3, [r2, #0]
 8005c9c:	e027      	b.n	8005cee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	0151      	lsls	r1, r2, #5
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	440a      	add	r2, r1
 8005cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cb8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cbc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	791b      	ldrb	r3, [r3, #4]
 8005cc2:	2b03      	cmp	r3, #3
 8005cc4:	d003      	beq.n	8005cce <USB_EPClearStall+0x9e>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	791b      	ldrb	r3, [r3, #4]
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d10f      	bne.n	8005cee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	0151      	lsls	r1, r2, #5
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	440a      	add	r2, r1
 8005ce4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3714      	adds	r7, #20
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	460b      	mov	r3, r1
 8005d06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d1a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d1e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	78fb      	ldrb	r3, [r7, #3]
 8005d2a:	011b      	lsls	r3, r3, #4
 8005d2c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005d30:	68f9      	ldr	r1, [r7, #12]
 8005d32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d36:	4313      	orrs	r3, r2
 8005d38:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d62:	f023 0303 	bic.w	r3, r3, #3
 8005d66:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d76:	f023 0302 	bic.w	r3, r3, #2
 8005d7a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b085      	sub	sp, #20
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005da4:	f023 0303 	bic.w	r3, r3, #3
 8005da8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005db8:	f043 0302 	orr.w	r3, r3, #2
 8005dbc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3714      	adds	r7, #20
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	4013      	ands	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005de4:	68fb      	ldr	r3, [r7, #12]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b085      	sub	sp, #20
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e0e:	69db      	ldr	r3, [r3, #28]
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	4013      	ands	r3, r2
 8005e14:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	0c1b      	lsrs	r3, r3, #16
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b085      	sub	sp, #20
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	4013      	ands	r3, r2
 8005e48:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	b29b      	uxth	r3, r3
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b085      	sub	sp, #20
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
 8005e62:	460b      	mov	r3, r1
 8005e64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005e6a:	78fb      	ldrb	r3, [r7, #3]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	4013      	ands	r3, r2
 8005e86:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e88:	68bb      	ldr	r3, [r7, #8]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3714      	adds	r7, #20
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr

08005e96 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e96:	b480      	push	{r7}
 8005e98:	b087      	sub	sp, #28
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005eba:	78fb      	ldrb	r3, [r7, #3]
 8005ebc:	f003 030f 	and.w	r3, r3, #15
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec6:	01db      	lsls	r3, r3, #7
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005ed0:	78fb      	ldrb	r3, [r7, #3]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ee4:	68bb      	ldr	r3, [r7, #8]
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	371c      	adds	r7, #28
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b083      	sub	sp, #12
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	f003 0301 	and.w	r3, r3, #1
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b085      	sub	sp, #20
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f28:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005f2c:	f023 0307 	bic.w	r3, r3, #7
 8005f30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	607a      	str	r2, [r7, #4]
 8005f60:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	333c      	adds	r3, #60	; 0x3c
 8005f6a:	3304      	adds	r3, #4
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	4a26      	ldr	r2, [pc, #152]	; (800600c <USB_EP0_OutStart+0xb8>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d90a      	bls.n	8005f8e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f88:	d101      	bne.n	8005f8e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	e037      	b.n	8005ffe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f94:	461a      	mov	r2, r3
 8005f96:	2300      	movs	r3, #0
 8005f98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fa8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fbc:	f043 0318 	orr.w	r3, r3, #24
 8005fc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fd0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005fd4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005fd6:	7afb      	ldrb	r3, [r7, #11]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d10f      	bne.n	8005ffc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ff6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005ffa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	371c      	adds	r7, #28
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	4f54300a 	.word	0x4f54300a

08006010 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006018:	2300      	movs	r3, #0
 800601a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	3301      	adds	r3, #1
 8006020:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	4a13      	ldr	r2, [pc, #76]	; (8006074 <USB_CoreReset+0x64>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d901      	bls.n	800602e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e01b      	b.n	8006066 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	2b00      	cmp	r3, #0
 8006034:	daf2      	bge.n	800601c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006036:	2300      	movs	r3, #0
 8006038:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	f043 0201 	orr.w	r2, r3, #1
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	3301      	adds	r3, #1
 800604a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	4a09      	ldr	r2, [pc, #36]	; (8006074 <USB_CoreReset+0x64>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d901      	bls.n	8006058 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e006      	b.n	8006066 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b01      	cmp	r3, #1
 8006062:	d0f0      	beq.n	8006046 <USB_CoreReset+0x36>

  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3714      	adds	r7, #20
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	00030d40 	.word	0x00030d40

08006078 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f103 0208 	add.w	r2, r3, #8
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f04f 32ff 	mov.w	r2, #4294967295
 8006090:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f103 0208 	add.w	r2, r3, #8
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f103 0208 	add.w	r2, r3, #8
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80060c6:	bf00      	nop
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80060d2:	b480      	push	{r7}
 80060d4:	b085      	sub	sp, #20
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
 80060da:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	601a      	str	r2, [r3, #0]
}
 800610e:	bf00      	nop
 8006110:	3714      	adds	r7, #20
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800611a:	b480      	push	{r7}
 800611c:	b085      	sub	sp, #20
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
 8006122:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006130:	d103      	bne.n	800613a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	60fb      	str	r3, [r7, #12]
 8006138:	e00c      	b.n	8006154 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	3308      	adds	r3, #8
 800613e:	60fb      	str	r3, [r7, #12]
 8006140:	e002      	b.n	8006148 <vListInsert+0x2e>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	60fb      	str	r3, [r7, #12]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	429a      	cmp	r2, r3
 8006152:	d2f6      	bcs.n	8006142 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	683a      	ldr	r2, [r7, #0]
 8006162:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	683a      	ldr	r2, [r7, #0]
 800616e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	1c5a      	adds	r2, r3, #1
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	601a      	str	r2, [r3, #0]
}
 8006180:	bf00      	nop
 8006182:	3714      	adds	r7, #20
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	6892      	ldr	r2, [r2, #8]
 80061a2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	6852      	ldr	r2, [r2, #4]
 80061ac:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d103      	bne.n	80061c0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	689a      	ldr	r2, [r3, #8]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	1e5a      	subs	r2, r3, #1
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10a      	bne.n	800620a <xQueueGenericReset+0x2a>
        __asm volatile
 80061f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	60bb      	str	r3, [r7, #8]
    }
 8006206:	bf00      	nop
 8006208:	e7fe      	b.n	8006208 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800620a:	f001 ffd5 	bl	80081b8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006216:	68f9      	ldr	r1, [r7, #12]
 8006218:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800621a:	fb01 f303 	mul.w	r3, r1, r3
 800621e:	441a      	add	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800623a:	3b01      	subs	r3, #1
 800623c:	68f9      	ldr	r1, [r7, #12]
 800623e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006240:	fb01 f303 	mul.w	r3, r1, r3
 8006244:	441a      	add	r2, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	22ff      	movs	r2, #255	; 0xff
 800624e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	22ff      	movs	r2, #255	; 0xff
 8006256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d109      	bne.n	8006274 <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00f      	beq.n	8006288 <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	3310      	adds	r3, #16
 800626c:	4618      	mov	r0, r3
 800626e:	f001 f8b3 	bl	80073d8 <xTaskRemoveFromEventList>
 8006272:	e009      	b.n	8006288 <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	3310      	adds	r3, #16
 8006278:	4618      	mov	r0, r3
 800627a:	f7ff fefd 	bl	8006078 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	3324      	adds	r3, #36	; 0x24
 8006282:	4618      	mov	r0, r3
 8006284:	f7ff fef8 	bl	8006078 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8006288:	f001 ffc6 	bl	8008218 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800628c:	2301      	movs	r3, #1
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8006296:	b580      	push	{r7, lr}
 8006298:	b08c      	sub	sp, #48	; 0x30
 800629a:	af02      	add	r7, sp, #8
 800629c:	60f8      	str	r0, [r7, #12]
 800629e:	60b9      	str	r1, [r7, #8]
 80062a0:	4613      	mov	r3, r2
 80062a2:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10a      	bne.n	80062c0 <xQueueGenericCreate+0x2a>
        __asm volatile
 80062aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ae:	f383 8811 	msr	BASEPRI, r3
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	f3bf 8f4f 	dsb	sy
 80062ba:	61bb      	str	r3, [r7, #24]
    }
 80062bc:	bf00      	nop
 80062be:	e7fe      	b.n	80062be <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	fb02 f303 	mul.w	r3, r2, r3
 80062c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d006      	beq.n	80062de <xQueueGenericCreate+0x48>
 80062d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d101      	bne.n	80062e2 <xQueueGenericCreate+0x4c>
 80062de:	2301      	movs	r3, #1
 80062e0:	e000      	b.n	80062e4 <xQueueGenericCreate+0x4e>
 80062e2:	2300      	movs	r3, #0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10a      	bne.n	80062fe <xQueueGenericCreate+0x68>
        __asm volatile
 80062e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ec:	f383 8811 	msr	BASEPRI, r3
 80062f0:	f3bf 8f6f 	isb	sy
 80062f4:	f3bf 8f4f 	dsb	sy
 80062f8:	617b      	str	r3, [r7, #20]
    }
 80062fa:	bf00      	nop
 80062fc:	e7fe      	b.n	80062fc <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8006304:	d90a      	bls.n	800631c <xQueueGenericCreate+0x86>
        __asm volatile
 8006306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630a:	f383 8811 	msr	BASEPRI, r3
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	613b      	str	r3, [r7, #16]
    }
 8006318:	bf00      	nop
 800631a:	e7fe      	b.n	800631a <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800631c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631e:	3350      	adds	r3, #80	; 0x50
 8006320:	4618      	mov	r0, r3
 8006322:	f002 f8b9 	bl	8008498 <pvPortMalloc>
 8006326:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8006328:	6a3b      	ldr	r3, [r7, #32]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00d      	beq.n	800634a <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	3350      	adds	r3, #80	; 0x50
 8006336:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006338:	79fa      	ldrb	r2, [r7, #7]
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	4613      	mov	r3, r2
 8006340:	69fa      	ldr	r2, [r7, #28]
 8006342:	68b9      	ldr	r1, [r7, #8]
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f000 f805 	bl	8006354 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800634a:	6a3b      	ldr	r3, [r7, #32]
    }
 800634c:	4618      	mov	r0, r3
 800634e:	3728      	adds	r7, #40	; 0x28
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
 8006360:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d103      	bne.n	8006370 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	601a      	str	r2, [r3, #0]
 800636e:	e002      	b.n	8006376 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006382:	2101      	movs	r1, #1
 8006384:	69b8      	ldr	r0, [r7, #24]
 8006386:	f7ff ff2b 	bl	80061e0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	78fa      	ldrb	r2, [r7, #3]
 800638e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8006392:	78fb      	ldrb	r3, [r7, #3]
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	68f9      	ldr	r1, [r7, #12]
 8006398:	2073      	movs	r0, #115	; 0x73
 800639a:	f005 fc35 	bl	800bc08 <SEGGER_SYSVIEW_RecordU32x3>
}
 800639e:	bf00      	nop
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
	...

080063a8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b090      	sub	sp, #64	; 0x40
 80063ac:	af02      	add	r7, sp, #8
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
 80063b4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80063b6:	2300      	movs	r3, #0
 80063b8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80063be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10a      	bne.n	80063da <xQueueGenericSend+0x32>
        __asm volatile
 80063c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80063d6:	bf00      	nop
 80063d8:	e7fe      	b.n	80063d8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d103      	bne.n	80063e8 <xQueueGenericSend+0x40>
 80063e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <xQueueGenericSend+0x44>
 80063e8:	2301      	movs	r3, #1
 80063ea:	e000      	b.n	80063ee <xQueueGenericSend+0x46>
 80063ec:	2300      	movs	r3, #0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10a      	bne.n	8006408 <xQueueGenericSend+0x60>
        __asm volatile
 80063f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8006404:	bf00      	nop
 8006406:	e7fe      	b.n	8006406 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	2b02      	cmp	r3, #2
 800640c:	d103      	bne.n	8006416 <xQueueGenericSend+0x6e>
 800640e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006412:	2b01      	cmp	r3, #1
 8006414:	d101      	bne.n	800641a <xQueueGenericSend+0x72>
 8006416:	2301      	movs	r3, #1
 8006418:	e000      	b.n	800641c <xQueueGenericSend+0x74>
 800641a:	2300      	movs	r3, #0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10a      	bne.n	8006436 <xQueueGenericSend+0x8e>
        __asm volatile
 8006420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	623b      	str	r3, [r7, #32]
    }
 8006432:	bf00      	nop
 8006434:	e7fe      	b.n	8006434 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006436:	f001 f969 	bl	800770c <xTaskGetSchedulerState>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d102      	bne.n	8006446 <xQueueGenericSend+0x9e>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <xQueueGenericSend+0xa2>
 8006446:	2301      	movs	r3, #1
 8006448:	e000      	b.n	800644c <xQueueGenericSend+0xa4>
 800644a:	2300      	movs	r3, #0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10a      	bne.n	8006466 <xQueueGenericSend+0xbe>
        __asm volatile
 8006450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	61fb      	str	r3, [r7, #28]
    }
 8006462:	bf00      	nop
 8006464:	e7fe      	b.n	8006464 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006466:	f001 fea7 	bl	80081b8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800646a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006472:	429a      	cmp	r2, r3
 8006474:	d302      	bcc.n	800647c <xQueueGenericSend+0xd4>
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	2b02      	cmp	r3, #2
 800647a:	d11f      	bne.n	80064bc <xQueueGenericSend+0x114>
            {
                traceQUEUE_SEND( pxQueue );
 800647c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647e:	4618      	mov	r0, r3
 8006480:	f006 f94e 	bl	800c720 <SEGGER_SYSVIEW_ShrinkId>
 8006484:	68ba      	ldr	r2, [r7, #8]
 8006486:	6879      	ldr	r1, [r7, #4]
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	9300      	str	r3, [sp, #0]
 800648c:	460b      	mov	r3, r1
 800648e:	4601      	mov	r1, r0
 8006490:	205a      	movs	r0, #90	; 0x5a
 8006492:	f005 fc2f 	bl	800bcf4 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	68b9      	ldr	r1, [r7, #8]
 800649a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800649c:	f000 fa56 	bl	800694c <prvCopyDataToQueue>
 80064a0:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d004      	beq.n	80064b4 <xQueueGenericSend+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ac:	3324      	adds	r3, #36	; 0x24
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 ff92 	bl	80073d8 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80064b4:	f001 feb0 	bl	8008218 <vPortExitCritical>
                return pdPASS;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e07d      	b.n	80065b8 <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d110      	bne.n	80064e4 <xQueueGenericSend+0x13c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80064c2:	f001 fea9 	bl	8008218 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80064c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c8:	4618      	mov	r0, r3
 80064ca:	f006 f929 	bl	800c720 <SEGGER_SYSVIEW_ShrinkId>
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	460b      	mov	r3, r1
 80064d8:	4601      	mov	r1, r0
 80064da:	205a      	movs	r0, #90	; 0x5a
 80064dc:	f005 fc0a 	bl	800bcf4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80064e0:	2300      	movs	r3, #0
 80064e2:	e069      	b.n	80065b8 <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 80064e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d106      	bne.n	80064f8 <xQueueGenericSend+0x150>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80064ea:	f107 0314 	add.w	r3, r7, #20
 80064ee:	4618      	mov	r0, r3
 80064f0:	f000 ffd8 	bl	80074a4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80064f4:	2301      	movs	r3, #1
 80064f6:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80064f8:	f001 fe8e 	bl	8008218 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80064fc:	f000 fd54 	bl	8006fa8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006500:	f001 fe5a 	bl	80081b8 <vPortEnterCritical>
 8006504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006506:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800650a:	b25b      	sxtb	r3, r3
 800650c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006510:	d103      	bne.n	800651a <xQueueGenericSend+0x172>
 8006512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006514:	2200      	movs	r2, #0
 8006516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800651a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006520:	b25b      	sxtb	r3, r3
 8006522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006526:	d103      	bne.n	8006530 <xQueueGenericSend+0x188>
 8006528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006530:	f001 fe72 	bl	8008218 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006534:	1d3a      	adds	r2, r7, #4
 8006536:	f107 0314 	add.w	r3, r7, #20
 800653a:	4611      	mov	r1, r2
 800653c:	4618      	mov	r0, r3
 800653e:	f000 ffc7 	bl	80074d0 <xTaskCheckForTimeOut>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d124      	bne.n	8006592 <xQueueGenericSend+0x1ea>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006548:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800654a:	f000 faf7 	bl	8006b3c <prvIsQueueFull>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d018      	beq.n	8006586 <xQueueGenericSend+0x1de>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006556:	3310      	adds	r3, #16
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	4611      	mov	r1, r2
 800655c:	4618      	mov	r0, r3
 800655e:	f000 fee9 	bl	8007334 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8006562:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006564:	f000 fa82 	bl	8006a6c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8006568:	f000 fd2c 	bl	8006fc4 <xTaskResumeAll>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	f47f af79 	bne.w	8006466 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8006574:	4b12      	ldr	r3, [pc, #72]	; (80065c0 <xQueueGenericSend+0x218>)
 8006576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800657a:	601a      	str	r2, [r3, #0]
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	e76f      	b.n	8006466 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8006586:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006588:	f000 fa70 	bl	8006a6c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800658c:	f000 fd1a 	bl	8006fc4 <xTaskResumeAll>
 8006590:	e769      	b.n	8006466 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8006592:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006594:	f000 fa6a 	bl	8006a6c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006598:	f000 fd14 	bl	8006fc4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800659c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659e:	4618      	mov	r0, r3
 80065a0:	f006 f8be 	bl	800c720 <SEGGER_SYSVIEW_ShrinkId>
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	6879      	ldr	r1, [r7, #4]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	460b      	mov	r3, r1
 80065ae:	4601      	mov	r1, r0
 80065b0:	205a      	movs	r0, #90	; 0x5a
 80065b2:	f005 fb9f 	bl	800bcf4 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80065b6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3738      	adds	r7, #56	; 0x38
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	e000ed04 	.word	0xe000ed04

080065c4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b090      	sub	sp, #64	; 0x40
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
 80065d0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80065d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10a      	bne.n	80065f2 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80065dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e0:	f383 8811 	msr	BASEPRI, r3
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80065ee:	bf00      	nop
 80065f0:	e7fe      	b.n	80065f0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d103      	bne.n	8006600 <xQueueGenericSendFromISR+0x3c>
 80065f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <xQueueGenericSendFromISR+0x40>
 8006600:	2301      	movs	r3, #1
 8006602:	e000      	b.n	8006606 <xQueueGenericSendFromISR+0x42>
 8006604:	2300      	movs	r3, #0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10a      	bne.n	8006620 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800660a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660e:	f383 8811 	msr	BASEPRI, r3
 8006612:	f3bf 8f6f 	isb	sy
 8006616:	f3bf 8f4f 	dsb	sy
 800661a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800661c:	bf00      	nop
 800661e:	e7fe      	b.n	800661e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	2b02      	cmp	r3, #2
 8006624:	d103      	bne.n	800662e <xQueueGenericSendFromISR+0x6a>
 8006626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800662a:	2b01      	cmp	r3, #1
 800662c:	d101      	bne.n	8006632 <xQueueGenericSendFromISR+0x6e>
 800662e:	2301      	movs	r3, #1
 8006630:	e000      	b.n	8006634 <xQueueGenericSendFromISR+0x70>
 8006632:	2300      	movs	r3, #0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d10a      	bne.n	800664e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8006638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663c:	f383 8811 	msr	BASEPRI, r3
 8006640:	f3bf 8f6f 	isb	sy
 8006644:	f3bf 8f4f 	dsb	sy
 8006648:	623b      	str	r3, [r7, #32]
    }
 800664a:	bf00      	nop
 800664c:	e7fe      	b.n	800664c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800664e:	f001 fe9d 	bl	800838c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8006652:	f3ef 8211 	mrs	r2, BASEPRI
 8006656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	61fa      	str	r2, [r7, #28]
 8006668:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800666a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800666c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800666e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006676:	429a      	cmp	r2, r3
 8006678:	d302      	bcc.n	8006680 <xQueueGenericSendFromISR+0xbc>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2b02      	cmp	r3, #2
 800667e:	d148      	bne.n	8006712 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8006680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006682:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800668a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668e:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8006690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006692:	4618      	mov	r0, r3
 8006694:	f006 f844 	bl	800c720 <SEGGER_SYSVIEW_ShrinkId>
 8006698:	4601      	mov	r1, r0
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	461a      	mov	r2, r3
 800669e:	2060      	movs	r0, #96	; 0x60
 80066a0:	f005 fa58 	bl	800bb54 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80066a4:	683a      	ldr	r2, [r7, #0]
 80066a6:	68b9      	ldr	r1, [r7, #8]
 80066a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80066aa:	f000 f94f 	bl	800694c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80066ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80066b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b6:	d112      	bne.n	80066de <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d025      	beq.n	800670c <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c2:	3324      	adds	r3, #36	; 0x24
 80066c4:	4618      	mov	r0, r3
 80066c6:	f000 fe87 	bl	80073d8 <xTaskRemoveFromEventList>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d01d      	beq.n	800670c <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d01a      	beq.n	800670c <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	601a      	str	r2, [r3, #0]
 80066dc:	e016      	b.n	800670c <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80066de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80066e2:	2b7f      	cmp	r3, #127	; 0x7f
 80066e4:	d10a      	bne.n	80066fc <xQueueGenericSendFromISR+0x138>
        __asm volatile
 80066e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	617b      	str	r3, [r7, #20]
    }
 80066f8:	bf00      	nop
 80066fa:	e7fe      	b.n	80066fa <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80066fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006700:	3301      	adds	r3, #1
 8006702:	b2db      	uxtb	r3, r3
 8006704:	b25a      	sxtb	r2, r3
 8006706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800670c:	2301      	movs	r3, #1
 800670e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8006710:	e00b      	b.n	800672a <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8006712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006714:	4618      	mov	r0, r3
 8006716:	f006 f803 	bl	800c720 <SEGGER_SYSVIEW_ShrinkId>
 800671a:	4601      	mov	r1, r0
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	461a      	mov	r2, r3
 8006720:	2060      	movs	r0, #96	; 0x60
 8006722:	f005 fa17 	bl	800bb54 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8006726:	2300      	movs	r3, #0
 8006728:	63fb      	str	r3, [r7, #60]	; 0x3c
 800672a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800672c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8006734:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8006736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006738:	4618      	mov	r0, r3
 800673a:	3740      	adds	r7, #64	; 0x40
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8006740:	b590      	push	{r4, r7, lr}
 8006742:	b08f      	sub	sp, #60	; 0x3c
 8006744:	af02      	add	r7, sp, #8
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800674c:	2300      	movs	r3, #0
 800674e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8006754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10a      	bne.n	8006770 <xQueueReceive+0x30>
        __asm volatile
 800675a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	623b      	str	r3, [r7, #32]
    }
 800676c:	bf00      	nop
 800676e:	e7fe      	b.n	800676e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d103      	bne.n	800677e <xQueueReceive+0x3e>
 8006776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <xQueueReceive+0x42>
 800677e:	2301      	movs	r3, #1
 8006780:	e000      	b.n	8006784 <xQueueReceive+0x44>
 8006782:	2300      	movs	r3, #0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10a      	bne.n	800679e <xQueueReceive+0x5e>
        __asm volatile
 8006788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678c:	f383 8811 	msr	BASEPRI, r3
 8006790:	f3bf 8f6f 	isb	sy
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	61fb      	str	r3, [r7, #28]
    }
 800679a:	bf00      	nop
 800679c:	e7fe      	b.n	800679c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800679e:	f000 ffb5 	bl	800770c <xTaskGetSchedulerState>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d102      	bne.n	80067ae <xQueueReceive+0x6e>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d101      	bne.n	80067b2 <xQueueReceive+0x72>
 80067ae:	2301      	movs	r3, #1
 80067b0:	e000      	b.n	80067b4 <xQueueReceive+0x74>
 80067b2:	2300      	movs	r3, #0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10a      	bne.n	80067ce <xQueueReceive+0x8e>
        __asm volatile
 80067b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	61bb      	str	r3, [r7, #24]
    }
 80067ca:	bf00      	nop
 80067cc:	e7fe      	b.n	80067cc <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80067ce:	f001 fcf3 	bl	80081b8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d024      	beq.n	8006828 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80067de:	68b9      	ldr	r1, [r7, #8]
 80067e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067e2:	f000 f91d 	bl	8006a20 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80067e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e8:	4618      	mov	r0, r3
 80067ea:	f005 ff99 	bl	800c720 <SEGGER_SYSVIEW_ShrinkId>
 80067ee:	4604      	mov	r4, r0
 80067f0:	2000      	movs	r0, #0
 80067f2:	f005 ff95 	bl	800c720 <SEGGER_SYSVIEW_ShrinkId>
 80067f6:	4602      	mov	r2, r0
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2101      	movs	r1, #1
 80067fc:	9100      	str	r1, [sp, #0]
 80067fe:	4621      	mov	r1, r4
 8006800:	205c      	movs	r0, #92	; 0x5c
 8006802:	f005 fa77 	bl	800bcf4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006808:	1e5a      	subs	r2, r3, #1
 800680a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800680e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d004      	beq.n	8006820 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006818:	3310      	adds	r3, #16
 800681a:	4618      	mov	r0, r3
 800681c:	f000 fddc 	bl	80073d8 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8006820:	f001 fcfa 	bl	8008218 <vPortExitCritical>
                return pdPASS;
 8006824:	2301      	movs	r3, #1
 8006826:	e08a      	b.n	800693e <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d113      	bne.n	8006856 <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800682e:	f001 fcf3 	bl	8008218 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8006832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006834:	4618      	mov	r0, r3
 8006836:	f005 ff73 	bl	800c720 <SEGGER_SYSVIEW_ShrinkId>
 800683a:	4604      	mov	r4, r0
 800683c:	2000      	movs	r0, #0
 800683e:	f005 ff6f 	bl	800c720 <SEGGER_SYSVIEW_ShrinkId>
 8006842:	4602      	mov	r2, r0
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2101      	movs	r1, #1
 8006848:	9100      	str	r1, [sp, #0]
 800684a:	4621      	mov	r1, r4
 800684c:	205c      	movs	r0, #92	; 0x5c
 800684e:	f005 fa51 	bl	800bcf4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8006852:	2300      	movs	r3, #0
 8006854:	e073      	b.n	800693e <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006858:	2b00      	cmp	r3, #0
 800685a:	d106      	bne.n	800686a <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800685c:	f107 0310 	add.w	r3, r7, #16
 8006860:	4618      	mov	r0, r3
 8006862:	f000 fe1f 	bl	80074a4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006866:	2301      	movs	r3, #1
 8006868:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800686a:	f001 fcd5 	bl	8008218 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800686e:	f000 fb9b 	bl	8006fa8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006872:	f001 fca1 	bl	80081b8 <vPortEnterCritical>
 8006876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006878:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800687c:	b25b      	sxtb	r3, r3
 800687e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006882:	d103      	bne.n	800688c <xQueueReceive+0x14c>
 8006884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800688c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006892:	b25b      	sxtb	r3, r3
 8006894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006898:	d103      	bne.n	80068a2 <xQueueReceive+0x162>
 800689a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068a2:	f001 fcb9 	bl	8008218 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068a6:	1d3a      	adds	r2, r7, #4
 80068a8:	f107 0310 	add.w	r3, r7, #16
 80068ac:	4611      	mov	r1, r2
 80068ae:	4618      	mov	r0, r3
 80068b0:	f000 fe0e 	bl	80074d0 <xTaskCheckForTimeOut>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d124      	bne.n	8006904 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068bc:	f000 f928 	bl	8006b10 <prvIsQueueEmpty>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d018      	beq.n	80068f8 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80068c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c8:	3324      	adds	r3, #36	; 0x24
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	4611      	mov	r1, r2
 80068ce:	4618      	mov	r0, r3
 80068d0:	f000 fd30 	bl	8007334 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80068d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068d6:	f000 f8c9 	bl	8006a6c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80068da:	f000 fb73 	bl	8006fc4 <xTaskResumeAll>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f47f af74 	bne.w	80067ce <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80068e6:	4b18      	ldr	r3, [pc, #96]	; (8006948 <xQueueReceive+0x208>)
 80068e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068ec:	601a      	str	r2, [r3, #0]
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	e76a      	b.n	80067ce <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80068f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068fa:	f000 f8b7 	bl	8006a6c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80068fe:	f000 fb61 	bl	8006fc4 <xTaskResumeAll>
 8006902:	e764      	b.n	80067ce <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8006904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006906:	f000 f8b1 	bl	8006a6c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800690a:	f000 fb5b 	bl	8006fc4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800690e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006910:	f000 f8fe 	bl	8006b10 <prvIsQueueEmpty>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	f43f af59 	beq.w	80067ce <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800691c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691e:	4618      	mov	r0, r3
 8006920:	f005 fefe 	bl	800c720 <SEGGER_SYSVIEW_ShrinkId>
 8006924:	4604      	mov	r4, r0
 8006926:	2000      	movs	r0, #0
 8006928:	f005 fefa 	bl	800c720 <SEGGER_SYSVIEW_ShrinkId>
 800692c:	4602      	mov	r2, r0
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2101      	movs	r1, #1
 8006932:	9100      	str	r1, [sp, #0]
 8006934:	4621      	mov	r1, r4
 8006936:	205c      	movs	r0, #92	; 0x5c
 8006938:	f005 f9dc 	bl	800bcf4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800693c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800693e:	4618      	mov	r0, r3
 8006940:	3734      	adds	r7, #52	; 0x34
 8006942:	46bd      	mov	sp, r7
 8006944:	bd90      	pop	{r4, r7, pc}
 8006946:	bf00      	nop
 8006948:	e000ed04 	.word	0xe000ed04

0800694c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8006958:	2300      	movs	r3, #0
 800695a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006960:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10d      	bne.n	8006986 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d14d      	bne.n	8006a0e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	4618      	mov	r0, r3
 8006978:	f000 fee6 	bl	8007748 <xTaskPriorityDisinherit>
 800697c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	609a      	str	r2, [r3, #8]
 8006984:	e043      	b.n	8006a0e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d119      	bne.n	80069c0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6858      	ldr	r0, [r3, #4]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006994:	461a      	mov	r2, r3
 8006996:	68b9      	ldr	r1, [r7, #8]
 8006998:	f006 fd42 	bl	800d420 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a4:	441a      	add	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	685a      	ldr	r2, [r3, #4]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d32b      	bcc.n	8006a0e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	605a      	str	r2, [r3, #4]
 80069be:	e026      	b.n	8006a0e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	68d8      	ldr	r0, [r3, #12]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c8:	461a      	mov	r2, r3
 80069ca:	68b9      	ldr	r1, [r7, #8]
 80069cc:	f006 fd28 	bl	800d420 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	68da      	ldr	r2, [r3, #12]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d8:	425b      	negs	r3, r3
 80069da:	441a      	add	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	68da      	ldr	r2, [r3, #12]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d207      	bcs.n	80069fc <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	689a      	ldr	r2, [r3, #8]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f4:	425b      	negs	r3, r3
 80069f6:	441a      	add	r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d105      	bne.n	8006a0e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d002      	beq.n	8006a0e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	1c5a      	adds	r2, r3, #1
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8006a16:	697b      	ldr	r3, [r7, #20]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3718      	adds	r7, #24
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d018      	beq.n	8006a64 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68da      	ldr	r2, [r3, #12]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3a:	441a      	add	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d303      	bcc.n	8006a54 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68d9      	ldr	r1, [r3, #12]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	6838      	ldr	r0, [r7, #0]
 8006a60:	f006 fcde 	bl	800d420 <memcpy>
    }
}
 8006a64:	bf00      	nop
 8006a66:	3708      	adds	r7, #8
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8006a74:	f001 fba0 	bl	80081b8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a7e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a80:	e011      	b.n	8006aa6 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d012      	beq.n	8006ab0 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	3324      	adds	r3, #36	; 0x24
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f000 fca2 	bl	80073d8 <xTaskRemoveFromEventList>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d001      	beq.n	8006a9e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8006a9a:	f000 fd7f 	bl	800759c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8006a9e:	7bfb      	ldrb	r3, [r7, #15]
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	dce9      	bgt.n	8006a82 <prvUnlockQueue+0x16>
 8006aae:	e000      	b.n	8006ab2 <prvUnlockQueue+0x46>
                        break;
 8006ab0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	22ff      	movs	r2, #255	; 0xff
 8006ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8006aba:	f001 fbad 	bl	8008218 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8006abe:	f001 fb7b 	bl	80081b8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ac8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006aca:	e011      	b.n	8006af0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d012      	beq.n	8006afa <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	3310      	adds	r3, #16
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 fc7d 	bl	80073d8 <xTaskRemoveFromEventList>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d001      	beq.n	8006ae8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8006ae4:	f000 fd5a 	bl	800759c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8006ae8:	7bbb      	ldrb	r3, [r7, #14]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006af0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	dce9      	bgt.n	8006acc <prvUnlockQueue+0x60>
 8006af8:	e000      	b.n	8006afc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8006afa:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	22ff      	movs	r2, #255	; 0xff
 8006b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8006b04:	f001 fb88 	bl	8008218 <vPortExitCritical>
}
 8006b08:	bf00      	nop
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006b18:	f001 fb4e 	bl	80081b8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d102      	bne.n	8006b2a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8006b24:	2301      	movs	r3, #1
 8006b26:	60fb      	str	r3, [r7, #12]
 8006b28:	e001      	b.n	8006b2e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006b2e:	f001 fb73 	bl	8008218 <vPortExitCritical>

    return xReturn;
 8006b32:	68fb      	ldr	r3, [r7, #12]
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3710      	adds	r7, #16
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006b44:	f001 fb38 	bl	80081b8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d102      	bne.n	8006b5a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8006b54:	2301      	movs	r3, #1
 8006b56:	60fb      	str	r3, [r7, #12]
 8006b58:	e001      	b.n	8006b5e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006b5e:	f001 fb5b 	bl	8008218 <vPortExitCritical>

    return xReturn;
 8006b62:	68fb      	ldr	r3, [r7, #12]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b76:	2300      	movs	r3, #0
 8006b78:	60fb      	str	r3, [r7, #12]
 8006b7a:	e01e      	b.n	8006bba <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006b7c:	4a13      	ldr	r2, [pc, #76]	; (8006bcc <vQueueAddToRegistry+0x60>)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d115      	bne.n	8006bb4 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006b88:	4910      	ldr	r1, [pc, #64]	; (8006bcc <vQueueAddToRegistry+0x60>)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8006b92:	4a0e      	ldr	r2, [pc, #56]	; (8006bcc <vQueueAddToRegistry+0x60>)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	00db      	lsls	r3, r3, #3
 8006b98:	4413      	add	r3, r2
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f005 fdbd 	bl	800c720 <SEGGER_SYSVIEW_ShrinkId>
 8006ba6:	4601      	mov	r1, r0
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	461a      	mov	r2, r3
 8006bac:	2071      	movs	r0, #113	; 0x71
 8006bae:	f004 ffd1 	bl	800bb54 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8006bb2:	e006      	b.n	8006bc2 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	60fb      	str	r3, [r7, #12]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2b07      	cmp	r3, #7
 8006bbe:	d9dd      	bls.n	8006b7c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8006bc0:	bf00      	nop
 8006bc2:	bf00      	nop
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	2000031c 	.word	0x2000031c

08006bd0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006be0:	f001 faea 	bl	80081b8 <vPortEnterCritical>
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bea:	b25b      	sxtb	r3, r3
 8006bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf0:	d103      	bne.n	8006bfa <vQueueWaitForMessageRestricted+0x2a>
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c00:	b25b      	sxtb	r3, r3
 8006c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c06:	d103      	bne.n	8006c10 <vQueueWaitForMessageRestricted+0x40>
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c10:	f001 fb02 	bl	8008218 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d106      	bne.n	8006c2a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	3324      	adds	r3, #36	; 0x24
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	68b9      	ldr	r1, [r7, #8]
 8006c24:	4618      	mov	r0, r3
 8006c26:	f000 fba9 	bl	800737c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8006c2a:	6978      	ldr	r0, [r7, #20]
 8006c2c:	f7ff ff1e 	bl	8006a6c <prvUnlockQueue>
    }
 8006c30:	bf00      	nop
 8006c32:	3718      	adds	r7, #24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b08c      	sub	sp, #48	; 0x30
 8006c3c:	af04      	add	r7, sp, #16
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	603b      	str	r3, [r7, #0]
 8006c44:	4613      	mov	r3, r2
 8006c46:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c48:	88fb      	ldrh	r3, [r7, #6]
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f001 fc23 	bl	8008498 <pvPortMalloc>
 8006c52:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00e      	beq.n	8006c78 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c5a:	2058      	movs	r0, #88	; 0x58
 8006c5c:	f001 fc1c 	bl	8008498 <pvPortMalloc>
 8006c60:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d003      	beq.n	8006c70 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	631a      	str	r2, [r3, #48]	; 0x30
 8006c6e:	e005      	b.n	8006c7c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8006c70:	6978      	ldr	r0, [r7, #20]
 8006c72:	f001 fcf1 	bl	8008658 <vPortFree>
 8006c76:	e001      	b.n	8006c7c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d013      	beq.n	8006caa <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c82:	88fa      	ldrh	r2, [r7, #6]
 8006c84:	2300      	movs	r3, #0
 8006c86:	9303      	str	r3, [sp, #12]
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	9302      	str	r3, [sp, #8]
 8006c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8e:	9301      	str	r3, [sp, #4]
 8006c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	68b9      	ldr	r1, [r7, #8]
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f000 f80e 	bl	8006cba <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8006c9e:	69f8      	ldr	r0, [r7, #28]
 8006ca0:	f000 f8a2 	bl	8006de8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	61bb      	str	r3, [r7, #24]
 8006ca8:	e002      	b.n	8006cb0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006caa:	f04f 33ff 	mov.w	r3, #4294967295
 8006cae:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8006cb0:	69bb      	ldr	r3, [r7, #24]
    }
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3720      	adds	r7, #32
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b088      	sub	sp, #32
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	60f8      	str	r0, [r7, #12]
 8006cc2:	60b9      	str	r1, [r7, #8]
 8006cc4:	607a      	str	r2, [r7, #4]
 8006cc6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	21a5      	movs	r1, #165	; 0xa5
 8006cd4:	f006 fbb2 	bl	800d43c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	f023 0307 	bic.w	r3, r3, #7
 8006cf0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	f003 0307 	and.w	r3, r3, #7
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00a      	beq.n	8006d12 <prvInitialiseNewTask+0x58>
        __asm volatile
 8006cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d00:	f383 8811 	msr	BASEPRI, r3
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	617b      	str	r3, [r7, #20]
    }
 8006d0e:	bf00      	nop
 8006d10:	e7fe      	b.n	8006d10 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d01f      	beq.n	8006d58 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d18:	2300      	movs	r3, #0
 8006d1a:	61fb      	str	r3, [r7, #28]
 8006d1c:	e012      	b.n	8006d44 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	4413      	add	r3, r2
 8006d24:	7819      	ldrb	r1, [r3, #0]
 8006d26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	3334      	adds	r3, #52	; 0x34
 8006d2e:	460a      	mov	r2, r1
 8006d30:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	4413      	add	r3, r2
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d006      	beq.n	8006d4c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	3301      	adds	r3, #1
 8006d42:	61fb      	str	r3, [r7, #28]
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	2b09      	cmp	r3, #9
 8006d48:	d9e9      	bls.n	8006d1e <prvInitialiseNewTask+0x64>
 8006d4a:	e000      	b.n	8006d4e <prvInitialiseNewTask+0x94>
            {
                break;
 8006d4c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006d56:	e003      	b.n	8006d60 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d62:	2b04      	cmp	r3, #4
 8006d64:	d901      	bls.n	8006d6a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d66:	2304      	movs	r3, #4
 8006d68:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d6e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8006d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d74:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8006d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d78:	2200      	movs	r2, #0
 8006d7a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7e:	3304      	adds	r3, #4
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7ff f999 	bl	80060b8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d88:	3318      	adds	r3, #24
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7ff f994 	bl	80060b8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d94:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d98:	f1c3 0205 	rsb	r2, r3, #5
 8006d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006da4:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8006da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da8:	3350      	adds	r3, #80	; 0x50
 8006daa:	2204      	movs	r2, #4
 8006dac:	2100      	movs	r1, #0
 8006dae:	4618      	mov	r0, r3
 8006db0:	f006 fb44 	bl	800d43c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8006db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db6:	3354      	adds	r3, #84	; 0x54
 8006db8:	2201      	movs	r2, #1
 8006dba:	2100      	movs	r1, #0
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f006 fb3d 	bl	800d43c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	68f9      	ldr	r1, [r7, #12]
 8006dc6:	69b8      	ldr	r0, [r7, #24]
 8006dc8:	f001 f8c6 	bl	8007f58 <pxPortInitialiseStack>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd0:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8006dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d002      	beq.n	8006dde <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ddc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006dde:	bf00      	nop
 8006de0:	3720      	adds	r7, #32
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
	...

08006de8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8006de8:	b5b0      	push	{r4, r5, r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af02      	add	r7, sp, #8
 8006dee:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8006df0:	f001 f9e2 	bl	80081b8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8006df4:	4b35      	ldr	r3, [pc, #212]	; (8006ecc <prvAddNewTaskToReadyList+0xe4>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	4a34      	ldr	r2, [pc, #208]	; (8006ecc <prvAddNewTaskToReadyList+0xe4>)
 8006dfc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8006dfe:	4b34      	ldr	r3, [pc, #208]	; (8006ed0 <prvAddNewTaskToReadyList+0xe8>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d109      	bne.n	8006e1a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8006e06:	4a32      	ldr	r2, [pc, #200]	; (8006ed0 <prvAddNewTaskToReadyList+0xe8>)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e0c:	4b2f      	ldr	r3, [pc, #188]	; (8006ecc <prvAddNewTaskToReadyList+0xe4>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d110      	bne.n	8006e36 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8006e14:	f000 fbe0 	bl	80075d8 <prvInitialiseTaskLists>
 8006e18:	e00d      	b.n	8006e36 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8006e1a:	4b2e      	ldr	r3, [pc, #184]	; (8006ed4 <prvAddNewTaskToReadyList+0xec>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d109      	bne.n	8006e36 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e22:	4b2b      	ldr	r3, [pc, #172]	; (8006ed0 <prvAddNewTaskToReadyList+0xe8>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d802      	bhi.n	8006e36 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8006e30:	4a27      	ldr	r2, [pc, #156]	; (8006ed0 <prvAddNewTaskToReadyList+0xe8>)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8006e36:	4b28      	ldr	r3, [pc, #160]	; (8006ed8 <prvAddNewTaskToReadyList+0xf0>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	4a26      	ldr	r2, [pc, #152]	; (8006ed8 <prvAddNewTaskToReadyList+0xf0>)
 8006e3e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006e40:	4b25      	ldr	r3, [pc, #148]	; (8006ed8 <prvAddNewTaskToReadyList+0xf0>)
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d016      	beq.n	8006e7c <prvAddNewTaskToReadyList+0x94>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4618      	mov	r0, r3
 8006e52:	f005 fb3f 	bl	800c4d4 <SEGGER_SYSVIEW_OnTaskCreate>
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e66:	461d      	mov	r5, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	461c      	mov	r4, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e72:	1ae3      	subs	r3, r4, r3
 8006e74:	9300      	str	r3, [sp, #0]
 8006e76:	462b      	mov	r3, r5
 8006e78:	f003 fd3e 	bl	800a8f8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f005 fbac 	bl	800c5dc <SEGGER_SYSVIEW_OnTaskStartReady>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e88:	2201      	movs	r2, #1
 8006e8a:	409a      	lsls	r2, r3
 8006e8c:	4b13      	ldr	r3, [pc, #76]	; (8006edc <prvAddNewTaskToReadyList+0xf4>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	4a12      	ldr	r2, [pc, #72]	; (8006edc <prvAddNewTaskToReadyList+0xf4>)
 8006e94:	6013      	str	r3, [r2, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4a0f      	ldr	r2, [pc, #60]	; (8006ee0 <prvAddNewTaskToReadyList+0xf8>)
 8006ea4:	441a      	add	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	3304      	adds	r3, #4
 8006eaa:	4619      	mov	r1, r3
 8006eac:	4610      	mov	r0, r2
 8006eae:	f7ff f910 	bl	80060d2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8006eb2:	f001 f9b1 	bl	8008218 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8006eb6:	4b07      	ldr	r3, [pc, #28]	; (8006ed4 <prvAddNewTaskToReadyList+0xec>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ebe:	4b04      	ldr	r3, [pc, #16]	; (8006ed0 <prvAddNewTaskToReadyList+0xe8>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006ec2:	bf00      	nop
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bdb0      	pop	{r4, r5, r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	20000434 	.word	0x20000434
 8006ed0:	2000035c 	.word	0x2000035c
 8006ed4:	20000440 	.word	0x20000440
 8006ed8:	20000450 	.word	0x20000450
 8006edc:	2000043c 	.word	0x2000043c
 8006ee0:	20000360 	.word	0x20000360

08006ee4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8006eea:	4b27      	ldr	r3, [pc, #156]	; (8006f88 <vTaskStartScheduler+0xa4>)
 8006eec:	9301      	str	r3, [sp, #4]
 8006eee:	2300      	movs	r3, #0
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	2264      	movs	r2, #100	; 0x64
 8006ef6:	4925      	ldr	r1, [pc, #148]	; (8006f8c <vTaskStartScheduler+0xa8>)
 8006ef8:	4825      	ldr	r0, [pc, #148]	; (8006f90 <vTaskStartScheduler+0xac>)
 8006efa:	f7ff fe9d 	bl	8006c38 <xTaskCreate>
 8006efe:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d102      	bne.n	8006f0c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8006f06:	f000 fd15 	bl	8007934 <xTimerCreateTimerTask>
 8006f0a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d124      	bne.n	8006f5c <vTaskStartScheduler+0x78>
        __asm volatile
 8006f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	60bb      	str	r3, [r7, #8]
    }
 8006f24:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8006f26:	4b1b      	ldr	r3, [pc, #108]	; (8006f94 <vTaskStartScheduler+0xb0>)
 8006f28:	f04f 32ff 	mov.w	r2, #4294967295
 8006f2c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8006f2e:	4b1a      	ldr	r3, [pc, #104]	; (8006f98 <vTaskStartScheduler+0xb4>)
 8006f30:	2201      	movs	r2, #1
 8006f32:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f34:	4b19      	ldr	r3, [pc, #100]	; (8006f9c <vTaskStartScheduler+0xb8>)
 8006f36:	2200      	movs	r2, #0
 8006f38:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8006f3a:	4b19      	ldr	r3, [pc, #100]	; (8006fa0 <vTaskStartScheduler+0xbc>)
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	4b12      	ldr	r3, [pc, #72]	; (8006f88 <vTaskStartScheduler+0xa4>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d102      	bne.n	8006f4c <vTaskStartScheduler+0x68>
 8006f46:	f005 faa9 	bl	800c49c <SEGGER_SYSVIEW_OnIdle>
 8006f4a:	e004      	b.n	8006f56 <vTaskStartScheduler+0x72>
 8006f4c:	4b14      	ldr	r3, [pc, #80]	; (8006fa0 <vTaskStartScheduler+0xbc>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f005 fb01 	bl	800c558 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8006f56:	f001 f88d 	bl	8008074 <xPortStartScheduler>
 8006f5a:	e00e      	b.n	8006f7a <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f62:	d10a      	bne.n	8006f7a <vTaskStartScheduler+0x96>
        __asm volatile
 8006f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f68:	f383 8811 	msr	BASEPRI, r3
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	607b      	str	r3, [r7, #4]
    }
 8006f76:	bf00      	nop
 8006f78:	e7fe      	b.n	8006f78 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8006f7a:	4b0a      	ldr	r3, [pc, #40]	; (8006fa4 <vTaskStartScheduler+0xc0>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
}
 8006f7e:	bf00      	nop
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	20000458 	.word	0x20000458
 8006f8c:	0800dd98 	.word	0x0800dd98
 8006f90:	080075b5 	.word	0x080075b5
 8006f94:	20000454 	.word	0x20000454
 8006f98:	20000440 	.word	0x20000440
 8006f9c:	20000438 	.word	0x20000438
 8006fa0:	2000035c 	.word	0x2000035c
 8006fa4:	2000000c 	.word	0x2000000c

08006fa8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006fa8:	b480      	push	{r7}
 8006faa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8006fac:	4b04      	ldr	r3, [pc, #16]	; (8006fc0 <vTaskSuspendAll+0x18>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	4a03      	ldr	r2, [pc, #12]	; (8006fc0 <vTaskSuspendAll+0x18>)
 8006fb4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8006fb6:	bf00      	nop
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr
 8006fc0:	2000045c 	.word	0x2000045c

08006fc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8006fd2:	4b3d      	ldr	r3, [pc, #244]	; (80070c8 <xTaskResumeAll+0x104>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10a      	bne.n	8006ff0 <xTaskResumeAll+0x2c>
        __asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	603b      	str	r3, [r7, #0]
    }
 8006fec:	bf00      	nop
 8006fee:	e7fe      	b.n	8006fee <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8006ff0:	f001 f8e2 	bl	80081b8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8006ff4:	4b34      	ldr	r3, [pc, #208]	; (80070c8 <xTaskResumeAll+0x104>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	4a33      	ldr	r2, [pc, #204]	; (80070c8 <xTaskResumeAll+0x104>)
 8006ffc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ffe:	4b32      	ldr	r3, [pc, #200]	; (80070c8 <xTaskResumeAll+0x104>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d159      	bne.n	80070ba <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007006:	4b31      	ldr	r3, [pc, #196]	; (80070cc <xTaskResumeAll+0x108>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d055      	beq.n	80070ba <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800700e:	e032      	b.n	8007076 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007010:	4b2f      	ldr	r3, [pc, #188]	; (80070d0 <xTaskResumeAll+0x10c>)
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	3318      	adds	r3, #24
 800701c:	4618      	mov	r0, r3
 800701e:	f7ff f8b5 	bl	800618c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	3304      	adds	r3, #4
 8007026:	4618      	mov	r0, r3
 8007028:	f7ff f8b0 	bl	800618c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	4618      	mov	r0, r3
 8007030:	f005 fad4 	bl	800c5dc <SEGGER_SYSVIEW_OnTaskStartReady>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	2201      	movs	r2, #1
 800703a:	409a      	lsls	r2, r3
 800703c:	4b25      	ldr	r3, [pc, #148]	; (80070d4 <xTaskResumeAll+0x110>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4313      	orrs	r3, r2
 8007042:	4a24      	ldr	r2, [pc, #144]	; (80070d4 <xTaskResumeAll+0x110>)
 8007044:	6013      	str	r3, [r2, #0]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800704a:	4613      	mov	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4413      	add	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4a21      	ldr	r2, [pc, #132]	; (80070d8 <xTaskResumeAll+0x114>)
 8007054:	441a      	add	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	3304      	adds	r3, #4
 800705a:	4619      	mov	r1, r3
 800705c:	4610      	mov	r0, r2
 800705e:	f7ff f838 	bl	80060d2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007066:	4b1d      	ldr	r3, [pc, #116]	; (80070dc <xTaskResumeAll+0x118>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706c:	429a      	cmp	r2, r3
 800706e:	d302      	bcc.n	8007076 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8007070:	4b1b      	ldr	r3, [pc, #108]	; (80070e0 <xTaskResumeAll+0x11c>)
 8007072:	2201      	movs	r2, #1
 8007074:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007076:	4b16      	ldr	r3, [pc, #88]	; (80070d0 <xTaskResumeAll+0x10c>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1c8      	bne.n	8007010 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d001      	beq.n	8007088 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8007084:	f000 fb26 	bl	80076d4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007088:	4b16      	ldr	r3, [pc, #88]	; (80070e4 <xTaskResumeAll+0x120>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d010      	beq.n	80070b6 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8007094:	f000 f84a 	bl	800712c <xTaskIncrementTick>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d002      	beq.n	80070a4 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800709e:	4b10      	ldr	r3, [pc, #64]	; (80070e0 <xTaskResumeAll+0x11c>)
 80070a0:	2201      	movs	r2, #1
 80070a2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	3b01      	subs	r3, #1
 80070a8:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1f1      	bne.n	8007094 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80070b0:	4b0c      	ldr	r3, [pc, #48]	; (80070e4 <xTaskResumeAll+0x120>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80070b6:	4b0a      	ldr	r3, [pc, #40]	; (80070e0 <xTaskResumeAll+0x11c>)
 80070b8:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80070ba:	f001 f8ad 	bl	8008218 <vPortExitCritical>

    return xAlreadyYielded;
 80070be:	687b      	ldr	r3, [r7, #4]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	2000045c 	.word	0x2000045c
 80070cc:	20000434 	.word	0x20000434
 80070d0:	200003f4 	.word	0x200003f4
 80070d4:	2000043c 	.word	0x2000043c
 80070d8:	20000360 	.word	0x20000360
 80070dc:	2000035c 	.word	0x2000035c
 80070e0:	20000448 	.word	0x20000448
 80070e4:	20000444 	.word	0x20000444

080070e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80070ee:	4b05      	ldr	r3, [pc, #20]	; (8007104 <xTaskGetTickCount+0x1c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80070f4:	687b      	ldr	r3, [r7, #4]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	20000438 	.word	0x20000438

08007108 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800710e:	f001 f93d 	bl	800838c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007112:	2300      	movs	r3, #0
 8007114:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8007116:	4b04      	ldr	r3, [pc, #16]	; (8007128 <xTaskGetTickCountFromISR+0x20>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800711c:	683b      	ldr	r3, [r7, #0]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	20000438 	.word	0x20000438

0800712c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8007132:	2300      	movs	r3, #0
 8007134:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007136:	4b41      	ldr	r3, [pc, #260]	; (800723c <xTaskIncrementTick+0x110>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d173      	bne.n	8007226 <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800713e:	4b40      	ldr	r3, [pc, #256]	; (8007240 <xTaskIncrementTick+0x114>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	3301      	adds	r3, #1
 8007144:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8007146:	4a3e      	ldr	r2, [pc, #248]	; (8007240 <xTaskIncrementTick+0x114>)
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d120      	bne.n	8007194 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8007152:	4b3c      	ldr	r3, [pc, #240]	; (8007244 <xTaskIncrementTick+0x118>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00a      	beq.n	8007172 <xTaskIncrementTick+0x46>
        __asm volatile
 800715c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007160:	f383 8811 	msr	BASEPRI, r3
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	603b      	str	r3, [r7, #0]
    }
 800716e:	bf00      	nop
 8007170:	e7fe      	b.n	8007170 <xTaskIncrementTick+0x44>
 8007172:	4b34      	ldr	r3, [pc, #208]	; (8007244 <xTaskIncrementTick+0x118>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	4b33      	ldr	r3, [pc, #204]	; (8007248 <xTaskIncrementTick+0x11c>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a31      	ldr	r2, [pc, #196]	; (8007244 <xTaskIncrementTick+0x118>)
 800717e:	6013      	str	r3, [r2, #0]
 8007180:	4a31      	ldr	r2, [pc, #196]	; (8007248 <xTaskIncrementTick+0x11c>)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6013      	str	r3, [r2, #0]
 8007186:	4b31      	ldr	r3, [pc, #196]	; (800724c <xTaskIncrementTick+0x120>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	3301      	adds	r3, #1
 800718c:	4a2f      	ldr	r2, [pc, #188]	; (800724c <xTaskIncrementTick+0x120>)
 800718e:	6013      	str	r3, [r2, #0]
 8007190:	f000 faa0 	bl	80076d4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8007194:	4b2e      	ldr	r3, [pc, #184]	; (8007250 <xTaskIncrementTick+0x124>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	429a      	cmp	r2, r3
 800719c:	d348      	bcc.n	8007230 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800719e:	4b29      	ldr	r3, [pc, #164]	; (8007244 <xTaskIncrementTick+0x118>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d104      	bne.n	80071b2 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071a8:	4b29      	ldr	r3, [pc, #164]	; (8007250 <xTaskIncrementTick+0x124>)
 80071aa:	f04f 32ff 	mov.w	r2, #4294967295
 80071ae:	601a      	str	r2, [r3, #0]
                    break;
 80071b0:	e03e      	b.n	8007230 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071b2:	4b24      	ldr	r3, [pc, #144]	; (8007244 <xTaskIncrementTick+0x118>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d203      	bcs.n	80071d2 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80071ca:	4a21      	ldr	r2, [pc, #132]	; (8007250 <xTaskIncrementTick+0x124>)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80071d0:	e02e      	b.n	8007230 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	3304      	adds	r3, #4
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7fe ffd8 	bl	800618c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d004      	beq.n	80071ee <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	3318      	adds	r3, #24
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7fe ffcf 	bl	800618c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	4618      	mov	r0, r3
 80071f2:	f005 f9f3 	bl	800c5dc <SEGGER_SYSVIEW_OnTaskStartReady>
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fa:	2201      	movs	r2, #1
 80071fc:	409a      	lsls	r2, r3
 80071fe:	4b15      	ldr	r3, [pc, #84]	; (8007254 <xTaskIncrementTick+0x128>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4313      	orrs	r3, r2
 8007204:	4a13      	ldr	r2, [pc, #76]	; (8007254 <xTaskIncrementTick+0x128>)
 8007206:	6013      	str	r3, [r2, #0]
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800720c:	4613      	mov	r3, r2
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	4413      	add	r3, r2
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	4a10      	ldr	r2, [pc, #64]	; (8007258 <xTaskIncrementTick+0x12c>)
 8007216:	441a      	add	r2, r3
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	3304      	adds	r3, #4
 800721c:	4619      	mov	r1, r3
 800721e:	4610      	mov	r0, r2
 8007220:	f7fe ff57 	bl	80060d2 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007224:	e7bb      	b.n	800719e <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8007226:	4b0d      	ldr	r3, [pc, #52]	; (800725c <xTaskIncrementTick+0x130>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	3301      	adds	r3, #1
 800722c:	4a0b      	ldr	r2, [pc, #44]	; (800725c <xTaskIncrementTick+0x130>)
 800722e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8007230:	697b      	ldr	r3, [r7, #20]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3718      	adds	r7, #24
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	2000045c 	.word	0x2000045c
 8007240:	20000438 	.word	0x20000438
 8007244:	200003ec 	.word	0x200003ec
 8007248:	200003f0 	.word	0x200003f0
 800724c:	2000044c 	.word	0x2000044c
 8007250:	20000454 	.word	0x20000454
 8007254:	2000043c 	.word	0x2000043c
 8007258:	20000360 	.word	0x20000360
 800725c:	20000444 	.word	0x20000444

08007260 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007266:	4b2d      	ldr	r3, [pc, #180]	; (800731c <vTaskSwitchContext+0xbc>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800726e:	4b2c      	ldr	r3, [pc, #176]	; (8007320 <vTaskSwitchContext+0xc0>)
 8007270:	2201      	movs	r2, #1
 8007272:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8007274:	e04d      	b.n	8007312 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8007276:	4b2a      	ldr	r3, [pc, #168]	; (8007320 <vTaskSwitchContext+0xc0>)
 8007278:	2200      	movs	r2, #0
 800727a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800727c:	4b29      	ldr	r3, [pc, #164]	; (8007324 <vTaskSwitchContext+0xc4>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	fab3 f383 	clz	r3, r3
 8007288:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800728a:	7afb      	ldrb	r3, [r7, #11]
 800728c:	f1c3 031f 	rsb	r3, r3, #31
 8007290:	617b      	str	r3, [r7, #20]
 8007292:	4925      	ldr	r1, [pc, #148]	; (8007328 <vTaskSwitchContext+0xc8>)
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	4613      	mov	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4413      	add	r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	440b      	add	r3, r1
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10a      	bne.n	80072bc <vTaskSwitchContext+0x5c>
        __asm volatile
 80072a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072aa:	f383 8811 	msr	BASEPRI, r3
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	607b      	str	r3, [r7, #4]
    }
 80072b8:	bf00      	nop
 80072ba:	e7fe      	b.n	80072ba <vTaskSwitchContext+0x5a>
 80072bc:	697a      	ldr	r2, [r7, #20]
 80072be:	4613      	mov	r3, r2
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4413      	add	r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	4a18      	ldr	r2, [pc, #96]	; (8007328 <vTaskSwitchContext+0xc8>)
 80072c8:	4413      	add	r3, r2
 80072ca:	613b      	str	r3, [r7, #16]
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	685a      	ldr	r2, [r3, #4]
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	605a      	str	r2, [r3, #4]
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	685a      	ldr	r2, [r3, #4]
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	3308      	adds	r3, #8
 80072de:	429a      	cmp	r2, r3
 80072e0:	d104      	bne.n	80072ec <vTaskSwitchContext+0x8c>
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	685a      	ldr	r2, [r3, #4]
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	605a      	str	r2, [r3, #4]
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	4a0e      	ldr	r2, [pc, #56]	; (800732c <vTaskSwitchContext+0xcc>)
 80072f4:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80072f6:	4b0d      	ldr	r3, [pc, #52]	; (800732c <vTaskSwitchContext+0xcc>)
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	4b0d      	ldr	r3, [pc, #52]	; (8007330 <vTaskSwitchContext+0xd0>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d102      	bne.n	8007308 <vTaskSwitchContext+0xa8>
 8007302:	f005 f8cb 	bl	800c49c <SEGGER_SYSVIEW_OnIdle>
}
 8007306:	e004      	b.n	8007312 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8007308:	4b08      	ldr	r3, [pc, #32]	; (800732c <vTaskSwitchContext+0xcc>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4618      	mov	r0, r3
 800730e:	f005 f923 	bl	800c558 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8007312:	bf00      	nop
 8007314:	3718      	adds	r7, #24
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	2000045c 	.word	0x2000045c
 8007320:	20000448 	.word	0x20000448
 8007324:	2000043c 	.word	0x2000043c
 8007328:	20000360 	.word	0x20000360
 800732c:	2000035c 	.word	0x2000035c
 8007330:	20000458 	.word	0x20000458

08007334 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10a      	bne.n	800735a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8007344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007348:	f383 8811 	msr	BASEPRI, r3
 800734c:	f3bf 8f6f 	isb	sy
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	60fb      	str	r3, [r7, #12]
    }
 8007356:	bf00      	nop
 8007358:	e7fe      	b.n	8007358 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800735a:	4b07      	ldr	r3, [pc, #28]	; (8007378 <vTaskPlaceOnEventList+0x44>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	3318      	adds	r3, #24
 8007360:	4619      	mov	r1, r3
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f7fe fed9 	bl	800611a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007368:	2101      	movs	r1, #1
 800736a:	6838      	ldr	r0, [r7, #0]
 800736c:	f000 fa70 	bl	8007850 <prvAddCurrentTaskToDelayedList>
}
 8007370:	bf00      	nop
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	2000035c 	.word	0x2000035c

0800737c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800737c:	b580      	push	{r7, lr}
 800737e:	b086      	sub	sp, #24
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10a      	bne.n	80073a4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800738e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	617b      	str	r3, [r7, #20]
    }
 80073a0:	bf00      	nop
 80073a2:	e7fe      	b.n	80073a2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073a4:	4b0b      	ldr	r3, [pc, #44]	; (80073d4 <vTaskPlaceOnEventListRestricted+0x58>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	3318      	adds	r3, #24
 80073aa:	4619      	mov	r1, r3
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f7fe fe90 	bl	80060d2 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d002      	beq.n	80073be <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80073b8:	f04f 33ff 	mov.w	r3, #4294967295
 80073bc:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80073be:	2024      	movs	r0, #36	; 0x24
 80073c0:	f004 fb6e 	bl	800baa0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80073c4:	6879      	ldr	r1, [r7, #4]
 80073c6:	68b8      	ldr	r0, [r7, #8]
 80073c8:	f000 fa42 	bl	8007850 <prvAddCurrentTaskToDelayedList>
    }
 80073cc:	bf00      	nop
 80073ce:	3718      	adds	r7, #24
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	2000035c 	.word	0x2000035c

080073d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10a      	bne.n	8007404 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80073ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f2:	f383 8811 	msr	BASEPRI, r3
 80073f6:	f3bf 8f6f 	isb	sy
 80073fa:	f3bf 8f4f 	dsb	sy
 80073fe:	60fb      	str	r3, [r7, #12]
    }
 8007400:	bf00      	nop
 8007402:	e7fe      	b.n	8007402 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	3318      	adds	r3, #24
 8007408:	4618      	mov	r0, r3
 800740a:	f7fe febf 	bl	800618c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800740e:	4b1f      	ldr	r3, [pc, #124]	; (800748c <xTaskRemoveFromEventList+0xb4>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d120      	bne.n	8007458 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	3304      	adds	r3, #4
 800741a:	4618      	mov	r0, r3
 800741c:	f7fe feb6 	bl	800618c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	4618      	mov	r0, r3
 8007424:	f005 f8da 	bl	800c5dc <SEGGER_SYSVIEW_OnTaskStartReady>
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742c:	2201      	movs	r2, #1
 800742e:	409a      	lsls	r2, r3
 8007430:	4b17      	ldr	r3, [pc, #92]	; (8007490 <xTaskRemoveFromEventList+0xb8>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4313      	orrs	r3, r2
 8007436:	4a16      	ldr	r2, [pc, #88]	; (8007490 <xTaskRemoveFromEventList+0xb8>)
 8007438:	6013      	str	r3, [r2, #0]
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800743e:	4613      	mov	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4413      	add	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4a13      	ldr	r2, [pc, #76]	; (8007494 <xTaskRemoveFromEventList+0xbc>)
 8007448:	441a      	add	r2, r3
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	3304      	adds	r3, #4
 800744e:	4619      	mov	r1, r3
 8007450:	4610      	mov	r0, r2
 8007452:	f7fe fe3e 	bl	80060d2 <vListInsertEnd>
 8007456:	e005      	b.n	8007464 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	3318      	adds	r3, #24
 800745c:	4619      	mov	r1, r3
 800745e:	480e      	ldr	r0, [pc, #56]	; (8007498 <xTaskRemoveFromEventList+0xc0>)
 8007460:	f7fe fe37 	bl	80060d2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007468:	4b0c      	ldr	r3, [pc, #48]	; (800749c <xTaskRemoveFromEventList+0xc4>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746e:	429a      	cmp	r2, r3
 8007470:	d905      	bls.n	800747e <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8007472:	2301      	movs	r3, #1
 8007474:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8007476:	4b0a      	ldr	r3, [pc, #40]	; (80074a0 <xTaskRemoveFromEventList+0xc8>)
 8007478:	2201      	movs	r2, #1
 800747a:	601a      	str	r2, [r3, #0]
 800747c:	e001      	b.n	8007482 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800747e:	2300      	movs	r3, #0
 8007480:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8007482:	697b      	ldr	r3, [r7, #20]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3718      	adds	r7, #24
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	2000045c 	.word	0x2000045c
 8007490:	2000043c 	.word	0x2000043c
 8007494:	20000360 	.word	0x20000360
 8007498:	200003f4 	.word	0x200003f4
 800749c:	2000035c 	.word	0x2000035c
 80074a0:	20000448 	.word	0x20000448

080074a4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80074ac:	4b06      	ldr	r3, [pc, #24]	; (80074c8 <vTaskInternalSetTimeOutState+0x24>)
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80074b4:	4b05      	ldr	r3, [pc, #20]	; (80074cc <vTaskInternalSetTimeOutState+0x28>)
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	605a      	str	r2, [r3, #4]
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	2000044c 	.word	0x2000044c
 80074cc:	20000438 	.word	0x20000438

080074d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b088      	sub	sp, #32
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10a      	bne.n	80074f6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	613b      	str	r3, [r7, #16]
    }
 80074f2:	bf00      	nop
 80074f4:	e7fe      	b.n	80074f4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d10a      	bne.n	8007512 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80074fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007500:	f383 8811 	msr	BASEPRI, r3
 8007504:	f3bf 8f6f 	isb	sy
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	60fb      	str	r3, [r7, #12]
    }
 800750e:	bf00      	nop
 8007510:	e7fe      	b.n	8007510 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8007512:	f000 fe51 	bl	80081b8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8007516:	4b1f      	ldr	r3, [pc, #124]	; (8007594 <xTaskCheckForTimeOut+0xc4>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	69ba      	ldr	r2, [r7, #24]
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800752e:	d102      	bne.n	8007536 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8007530:	2300      	movs	r3, #0
 8007532:	61fb      	str	r3, [r7, #28]
 8007534:	e026      	b.n	8007584 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	4b17      	ldr	r3, [pc, #92]	; (8007598 <xTaskCheckForTimeOut+0xc8>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	429a      	cmp	r2, r3
 8007540:	d00a      	beq.n	8007558 <xTaskCheckForTimeOut+0x88>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	69ba      	ldr	r2, [r7, #24]
 8007548:	429a      	cmp	r2, r3
 800754a:	d305      	bcc.n	8007558 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800754c:	2301      	movs	r3, #1
 800754e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	2200      	movs	r2, #0
 8007554:	601a      	str	r2, [r3, #0]
 8007556:	e015      	b.n	8007584 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	697a      	ldr	r2, [r7, #20]
 800755e:	429a      	cmp	r2, r3
 8007560:	d20b      	bcs.n	800757a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	1ad2      	subs	r2, r2, r3
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7ff ff98 	bl	80074a4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8007574:	2300      	movs	r3, #0
 8007576:	61fb      	str	r3, [r7, #28]
 8007578:	e004      	b.n	8007584 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	2200      	movs	r2, #0
 800757e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8007580:	2301      	movs	r3, #1
 8007582:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8007584:	f000 fe48 	bl	8008218 <vPortExitCritical>

    return xReturn;
 8007588:	69fb      	ldr	r3, [r7, #28]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3720      	adds	r7, #32
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	20000438 	.word	0x20000438
 8007598:	2000044c 	.word	0x2000044c

0800759c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800759c:	b480      	push	{r7}
 800759e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80075a0:	4b03      	ldr	r3, [pc, #12]	; (80075b0 <vTaskMissedYield+0x14>)
 80075a2:	2201      	movs	r2, #1
 80075a4:	601a      	str	r2, [r3, #0]
}
 80075a6:	bf00      	nop
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr
 80075b0:	20000448 	.word	0x20000448

080075b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80075bc:	f000 f84c 	bl	8007658 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 80075c0:	4b04      	ldr	r3, [pc, #16]	; (80075d4 <prvIdleTask+0x20>)
 80075c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075c6:	601a      	str	r2, [r3, #0]
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80075d0:	e7f4      	b.n	80075bc <prvIdleTask+0x8>
 80075d2:	bf00      	nop
 80075d4:	e000ed04 	.word	0xe000ed04

080075d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075de:	2300      	movs	r3, #0
 80075e0:	607b      	str	r3, [r7, #4]
 80075e2:	e00c      	b.n	80075fe <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	4613      	mov	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4413      	add	r3, r2
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4a12      	ldr	r2, [pc, #72]	; (8007638 <prvInitialiseTaskLists+0x60>)
 80075f0:	4413      	add	r3, r2
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7fe fd40 	bl	8006078 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	3301      	adds	r3, #1
 80075fc:	607b      	str	r3, [r7, #4]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b04      	cmp	r3, #4
 8007602:	d9ef      	bls.n	80075e4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8007604:	480d      	ldr	r0, [pc, #52]	; (800763c <prvInitialiseTaskLists+0x64>)
 8007606:	f7fe fd37 	bl	8006078 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800760a:	480d      	ldr	r0, [pc, #52]	; (8007640 <prvInitialiseTaskLists+0x68>)
 800760c:	f7fe fd34 	bl	8006078 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8007610:	480c      	ldr	r0, [pc, #48]	; (8007644 <prvInitialiseTaskLists+0x6c>)
 8007612:	f7fe fd31 	bl	8006078 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8007616:	480c      	ldr	r0, [pc, #48]	; (8007648 <prvInitialiseTaskLists+0x70>)
 8007618:	f7fe fd2e 	bl	8006078 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800761c:	480b      	ldr	r0, [pc, #44]	; (800764c <prvInitialiseTaskLists+0x74>)
 800761e:	f7fe fd2b 	bl	8006078 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8007622:	4b0b      	ldr	r3, [pc, #44]	; (8007650 <prvInitialiseTaskLists+0x78>)
 8007624:	4a05      	ldr	r2, [pc, #20]	; (800763c <prvInitialiseTaskLists+0x64>)
 8007626:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007628:	4b0a      	ldr	r3, [pc, #40]	; (8007654 <prvInitialiseTaskLists+0x7c>)
 800762a:	4a05      	ldr	r2, [pc, #20]	; (8007640 <prvInitialiseTaskLists+0x68>)
 800762c:	601a      	str	r2, [r3, #0]
}
 800762e:	bf00      	nop
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	20000360 	.word	0x20000360
 800763c:	200003c4 	.word	0x200003c4
 8007640:	200003d8 	.word	0x200003d8
 8007644:	200003f4 	.word	0x200003f4
 8007648:	20000408 	.word	0x20000408
 800764c:	20000420 	.word	0x20000420
 8007650:	200003ec 	.word	0x200003ec
 8007654:	200003f0 	.word	0x200003f0

08007658 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800765e:	e019      	b.n	8007694 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8007660:	f000 fdaa 	bl	80081b8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007664:	4b10      	ldr	r3, [pc, #64]	; (80076a8 <prvCheckTasksWaitingTermination+0x50>)
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	3304      	adds	r3, #4
 8007670:	4618      	mov	r0, r3
 8007672:	f7fe fd8b 	bl	800618c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8007676:	4b0d      	ldr	r3, [pc, #52]	; (80076ac <prvCheckTasksWaitingTermination+0x54>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	3b01      	subs	r3, #1
 800767c:	4a0b      	ldr	r2, [pc, #44]	; (80076ac <prvCheckTasksWaitingTermination+0x54>)
 800767e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8007680:	4b0b      	ldr	r3, [pc, #44]	; (80076b0 <prvCheckTasksWaitingTermination+0x58>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	3b01      	subs	r3, #1
 8007686:	4a0a      	ldr	r2, [pc, #40]	; (80076b0 <prvCheckTasksWaitingTermination+0x58>)
 8007688:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800768a:	f000 fdc5 	bl	8008218 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f810 	bl	80076b4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007694:	4b06      	ldr	r3, [pc, #24]	; (80076b0 <prvCheckTasksWaitingTermination+0x58>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1e1      	bne.n	8007660 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800769c:	bf00      	nop
 800769e:	bf00      	nop
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	20000408 	.word	0x20000408
 80076ac:	20000434 	.word	0x20000434
 80076b0:	2000041c 	.word	0x2000041c

080076b4 <prvDeleteTCB>:


#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 ffc9 	bl	8008658 <vPortFree>
                vPortFree( pxTCB );
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 ffc6 	bl	8008658 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80076cc:	bf00      	nop
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80076d4:	b480      	push	{r7}
 80076d6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076d8:	4b0a      	ldr	r3, [pc, #40]	; (8007704 <prvResetNextTaskUnblockTime+0x30>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d104      	bne.n	80076ec <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80076e2:	4b09      	ldr	r3, [pc, #36]	; (8007708 <prvResetNextTaskUnblockTime+0x34>)
 80076e4:	f04f 32ff 	mov.w	r2, #4294967295
 80076e8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80076ea:	e005      	b.n	80076f8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80076ec:	4b05      	ldr	r3, [pc, #20]	; (8007704 <prvResetNextTaskUnblockTime+0x30>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a04      	ldr	r2, [pc, #16]	; (8007708 <prvResetNextTaskUnblockTime+0x34>)
 80076f6:	6013      	str	r3, [r2, #0]
}
 80076f8:	bf00      	nop
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	200003ec 	.word	0x200003ec
 8007708:	20000454 	.word	0x20000454

0800770c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8007712:	4b0b      	ldr	r3, [pc, #44]	; (8007740 <xTaskGetSchedulerState+0x34>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d102      	bne.n	8007720 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800771a:	2301      	movs	r3, #1
 800771c:	607b      	str	r3, [r7, #4]
 800771e:	e008      	b.n	8007732 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007720:	4b08      	ldr	r3, [pc, #32]	; (8007744 <xTaskGetSchedulerState+0x38>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d102      	bne.n	800772e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8007728:	2302      	movs	r3, #2
 800772a:	607b      	str	r3, [r7, #4]
 800772c:	e001      	b.n	8007732 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800772e:	2300      	movs	r3, #0
 8007730:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8007732:	687b      	ldr	r3, [r7, #4]
    }
 8007734:	4618      	mov	r0, r3
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr
 8007740:	20000440 	.word	0x20000440
 8007744:	2000045c 	.word	0x2000045c

08007748 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8007748:	b580      	push	{r7, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8007754:	2300      	movs	r3, #0
 8007756:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d06c      	beq.n	8007838 <xTaskPriorityDisinherit+0xf0>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800775e:	4b39      	ldr	r3, [pc, #228]	; (8007844 <xTaskPriorityDisinherit+0xfc>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	693a      	ldr	r2, [r7, #16]
 8007764:	429a      	cmp	r2, r3
 8007766:	d00a      	beq.n	800777e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8007768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776c:	f383 8811 	msr	BASEPRI, r3
 8007770:	f3bf 8f6f 	isb	sy
 8007774:	f3bf 8f4f 	dsb	sy
 8007778:	60fb      	str	r3, [r7, #12]
    }
 800777a:	bf00      	nop
 800777c:	e7fe      	b.n	800777c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10a      	bne.n	800779c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8007786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778a:	f383 8811 	msr	BASEPRI, r3
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f3bf 8f4f 	dsb	sy
 8007796:	60bb      	str	r3, [r7, #8]
    }
 8007798:	bf00      	nop
 800779a:	e7fe      	b.n	800779a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077a0:	1e5a      	subs	r2, r3, #1
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d042      	beq.n	8007838 <xTaskPriorityDisinherit+0xf0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d13e      	bne.n	8007838 <xTaskPriorityDisinherit+0xf0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	3304      	adds	r3, #4
 80077be:	4618      	mov	r0, r3
 80077c0:	f7fe fce4 	bl	800618c <uxListRemove>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10a      	bne.n	80077e0 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ce:	2201      	movs	r2, #1
 80077d0:	fa02 f303 	lsl.w	r3, r2, r3
 80077d4:	43da      	mvns	r2, r3
 80077d6:	4b1c      	ldr	r3, [pc, #112]	; (8007848 <xTaskPriorityDisinherit+0x100>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4013      	ands	r3, r2
 80077dc:	4a1a      	ldr	r2, [pc, #104]	; (8007848 <xTaskPriorityDisinherit+0x100>)
 80077de:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4619      	mov	r1, r3
 80077e4:	204a      	movs	r0, #74	; 0x4a
 80077e6:	f004 f979 	bl	800badc <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f6:	f1c3 0205 	rsb	r2, r3, #5
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	4618      	mov	r0, r3
 8007802:	f004 feeb 	bl	800c5dc <SEGGER_SYSVIEW_OnTaskStartReady>
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780a:	2201      	movs	r2, #1
 800780c:	409a      	lsls	r2, r3
 800780e:	4b0e      	ldr	r3, [pc, #56]	; (8007848 <xTaskPriorityDisinherit+0x100>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4313      	orrs	r3, r2
 8007814:	4a0c      	ldr	r2, [pc, #48]	; (8007848 <xTaskPriorityDisinherit+0x100>)
 8007816:	6013      	str	r3, [r2, #0]
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800781c:	4613      	mov	r3, r2
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	4413      	add	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	4a09      	ldr	r2, [pc, #36]	; (800784c <xTaskPriorityDisinherit+0x104>)
 8007826:	441a      	add	r2, r3
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	3304      	adds	r3, #4
 800782c:	4619      	mov	r1, r3
 800782e:	4610      	mov	r0, r2
 8007830:	f7fe fc4f 	bl	80060d2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8007834:	2301      	movs	r3, #1
 8007836:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007838:	697b      	ldr	r3, [r7, #20]
    }
 800783a:	4618      	mov	r0, r3
 800783c:	3718      	adds	r7, #24
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	2000035c 	.word	0x2000035c
 8007848:	2000043c 	.word	0x2000043c
 800784c:	20000360 	.word	0x20000360

08007850 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800785a:	4b2f      	ldr	r3, [pc, #188]	; (8007918 <prvAddCurrentTaskToDelayedList+0xc8>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007860:	4b2e      	ldr	r3, [pc, #184]	; (800791c <prvAddCurrentTaskToDelayedList+0xcc>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	3304      	adds	r3, #4
 8007866:	4618      	mov	r0, r3
 8007868:	f7fe fc90 	bl	800618c <uxListRemove>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10b      	bne.n	800788a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007872:	4b2a      	ldr	r3, [pc, #168]	; (800791c <prvAddCurrentTaskToDelayedList+0xcc>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007878:	2201      	movs	r2, #1
 800787a:	fa02 f303 	lsl.w	r3, r2, r3
 800787e:	43da      	mvns	r2, r3
 8007880:	4b27      	ldr	r3, [pc, #156]	; (8007920 <prvAddCurrentTaskToDelayedList+0xd0>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4013      	ands	r3, r2
 8007886:	4a26      	ldr	r2, [pc, #152]	; (8007920 <prvAddCurrentTaskToDelayedList+0xd0>)
 8007888:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007890:	d10a      	bne.n	80078a8 <prvAddCurrentTaskToDelayedList+0x58>
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d007      	beq.n	80078a8 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007898:	4b20      	ldr	r3, [pc, #128]	; (800791c <prvAddCurrentTaskToDelayedList+0xcc>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	3304      	adds	r3, #4
 800789e:	4619      	mov	r1, r3
 80078a0:	4820      	ldr	r0, [pc, #128]	; (8007924 <prvAddCurrentTaskToDelayedList+0xd4>)
 80078a2:	f7fe fc16 	bl	80060d2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80078a6:	e032      	b.n	800790e <prvAddCurrentTaskToDelayedList+0xbe>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4413      	add	r3, r2
 80078ae:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80078b0:	4b1a      	ldr	r3, [pc, #104]	; (800791c <prvAddCurrentTaskToDelayedList+0xcc>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80078b8:	68ba      	ldr	r2, [r7, #8]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d20f      	bcs.n	80078e0 <prvAddCurrentTaskToDelayedList+0x90>
                    traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80078c0:	4b16      	ldr	r3, [pc, #88]	; (800791c <prvAddCurrentTaskToDelayedList+0xcc>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2104      	movs	r1, #4
 80078c6:	4618      	mov	r0, r3
 80078c8:	f004 feca 	bl	800c660 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078cc:	4b16      	ldr	r3, [pc, #88]	; (8007928 <prvAddCurrentTaskToDelayedList+0xd8>)
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	4b12      	ldr	r3, [pc, #72]	; (800791c <prvAddCurrentTaskToDelayedList+0xcc>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	3304      	adds	r3, #4
 80078d6:	4619      	mov	r1, r3
 80078d8:	4610      	mov	r0, r2
 80078da:	f7fe fc1e 	bl	800611a <vListInsert>
}
 80078de:	e016      	b.n	800790e <prvAddCurrentTaskToDelayedList+0xbe>
                    traceMOVED_TASK_TO_DELAYED_LIST();
 80078e0:	4b0e      	ldr	r3, [pc, #56]	; (800791c <prvAddCurrentTaskToDelayedList+0xcc>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2104      	movs	r1, #4
 80078e6:	4618      	mov	r0, r3
 80078e8:	f004 feba 	bl	800c660 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078ec:	4b0f      	ldr	r3, [pc, #60]	; (800792c <prvAddCurrentTaskToDelayedList+0xdc>)
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	4b0a      	ldr	r3, [pc, #40]	; (800791c <prvAddCurrentTaskToDelayedList+0xcc>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	3304      	adds	r3, #4
 80078f6:	4619      	mov	r1, r3
 80078f8:	4610      	mov	r0, r2
 80078fa:	f7fe fc0e 	bl	800611a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80078fe:	4b0c      	ldr	r3, [pc, #48]	; (8007930 <prvAddCurrentTaskToDelayedList+0xe0>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	429a      	cmp	r2, r3
 8007906:	d202      	bcs.n	800790e <prvAddCurrentTaskToDelayedList+0xbe>
                        xNextTaskUnblockTime = xTimeToWake;
 8007908:	4a09      	ldr	r2, [pc, #36]	; (8007930 <prvAddCurrentTaskToDelayedList+0xe0>)
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	6013      	str	r3, [r2, #0]
}
 800790e:	bf00      	nop
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	20000438 	.word	0x20000438
 800791c:	2000035c 	.word	0x2000035c
 8007920:	2000043c 	.word	0x2000043c
 8007924:	20000420 	.word	0x20000420
 8007928:	200003f0 	.word	0x200003f0
 800792c:	200003ec 	.word	0x200003ec
 8007930:	20000454 	.word	0x20000454

08007934 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800793a:	2300      	movs	r3, #0
 800793c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800793e:	f000 fad5 	bl	8007eec <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8007942:	4b11      	ldr	r3, [pc, #68]	; (8007988 <xTimerCreateTimerTask+0x54>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00a      	beq.n	8007960 <xTimerCreateTimerTask+0x2c>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800794a:	4b10      	ldr	r3, [pc, #64]	; (800798c <xTimerCreateTimerTask+0x58>)
 800794c:	9301      	str	r3, [sp, #4]
 800794e:	2302      	movs	r3, #2
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	2300      	movs	r3, #0
 8007954:	22c8      	movs	r2, #200	; 0xc8
 8007956:	490e      	ldr	r1, [pc, #56]	; (8007990 <xTimerCreateTimerTask+0x5c>)
 8007958:	480e      	ldr	r0, [pc, #56]	; (8007994 <xTimerCreateTimerTask+0x60>)
 800795a:	f7ff f96d 	bl	8006c38 <xTaskCreate>
 800795e:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d10a      	bne.n	800797c <xTimerCreateTimerTask+0x48>
        __asm volatile
 8007966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796a:	f383 8811 	msr	BASEPRI, r3
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	f3bf 8f4f 	dsb	sy
 8007976:	603b      	str	r3, [r7, #0]
    }
 8007978:	bf00      	nop
 800797a:	e7fe      	b.n	800797a <xTimerCreateTimerTask+0x46>
        return xReturn;
 800797c:	687b      	ldr	r3, [r7, #4]
    }
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	20000490 	.word	0x20000490
 800798c:	20000494 	.word	0x20000494
 8007990:	0800dda0 	.word	0x0800dda0
 8007994:	08007acd 	.word	0x08007acd

08007998 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8007998:	b580      	push	{r7, lr}
 800799a:	b08a      	sub	sp, #40	; 0x28
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]
 80079a4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80079a6:	2300      	movs	r3, #0
 80079a8:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d10a      	bne.n	80079c6 <xTimerGenericCommand+0x2e>
        __asm volatile
 80079b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b4:	f383 8811 	msr	BASEPRI, r3
 80079b8:	f3bf 8f6f 	isb	sy
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	623b      	str	r3, [r7, #32]
    }
 80079c2:	bf00      	nop
 80079c4:	e7fe      	b.n	80079c4 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80079c6:	4b1a      	ldr	r3, [pc, #104]	; (8007a30 <xTimerGenericCommand+0x98>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d02a      	beq.n	8007a24 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	2b05      	cmp	r3, #5
 80079de:	dc18      	bgt.n	8007a12 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80079e0:	f7ff fe94 	bl	800770c <xTaskGetSchedulerState>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d109      	bne.n	80079fe <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80079ea:	4b11      	ldr	r3, [pc, #68]	; (8007a30 <xTimerGenericCommand+0x98>)
 80079ec:	6818      	ldr	r0, [r3, #0]
 80079ee:	f107 0114 	add.w	r1, r7, #20
 80079f2:	2300      	movs	r3, #0
 80079f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079f6:	f7fe fcd7 	bl	80063a8 <xQueueGenericSend>
 80079fa:	6278      	str	r0, [r7, #36]	; 0x24
 80079fc:	e012      	b.n	8007a24 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80079fe:	4b0c      	ldr	r3, [pc, #48]	; (8007a30 <xTimerGenericCommand+0x98>)
 8007a00:	6818      	ldr	r0, [r3, #0]
 8007a02:	f107 0114 	add.w	r1, r7, #20
 8007a06:	2300      	movs	r3, #0
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f7fe fccd 	bl	80063a8 <xQueueGenericSend>
 8007a0e:	6278      	str	r0, [r7, #36]	; 0x24
 8007a10:	e008      	b.n	8007a24 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a12:	4b07      	ldr	r3, [pc, #28]	; (8007a30 <xTimerGenericCommand+0x98>)
 8007a14:	6818      	ldr	r0, [r3, #0]
 8007a16:	f107 0114 	add.w	r1, r7, #20
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	683a      	ldr	r2, [r7, #0]
 8007a1e:	f7fe fdd1 	bl	80065c4 <xQueueGenericSendFromISR>
 8007a22:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8007a26:	4618      	mov	r0, r3
 8007a28:	3728      	adds	r7, #40	; 0x28
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	20000490 	.word	0x20000490

08007a34 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b088      	sub	sp, #32
 8007a38:	af02      	add	r7, sp, #8
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a3e:	4b22      	ldr	r3, [pc, #136]	; (8007ac8 <prvProcessExpiredTimer+0x94>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	3304      	adds	r3, #4
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7fe fb9d 	bl	800618c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a58:	f003 0304 	and.w	r3, r3, #4
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d022      	beq.n	8007aa6 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	699a      	ldr	r2, [r3, #24]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	18d1      	adds	r1, r2, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	683a      	ldr	r2, [r7, #0]
 8007a6c:	6978      	ldr	r0, [r7, #20]
 8007a6e:	f000 f8d1 	bl	8007c14 <prvInsertTimerInActiveList>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d01f      	beq.n	8007ab8 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a78:	2300      	movs	r3, #0
 8007a7a:	9300      	str	r3, [sp, #0]
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	2100      	movs	r1, #0
 8007a82:	6978      	ldr	r0, [r7, #20]
 8007a84:	f7ff ff88 	bl	8007998 <xTimerGenericCommand>
 8007a88:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d113      	bne.n	8007ab8 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8007a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a94:	f383 8811 	msr	BASEPRI, r3
 8007a98:	f3bf 8f6f 	isb	sy
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	60fb      	str	r3, [r7, #12]
    }
 8007aa2:	bf00      	nop
 8007aa4:	e7fe      	b.n	8007aa4 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007aac:	f023 0301 	bic.w	r3, r3, #1
 8007ab0:	b2da      	uxtb	r2, r3
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	6a1b      	ldr	r3, [r3, #32]
 8007abc:	6978      	ldr	r0, [r7, #20]
 8007abe:	4798      	blx	r3
    }
 8007ac0:	bf00      	nop
 8007ac2:	3718      	adds	r7, #24
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	20000488 	.word	0x20000488

08007acc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ad4:	f107 0308 	add.w	r3, r7, #8
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f000 f857 	bl	8007b8c <prvGetNextExpireTime>
 8007ade:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f000 f803 	bl	8007af0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8007aea:	f000 f8d5 	bl	8007c98 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007aee:	e7f1      	b.n	8007ad4 <prvTimerTask+0x8>

08007af0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8007afa:	f7ff fa55 	bl	8006fa8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007afe:	f107 0308 	add.w	r3, r7, #8
 8007b02:	4618      	mov	r0, r3
 8007b04:	f000 f866 	bl	8007bd4 <prvSampleTimeNow>
 8007b08:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d130      	bne.n	8007b72 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d10a      	bne.n	8007b2c <prvProcessTimerOrBlockTask+0x3c>
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d806      	bhi.n	8007b2c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8007b1e:	f7ff fa51 	bl	8006fc4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007b22:	68f9      	ldr	r1, [r7, #12]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f7ff ff85 	bl	8007a34 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8007b2a:	e024      	b.n	8007b76 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d008      	beq.n	8007b44 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007b32:	4b13      	ldr	r3, [pc, #76]	; (8007b80 <prvProcessTimerOrBlockTask+0x90>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d101      	bne.n	8007b40 <prvProcessTimerOrBlockTask+0x50>
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e000      	b.n	8007b42 <prvProcessTimerOrBlockTask+0x52>
 8007b40:	2300      	movs	r3, #0
 8007b42:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007b44:	4b0f      	ldr	r3, [pc, #60]	; (8007b84 <prvProcessTimerOrBlockTask+0x94>)
 8007b46:	6818      	ldr	r0, [r3, #0]
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	1ad3      	subs	r3, r2, r3
 8007b4e:	683a      	ldr	r2, [r7, #0]
 8007b50:	4619      	mov	r1, r3
 8007b52:	f7ff f83d 	bl	8006bd0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007b56:	f7ff fa35 	bl	8006fc4 <xTaskResumeAll>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d10a      	bne.n	8007b76 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8007b60:	4b09      	ldr	r3, [pc, #36]	; (8007b88 <prvProcessTimerOrBlockTask+0x98>)
 8007b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b66:	601a      	str	r2, [r3, #0]
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	f3bf 8f6f 	isb	sy
    }
 8007b70:	e001      	b.n	8007b76 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8007b72:	f7ff fa27 	bl	8006fc4 <xTaskResumeAll>
    }
 8007b76:	bf00      	nop
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	2000048c 	.word	0x2000048c
 8007b84:	20000490 	.word	0x20000490
 8007b88:	e000ed04 	.word	0xe000ed04

08007b8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007b94:	4b0e      	ldr	r3, [pc, #56]	; (8007bd0 <prvGetNextExpireTime+0x44>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d101      	bne.n	8007ba2 <prvGetNextExpireTime+0x16>
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	e000      	b.n	8007ba4 <prvGetNextExpireTime+0x18>
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d105      	bne.n	8007bbc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007bb0:	4b07      	ldr	r3, [pc, #28]	; (8007bd0 <prvGetNextExpireTime+0x44>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	60fb      	str	r3, [r7, #12]
 8007bba:	e001      	b.n	8007bc0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
    }
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3714      	adds	r7, #20
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop
 8007bd0:	20000488 	.word	0x20000488

08007bd4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8007bdc:	f7ff fa84 	bl	80070e8 <xTaskGetTickCount>
 8007be0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007be2:	4b0b      	ldr	r3, [pc, #44]	; (8007c10 <prvSampleTimeNow+0x3c>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d205      	bcs.n	8007bf8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007bec:	f000 f91a 	bl	8007e24 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	601a      	str	r2, [r3, #0]
 8007bf6:	e002      	b.n	8007bfe <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8007bfe:	4a04      	ldr	r2, [pc, #16]	; (8007c10 <prvSampleTimeNow+0x3c>)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007c04:	68fb      	ldr	r3, [r7, #12]
    }
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	20000498 	.word	0x20000498

08007c14 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b086      	sub	sp, #24
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
 8007c20:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8007c22:	2300      	movs	r3, #0
 8007c24:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d812      	bhi.n	8007c60 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	1ad2      	subs	r2, r2, r3
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d302      	bcc.n	8007c4e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	617b      	str	r3, [r7, #20]
 8007c4c:	e01b      	b.n	8007c86 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007c4e:	4b10      	ldr	r3, [pc, #64]	; (8007c90 <prvInsertTimerInActiveList+0x7c>)
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	3304      	adds	r3, #4
 8007c56:	4619      	mov	r1, r3
 8007c58:	4610      	mov	r0, r2
 8007c5a:	f7fe fa5e 	bl	800611a <vListInsert>
 8007c5e:	e012      	b.n	8007c86 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d206      	bcs.n	8007c76 <prvInsertTimerInActiveList+0x62>
 8007c68:	68ba      	ldr	r2, [r7, #8]
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d302      	bcc.n	8007c76 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007c70:	2301      	movs	r3, #1
 8007c72:	617b      	str	r3, [r7, #20]
 8007c74:	e007      	b.n	8007c86 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c76:	4b07      	ldr	r3, [pc, #28]	; (8007c94 <prvInsertTimerInActiveList+0x80>)
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	3304      	adds	r3, #4
 8007c7e:	4619      	mov	r1, r3
 8007c80:	4610      	mov	r0, r2
 8007c82:	f7fe fa4a 	bl	800611a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8007c86:	697b      	ldr	r3, [r7, #20]
    }
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3718      	adds	r7, #24
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	2000048c 	.word	0x2000048c
 8007c94:	20000488 	.word	0x20000488

08007c98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b08c      	sub	sp, #48	; 0x30
 8007c9c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c9e:	e0ae      	b.n	8007dfe <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	f2c0 80aa 	blt.w	8007dfc <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d004      	beq.n	8007cbe <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb6:	3304      	adds	r3, #4
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f7fe fa67 	bl	800618c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007cbe:	1d3b      	adds	r3, r7, #4
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7ff ff87 	bl	8007bd4 <prvSampleTimeNow>
 8007cc6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2b09      	cmp	r3, #9
 8007ccc:	f200 8097 	bhi.w	8007dfe <prvProcessReceivedCommands+0x166>
 8007cd0:	a201      	add	r2, pc, #4	; (adr r2, 8007cd8 <prvProcessReceivedCommands+0x40>)
 8007cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd6:	bf00      	nop
 8007cd8:	08007d01 	.word	0x08007d01
 8007cdc:	08007d01 	.word	0x08007d01
 8007ce0:	08007d01 	.word	0x08007d01
 8007ce4:	08007d75 	.word	0x08007d75
 8007ce8:	08007d89 	.word	0x08007d89
 8007cec:	08007dd3 	.word	0x08007dd3
 8007cf0:	08007d01 	.word	0x08007d01
 8007cf4:	08007d01 	.word	0x08007d01
 8007cf8:	08007d75 	.word	0x08007d75
 8007cfc:	08007d89 	.word	0x08007d89
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d06:	f043 0301 	orr.w	r3, r3, #1
 8007d0a:	b2da      	uxtb	r2, r3
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d16:	699b      	ldr	r3, [r3, #24]
 8007d18:	18d1      	adds	r1, r2, r3
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6a3a      	ldr	r2, [r7, #32]
 8007d1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d20:	f7ff ff78 	bl	8007c14 <prvInsertTimerInActiveList>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d069      	beq.n	8007dfe <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2c:	6a1b      	ldr	r3, [r3, #32]
 8007d2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d30:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d38:	f003 0304 	and.w	r3, r3, #4
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d05e      	beq.n	8007dfe <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d44:	699b      	ldr	r3, [r3, #24]
 8007d46:	441a      	add	r2, r3
 8007d48:	2300      	movs	r3, #0
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	2100      	movs	r1, #0
 8007d50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d52:	f7ff fe21 	bl	8007998 <xTimerGenericCommand>
 8007d56:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d14f      	bne.n	8007dfe <prvProcessReceivedCommands+0x166>
        __asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	61bb      	str	r3, [r7, #24]
    }
 8007d70:	bf00      	nop
 8007d72:	e7fe      	b.n	8007d72 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d7a:	f023 0301 	bic.w	r3, r3, #1
 8007d7e:	b2da      	uxtb	r2, r3
 8007d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8007d86:	e03a      	b.n	8007dfe <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d8e:	f043 0301 	orr.w	r3, r3, #1
 8007d92:	b2da      	uxtb	r2, r3
 8007d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10a      	bne.n	8007dbe <prvProcessReceivedCommands+0x126>
        __asm volatile
 8007da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dac:	f383 8811 	msr	BASEPRI, r3
 8007db0:	f3bf 8f6f 	isb	sy
 8007db4:	f3bf 8f4f 	dsb	sy
 8007db8:	617b      	str	r3, [r7, #20]
    }
 8007dba:	bf00      	nop
 8007dbc:	e7fe      	b.n	8007dbc <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc0:	699a      	ldr	r2, [r3, #24]
 8007dc2:	6a3b      	ldr	r3, [r7, #32]
 8007dc4:	18d1      	adds	r1, r2, r3
 8007dc6:	6a3b      	ldr	r3, [r7, #32]
 8007dc8:	6a3a      	ldr	r2, [r7, #32]
 8007dca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007dcc:	f7ff ff22 	bl	8007c14 <prvInsertTimerInActiveList>
                        break;
 8007dd0:	e015      	b.n	8007dfe <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dd8:	f003 0302 	and.w	r3, r3, #2
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d103      	bne.n	8007de8 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8007de0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007de2:	f000 fc39 	bl	8008658 <vPortFree>
 8007de6:	e00a      	b.n	8007dfe <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dee:	f023 0301 	bic.w	r3, r3, #1
 8007df2:	b2da      	uxtb	r2, r3
 8007df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007dfa:	e000      	b.n	8007dfe <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8007dfc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007dfe:	4b08      	ldr	r3, [pc, #32]	; (8007e20 <prvProcessReceivedCommands+0x188>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f107 0108 	add.w	r1, r7, #8
 8007e06:	2200      	movs	r2, #0
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7fe fc99 	bl	8006740 <xQueueReceive>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f47f af45 	bne.w	8007ca0 <prvProcessReceivedCommands+0x8>
        }
    }
 8007e16:	bf00      	nop
 8007e18:	bf00      	nop
 8007e1a:	3728      	adds	r7, #40	; 0x28
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	20000490 	.word	0x20000490

08007e24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b088      	sub	sp, #32
 8007e28:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e2a:	e048      	b.n	8007ebe <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e2c:	4b2d      	ldr	r3, [pc, #180]	; (8007ee4 <prvSwitchTimerLists+0xc0>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e36:	4b2b      	ldr	r3, [pc, #172]	; (8007ee4 <prvSwitchTimerLists+0xc0>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	3304      	adds	r3, #4
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7fe f9a1 	bl	800618c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6a1b      	ldr	r3, [r3, #32]
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e58:	f003 0304 	and.w	r3, r3, #4
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d02e      	beq.n	8007ebe <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	699b      	ldr	r3, [r3, #24]
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	4413      	add	r3, r2
 8007e68:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8007e6a:	68ba      	ldr	r2, [r7, #8]
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d90e      	bls.n	8007e90 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	68ba      	ldr	r2, [r7, #8]
 8007e76:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e7e:	4b19      	ldr	r3, [pc, #100]	; (8007ee4 <prvSwitchTimerLists+0xc0>)
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	3304      	adds	r3, #4
 8007e86:	4619      	mov	r1, r3
 8007e88:	4610      	mov	r0, r2
 8007e8a:	f7fe f946 	bl	800611a <vListInsert>
 8007e8e:	e016      	b.n	8007ebe <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e90:	2300      	movs	r3, #0
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	2300      	movs	r3, #0
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	2100      	movs	r1, #0
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f7ff fd7c 	bl	8007998 <xTimerGenericCommand>
 8007ea0:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d10a      	bne.n	8007ebe <prvSwitchTimerLists+0x9a>
        __asm volatile
 8007ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eac:	f383 8811 	msr	BASEPRI, r3
 8007eb0:	f3bf 8f6f 	isb	sy
 8007eb4:	f3bf 8f4f 	dsb	sy
 8007eb8:	603b      	str	r3, [r7, #0]
    }
 8007eba:	bf00      	nop
 8007ebc:	e7fe      	b.n	8007ebc <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ebe:	4b09      	ldr	r3, [pc, #36]	; (8007ee4 <prvSwitchTimerLists+0xc0>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1b1      	bne.n	8007e2c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8007ec8:	4b06      	ldr	r3, [pc, #24]	; (8007ee4 <prvSwitchTimerLists+0xc0>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8007ece:	4b06      	ldr	r3, [pc, #24]	; (8007ee8 <prvSwitchTimerLists+0xc4>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a04      	ldr	r2, [pc, #16]	; (8007ee4 <prvSwitchTimerLists+0xc0>)
 8007ed4:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007ed6:	4a04      	ldr	r2, [pc, #16]	; (8007ee8 <prvSwitchTimerLists+0xc4>)
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	6013      	str	r3, [r2, #0]
    }
 8007edc:	bf00      	nop
 8007ede:	3718      	adds	r7, #24
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	20000488 	.word	0x20000488
 8007ee8:	2000048c 	.word	0x2000048c

08007eec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007eec:	b580      	push	{r7, lr}
 8007eee:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007ef0:	f000 f962 	bl	80081b8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007ef4:	4b12      	ldr	r3, [pc, #72]	; (8007f40 <prvCheckForValidListAndQueue+0x54>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d11d      	bne.n	8007f38 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8007efc:	4811      	ldr	r0, [pc, #68]	; (8007f44 <prvCheckForValidListAndQueue+0x58>)
 8007efe:	f7fe f8bb 	bl	8006078 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007f02:	4811      	ldr	r0, [pc, #68]	; (8007f48 <prvCheckForValidListAndQueue+0x5c>)
 8007f04:	f7fe f8b8 	bl	8006078 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007f08:	4b10      	ldr	r3, [pc, #64]	; (8007f4c <prvCheckForValidListAndQueue+0x60>)
 8007f0a:	4a0e      	ldr	r2, [pc, #56]	; (8007f44 <prvCheckForValidListAndQueue+0x58>)
 8007f0c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8007f0e:	4b10      	ldr	r3, [pc, #64]	; (8007f50 <prvCheckForValidListAndQueue+0x64>)
 8007f10:	4a0d      	ldr	r2, [pc, #52]	; (8007f48 <prvCheckForValidListAndQueue+0x5c>)
 8007f12:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007f14:	2200      	movs	r2, #0
 8007f16:	210c      	movs	r1, #12
 8007f18:	200a      	movs	r0, #10
 8007f1a:	f7fe f9bc 	bl	8006296 <xQueueGenericCreate>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	4a07      	ldr	r2, [pc, #28]	; (8007f40 <prvCheckForValidListAndQueue+0x54>)
 8007f22:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8007f24:	4b06      	ldr	r3, [pc, #24]	; (8007f40 <prvCheckForValidListAndQueue+0x54>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d005      	beq.n	8007f38 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007f2c:	4b04      	ldr	r3, [pc, #16]	; (8007f40 <prvCheckForValidListAndQueue+0x54>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4908      	ldr	r1, [pc, #32]	; (8007f54 <prvCheckForValidListAndQueue+0x68>)
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7fe fe1a 	bl	8006b6c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007f38:	f000 f96e 	bl	8008218 <vPortExitCritical>
    }
 8007f3c:	bf00      	nop
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	20000490 	.word	0x20000490
 8007f44:	20000460 	.word	0x20000460
 8007f48:	20000474 	.word	0x20000474
 8007f4c:	20000488 	.word	0x20000488
 8007f50:	2000048c 	.word	0x2000048c
 8007f54:	0800dda8 	.word	0x0800dda8

08007f58 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	3b04      	subs	r3, #4
 8007f68:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007f70:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	3b04      	subs	r3, #4
 8007f76:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	f023 0201 	bic.w	r2, r3, #1
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	3b04      	subs	r3, #4
 8007f86:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007f88:	4a0c      	ldr	r2, [pc, #48]	; (8007fbc <pxPortInitialiseStack+0x64>)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	3b14      	subs	r3, #20
 8007f92:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	3b04      	subs	r3, #4
 8007f9e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f06f 0202 	mvn.w	r2, #2
 8007fa6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	3b20      	subs	r3, #32
 8007fac:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007fae:	68fb      	ldr	r3, [r7, #12]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3714      	adds	r7, #20
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr
 8007fbc:	08007fc1 	.word	0x08007fc1

08007fc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007fca:	4b12      	ldr	r3, [pc, #72]	; (8008014 <prvTaskExitError+0x54>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fd2:	d00a      	beq.n	8007fea <prvTaskExitError+0x2a>
        __asm volatile
 8007fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	60fb      	str	r3, [r7, #12]
    }
 8007fe6:	bf00      	nop
 8007fe8:	e7fe      	b.n	8007fe8 <prvTaskExitError+0x28>
        __asm volatile
 8007fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fee:	f383 8811 	msr	BASEPRI, r3
 8007ff2:	f3bf 8f6f 	isb	sy
 8007ff6:	f3bf 8f4f 	dsb	sy
 8007ffa:	60bb      	str	r3, [r7, #8]
    }
 8007ffc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007ffe:	bf00      	nop
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d0fc      	beq.n	8008000 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8008006:	bf00      	nop
 8008008:	bf00      	nop
 800800a:	3714      	adds	r7, #20
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr
 8008014:	20000010 	.word	0x20000010
	...

08008020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008020:	4b07      	ldr	r3, [pc, #28]	; (8008040 <pxCurrentTCBConst2>)
 8008022:	6819      	ldr	r1, [r3, #0]
 8008024:	6808      	ldr	r0, [r1, #0]
 8008026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800802a:	f380 8809 	msr	PSP, r0
 800802e:	f3bf 8f6f 	isb	sy
 8008032:	f04f 0000 	mov.w	r0, #0
 8008036:	f380 8811 	msr	BASEPRI, r0
 800803a:	4770      	bx	lr
 800803c:	f3af 8000 	nop.w

08008040 <pxCurrentTCBConst2>:
 8008040:	2000035c 	.word	0x2000035c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008044:	bf00      	nop
 8008046:	bf00      	nop

08008048 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8008048:	4808      	ldr	r0, [pc, #32]	; (800806c <prvPortStartFirstTask+0x24>)
 800804a:	6800      	ldr	r0, [r0, #0]
 800804c:	6800      	ldr	r0, [r0, #0]
 800804e:	f380 8808 	msr	MSP, r0
 8008052:	f04f 0000 	mov.w	r0, #0
 8008056:	f380 8814 	msr	CONTROL, r0
 800805a:	b662      	cpsie	i
 800805c:	b661      	cpsie	f
 800805e:	f3bf 8f4f 	dsb	sy
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	df00      	svc	0
 8008068:	bf00      	nop
 800806a:	0000      	.short	0x0000
 800806c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8008070:	bf00      	nop
 8008072:	bf00      	nop

08008074 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800807a:	4b46      	ldr	r3, [pc, #280]	; (8008194 <xPortStartScheduler+0x120>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a46      	ldr	r2, [pc, #280]	; (8008198 <xPortStartScheduler+0x124>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d10a      	bne.n	800809a <xPortStartScheduler+0x26>
        __asm volatile
 8008084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008088:	f383 8811 	msr	BASEPRI, r3
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	613b      	str	r3, [r7, #16]
    }
 8008096:	bf00      	nop
 8008098:	e7fe      	b.n	8008098 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800809a:	4b3e      	ldr	r3, [pc, #248]	; (8008194 <xPortStartScheduler+0x120>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a3f      	ldr	r2, [pc, #252]	; (800819c <xPortStartScheduler+0x128>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d10a      	bne.n	80080ba <xPortStartScheduler+0x46>
        __asm volatile
 80080a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a8:	f383 8811 	msr	BASEPRI, r3
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f3bf 8f4f 	dsb	sy
 80080b4:	60fb      	str	r3, [r7, #12]
    }
 80080b6:	bf00      	nop
 80080b8:	e7fe      	b.n	80080b8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80080ba:	4b39      	ldr	r3, [pc, #228]	; (80081a0 <xPortStartScheduler+0x12c>)
 80080bc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	22ff      	movs	r2, #255	; 0xff
 80080ca:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80080d4:	78fb      	ldrb	r3, [r7, #3]
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80080dc:	b2da      	uxtb	r2, r3
 80080de:	4b31      	ldr	r3, [pc, #196]	; (80081a4 <xPortStartScheduler+0x130>)
 80080e0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80080e2:	4b31      	ldr	r3, [pc, #196]	; (80081a8 <xPortStartScheduler+0x134>)
 80080e4:	2207      	movs	r2, #7
 80080e6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080e8:	e009      	b.n	80080fe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80080ea:	4b2f      	ldr	r3, [pc, #188]	; (80081a8 <xPortStartScheduler+0x134>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	3b01      	subs	r3, #1
 80080f0:	4a2d      	ldr	r2, [pc, #180]	; (80081a8 <xPortStartScheduler+0x134>)
 80080f2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80080f4:	78fb      	ldrb	r3, [r7, #3]
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	005b      	lsls	r3, r3, #1
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080fe:	78fb      	ldrb	r3, [r7, #3]
 8008100:	b2db      	uxtb	r3, r3
 8008102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008106:	2b80      	cmp	r3, #128	; 0x80
 8008108:	d0ef      	beq.n	80080ea <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800810a:	4b27      	ldr	r3, [pc, #156]	; (80081a8 <xPortStartScheduler+0x134>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f1c3 0307 	rsb	r3, r3, #7
 8008112:	2b04      	cmp	r3, #4
 8008114:	d00a      	beq.n	800812c <xPortStartScheduler+0xb8>
        __asm volatile
 8008116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811a:	f383 8811 	msr	BASEPRI, r3
 800811e:	f3bf 8f6f 	isb	sy
 8008122:	f3bf 8f4f 	dsb	sy
 8008126:	60bb      	str	r3, [r7, #8]
    }
 8008128:	bf00      	nop
 800812a:	e7fe      	b.n	800812a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800812c:	4b1e      	ldr	r3, [pc, #120]	; (80081a8 <xPortStartScheduler+0x134>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	021b      	lsls	r3, r3, #8
 8008132:	4a1d      	ldr	r2, [pc, #116]	; (80081a8 <xPortStartScheduler+0x134>)
 8008134:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008136:	4b1c      	ldr	r3, [pc, #112]	; (80081a8 <xPortStartScheduler+0x134>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800813e:	4a1a      	ldr	r2, [pc, #104]	; (80081a8 <xPortStartScheduler+0x134>)
 8008140:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	b2da      	uxtb	r2, r3
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800814a:	4b18      	ldr	r3, [pc, #96]	; (80081ac <xPortStartScheduler+0x138>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a17      	ldr	r2, [pc, #92]	; (80081ac <xPortStartScheduler+0x138>)
 8008150:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008154:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8008156:	4b15      	ldr	r3, [pc, #84]	; (80081ac <xPortStartScheduler+0x138>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a14      	ldr	r2, [pc, #80]	; (80081ac <xPortStartScheduler+0x138>)
 800815c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008160:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8008162:	f000 f8e3 	bl	800832c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8008166:	4b12      	ldr	r3, [pc, #72]	; (80081b0 <xPortStartScheduler+0x13c>)
 8008168:	2200      	movs	r2, #0
 800816a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800816c:	f000 f902 	bl	8008374 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008170:	4b10      	ldr	r3, [pc, #64]	; (80081b4 <xPortStartScheduler+0x140>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a0f      	ldr	r2, [pc, #60]	; (80081b4 <xPortStartScheduler+0x140>)
 8008176:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800817a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800817c:	f7ff ff64 	bl	8008048 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8008180:	f7ff f86e 	bl	8007260 <vTaskSwitchContext>
    prvTaskExitError();
 8008184:	f7ff ff1c 	bl	8007fc0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3718      	adds	r7, #24
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	e000ed00 	.word	0xe000ed00
 8008198:	410fc271 	.word	0x410fc271
 800819c:	410fc270 	.word	0x410fc270
 80081a0:	e000e400 	.word	0xe000e400
 80081a4:	2000049c 	.word	0x2000049c
 80081a8:	200004a0 	.word	0x200004a0
 80081ac:	e000ed20 	.word	0xe000ed20
 80081b0:	20000010 	.word	0x20000010
 80081b4:	e000ef34 	.word	0xe000ef34

080081b8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
        __asm volatile
 80081be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c2:	f383 8811 	msr	BASEPRI, r3
 80081c6:	f3bf 8f6f 	isb	sy
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	607b      	str	r3, [r7, #4]
    }
 80081d0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80081d2:	4b0f      	ldr	r3, [pc, #60]	; (8008210 <vPortEnterCritical+0x58>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	3301      	adds	r3, #1
 80081d8:	4a0d      	ldr	r2, [pc, #52]	; (8008210 <vPortEnterCritical+0x58>)
 80081da:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80081dc:	4b0c      	ldr	r3, [pc, #48]	; (8008210 <vPortEnterCritical+0x58>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d10f      	bne.n	8008204 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80081e4:	4b0b      	ldr	r3, [pc, #44]	; (8008214 <vPortEnterCritical+0x5c>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00a      	beq.n	8008204 <vPortEnterCritical+0x4c>
        __asm volatile
 80081ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f2:	f383 8811 	msr	BASEPRI, r3
 80081f6:	f3bf 8f6f 	isb	sy
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	603b      	str	r3, [r7, #0]
    }
 8008200:	bf00      	nop
 8008202:	e7fe      	b.n	8008202 <vPortEnterCritical+0x4a>
    }
}
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr
 8008210:	20000010 	.word	0x20000010
 8008214:	e000ed04 	.word	0xe000ed04

08008218 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800821e:	4b12      	ldr	r3, [pc, #72]	; (8008268 <vPortExitCritical+0x50>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10a      	bne.n	800823c <vPortExitCritical+0x24>
        __asm volatile
 8008226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822a:	f383 8811 	msr	BASEPRI, r3
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	f3bf 8f4f 	dsb	sy
 8008236:	607b      	str	r3, [r7, #4]
    }
 8008238:	bf00      	nop
 800823a:	e7fe      	b.n	800823a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800823c:	4b0a      	ldr	r3, [pc, #40]	; (8008268 <vPortExitCritical+0x50>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	3b01      	subs	r3, #1
 8008242:	4a09      	ldr	r2, [pc, #36]	; (8008268 <vPortExitCritical+0x50>)
 8008244:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8008246:	4b08      	ldr	r3, [pc, #32]	; (8008268 <vPortExitCritical+0x50>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d105      	bne.n	800825a <vPortExitCritical+0x42>
 800824e:	2300      	movs	r3, #0
 8008250:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	f383 8811 	msr	BASEPRI, r3
    }
 8008258:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800825a:	bf00      	nop
 800825c:	370c      	adds	r7, #12
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	20000010 	.word	0x20000010
 800826c:	00000000 	.word	0x00000000

08008270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008270:	f3ef 8009 	mrs	r0, PSP
 8008274:	f3bf 8f6f 	isb	sy
 8008278:	4b15      	ldr	r3, [pc, #84]	; (80082d0 <pxCurrentTCBConst>)
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	f01e 0f10 	tst.w	lr, #16
 8008280:	bf08      	it	eq
 8008282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800828a:	6010      	str	r0, [r2, #0]
 800828c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008290:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008294:	f380 8811 	msr	BASEPRI, r0
 8008298:	f3bf 8f4f 	dsb	sy
 800829c:	f3bf 8f6f 	isb	sy
 80082a0:	f7fe ffde 	bl	8007260 <vTaskSwitchContext>
 80082a4:	f04f 0000 	mov.w	r0, #0
 80082a8:	f380 8811 	msr	BASEPRI, r0
 80082ac:	bc09      	pop	{r0, r3}
 80082ae:	6819      	ldr	r1, [r3, #0]
 80082b0:	6808      	ldr	r0, [r1, #0]
 80082b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b6:	f01e 0f10 	tst.w	lr, #16
 80082ba:	bf08      	it	eq
 80082bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80082c0:	f380 8809 	msr	PSP, r0
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop
 80082cc:	f3af 8000 	nop.w

080082d0 <pxCurrentTCBConst>:
 80082d0:	2000035c 	.word	0x2000035c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80082d4:	bf00      	nop
 80082d6:	bf00      	nop

080082d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
        __asm volatile
 80082de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e2:	f383 8811 	msr	BASEPRI, r3
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	607b      	str	r3, [r7, #4]
    }
 80082f0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 80082f2:	f004 f859 	bl	800c3a8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80082f6:	f7fe ff19 	bl	800712c <xTaskIncrementTick>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d006      	beq.n	800830e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8008300:	f004 f8b0 	bl	800c464 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008304:	4b08      	ldr	r3, [pc, #32]	; (8008328 <SysTick_Handler+0x50>)
 8008306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800830a:	601a      	str	r2, [r3, #0]
 800830c:	e001      	b.n	8008312 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800830e:	f004 f88d 	bl	800c42c <SEGGER_SYSVIEW_RecordExitISR>
 8008312:	2300      	movs	r3, #0
 8008314:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	f383 8811 	msr	BASEPRI, r3
    }
 800831c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800831e:	bf00      	nop
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	e000ed04 	.word	0xe000ed04

0800832c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800832c:	b480      	push	{r7}
 800832e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008330:	4b0b      	ldr	r3, [pc, #44]	; (8008360 <vPortSetupTimerInterrupt+0x34>)
 8008332:	2200      	movs	r2, #0
 8008334:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008336:	4b0b      	ldr	r3, [pc, #44]	; (8008364 <vPortSetupTimerInterrupt+0x38>)
 8008338:	2200      	movs	r2, #0
 800833a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800833c:	4b0a      	ldr	r3, [pc, #40]	; (8008368 <vPortSetupTimerInterrupt+0x3c>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a0a      	ldr	r2, [pc, #40]	; (800836c <vPortSetupTimerInterrupt+0x40>)
 8008342:	fba2 2303 	umull	r2, r3, r2, r3
 8008346:	099b      	lsrs	r3, r3, #6
 8008348:	4a09      	ldr	r2, [pc, #36]	; (8008370 <vPortSetupTimerInterrupt+0x44>)
 800834a:	3b01      	subs	r3, #1
 800834c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800834e:	4b04      	ldr	r3, [pc, #16]	; (8008360 <vPortSetupTimerInterrupt+0x34>)
 8008350:	2207      	movs	r2, #7
 8008352:	601a      	str	r2, [r3, #0]
}
 8008354:	bf00      	nop
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	e000e010 	.word	0xe000e010
 8008364:	e000e018 	.word	0xe000e018
 8008368:	20000000 	.word	0x20000000
 800836c:	10624dd3 	.word	0x10624dd3
 8008370:	e000e014 	.word	0xe000e014

08008374 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008374:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008384 <vPortEnableVFP+0x10>
 8008378:	6801      	ldr	r1, [r0, #0]
 800837a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800837e:	6001      	str	r1, [r0, #0]
 8008380:	4770      	bx	lr
 8008382:	0000      	.short	0x0000
 8008384:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8008388:	bf00      	nop
 800838a:	bf00      	nop

0800838c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800838c:	b480      	push	{r7}
 800838e:	b085      	sub	sp, #20
 8008390:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8008392:	f3ef 8305 	mrs	r3, IPSR
 8008396:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2b0f      	cmp	r3, #15
 800839c:	d914      	bls.n	80083c8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800839e:	4a17      	ldr	r2, [pc, #92]	; (80083fc <vPortValidateInterruptPriority+0x70>)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	4413      	add	r3, r2
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80083a8:	4b15      	ldr	r3, [pc, #84]	; (8008400 <vPortValidateInterruptPriority+0x74>)
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	7afa      	ldrb	r2, [r7, #11]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d20a      	bcs.n	80083c8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80083b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b6:	f383 8811 	msr	BASEPRI, r3
 80083ba:	f3bf 8f6f 	isb	sy
 80083be:	f3bf 8f4f 	dsb	sy
 80083c2:	607b      	str	r3, [r7, #4]
    }
 80083c4:	bf00      	nop
 80083c6:	e7fe      	b.n	80083c6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80083c8:	4b0e      	ldr	r3, [pc, #56]	; (8008404 <vPortValidateInterruptPriority+0x78>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80083d0:	4b0d      	ldr	r3, [pc, #52]	; (8008408 <vPortValidateInterruptPriority+0x7c>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d90a      	bls.n	80083ee <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80083d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083dc:	f383 8811 	msr	BASEPRI, r3
 80083e0:	f3bf 8f6f 	isb	sy
 80083e4:	f3bf 8f4f 	dsb	sy
 80083e8:	603b      	str	r3, [r7, #0]
    }
 80083ea:	bf00      	nop
 80083ec:	e7fe      	b.n	80083ec <vPortValidateInterruptPriority+0x60>
    }
 80083ee:	bf00      	nop
 80083f0:	3714      	adds	r7, #20
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	e000e3f0 	.word	0xe000e3f0
 8008400:	2000049c 	.word	0x2000049c
 8008404:	e000ed0c 	.word	0xe000ed0c
 8008408:	200004a0 	.word	0x200004a0

0800840c <vSetVarulMaxPRIGROUPValue>:

    void vSetVarulMaxPRIGROUPValue( void )
    {
 800840c:	b480      	push	{r7}
 800840e:	b085      	sub	sp, #20
 8008410:	af00      	add	r7, sp, #0
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008412:	4b1f      	ldr	r3, [pc, #124]	; (8008490 <vSetVarulMaxPRIGROUPValue+0x84>)
 8008414:	60fb      	str	r3, [r7, #12]
        volatile uint8_t ucMaxPriorityValue;
        /* Determine the number of priority bits available.  First write to all
        possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	22ff      	movs	r2, #255	; 0xff
 800841a:	701a      	strb	r2, [r3, #0]
        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	b2db      	uxtb	r3, r3
 8008422:	71fb      	strb	r3, [r7, #7]
        /* Calculate the maximum acceptable priority group value for the number
        of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008424:	4b1b      	ldr	r3, [pc, #108]	; (8008494 <vSetVarulMaxPRIGROUPValue+0x88>)
 8008426:	2207      	movs	r2, #7
 8008428:	601a      	str	r2, [r3, #0]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800842a:	e009      	b.n	8008440 <vSetVarulMaxPRIGROUPValue+0x34>
        {
            ulMaxPRIGROUPValue--;
 800842c:	4b19      	ldr	r3, [pc, #100]	; (8008494 <vSetVarulMaxPRIGROUPValue+0x88>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	3b01      	subs	r3, #1
 8008432:	4a18      	ldr	r2, [pc, #96]	; (8008494 <vSetVarulMaxPRIGROUPValue+0x88>)
 8008434:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008436:	79fb      	ldrb	r3, [r7, #7]
 8008438:	b2db      	uxtb	r3, r3
 800843a:	005b      	lsls	r3, r3, #1
 800843c:	b2db      	uxtb	r3, r3
 800843e:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008440:	79fb      	ldrb	r3, [r7, #7]
 8008442:	b2db      	uxtb	r3, r3
 8008444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008448:	2b80      	cmp	r3, #128	; 0x80
 800844a:	d0ef      	beq.n	800842c <vSetVarulMaxPRIGROUPValue+0x20>
    #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
            priority bits matches the number of priority bits actually queried
            from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800844c:	4b11      	ldr	r3, [pc, #68]	; (8008494 <vSetVarulMaxPRIGROUPValue+0x88>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f1c3 0307 	rsb	r3, r3, #7
 8008454:	2b04      	cmp	r3, #4
 8008456:	d00a      	beq.n	800846e <vSetVarulMaxPRIGROUPValue+0x62>
        __asm volatile
 8008458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845c:	f383 8811 	msr	BASEPRI, r3
 8008460:	f3bf 8f6f 	isb	sy
 8008464:	f3bf 8f4f 	dsb	sy
 8008468:	60bb      	str	r3, [r7, #8]
    }
 800846a:	bf00      	nop
 800846c:	e7fe      	b.n	800846c <vSetVarulMaxPRIGROUPValue+0x60>
        }
    #endif
        /* Shift the priority group value back to its position within the AIRCR
        register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800846e:	4b09      	ldr	r3, [pc, #36]	; (8008494 <vSetVarulMaxPRIGROUPValue+0x88>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	021b      	lsls	r3, r3, #8
 8008474:	4a07      	ldr	r2, [pc, #28]	; (8008494 <vSetVarulMaxPRIGROUPValue+0x88>)
 8008476:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008478:	4b06      	ldr	r3, [pc, #24]	; (8008494 <vSetVarulMaxPRIGROUPValue+0x88>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008480:	4a04      	ldr	r2, [pc, #16]	; (8008494 <vSetVarulMaxPRIGROUPValue+0x88>)
 8008482:	6013      	str	r3, [r2, #0]
    }
 8008484:	bf00      	nop
 8008486:	3714      	adds	r7, #20
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr
 8008490:	e000e400 	.word	0xe000e400
 8008494:	200004a0 	.word	0x200004a0

08008498 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b08a      	sub	sp, #40	; 0x28
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80084a0:	2300      	movs	r3, #0
 80084a2:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80084a4:	f7fe fd80 	bl	8006fa8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80084a8:	4b65      	ldr	r3, [pc, #404]	; (8008640 <pvPortMalloc+0x1a8>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d101      	bne.n	80084b4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80084b0:	f000 f934 	bl	800871c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80084b4:	4b63      	ldr	r3, [pc, #396]	; (8008644 <pvPortMalloc+0x1ac>)
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4013      	ands	r3, r2
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f040 80a7 	bne.w	8008610 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d02d      	beq.n	8008524 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80084c8:	2208      	movs	r2, #8
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d227      	bcs.n	8008524 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80084d4:	2208      	movs	r2, #8
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4413      	add	r3, r2
 80084da:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f003 0307 	and.w	r3, r3, #7
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d021      	beq.n	800852a <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f023 0307 	bic.w	r3, r3, #7
 80084ec:	3308      	adds	r3, #8
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d214      	bcs.n	800851e <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f023 0307 	bic.w	r3, r3, #7
 80084fa:	3308      	adds	r3, #8
 80084fc:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f003 0307 	and.w	r3, r3, #7
 8008504:	2b00      	cmp	r3, #0
 8008506:	d010      	beq.n	800852a <pvPortMalloc+0x92>
        __asm volatile
 8008508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850c:	f383 8811 	msr	BASEPRI, r3
 8008510:	f3bf 8f6f 	isb	sy
 8008514:	f3bf 8f4f 	dsb	sy
 8008518:	617b      	str	r3, [r7, #20]
    }
 800851a:	bf00      	nop
 800851c:	e7fe      	b.n	800851c <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 800851e:	2300      	movs	r3, #0
 8008520:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008522:	e002      	b.n	800852a <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8008524:	2300      	movs	r3, #0
 8008526:	607b      	str	r3, [r7, #4]
 8008528:	e000      	b.n	800852c <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800852a:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d06e      	beq.n	8008610 <pvPortMalloc+0x178>
 8008532:	4b45      	ldr	r3, [pc, #276]	; (8008648 <pvPortMalloc+0x1b0>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	429a      	cmp	r2, r3
 800853a:	d869      	bhi.n	8008610 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800853c:	4b43      	ldr	r3, [pc, #268]	; (800864c <pvPortMalloc+0x1b4>)
 800853e:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8008540:	4b42      	ldr	r3, [pc, #264]	; (800864c <pvPortMalloc+0x1b4>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008546:	e004      	b.n	8008552 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8008548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854a:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800854c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	429a      	cmp	r2, r3
 800855a:	d903      	bls.n	8008564 <pvPortMalloc+0xcc>
 800855c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d1f1      	bne.n	8008548 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008564:	4b36      	ldr	r3, [pc, #216]	; (8008640 <pvPortMalloc+0x1a8>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800856a:	429a      	cmp	r2, r3
 800856c:	d050      	beq.n	8008610 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800856e:	6a3b      	ldr	r3, [r7, #32]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2208      	movs	r2, #8
 8008574:	4413      	add	r3, r2
 8008576:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	6a3b      	ldr	r3, [r7, #32]
 800857e:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008582:	685a      	ldr	r2, [r3, #4]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	1ad2      	subs	r2, r2, r3
 8008588:	2308      	movs	r3, #8
 800858a:	005b      	lsls	r3, r3, #1
 800858c:	429a      	cmp	r2, r3
 800858e:	d91f      	bls.n	80085d0 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4413      	add	r3, r2
 8008596:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	f003 0307 	and.w	r3, r3, #7
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00a      	beq.n	80085b8 <pvPortMalloc+0x120>
        __asm volatile
 80085a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a6:	f383 8811 	msr	BASEPRI, r3
 80085aa:	f3bf 8f6f 	isb	sy
 80085ae:	f3bf 8f4f 	dsb	sy
 80085b2:	613b      	str	r3, [r7, #16]
    }
 80085b4:	bf00      	nop
 80085b6:	e7fe      	b.n	80085b6 <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80085b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ba:	685a      	ldr	r2, [r3, #4]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	1ad2      	subs	r2, r2, r3
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80085c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80085ca:	69b8      	ldr	r0, [r7, #24]
 80085cc:	f000 f908 	bl	80087e0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80085d0:	4b1d      	ldr	r3, [pc, #116]	; (8008648 <pvPortMalloc+0x1b0>)
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	1ad3      	subs	r3, r2, r3
 80085da:	4a1b      	ldr	r2, [pc, #108]	; (8008648 <pvPortMalloc+0x1b0>)
 80085dc:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80085de:	4b1a      	ldr	r3, [pc, #104]	; (8008648 <pvPortMalloc+0x1b0>)
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	4b1b      	ldr	r3, [pc, #108]	; (8008650 <pvPortMalloc+0x1b8>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d203      	bcs.n	80085f2 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80085ea:	4b17      	ldr	r3, [pc, #92]	; (8008648 <pvPortMalloc+0x1b0>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a18      	ldr	r2, [pc, #96]	; (8008650 <pvPortMalloc+0x1b8>)
 80085f0:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80085f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f4:	685a      	ldr	r2, [r3, #4]
 80085f6:	4b13      	ldr	r3, [pc, #76]	; (8008644 <pvPortMalloc+0x1ac>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	431a      	orrs	r2, r3
 80085fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fe:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8008600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008602:	2200      	movs	r2, #0
 8008604:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008606:	4b13      	ldr	r3, [pc, #76]	; (8008654 <pvPortMalloc+0x1bc>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	3301      	adds	r3, #1
 800860c:	4a11      	ldr	r2, [pc, #68]	; (8008654 <pvPortMalloc+0x1bc>)
 800860e:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8008610:	f7fe fcd8 	bl	8006fc4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	f003 0307 	and.w	r3, r3, #7
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00a      	beq.n	8008634 <pvPortMalloc+0x19c>
        __asm volatile
 800861e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	60fb      	str	r3, [r7, #12]
    }
 8008630:	bf00      	nop
 8008632:	e7fe      	b.n	8008632 <pvPortMalloc+0x19a>
    return pvReturn;
 8008634:	69fb      	ldr	r3, [r7, #28]
}
 8008636:	4618      	mov	r0, r3
 8008638:	3728      	adds	r7, #40	; 0x28
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	200084ac 	.word	0x200084ac
 8008644:	200084c0 	.word	0x200084c0
 8008648:	200084b0 	.word	0x200084b0
 800864c:	200084a4 	.word	0x200084a4
 8008650:	200084b4 	.word	0x200084b4
 8008654:	200084b8 	.word	0x200084b8

08008658 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b086      	sub	sp, #24
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d04d      	beq.n	8008706 <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800866a:	2308      	movs	r3, #8
 800866c:	425b      	negs	r3, r3
 800866e:	697a      	ldr	r2, [r7, #20]
 8008670:	4413      	add	r3, r2
 8008672:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	685a      	ldr	r2, [r3, #4]
 800867c:	4b24      	ldr	r3, [pc, #144]	; (8008710 <vPortFree+0xb8>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4013      	ands	r3, r2
 8008682:	2b00      	cmp	r3, #0
 8008684:	d10a      	bne.n	800869c <vPortFree+0x44>
        __asm volatile
 8008686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868a:	f383 8811 	msr	BASEPRI, r3
 800868e:	f3bf 8f6f 	isb	sy
 8008692:	f3bf 8f4f 	dsb	sy
 8008696:	60fb      	str	r3, [r7, #12]
    }
 8008698:	bf00      	nop
 800869a:	e7fe      	b.n	800869a <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d00a      	beq.n	80086ba <vPortFree+0x62>
        __asm volatile
 80086a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a8:	f383 8811 	msr	BASEPRI, r3
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	60bb      	str	r3, [r7, #8]
    }
 80086b6:	bf00      	nop
 80086b8:	e7fe      	b.n	80086b8 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	685a      	ldr	r2, [r3, #4]
 80086be:	4b14      	ldr	r3, [pc, #80]	; (8008710 <vPortFree+0xb8>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4013      	ands	r3, r2
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d01e      	beq.n	8008706 <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d11a      	bne.n	8008706 <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	685a      	ldr	r2, [r3, #4]
 80086d4:	4b0e      	ldr	r3, [pc, #56]	; (8008710 <vPortFree+0xb8>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	43db      	mvns	r3, r3
 80086da:	401a      	ands	r2, r3
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80086e0:	f7fe fc62 	bl	8006fa8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	685a      	ldr	r2, [r3, #4]
 80086e8:	4b0a      	ldr	r3, [pc, #40]	; (8008714 <vPortFree+0xbc>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4413      	add	r3, r2
 80086ee:	4a09      	ldr	r2, [pc, #36]	; (8008714 <vPortFree+0xbc>)
 80086f0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80086f2:	6938      	ldr	r0, [r7, #16]
 80086f4:	f000 f874 	bl	80087e0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80086f8:	4b07      	ldr	r3, [pc, #28]	; (8008718 <vPortFree+0xc0>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	3301      	adds	r3, #1
 80086fe:	4a06      	ldr	r2, [pc, #24]	; (8008718 <vPortFree+0xc0>)
 8008700:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008702:	f7fe fc5f 	bl	8006fc4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008706:	bf00      	nop
 8008708:	3718      	adds	r7, #24
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	200084c0 	.word	0x200084c0
 8008714:	200084b0 	.word	0x200084b0
 8008718:	200084bc 	.word	0x200084bc

0800871c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008726:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8008728:	4b27      	ldr	r3, [pc, #156]	; (80087c8 <prvHeapInit+0xac>)
 800872a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f003 0307 	and.w	r3, r3, #7
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00c      	beq.n	8008750 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	3307      	adds	r3, #7
 800873a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f023 0307 	bic.w	r3, r3, #7
 8008742:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008744:	68ba      	ldr	r2, [r7, #8]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	4a1f      	ldr	r2, [pc, #124]	; (80087c8 <prvHeapInit+0xac>)
 800874c:	4413      	add	r3, r2
 800874e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008754:	4a1d      	ldr	r2, [pc, #116]	; (80087cc <prvHeapInit+0xb0>)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800875a:	4b1c      	ldr	r3, [pc, #112]	; (80087cc <prvHeapInit+0xb0>)
 800875c:	2200      	movs	r2, #0
 800875e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	68ba      	ldr	r2, [r7, #8]
 8008764:	4413      	add	r3, r2
 8008766:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008768:	2208      	movs	r2, #8
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	1a9b      	subs	r3, r3, r2
 800876e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f023 0307 	bic.w	r3, r3, #7
 8008776:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	4a15      	ldr	r2, [pc, #84]	; (80087d0 <prvHeapInit+0xb4>)
 800877c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800877e:	4b14      	ldr	r3, [pc, #80]	; (80087d0 <prvHeapInit+0xb4>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2200      	movs	r2, #0
 8008784:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8008786:	4b12      	ldr	r3, [pc, #72]	; (80087d0 <prvHeapInit+0xb4>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2200      	movs	r2, #0
 800878c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	1ad2      	subs	r2, r2, r3
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800879c:	4b0c      	ldr	r3, [pc, #48]	; (80087d0 <prvHeapInit+0xb4>)
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	4a0a      	ldr	r2, [pc, #40]	; (80087d4 <prvHeapInit+0xb8>)
 80087aa:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	4a09      	ldr	r2, [pc, #36]	; (80087d8 <prvHeapInit+0xbc>)
 80087b2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80087b4:	4b09      	ldr	r3, [pc, #36]	; (80087dc <prvHeapInit+0xc0>)
 80087b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80087ba:	601a      	str	r2, [r3, #0]
}
 80087bc:	bf00      	nop
 80087be:	3714      	adds	r7, #20
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr
 80087c8:	200004a4 	.word	0x200004a4
 80087cc:	200084a4 	.word	0x200084a4
 80087d0:	200084ac 	.word	0x200084ac
 80087d4:	200084b4 	.word	0x200084b4
 80087d8:	200084b0 	.word	0x200084b0
 80087dc:	200084c0 	.word	0x200084c0

080087e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80087e8:	4b28      	ldr	r3, [pc, #160]	; (800888c <prvInsertBlockIntoFreeList+0xac>)
 80087ea:	60fb      	str	r3, [r7, #12]
 80087ec:	e002      	b.n	80087f4 <prvInsertBlockIntoFreeList+0x14>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	60fb      	str	r3, [r7, #12]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d8f7      	bhi.n	80087ee <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	68ba      	ldr	r2, [r7, #8]
 8008808:	4413      	add	r3, r2
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	429a      	cmp	r2, r3
 800880e:	d108      	bne.n	8008822 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	685a      	ldr	r2, [r3, #4]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	441a      	add	r2, r3
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	441a      	add	r2, r3
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	429a      	cmp	r2, r3
 8008834:	d118      	bne.n	8008868 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	4b15      	ldr	r3, [pc, #84]	; (8008890 <prvInsertBlockIntoFreeList+0xb0>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	429a      	cmp	r2, r3
 8008840:	d00d      	beq.n	800885e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	685a      	ldr	r2, [r3, #4]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	441a      	add	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	601a      	str	r2, [r3, #0]
 800885c:	e008      	b.n	8008870 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800885e:	4b0c      	ldr	r3, [pc, #48]	; (8008890 <prvInsertBlockIntoFreeList+0xb0>)
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	601a      	str	r2, [r3, #0]
 8008866:	e003      	b.n	8008870 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8008870:	68fa      	ldr	r2, [r7, #12]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	429a      	cmp	r2, r3
 8008876:	d002      	beq.n	800887e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800887e:	bf00      	nop
 8008880:	3714      	adds	r7, #20
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop
 800888c:	200084a4 	.word	0x200084a4
 8008890:	200084ac 	.word	0x200084ac

08008894 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	460b      	mov	r3, r1
 800889e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80088a0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80088a4:	f004 fd3e 	bl	800d324 <USBD_static_malloc>
 80088a8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d109      	bne.n	80088c4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	32b0      	adds	r2, #176	; 0xb0
 80088ba:	2100      	movs	r1, #0
 80088bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80088c0:	2302      	movs	r3, #2
 80088c2:	e0d4      	b.n	8008a6e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80088c4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80088c8:	2100      	movs	r1, #0
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f004 fdb6 	bl	800d43c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	32b0      	adds	r2, #176	; 0xb0
 80088da:	68f9      	ldr	r1, [r7, #12]
 80088dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	32b0      	adds	r2, #176	; 0xb0
 80088ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	7c1b      	ldrb	r3, [r3, #16]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d138      	bne.n	800896e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80088fc:	4b5e      	ldr	r3, [pc, #376]	; (8008a78 <USBD_CDC_Init+0x1e4>)
 80088fe:	7819      	ldrb	r1, [r3, #0]
 8008900:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008904:	2202      	movs	r2, #2
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f004 fbe9 	bl	800d0de <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800890c:	4b5a      	ldr	r3, [pc, #360]	; (8008a78 <USBD_CDC_Init+0x1e4>)
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	f003 020f 	and.w	r2, r3, #15
 8008914:	6879      	ldr	r1, [r7, #4]
 8008916:	4613      	mov	r3, r2
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	4413      	add	r3, r2
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	440b      	add	r3, r1
 8008920:	3324      	adds	r3, #36	; 0x24
 8008922:	2201      	movs	r2, #1
 8008924:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008926:	4b55      	ldr	r3, [pc, #340]	; (8008a7c <USBD_CDC_Init+0x1e8>)
 8008928:	7819      	ldrb	r1, [r3, #0]
 800892a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800892e:	2202      	movs	r2, #2
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f004 fbd4 	bl	800d0de <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008936:	4b51      	ldr	r3, [pc, #324]	; (8008a7c <USBD_CDC_Init+0x1e8>)
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	f003 020f 	and.w	r2, r3, #15
 800893e:	6879      	ldr	r1, [r7, #4]
 8008940:	4613      	mov	r3, r2
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	4413      	add	r3, r2
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	440b      	add	r3, r1
 800894a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800894e:	2201      	movs	r2, #1
 8008950:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008952:	4b4b      	ldr	r3, [pc, #300]	; (8008a80 <USBD_CDC_Init+0x1ec>)
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	f003 020f 	and.w	r2, r3, #15
 800895a:	6879      	ldr	r1, [r7, #4]
 800895c:	4613      	mov	r3, r2
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	4413      	add	r3, r2
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	440b      	add	r3, r1
 8008966:	3326      	adds	r3, #38	; 0x26
 8008968:	2210      	movs	r2, #16
 800896a:	801a      	strh	r2, [r3, #0]
 800896c:	e035      	b.n	80089da <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800896e:	4b42      	ldr	r3, [pc, #264]	; (8008a78 <USBD_CDC_Init+0x1e4>)
 8008970:	7819      	ldrb	r1, [r3, #0]
 8008972:	2340      	movs	r3, #64	; 0x40
 8008974:	2202      	movs	r2, #2
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f004 fbb1 	bl	800d0de <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800897c:	4b3e      	ldr	r3, [pc, #248]	; (8008a78 <USBD_CDC_Init+0x1e4>)
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	f003 020f 	and.w	r2, r3, #15
 8008984:	6879      	ldr	r1, [r7, #4]
 8008986:	4613      	mov	r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4413      	add	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	440b      	add	r3, r1
 8008990:	3324      	adds	r3, #36	; 0x24
 8008992:	2201      	movs	r2, #1
 8008994:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008996:	4b39      	ldr	r3, [pc, #228]	; (8008a7c <USBD_CDC_Init+0x1e8>)
 8008998:	7819      	ldrb	r1, [r3, #0]
 800899a:	2340      	movs	r3, #64	; 0x40
 800899c:	2202      	movs	r2, #2
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f004 fb9d 	bl	800d0de <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80089a4:	4b35      	ldr	r3, [pc, #212]	; (8008a7c <USBD_CDC_Init+0x1e8>)
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	f003 020f 	and.w	r2, r3, #15
 80089ac:	6879      	ldr	r1, [r7, #4]
 80089ae:	4613      	mov	r3, r2
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	4413      	add	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	440b      	add	r3, r1
 80089b8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80089bc:	2201      	movs	r2, #1
 80089be:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80089c0:	4b2f      	ldr	r3, [pc, #188]	; (8008a80 <USBD_CDC_Init+0x1ec>)
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	f003 020f 	and.w	r2, r3, #15
 80089c8:	6879      	ldr	r1, [r7, #4]
 80089ca:	4613      	mov	r3, r2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4413      	add	r3, r2
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	440b      	add	r3, r1
 80089d4:	3326      	adds	r3, #38	; 0x26
 80089d6:	2210      	movs	r2, #16
 80089d8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80089da:	4b29      	ldr	r3, [pc, #164]	; (8008a80 <USBD_CDC_Init+0x1ec>)
 80089dc:	7819      	ldrb	r1, [r3, #0]
 80089de:	2308      	movs	r3, #8
 80089e0:	2203      	movs	r2, #3
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f004 fb7b 	bl	800d0de <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80089e8:	4b25      	ldr	r3, [pc, #148]	; (8008a80 <USBD_CDC_Init+0x1ec>)
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	f003 020f 	and.w	r2, r3, #15
 80089f0:	6879      	ldr	r1, [r7, #4]
 80089f2:	4613      	mov	r3, r2
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	4413      	add	r3, r2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	440b      	add	r3, r1
 80089fc:	3324      	adds	r3, #36	; 0x24
 80089fe:	2201      	movs	r2, #1
 8008a00:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	33b0      	adds	r3, #176	; 0xb0
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	4413      	add	r3, r2
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d101      	bne.n	8008a3c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008a38:	2302      	movs	r3, #2
 8008a3a:	e018      	b.n	8008a6e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	7c1b      	ldrb	r3, [r3, #16]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10a      	bne.n	8008a5a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a44:	4b0d      	ldr	r3, [pc, #52]	; (8008a7c <USBD_CDC_Init+0x1e8>)
 8008a46:	7819      	ldrb	r1, [r3, #0]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f004 fc32 	bl	800d2bc <USBD_LL_PrepareReceive>
 8008a58:	e008      	b.n	8008a6c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a5a:	4b08      	ldr	r3, [pc, #32]	; (8008a7c <USBD_CDC_Init+0x1e8>)
 8008a5c:	7819      	ldrb	r1, [r3, #0]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a64:	2340      	movs	r3, #64	; 0x40
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f004 fc28 	bl	800d2bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3710      	adds	r7, #16
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	2000009b 	.word	0x2000009b
 8008a7c:	2000009c 	.word	0x2000009c
 8008a80:	2000009d 	.word	0x2000009d

08008a84 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008a90:	4b3a      	ldr	r3, [pc, #232]	; (8008b7c <USBD_CDC_DeInit+0xf8>)
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	4619      	mov	r1, r3
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f004 fb47 	bl	800d12a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008a9c:	4b37      	ldr	r3, [pc, #220]	; (8008b7c <USBD_CDC_DeInit+0xf8>)
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	f003 020f 	and.w	r2, r3, #15
 8008aa4:	6879      	ldr	r1, [r7, #4]
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	4413      	add	r3, r2
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	440b      	add	r3, r1
 8008ab0:	3324      	adds	r3, #36	; 0x24
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008ab6:	4b32      	ldr	r3, [pc, #200]	; (8008b80 <USBD_CDC_DeInit+0xfc>)
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	4619      	mov	r1, r3
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f004 fb34 	bl	800d12a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008ac2:	4b2f      	ldr	r3, [pc, #188]	; (8008b80 <USBD_CDC_DeInit+0xfc>)
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	f003 020f 	and.w	r2, r3, #15
 8008aca:	6879      	ldr	r1, [r7, #4]
 8008acc:	4613      	mov	r3, r2
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	4413      	add	r3, r2
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	440b      	add	r3, r1
 8008ad6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008ada:	2200      	movs	r2, #0
 8008adc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008ade:	4b29      	ldr	r3, [pc, #164]	; (8008b84 <USBD_CDC_DeInit+0x100>)
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f004 fb20 	bl	800d12a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008aea:	4b26      	ldr	r3, [pc, #152]	; (8008b84 <USBD_CDC_DeInit+0x100>)
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	f003 020f 	and.w	r2, r3, #15
 8008af2:	6879      	ldr	r1, [r7, #4]
 8008af4:	4613      	mov	r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	4413      	add	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	440b      	add	r3, r1
 8008afe:	3324      	adds	r3, #36	; 0x24
 8008b00:	2200      	movs	r2, #0
 8008b02:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008b04:	4b1f      	ldr	r3, [pc, #124]	; (8008b84 <USBD_CDC_DeInit+0x100>)
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	f003 020f 	and.w	r2, r3, #15
 8008b0c:	6879      	ldr	r1, [r7, #4]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	4413      	add	r3, r2
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	440b      	add	r3, r1
 8008b18:	3326      	adds	r3, #38	; 0x26
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	32b0      	adds	r2, #176	; 0xb0
 8008b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d01f      	beq.n	8008b70 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	33b0      	adds	r3, #176	; 0xb0
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	4413      	add	r3, r2
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	32b0      	adds	r2, #176	; 0xb0
 8008b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b52:	4618      	mov	r0, r3
 8008b54:	f004 fbf4 	bl	800d340 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	32b0      	adds	r2, #176	; 0xb0
 8008b62:	2100      	movs	r1, #0
 8008b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3708      	adds	r7, #8
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	2000009b 	.word	0x2000009b
 8008b80:	2000009c 	.word	0x2000009c
 8008b84:	2000009d 	.word	0x2000009d

08008b88 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	32b0      	adds	r2, #176	; 0xb0
 8008b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008baa:	2300      	movs	r3, #0
 8008bac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d101      	bne.n	8008bb8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008bb4:	2303      	movs	r3, #3
 8008bb6:	e0bf      	b.n	8008d38 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d050      	beq.n	8008c66 <USBD_CDC_Setup+0xde>
 8008bc4:	2b20      	cmp	r3, #32
 8008bc6:	f040 80af 	bne.w	8008d28 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	88db      	ldrh	r3, [r3, #6]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d03a      	beq.n	8008c48 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	b25b      	sxtb	r3, r3
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	da1b      	bge.n	8008c14 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	33b0      	adds	r3, #176	; 0xb0
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4413      	add	r3, r2
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	683a      	ldr	r2, [r7, #0]
 8008bf0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008bf2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008bf4:	683a      	ldr	r2, [r7, #0]
 8008bf6:	88d2      	ldrh	r2, [r2, #6]
 8008bf8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	88db      	ldrh	r3, [r3, #6]
 8008bfe:	2b07      	cmp	r3, #7
 8008c00:	bf28      	it	cs
 8008c02:	2307      	movcs	r3, #7
 8008c04:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	89fa      	ldrh	r2, [r7, #14]
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f001 fd43 	bl	800a698 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008c12:	e090      	b.n	8008d36 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	785a      	ldrb	r2, [r3, #1]
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	88db      	ldrh	r3, [r3, #6]
 8008c22:	2b3f      	cmp	r3, #63	; 0x3f
 8008c24:	d803      	bhi.n	8008c2e <USBD_CDC_Setup+0xa6>
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	88db      	ldrh	r3, [r3, #6]
 8008c2a:	b2da      	uxtb	r2, r3
 8008c2c:	e000      	b.n	8008c30 <USBD_CDC_Setup+0xa8>
 8008c2e:	2240      	movs	r2, #64	; 0x40
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008c36:	6939      	ldr	r1, [r7, #16]
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008c3e:	461a      	mov	r2, r3
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f001 fd55 	bl	800a6f0 <USBD_CtlPrepareRx>
      break;
 8008c46:	e076      	b.n	8008d36 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	33b0      	adds	r3, #176	; 0xb0
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4413      	add	r3, r2
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	7850      	ldrb	r0, [r2, #1]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	6839      	ldr	r1, [r7, #0]
 8008c62:	4798      	blx	r3
      break;
 8008c64:	e067      	b.n	8008d36 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	785b      	ldrb	r3, [r3, #1]
 8008c6a:	2b0b      	cmp	r3, #11
 8008c6c:	d851      	bhi.n	8008d12 <USBD_CDC_Setup+0x18a>
 8008c6e:	a201      	add	r2, pc, #4	; (adr r2, 8008c74 <USBD_CDC_Setup+0xec>)
 8008c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c74:	08008ca5 	.word	0x08008ca5
 8008c78:	08008d21 	.word	0x08008d21
 8008c7c:	08008d13 	.word	0x08008d13
 8008c80:	08008d13 	.word	0x08008d13
 8008c84:	08008d13 	.word	0x08008d13
 8008c88:	08008d13 	.word	0x08008d13
 8008c8c:	08008d13 	.word	0x08008d13
 8008c90:	08008d13 	.word	0x08008d13
 8008c94:	08008d13 	.word	0x08008d13
 8008c98:	08008d13 	.word	0x08008d13
 8008c9c:	08008ccf 	.word	0x08008ccf
 8008ca0:	08008cf9 	.word	0x08008cf9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	2b03      	cmp	r3, #3
 8008cae:	d107      	bne.n	8008cc0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008cb0:	f107 030a 	add.w	r3, r7, #10
 8008cb4:	2202      	movs	r2, #2
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f001 fced 	bl	800a698 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008cbe:	e032      	b.n	8008d26 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008cc0:	6839      	ldr	r1, [r7, #0]
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f001 fc77 	bl	800a5b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008cc8:	2303      	movs	r3, #3
 8008cca:	75fb      	strb	r3, [r7, #23]
          break;
 8008ccc:	e02b      	b.n	8008d26 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	2b03      	cmp	r3, #3
 8008cd8:	d107      	bne.n	8008cea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008cda:	f107 030d 	add.w	r3, r7, #13
 8008cde:	2201      	movs	r2, #1
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f001 fcd8 	bl	800a698 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ce8:	e01d      	b.n	8008d26 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008cea:	6839      	ldr	r1, [r7, #0]
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f001 fc62 	bl	800a5b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	75fb      	strb	r3, [r7, #23]
          break;
 8008cf6:	e016      	b.n	8008d26 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	2b03      	cmp	r3, #3
 8008d02:	d00f      	beq.n	8008d24 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008d04:	6839      	ldr	r1, [r7, #0]
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f001 fc55 	bl	800a5b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d0c:	2303      	movs	r3, #3
 8008d0e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008d10:	e008      	b.n	8008d24 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008d12:	6839      	ldr	r1, [r7, #0]
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f001 fc4e 	bl	800a5b6 <USBD_CtlError>
          ret = USBD_FAIL;
 8008d1a:	2303      	movs	r3, #3
 8008d1c:	75fb      	strb	r3, [r7, #23]
          break;
 8008d1e:	e002      	b.n	8008d26 <USBD_CDC_Setup+0x19e>
          break;
 8008d20:	bf00      	nop
 8008d22:	e008      	b.n	8008d36 <USBD_CDC_Setup+0x1ae>
          break;
 8008d24:	bf00      	nop
      }
      break;
 8008d26:	e006      	b.n	8008d36 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008d28:	6839      	ldr	r1, [r7, #0]
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f001 fc43 	bl	800a5b6 <USBD_CtlError>
      ret = USBD_FAIL;
 8008d30:	2303      	movs	r3, #3
 8008d32:	75fb      	strb	r3, [r7, #23]
      break;
 8008d34:	bf00      	nop
  }

  return (uint8_t)ret;
 8008d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3718      	adds	r7, #24
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	460b      	mov	r3, r1
 8008d4a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d52:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	32b0      	adds	r2, #176	; 0xb0
 8008d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d101      	bne.n	8008d6a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008d66:	2303      	movs	r3, #3
 8008d68:	e065      	b.n	8008e36 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	32b0      	adds	r2, #176	; 0xb0
 8008d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d78:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008d7a:	78fb      	ldrb	r3, [r7, #3]
 8008d7c:	f003 020f 	and.w	r2, r3, #15
 8008d80:	6879      	ldr	r1, [r7, #4]
 8008d82:	4613      	mov	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4413      	add	r3, r2
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	440b      	add	r3, r1
 8008d8c:	3318      	adds	r3, #24
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d02f      	beq.n	8008df4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008d94:	78fb      	ldrb	r3, [r7, #3]
 8008d96:	f003 020f 	and.w	r2, r3, #15
 8008d9a:	6879      	ldr	r1, [r7, #4]
 8008d9c:	4613      	mov	r3, r2
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	4413      	add	r3, r2
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	440b      	add	r3, r1
 8008da6:	3318      	adds	r3, #24
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	78fb      	ldrb	r3, [r7, #3]
 8008dac:	f003 010f 	and.w	r1, r3, #15
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	460b      	mov	r3, r1
 8008db4:	00db      	lsls	r3, r3, #3
 8008db6:	440b      	add	r3, r1
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	4403      	add	r3, r0
 8008dbc:	3348      	adds	r3, #72	; 0x48
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	fbb2 f1f3 	udiv	r1, r2, r3
 8008dc4:	fb01 f303 	mul.w	r3, r1, r3
 8008dc8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d112      	bne.n	8008df4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008dce:	78fb      	ldrb	r3, [r7, #3]
 8008dd0:	f003 020f 	and.w	r2, r3, #15
 8008dd4:	6879      	ldr	r1, [r7, #4]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	4413      	add	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	440b      	add	r3, r1
 8008de0:	3318      	adds	r3, #24
 8008de2:	2200      	movs	r2, #0
 8008de4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008de6:	78f9      	ldrb	r1, [r7, #3]
 8008de8:	2300      	movs	r3, #0
 8008dea:	2200      	movs	r2, #0
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f004 fa44 	bl	800d27a <USBD_LL_Transmit>
 8008df2:	e01f      	b.n	8008e34 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	33b0      	adds	r3, #176	; 0xb0
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	4413      	add	r3, r2
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	691b      	ldr	r3, [r3, #16]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d010      	beq.n	8008e34 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	33b0      	adds	r3, #176	; 0xb0
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	4413      	add	r3, r2
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	68ba      	ldr	r2, [r7, #8]
 8008e26:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008e2a:	68ba      	ldr	r2, [r7, #8]
 8008e2c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008e30:	78fa      	ldrb	r2, [r7, #3]
 8008e32:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b084      	sub	sp, #16
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
 8008e46:	460b      	mov	r3, r1
 8008e48:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	32b0      	adds	r2, #176	; 0xb0
 8008e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e58:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	32b0      	adds	r2, #176	; 0xb0
 8008e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d101      	bne.n	8008e70 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	e01a      	b.n	8008ea6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008e70:	78fb      	ldrb	r3, [r7, #3]
 8008e72:	4619      	mov	r1, r3
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f004 fa42 	bl	800d2fe <USBD_LL_GetRxDataSize>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	33b0      	adds	r3, #176	; 0xb0
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	4413      	add	r3, r2
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008e9a:	68fa      	ldr	r2, [r7, #12]
 8008e9c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008ea0:	4611      	mov	r1, r2
 8008ea2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b084      	sub	sp, #16
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	32b0      	adds	r2, #176	; 0xb0
 8008ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d101      	bne.n	8008ed0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	e025      	b.n	8008f1c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	33b0      	adds	r3, #176	; 0xb0
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	4413      	add	r3, r2
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d01a      	beq.n	8008f1a <USBD_CDC_EP0_RxReady+0x6c>
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008eea:	2bff      	cmp	r3, #255	; 0xff
 8008eec:	d015      	beq.n	8008f1a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	33b0      	adds	r3, #176	; 0xb0
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	4413      	add	r3, r2
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008f06:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008f08:	68fa      	ldr	r2, [r7, #12]
 8008f0a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008f0e:	b292      	uxth	r2, r2
 8008f10:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	22ff      	movs	r2, #255	; 0xff
 8008f16:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3710      	adds	r7, #16
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b086      	sub	sp, #24
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008f2c:	2182      	movs	r1, #130	; 0x82
 8008f2e:	4818      	ldr	r0, [pc, #96]	; (8008f90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008f30:	f000 fd09 	bl	8009946 <USBD_GetEpDesc>
 8008f34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008f36:	2101      	movs	r1, #1
 8008f38:	4815      	ldr	r0, [pc, #84]	; (8008f90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008f3a:	f000 fd04 	bl	8009946 <USBD_GetEpDesc>
 8008f3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008f40:	2181      	movs	r1, #129	; 0x81
 8008f42:	4813      	ldr	r0, [pc, #76]	; (8008f90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008f44:	f000 fcff 	bl	8009946 <USBD_GetEpDesc>
 8008f48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d002      	beq.n	8008f56 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	2210      	movs	r2, #16
 8008f54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d006      	beq.n	8008f6a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f64:	711a      	strb	r2, [r3, #4]
 8008f66:	2200      	movs	r2, #0
 8008f68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d006      	beq.n	8008f7e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f78:	711a      	strb	r2, [r3, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2243      	movs	r2, #67	; 0x43
 8008f82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008f84:	4b02      	ldr	r3, [pc, #8]	; (8008f90 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3718      	adds	r7, #24
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	20000058 	.word	0x20000058

08008f94 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b086      	sub	sp, #24
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008f9c:	2182      	movs	r1, #130	; 0x82
 8008f9e:	4818      	ldr	r0, [pc, #96]	; (8009000 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008fa0:	f000 fcd1 	bl	8009946 <USBD_GetEpDesc>
 8008fa4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008fa6:	2101      	movs	r1, #1
 8008fa8:	4815      	ldr	r0, [pc, #84]	; (8009000 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008faa:	f000 fccc 	bl	8009946 <USBD_GetEpDesc>
 8008fae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008fb0:	2181      	movs	r1, #129	; 0x81
 8008fb2:	4813      	ldr	r0, [pc, #76]	; (8009000 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008fb4:	f000 fcc7 	bl	8009946 <USBD_GetEpDesc>
 8008fb8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d002      	beq.n	8008fc6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	2210      	movs	r2, #16
 8008fc4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d006      	beq.n	8008fda <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	711a      	strb	r2, [r3, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f042 0202 	orr.w	r2, r2, #2
 8008fd8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d006      	beq.n	8008fee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	711a      	strb	r2, [r3, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f042 0202 	orr.w	r2, r2, #2
 8008fec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2243      	movs	r2, #67	; 0x43
 8008ff2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008ff4:	4b02      	ldr	r3, [pc, #8]	; (8009000 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3718      	adds	r7, #24
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	20000058 	.word	0x20000058

08009004 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b086      	sub	sp, #24
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800900c:	2182      	movs	r1, #130	; 0x82
 800900e:	4818      	ldr	r0, [pc, #96]	; (8009070 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009010:	f000 fc99 	bl	8009946 <USBD_GetEpDesc>
 8009014:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009016:	2101      	movs	r1, #1
 8009018:	4815      	ldr	r0, [pc, #84]	; (8009070 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800901a:	f000 fc94 	bl	8009946 <USBD_GetEpDesc>
 800901e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009020:	2181      	movs	r1, #129	; 0x81
 8009022:	4813      	ldr	r0, [pc, #76]	; (8009070 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009024:	f000 fc8f 	bl	8009946 <USBD_GetEpDesc>
 8009028:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d002      	beq.n	8009036 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	2210      	movs	r2, #16
 8009034:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d006      	beq.n	800904a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	2200      	movs	r2, #0
 8009040:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009044:	711a      	strb	r2, [r3, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d006      	beq.n	800905e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2200      	movs	r2, #0
 8009054:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009058:	711a      	strb	r2, [r3, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2243      	movs	r2, #67	; 0x43
 8009062:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009064:	4b02      	ldr	r3, [pc, #8]	; (8009070 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009066:	4618      	mov	r0, r3
 8009068:	3718      	adds	r7, #24
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	20000058 	.word	0x20000058

08009074 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	220a      	movs	r2, #10
 8009080:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009082:	4b03      	ldr	r3, [pc, #12]	; (8009090 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009084:	4618      	mov	r0, r3
 8009086:	370c      	adds	r7, #12
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr
 8009090:	20000014 	.word	0x20000014

08009094 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d101      	bne.n	80090a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e009      	b.n	80090bc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	33b0      	adds	r3, #176	; 0xb0
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	4413      	add	r3, r2
 80090b6:	683a      	ldr	r2, [r7, #0]
 80090b8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b087      	sub	sp, #28
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	32b0      	adds	r2, #176	; 0xb0
 80090de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090e2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d101      	bne.n	80090ee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80090ea:	2303      	movs	r3, #3
 80090ec:	e008      	b.n	8009100 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	68ba      	ldr	r2, [r7, #8]
 80090f2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	371c      	adds	r7, #28
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800910c:	b480      	push	{r7}
 800910e:	b085      	sub	sp, #20
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	32b0      	adds	r2, #176	; 0xb0
 8009120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009124:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d101      	bne.n	8009130 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800912c:	2303      	movs	r3, #3
 800912e:	e004      	b.n	800913a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	683a      	ldr	r2, [r7, #0]
 8009134:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3714      	adds	r7, #20
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr
	...

08009148 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	32b0      	adds	r2, #176	; 0xb0
 800915a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800915e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	32b0      	adds	r2, #176	; 0xb0
 800916a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d101      	bne.n	8009176 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009172:	2303      	movs	r3, #3
 8009174:	e018      	b.n	80091a8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	7c1b      	ldrb	r3, [r3, #16]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d10a      	bne.n	8009194 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800917e:	4b0c      	ldr	r3, [pc, #48]	; (80091b0 <USBD_CDC_ReceivePacket+0x68>)
 8009180:	7819      	ldrb	r1, [r3, #0]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009188:	f44f 7300 	mov.w	r3, #512	; 0x200
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f004 f895 	bl	800d2bc <USBD_LL_PrepareReceive>
 8009192:	e008      	b.n	80091a6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009194:	4b06      	ldr	r3, [pc, #24]	; (80091b0 <USBD_CDC_ReceivePacket+0x68>)
 8009196:	7819      	ldrb	r1, [r3, #0]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800919e:	2340      	movs	r3, #64	; 0x40
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f004 f88b 	bl	800d2bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3710      	adds	r7, #16
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	2000009c 	.word	0x2000009c

080091b4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b086      	sub	sp, #24
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	4613      	mov	r3, r2
 80091c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d101      	bne.n	80091cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80091c8:	2303      	movs	r3, #3
 80091ca:	e01f      	b.n	800920c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2200      	movs	r2, #0
 80091d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2200      	movs	r2, #0
 80091e0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d003      	beq.n	80091f2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	68ba      	ldr	r2, [r7, #8]
 80091ee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2201      	movs	r2, #1
 80091f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	79fa      	ldrb	r2, [r7, #7]
 80091fe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009200:	68f8      	ldr	r0, [r7, #12]
 8009202:	f003 ff05 	bl	800d010 <USBD_LL_Init>
 8009206:	4603      	mov	r3, r0
 8009208:	75fb      	strb	r3, [r7, #23]

  return ret;
 800920a:	7dfb      	ldrb	r3, [r7, #23]
}
 800920c:	4618      	mov	r0, r3
 800920e:	3718      	adds	r7, #24
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800921e:	2300      	movs	r3, #0
 8009220:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d101      	bne.n	800922c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009228:	2303      	movs	r3, #3
 800922a:	e025      	b.n	8009278 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	683a      	ldr	r2, [r7, #0]
 8009230:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	32ae      	adds	r2, #174	; 0xae
 800923e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00f      	beq.n	8009268 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	32ae      	adds	r2, #174	; 0xae
 8009252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009258:	f107 020e 	add.w	r2, r7, #14
 800925c:	4610      	mov	r0, r2
 800925e:	4798      	blx	r3
 8009260:	4602      	mov	r2, r0
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800926e:	1c5a      	adds	r2, r3, #1
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009276:	2300      	movs	r3, #0
}
 8009278:	4618      	mov	r0, r3
 800927a:	3710      	adds	r7, #16
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f003 ff0d 	bl	800d0a8 <USBD_LL_Start>
 800928e:	4603      	mov	r3, r0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3708      	adds	r7, #8
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80092a0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	370c      	adds	r7, #12
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr

080092ae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b084      	sub	sp, #16
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
 80092b6:	460b      	mov	r3, r1
 80092b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d009      	beq.n	80092dc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	78fa      	ldrb	r2, [r7, #3]
 80092d2:	4611      	mov	r1, r2
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	4798      	blx	r3
 80092d8:	4603      	mov	r3, r0
 80092da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80092dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}

080092e6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b084      	sub	sp, #16
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
 80092ee:	460b      	mov	r3, r1
 80092f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80092f2:	2300      	movs	r3, #0
 80092f4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	78fa      	ldrb	r2, [r7, #3]
 8009300:	4611      	mov	r1, r2
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	4798      	blx	r3
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d001      	beq.n	8009310 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800930c:	2303      	movs	r3, #3
 800930e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009310:	7bfb      	ldrb	r3, [r7, #15]
}
 8009312:	4618      	mov	r0, r3
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b084      	sub	sp, #16
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
 8009322:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800932a:	6839      	ldr	r1, [r7, #0]
 800932c:	4618      	mov	r0, r3
 800932e:	f001 f908 	bl	800a542 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2201      	movs	r2, #1
 8009336:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009340:	461a      	mov	r2, r3
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800934e:	f003 031f 	and.w	r3, r3, #31
 8009352:	2b02      	cmp	r3, #2
 8009354:	d01a      	beq.n	800938c <USBD_LL_SetupStage+0x72>
 8009356:	2b02      	cmp	r3, #2
 8009358:	d822      	bhi.n	80093a0 <USBD_LL_SetupStage+0x86>
 800935a:	2b00      	cmp	r3, #0
 800935c:	d002      	beq.n	8009364 <USBD_LL_SetupStage+0x4a>
 800935e:	2b01      	cmp	r3, #1
 8009360:	d00a      	beq.n	8009378 <USBD_LL_SetupStage+0x5e>
 8009362:	e01d      	b.n	80093a0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800936a:	4619      	mov	r1, r3
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 fb5f 	bl	8009a30 <USBD_StdDevReq>
 8009372:	4603      	mov	r3, r0
 8009374:	73fb      	strb	r3, [r7, #15]
      break;
 8009376:	e020      	b.n	80093ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800937e:	4619      	mov	r1, r3
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 fbc7 	bl	8009b14 <USBD_StdItfReq>
 8009386:	4603      	mov	r3, r0
 8009388:	73fb      	strb	r3, [r7, #15]
      break;
 800938a:	e016      	b.n	80093ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009392:	4619      	mov	r1, r3
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fc29 	bl	8009bec <USBD_StdEPReq>
 800939a:	4603      	mov	r3, r0
 800939c:	73fb      	strb	r3, [r7, #15]
      break;
 800939e:	e00c      	b.n	80093ba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80093a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	4619      	mov	r1, r3
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f003 feda 	bl	800d168 <USBD_LL_StallEP>
 80093b4:	4603      	mov	r3, r0
 80093b6:	73fb      	strb	r3, [r7, #15]
      break;
 80093b8:	bf00      	nop
  }

  return ret;
 80093ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3710      	adds	r7, #16
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b086      	sub	sp, #24
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	460b      	mov	r3, r1
 80093ce:	607a      	str	r2, [r7, #4]
 80093d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80093d2:	2300      	movs	r3, #0
 80093d4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80093d6:	7afb      	ldrb	r3, [r7, #11]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d16e      	bne.n	80094ba <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80093e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80093ea:	2b03      	cmp	r3, #3
 80093ec:	f040 8098 	bne.w	8009520 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	689a      	ldr	r2, [r3, #8]
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d913      	bls.n	8009424 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	689a      	ldr	r2, [r3, #8]
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	1ad2      	subs	r2, r2, r3
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	68da      	ldr	r2, [r3, #12]
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	4293      	cmp	r3, r2
 8009414:	bf28      	it	cs
 8009416:	4613      	movcs	r3, r2
 8009418:	461a      	mov	r2, r3
 800941a:	6879      	ldr	r1, [r7, #4]
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f001 f984 	bl	800a72a <USBD_CtlContinueRx>
 8009422:	e07d      	b.n	8009520 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800942a:	f003 031f 	and.w	r3, r3, #31
 800942e:	2b02      	cmp	r3, #2
 8009430:	d014      	beq.n	800945c <USBD_LL_DataOutStage+0x98>
 8009432:	2b02      	cmp	r3, #2
 8009434:	d81d      	bhi.n	8009472 <USBD_LL_DataOutStage+0xae>
 8009436:	2b00      	cmp	r3, #0
 8009438:	d002      	beq.n	8009440 <USBD_LL_DataOutStage+0x7c>
 800943a:	2b01      	cmp	r3, #1
 800943c:	d003      	beq.n	8009446 <USBD_LL_DataOutStage+0x82>
 800943e:	e018      	b.n	8009472 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009440:	2300      	movs	r3, #0
 8009442:	75bb      	strb	r3, [r7, #22]
            break;
 8009444:	e018      	b.n	8009478 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800944c:	b2db      	uxtb	r3, r3
 800944e:	4619      	mov	r1, r3
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f000 fa5e 	bl	8009912 <USBD_CoreFindIF>
 8009456:	4603      	mov	r3, r0
 8009458:	75bb      	strb	r3, [r7, #22]
            break;
 800945a:	e00d      	b.n	8009478 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009462:	b2db      	uxtb	r3, r3
 8009464:	4619      	mov	r1, r3
 8009466:	68f8      	ldr	r0, [r7, #12]
 8009468:	f000 fa60 	bl	800992c <USBD_CoreFindEP>
 800946c:	4603      	mov	r3, r0
 800946e:	75bb      	strb	r3, [r7, #22]
            break;
 8009470:	e002      	b.n	8009478 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009472:	2300      	movs	r3, #0
 8009474:	75bb      	strb	r3, [r7, #22]
            break;
 8009476:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009478:	7dbb      	ldrb	r3, [r7, #22]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d119      	bne.n	80094b2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009484:	b2db      	uxtb	r3, r3
 8009486:	2b03      	cmp	r3, #3
 8009488:	d113      	bne.n	80094b2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800948a:	7dba      	ldrb	r2, [r7, #22]
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	32ae      	adds	r2, #174	; 0xae
 8009490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009494:	691b      	ldr	r3, [r3, #16]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00b      	beq.n	80094b2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800949a:	7dba      	ldrb	r2, [r7, #22]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80094a2:	7dba      	ldrb	r2, [r7, #22]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	32ae      	adds	r2, #174	; 0xae
 80094a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ac:	691b      	ldr	r3, [r3, #16]
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f001 f94a 	bl	800a74c <USBD_CtlSendStatus>
 80094b8:	e032      	b.n	8009520 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80094ba:	7afb      	ldrb	r3, [r7, #11]
 80094bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	4619      	mov	r1, r3
 80094c4:	68f8      	ldr	r0, [r7, #12]
 80094c6:	f000 fa31 	bl	800992c <USBD_CoreFindEP>
 80094ca:	4603      	mov	r3, r0
 80094cc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80094ce:	7dbb      	ldrb	r3, [r7, #22]
 80094d0:	2bff      	cmp	r3, #255	; 0xff
 80094d2:	d025      	beq.n	8009520 <USBD_LL_DataOutStage+0x15c>
 80094d4:	7dbb      	ldrb	r3, [r7, #22]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d122      	bne.n	8009520 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	2b03      	cmp	r3, #3
 80094e4:	d117      	bne.n	8009516 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80094e6:	7dba      	ldrb	r2, [r7, #22]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	32ae      	adds	r2, #174	; 0xae
 80094ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094f0:	699b      	ldr	r3, [r3, #24]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00f      	beq.n	8009516 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80094f6:	7dba      	ldrb	r2, [r7, #22]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80094fe:	7dba      	ldrb	r2, [r7, #22]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	32ae      	adds	r2, #174	; 0xae
 8009504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009508:	699b      	ldr	r3, [r3, #24]
 800950a:	7afa      	ldrb	r2, [r7, #11]
 800950c:	4611      	mov	r1, r2
 800950e:	68f8      	ldr	r0, [r7, #12]
 8009510:	4798      	blx	r3
 8009512:	4603      	mov	r3, r0
 8009514:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009516:	7dfb      	ldrb	r3, [r7, #23]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d001      	beq.n	8009520 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800951c:	7dfb      	ldrb	r3, [r7, #23]
 800951e:	e000      	b.n	8009522 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3718      	adds	r7, #24
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b086      	sub	sp, #24
 800952e:	af00      	add	r7, sp, #0
 8009530:	60f8      	str	r0, [r7, #12]
 8009532:	460b      	mov	r3, r1
 8009534:	607a      	str	r2, [r7, #4]
 8009536:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009538:	7afb      	ldrb	r3, [r7, #11]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d16f      	bne.n	800961e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	3314      	adds	r3, #20
 8009542:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800954a:	2b02      	cmp	r3, #2
 800954c:	d15a      	bne.n	8009604 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	689a      	ldr	r2, [r3, #8]
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	429a      	cmp	r2, r3
 8009558:	d914      	bls.n	8009584 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	689a      	ldr	r2, [r3, #8]
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	1ad2      	subs	r2, r2, r3
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	461a      	mov	r2, r3
 800956e:	6879      	ldr	r1, [r7, #4]
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f001 f8ac 	bl	800a6ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009576:	2300      	movs	r3, #0
 8009578:	2200      	movs	r2, #0
 800957a:	2100      	movs	r1, #0
 800957c:	68f8      	ldr	r0, [r7, #12]
 800957e:	f003 fe9d 	bl	800d2bc <USBD_LL_PrepareReceive>
 8009582:	e03f      	b.n	8009604 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	68da      	ldr	r2, [r3, #12]
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	429a      	cmp	r2, r3
 800958e:	d11c      	bne.n	80095ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	685a      	ldr	r2, [r3, #4]
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009598:	429a      	cmp	r2, r3
 800959a:	d316      	bcc.n	80095ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	685a      	ldr	r2, [r3, #4]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d20f      	bcs.n	80095ca <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80095aa:	2200      	movs	r2, #0
 80095ac:	2100      	movs	r1, #0
 80095ae:	68f8      	ldr	r0, [r7, #12]
 80095b0:	f001 f88d 	bl	800a6ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095bc:	2300      	movs	r3, #0
 80095be:	2200      	movs	r2, #0
 80095c0:	2100      	movs	r1, #0
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	f003 fe7a 	bl	800d2bc <USBD_LL_PrepareReceive>
 80095c8:	e01c      	b.n	8009604 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	2b03      	cmp	r3, #3
 80095d4:	d10f      	bne.n	80095f6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d009      	beq.n	80095f6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	68f8      	ldr	r0, [r7, #12]
 80095f4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80095f6:	2180      	movs	r1, #128	; 0x80
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f003 fdb5 	bl	800d168 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80095fe:	68f8      	ldr	r0, [r7, #12]
 8009600:	f001 f8b7 	bl	800a772 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d03a      	beq.n	8009684 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	f7ff fe42 	bl	8009298 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2200      	movs	r2, #0
 8009618:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800961c:	e032      	b.n	8009684 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800961e:	7afb      	ldrb	r3, [r7, #11]
 8009620:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009624:	b2db      	uxtb	r3, r3
 8009626:	4619      	mov	r1, r3
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	f000 f97f 	bl	800992c <USBD_CoreFindEP>
 800962e:	4603      	mov	r3, r0
 8009630:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009632:	7dfb      	ldrb	r3, [r7, #23]
 8009634:	2bff      	cmp	r3, #255	; 0xff
 8009636:	d025      	beq.n	8009684 <USBD_LL_DataInStage+0x15a>
 8009638:	7dfb      	ldrb	r3, [r7, #23]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d122      	bne.n	8009684 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009644:	b2db      	uxtb	r3, r3
 8009646:	2b03      	cmp	r3, #3
 8009648:	d11c      	bne.n	8009684 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800964a:	7dfa      	ldrb	r2, [r7, #23]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	32ae      	adds	r2, #174	; 0xae
 8009650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009654:	695b      	ldr	r3, [r3, #20]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d014      	beq.n	8009684 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800965a:	7dfa      	ldrb	r2, [r7, #23]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009662:	7dfa      	ldrb	r2, [r7, #23]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	32ae      	adds	r2, #174	; 0xae
 8009668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800966c:	695b      	ldr	r3, [r3, #20]
 800966e:	7afa      	ldrb	r2, [r7, #11]
 8009670:	4611      	mov	r1, r2
 8009672:	68f8      	ldr	r0, [r7, #12]
 8009674:	4798      	blx	r3
 8009676:	4603      	mov	r3, r0
 8009678:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800967a:	7dbb      	ldrb	r3, [r7, #22]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d001      	beq.n	8009684 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009680:	7dbb      	ldrb	r3, [r7, #22]
 8009682:	e000      	b.n	8009686 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3718      	adds	r7, #24
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800968e:	b580      	push	{r7, lr}
 8009690:	b084      	sub	sp, #16
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009696:	2300      	movs	r3, #0
 8009698:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2201      	movs	r2, #1
 800969e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d014      	beq.n	80096f4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d00e      	beq.n	80096f4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	6852      	ldr	r2, [r2, #4]
 80096e2:	b2d2      	uxtb	r2, r2
 80096e4:	4611      	mov	r1, r2
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	4798      	blx	r3
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d001      	beq.n	80096f4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80096f0:	2303      	movs	r3, #3
 80096f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80096f4:	2340      	movs	r3, #64	; 0x40
 80096f6:	2200      	movs	r2, #0
 80096f8:	2100      	movs	r1, #0
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f003 fcef 	bl	800d0de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2201      	movs	r2, #1
 8009704:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2240      	movs	r2, #64	; 0x40
 800970c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009710:	2340      	movs	r3, #64	; 0x40
 8009712:	2200      	movs	r2, #0
 8009714:	2180      	movs	r1, #128	; 0x80
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f003 fce1 	bl	800d0de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2201      	movs	r2, #1
 8009720:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2240      	movs	r2, #64	; 0x40
 8009726:	621a      	str	r2, [r3, #32]

  return ret;
 8009728:	7bfb      	ldrb	r3, [r7, #15]
}
 800972a:	4618      	mov	r0, r3
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009732:	b480      	push	{r7}
 8009734:	b083      	sub	sp, #12
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
 800973a:	460b      	mov	r3, r1
 800973c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	78fa      	ldrb	r2, [r7, #3]
 8009742:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	370c      	adds	r7, #12
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr

08009752 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009752:	b480      	push	{r7}
 8009754:	b083      	sub	sp, #12
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009760:	b2da      	uxtb	r2, r3
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2204      	movs	r2, #4
 800976c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009770:	2300      	movs	r3, #0
}
 8009772:	4618      	mov	r0, r3
 8009774:	370c      	adds	r7, #12
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr

0800977e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800977e:	b480      	push	{r7}
 8009780:	b083      	sub	sp, #12
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800978c:	b2db      	uxtb	r3, r3
 800978e:	2b04      	cmp	r3, #4
 8009790:	d106      	bne.n	80097a0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009798:	b2da      	uxtb	r2, r3
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	370c      	adds	r7, #12
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr

080097ae <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b082      	sub	sp, #8
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	2b03      	cmp	r3, #3
 80097c0:	d110      	bne.n	80097e4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00b      	beq.n	80097e4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097d2:	69db      	ldr	r3, [r3, #28]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d005      	beq.n	80097e4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097de:	69db      	ldr	r3, [r3, #28]
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3708      	adds	r7, #8
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b082      	sub	sp, #8
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	460b      	mov	r3, r1
 80097f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	32ae      	adds	r2, #174	; 0xae
 8009804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d101      	bne.n	8009810 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800980c:	2303      	movs	r3, #3
 800980e:	e01c      	b.n	800984a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009816:	b2db      	uxtb	r3, r3
 8009818:	2b03      	cmp	r3, #3
 800981a:	d115      	bne.n	8009848 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	32ae      	adds	r2, #174	; 0xae
 8009826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800982a:	6a1b      	ldr	r3, [r3, #32]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00b      	beq.n	8009848 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	32ae      	adds	r2, #174	; 0xae
 800983a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800983e:	6a1b      	ldr	r3, [r3, #32]
 8009840:	78fa      	ldrb	r2, [r7, #3]
 8009842:	4611      	mov	r1, r2
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3708      	adds	r7, #8
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b082      	sub	sp, #8
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
 800985a:	460b      	mov	r3, r1
 800985c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	32ae      	adds	r2, #174	; 0xae
 8009868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d101      	bne.n	8009874 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009870:	2303      	movs	r3, #3
 8009872:	e01c      	b.n	80098ae <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800987a:	b2db      	uxtb	r3, r3
 800987c:	2b03      	cmp	r3, #3
 800987e:	d115      	bne.n	80098ac <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	32ae      	adds	r2, #174	; 0xae
 800988a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800988e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00b      	beq.n	80098ac <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	32ae      	adds	r2, #174	; 0xae
 800989e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a4:	78fa      	ldrb	r2, [r7, #3]
 80098a6:	4611      	mov	r1, r2
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3708      	adds	r7, #8
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}

080098b6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80098b6:	b480      	push	{r7}
 80098b8:	b083      	sub	sp, #12
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80098be:	2300      	movs	r3, #0
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	370c      	adds	r7, #12
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80098d4:	2300      	movs	r3, #0
 80098d6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00e      	beq.n	8009908 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	6852      	ldr	r2, [r2, #4]
 80098f6:	b2d2      	uxtb	r2, r2
 80098f8:	4611      	mov	r1, r2
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	4798      	blx	r3
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d001      	beq.n	8009908 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009904:	2303      	movs	r3, #3
 8009906:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009908:	7bfb      	ldrb	r3, [r7, #15]
}
 800990a:	4618      	mov	r0, r3
 800990c:	3710      	adds	r7, #16
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}

08009912 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009912:	b480      	push	{r7}
 8009914:	b083      	sub	sp, #12
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
 800991a:	460b      	mov	r3, r1
 800991c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800991e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009920:	4618      	mov	r0, r3
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	460b      	mov	r3, r1
 8009936:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009938:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800993a:	4618      	mov	r0, r3
 800993c:	370c      	adds	r7, #12
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr

08009946 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b086      	sub	sp, #24
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
 800994e:	460b      	mov	r3, r1
 8009950:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800995a:	2300      	movs	r3, #0
 800995c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	885b      	ldrh	r3, [r3, #2]
 8009962:	b29a      	uxth	r2, r3
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	b29b      	uxth	r3, r3
 800996a:	429a      	cmp	r2, r3
 800996c:	d920      	bls.n	80099b0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	b29b      	uxth	r3, r3
 8009974:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009976:	e013      	b.n	80099a0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009978:	f107 030a 	add.w	r3, r7, #10
 800997c:	4619      	mov	r1, r3
 800997e:	6978      	ldr	r0, [r7, #20]
 8009980:	f000 f81b 	bl	80099ba <USBD_GetNextDesc>
 8009984:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	785b      	ldrb	r3, [r3, #1]
 800998a:	2b05      	cmp	r3, #5
 800998c:	d108      	bne.n	80099a0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	789b      	ldrb	r3, [r3, #2]
 8009996:	78fa      	ldrb	r2, [r7, #3]
 8009998:	429a      	cmp	r2, r3
 800999a:	d008      	beq.n	80099ae <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800999c:	2300      	movs	r3, #0
 800999e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	885b      	ldrh	r3, [r3, #2]
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	897b      	ldrh	r3, [r7, #10]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d8e5      	bhi.n	8009978 <USBD_GetEpDesc+0x32>
 80099ac:	e000      	b.n	80099b0 <USBD_GetEpDesc+0x6a>
          break;
 80099ae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80099b0:	693b      	ldr	r3, [r7, #16]
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3718      	adds	r7, #24
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80099ba:	b480      	push	{r7}
 80099bc:	b085      	sub	sp, #20
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
 80099c2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	881a      	ldrh	r2, [r3, #0]
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	4413      	add	r3, r2
 80099d4:	b29a      	uxth	r2, r3
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	461a      	mov	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4413      	add	r3, r2
 80099e4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80099e6:	68fb      	ldr	r3, [r7, #12]
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3714      	adds	r7, #20
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b087      	sub	sp, #28
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009a12:	8a3b      	ldrh	r3, [r7, #16]
 8009a14:	021b      	lsls	r3, r3, #8
 8009a16:	b21a      	sxth	r2, r3
 8009a18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	b21b      	sxth	r3, r3
 8009a20:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009a22:	89fb      	ldrh	r3, [r7, #14]
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	371c      	adds	r7, #28
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a46:	2b40      	cmp	r3, #64	; 0x40
 8009a48:	d005      	beq.n	8009a56 <USBD_StdDevReq+0x26>
 8009a4a:	2b40      	cmp	r3, #64	; 0x40
 8009a4c:	d857      	bhi.n	8009afe <USBD_StdDevReq+0xce>
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d00f      	beq.n	8009a72 <USBD_StdDevReq+0x42>
 8009a52:	2b20      	cmp	r3, #32
 8009a54:	d153      	bne.n	8009afe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	32ae      	adds	r2, #174	; 0xae
 8009a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	6839      	ldr	r1, [r7, #0]
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	4798      	blx	r3
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8009a70:	e04a      	b.n	8009b08 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	785b      	ldrb	r3, [r3, #1]
 8009a76:	2b09      	cmp	r3, #9
 8009a78:	d83b      	bhi.n	8009af2 <USBD_StdDevReq+0xc2>
 8009a7a:	a201      	add	r2, pc, #4	; (adr r2, 8009a80 <USBD_StdDevReq+0x50>)
 8009a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a80:	08009ad5 	.word	0x08009ad5
 8009a84:	08009ae9 	.word	0x08009ae9
 8009a88:	08009af3 	.word	0x08009af3
 8009a8c:	08009adf 	.word	0x08009adf
 8009a90:	08009af3 	.word	0x08009af3
 8009a94:	08009ab3 	.word	0x08009ab3
 8009a98:	08009aa9 	.word	0x08009aa9
 8009a9c:	08009af3 	.word	0x08009af3
 8009aa0:	08009acb 	.word	0x08009acb
 8009aa4:	08009abd 	.word	0x08009abd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009aa8:	6839      	ldr	r1, [r7, #0]
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 fa3c 	bl	8009f28 <USBD_GetDescriptor>
          break;
 8009ab0:	e024      	b.n	8009afc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009ab2:	6839      	ldr	r1, [r7, #0]
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 fba1 	bl	800a1fc <USBD_SetAddress>
          break;
 8009aba:	e01f      	b.n	8009afc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009abc:	6839      	ldr	r1, [r7, #0]
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 fbe0 	bl	800a284 <USBD_SetConfig>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	73fb      	strb	r3, [r7, #15]
          break;
 8009ac8:	e018      	b.n	8009afc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009aca:	6839      	ldr	r1, [r7, #0]
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 fc83 	bl	800a3d8 <USBD_GetConfig>
          break;
 8009ad2:	e013      	b.n	8009afc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009ad4:	6839      	ldr	r1, [r7, #0]
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 fcb4 	bl	800a444 <USBD_GetStatus>
          break;
 8009adc:	e00e      	b.n	8009afc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009ade:	6839      	ldr	r1, [r7, #0]
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 fce3 	bl	800a4ac <USBD_SetFeature>
          break;
 8009ae6:	e009      	b.n	8009afc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009ae8:	6839      	ldr	r1, [r7, #0]
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 fd07 	bl	800a4fe <USBD_ClrFeature>
          break;
 8009af0:	e004      	b.n	8009afc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009af2:	6839      	ldr	r1, [r7, #0]
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 fd5e 	bl	800a5b6 <USBD_CtlError>
          break;
 8009afa:	bf00      	nop
      }
      break;
 8009afc:	e004      	b.n	8009b08 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009afe:	6839      	ldr	r1, [r7, #0]
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 fd58 	bl	800a5b6 <USBD_CtlError>
      break;
 8009b06:	bf00      	nop
  }

  return ret;
 8009b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop

08009b14 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b2a:	2b40      	cmp	r3, #64	; 0x40
 8009b2c:	d005      	beq.n	8009b3a <USBD_StdItfReq+0x26>
 8009b2e:	2b40      	cmp	r3, #64	; 0x40
 8009b30:	d852      	bhi.n	8009bd8 <USBD_StdItfReq+0xc4>
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d001      	beq.n	8009b3a <USBD_StdItfReq+0x26>
 8009b36:	2b20      	cmp	r3, #32
 8009b38:	d14e      	bne.n	8009bd8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	3b01      	subs	r3, #1
 8009b44:	2b02      	cmp	r3, #2
 8009b46:	d840      	bhi.n	8009bca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	889b      	ldrh	r3, [r3, #4]
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d836      	bhi.n	8009bc0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	889b      	ldrh	r3, [r3, #4]
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	4619      	mov	r1, r3
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f7ff fed9 	bl	8009912 <USBD_CoreFindIF>
 8009b60:	4603      	mov	r3, r0
 8009b62:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b64:	7bbb      	ldrb	r3, [r7, #14]
 8009b66:	2bff      	cmp	r3, #255	; 0xff
 8009b68:	d01d      	beq.n	8009ba6 <USBD_StdItfReq+0x92>
 8009b6a:	7bbb      	ldrb	r3, [r7, #14]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d11a      	bne.n	8009ba6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009b70:	7bba      	ldrb	r2, [r7, #14]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	32ae      	adds	r2, #174	; 0xae
 8009b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d00f      	beq.n	8009ba0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009b80:	7bba      	ldrb	r2, [r7, #14]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009b88:	7bba      	ldrb	r2, [r7, #14]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	32ae      	adds	r2, #174	; 0xae
 8009b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	6839      	ldr	r1, [r7, #0]
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	4798      	blx	r3
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009b9e:	e004      	b.n	8009baa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009ba0:	2303      	movs	r3, #3
 8009ba2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009ba4:	e001      	b.n	8009baa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009ba6:	2303      	movs	r3, #3
 8009ba8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	88db      	ldrh	r3, [r3, #6]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d110      	bne.n	8009bd4 <USBD_StdItfReq+0xc0>
 8009bb2:	7bfb      	ldrb	r3, [r7, #15]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d10d      	bne.n	8009bd4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 fdc7 	bl	800a74c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009bbe:	e009      	b.n	8009bd4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009bc0:	6839      	ldr	r1, [r7, #0]
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 fcf7 	bl	800a5b6 <USBD_CtlError>
          break;
 8009bc8:	e004      	b.n	8009bd4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009bca:	6839      	ldr	r1, [r7, #0]
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 fcf2 	bl	800a5b6 <USBD_CtlError>
          break;
 8009bd2:	e000      	b.n	8009bd6 <USBD_StdItfReq+0xc2>
          break;
 8009bd4:	bf00      	nop
      }
      break;
 8009bd6:	e004      	b.n	8009be2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009bd8:	6839      	ldr	r1, [r7, #0]
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 fceb 	bl	800a5b6 <USBD_CtlError>
      break;
 8009be0:	bf00      	nop
  }

  return ret;
 8009be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3710      	adds	r7, #16
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	889b      	ldrh	r3, [r3, #4]
 8009bfe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c08:	2b40      	cmp	r3, #64	; 0x40
 8009c0a:	d007      	beq.n	8009c1c <USBD_StdEPReq+0x30>
 8009c0c:	2b40      	cmp	r3, #64	; 0x40
 8009c0e:	f200 817f 	bhi.w	8009f10 <USBD_StdEPReq+0x324>
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d02a      	beq.n	8009c6c <USBD_StdEPReq+0x80>
 8009c16:	2b20      	cmp	r3, #32
 8009c18:	f040 817a 	bne.w	8009f10 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009c1c:	7bbb      	ldrb	r3, [r7, #14]
 8009c1e:	4619      	mov	r1, r3
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f7ff fe83 	bl	800992c <USBD_CoreFindEP>
 8009c26:	4603      	mov	r3, r0
 8009c28:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c2a:	7b7b      	ldrb	r3, [r7, #13]
 8009c2c:	2bff      	cmp	r3, #255	; 0xff
 8009c2e:	f000 8174 	beq.w	8009f1a <USBD_StdEPReq+0x32e>
 8009c32:	7b7b      	ldrb	r3, [r7, #13]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	f040 8170 	bne.w	8009f1a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009c3a:	7b7a      	ldrb	r2, [r7, #13]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009c42:	7b7a      	ldrb	r2, [r7, #13]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	32ae      	adds	r2, #174	; 0xae
 8009c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c4c:	689b      	ldr	r3, [r3, #8]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	f000 8163 	beq.w	8009f1a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009c54:	7b7a      	ldrb	r2, [r7, #13]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	32ae      	adds	r2, #174	; 0xae
 8009c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	6839      	ldr	r1, [r7, #0]
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	4798      	blx	r3
 8009c66:	4603      	mov	r3, r0
 8009c68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009c6a:	e156      	b.n	8009f1a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	785b      	ldrb	r3, [r3, #1]
 8009c70:	2b03      	cmp	r3, #3
 8009c72:	d008      	beq.n	8009c86 <USBD_StdEPReq+0x9a>
 8009c74:	2b03      	cmp	r3, #3
 8009c76:	f300 8145 	bgt.w	8009f04 <USBD_StdEPReq+0x318>
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	f000 809b 	beq.w	8009db6 <USBD_StdEPReq+0x1ca>
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d03c      	beq.n	8009cfe <USBD_StdEPReq+0x112>
 8009c84:	e13e      	b.n	8009f04 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	2b02      	cmp	r3, #2
 8009c90:	d002      	beq.n	8009c98 <USBD_StdEPReq+0xac>
 8009c92:	2b03      	cmp	r3, #3
 8009c94:	d016      	beq.n	8009cc4 <USBD_StdEPReq+0xd8>
 8009c96:	e02c      	b.n	8009cf2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c98:	7bbb      	ldrb	r3, [r7, #14]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00d      	beq.n	8009cba <USBD_StdEPReq+0xce>
 8009c9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ca0:	2b80      	cmp	r3, #128	; 0x80
 8009ca2:	d00a      	beq.n	8009cba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ca4:	7bbb      	ldrb	r3, [r7, #14]
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f003 fa5d 	bl	800d168 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009cae:	2180      	movs	r1, #128	; 0x80
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f003 fa59 	bl	800d168 <USBD_LL_StallEP>
 8009cb6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009cb8:	e020      	b.n	8009cfc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009cba:	6839      	ldr	r1, [r7, #0]
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 fc7a 	bl	800a5b6 <USBD_CtlError>
              break;
 8009cc2:	e01b      	b.n	8009cfc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	885b      	ldrh	r3, [r3, #2]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d10e      	bne.n	8009cea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009ccc:	7bbb      	ldrb	r3, [r7, #14]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d00b      	beq.n	8009cea <USBD_StdEPReq+0xfe>
 8009cd2:	7bbb      	ldrb	r3, [r7, #14]
 8009cd4:	2b80      	cmp	r3, #128	; 0x80
 8009cd6:	d008      	beq.n	8009cea <USBD_StdEPReq+0xfe>
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	88db      	ldrh	r3, [r3, #6]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d104      	bne.n	8009cea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ce0:	7bbb      	ldrb	r3, [r7, #14]
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f003 fa3f 	bl	800d168 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 fd2e 	bl	800a74c <USBD_CtlSendStatus>

              break;
 8009cf0:	e004      	b.n	8009cfc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009cf2:	6839      	ldr	r1, [r7, #0]
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 fc5e 	bl	800a5b6 <USBD_CtlError>
              break;
 8009cfa:	bf00      	nop
          }
          break;
 8009cfc:	e107      	b.n	8009f0e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	2b02      	cmp	r3, #2
 8009d08:	d002      	beq.n	8009d10 <USBD_StdEPReq+0x124>
 8009d0a:	2b03      	cmp	r3, #3
 8009d0c:	d016      	beq.n	8009d3c <USBD_StdEPReq+0x150>
 8009d0e:	e04b      	b.n	8009da8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d10:	7bbb      	ldrb	r3, [r7, #14]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00d      	beq.n	8009d32 <USBD_StdEPReq+0x146>
 8009d16:	7bbb      	ldrb	r3, [r7, #14]
 8009d18:	2b80      	cmp	r3, #128	; 0x80
 8009d1a:	d00a      	beq.n	8009d32 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d1c:	7bbb      	ldrb	r3, [r7, #14]
 8009d1e:	4619      	mov	r1, r3
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f003 fa21 	bl	800d168 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d26:	2180      	movs	r1, #128	; 0x80
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f003 fa1d 	bl	800d168 <USBD_LL_StallEP>
 8009d2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d30:	e040      	b.n	8009db4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009d32:	6839      	ldr	r1, [r7, #0]
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 fc3e 	bl	800a5b6 <USBD_CtlError>
              break;
 8009d3a:	e03b      	b.n	8009db4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	885b      	ldrh	r3, [r3, #2]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d136      	bne.n	8009db2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009d44:	7bbb      	ldrb	r3, [r7, #14]
 8009d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d004      	beq.n	8009d58 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009d4e:	7bbb      	ldrb	r3, [r7, #14]
 8009d50:	4619      	mov	r1, r3
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f003 fa27 	bl	800d1a6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 fcf7 	bl	800a74c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009d5e:	7bbb      	ldrb	r3, [r7, #14]
 8009d60:	4619      	mov	r1, r3
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f7ff fde2 	bl	800992c <USBD_CoreFindEP>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d6c:	7b7b      	ldrb	r3, [r7, #13]
 8009d6e:	2bff      	cmp	r3, #255	; 0xff
 8009d70:	d01f      	beq.n	8009db2 <USBD_StdEPReq+0x1c6>
 8009d72:	7b7b      	ldrb	r3, [r7, #13]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d11c      	bne.n	8009db2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009d78:	7b7a      	ldrb	r2, [r7, #13]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009d80:	7b7a      	ldrb	r2, [r7, #13]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	32ae      	adds	r2, #174	; 0xae
 8009d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d010      	beq.n	8009db2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009d90:	7b7a      	ldrb	r2, [r7, #13]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	32ae      	adds	r2, #174	; 0xae
 8009d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	6839      	ldr	r1, [r7, #0]
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	4798      	blx	r3
 8009da2:	4603      	mov	r3, r0
 8009da4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009da6:	e004      	b.n	8009db2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009da8:	6839      	ldr	r1, [r7, #0]
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 fc03 	bl	800a5b6 <USBD_CtlError>
              break;
 8009db0:	e000      	b.n	8009db4 <USBD_StdEPReq+0x1c8>
              break;
 8009db2:	bf00      	nop
          }
          break;
 8009db4:	e0ab      	b.n	8009f0e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	2b02      	cmp	r3, #2
 8009dc0:	d002      	beq.n	8009dc8 <USBD_StdEPReq+0x1dc>
 8009dc2:	2b03      	cmp	r3, #3
 8009dc4:	d032      	beq.n	8009e2c <USBD_StdEPReq+0x240>
 8009dc6:	e097      	b.n	8009ef8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009dc8:	7bbb      	ldrb	r3, [r7, #14]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d007      	beq.n	8009dde <USBD_StdEPReq+0x1f2>
 8009dce:	7bbb      	ldrb	r3, [r7, #14]
 8009dd0:	2b80      	cmp	r3, #128	; 0x80
 8009dd2:	d004      	beq.n	8009dde <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009dd4:	6839      	ldr	r1, [r7, #0]
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 fbed 	bl	800a5b6 <USBD_CtlError>
                break;
 8009ddc:	e091      	b.n	8009f02 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009dde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	da0b      	bge.n	8009dfe <USBD_StdEPReq+0x212>
 8009de6:	7bbb      	ldrb	r3, [r7, #14]
 8009de8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009dec:	4613      	mov	r3, r2
 8009dee:	009b      	lsls	r3, r3, #2
 8009df0:	4413      	add	r3, r2
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	3310      	adds	r3, #16
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	4413      	add	r3, r2
 8009dfa:	3304      	adds	r3, #4
 8009dfc:	e00b      	b.n	8009e16 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009dfe:	7bbb      	ldrb	r3, [r7, #14]
 8009e00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e04:	4613      	mov	r3, r2
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	4413      	add	r3, r2
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	4413      	add	r3, r2
 8009e14:	3304      	adds	r3, #4
 8009e16:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	2202      	movs	r2, #2
 8009e22:	4619      	mov	r1, r3
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 fc37 	bl	800a698 <USBD_CtlSendData>
              break;
 8009e2a:	e06a      	b.n	8009f02 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009e2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	da11      	bge.n	8009e58 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009e34:	7bbb      	ldrb	r3, [r7, #14]
 8009e36:	f003 020f 	and.w	r2, r3, #15
 8009e3a:	6879      	ldr	r1, [r7, #4]
 8009e3c:	4613      	mov	r3, r2
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	4413      	add	r3, r2
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	440b      	add	r3, r1
 8009e46:	3324      	adds	r3, #36	; 0x24
 8009e48:	881b      	ldrh	r3, [r3, #0]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d117      	bne.n	8009e7e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009e4e:	6839      	ldr	r1, [r7, #0]
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 fbb0 	bl	800a5b6 <USBD_CtlError>
                  break;
 8009e56:	e054      	b.n	8009f02 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009e58:	7bbb      	ldrb	r3, [r7, #14]
 8009e5a:	f003 020f 	and.w	r2, r3, #15
 8009e5e:	6879      	ldr	r1, [r7, #4]
 8009e60:	4613      	mov	r3, r2
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	4413      	add	r3, r2
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	440b      	add	r3, r1
 8009e6a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009e6e:	881b      	ldrh	r3, [r3, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d104      	bne.n	8009e7e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009e74:	6839      	ldr	r1, [r7, #0]
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fb9d 	bl	800a5b6 <USBD_CtlError>
                  break;
 8009e7c:	e041      	b.n	8009f02 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	da0b      	bge.n	8009e9e <USBD_StdEPReq+0x2b2>
 8009e86:	7bbb      	ldrb	r3, [r7, #14]
 8009e88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e8c:	4613      	mov	r3, r2
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	4413      	add	r3, r2
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	3310      	adds	r3, #16
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	4413      	add	r3, r2
 8009e9a:	3304      	adds	r3, #4
 8009e9c:	e00b      	b.n	8009eb6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ea0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	4413      	add	r3, r2
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	4413      	add	r3, r2
 8009eb4:	3304      	adds	r3, #4
 8009eb6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009eb8:	7bbb      	ldrb	r3, [r7, #14]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d002      	beq.n	8009ec4 <USBD_StdEPReq+0x2d8>
 8009ebe:	7bbb      	ldrb	r3, [r7, #14]
 8009ec0:	2b80      	cmp	r3, #128	; 0x80
 8009ec2:	d103      	bne.n	8009ecc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	601a      	str	r2, [r3, #0]
 8009eca:	e00e      	b.n	8009eea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009ecc:	7bbb      	ldrb	r3, [r7, #14]
 8009ece:	4619      	mov	r1, r3
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f003 f987 	bl	800d1e4 <USBD_LL_IsStallEP>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d003      	beq.n	8009ee4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	601a      	str	r2, [r3, #0]
 8009ee2:	e002      	b.n	8009eea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	2202      	movs	r2, #2
 8009eee:	4619      	mov	r1, r3
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 fbd1 	bl	800a698 <USBD_CtlSendData>
              break;
 8009ef6:	e004      	b.n	8009f02 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009ef8:	6839      	ldr	r1, [r7, #0]
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 fb5b 	bl	800a5b6 <USBD_CtlError>
              break;
 8009f00:	bf00      	nop
          }
          break;
 8009f02:	e004      	b.n	8009f0e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009f04:	6839      	ldr	r1, [r7, #0]
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 fb55 	bl	800a5b6 <USBD_CtlError>
          break;
 8009f0c:	bf00      	nop
      }
      break;
 8009f0e:	e005      	b.n	8009f1c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009f10:	6839      	ldr	r1, [r7, #0]
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 fb4f 	bl	800a5b6 <USBD_CtlError>
      break;
 8009f18:	e000      	b.n	8009f1c <USBD_StdEPReq+0x330>
      break;
 8009f1a:	bf00      	nop
  }

  return ret;
 8009f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3710      	adds	r7, #16
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
	...

08009f28 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f32:	2300      	movs	r3, #0
 8009f34:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009f36:	2300      	movs	r3, #0
 8009f38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	885b      	ldrh	r3, [r3, #2]
 8009f42:	0a1b      	lsrs	r3, r3, #8
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	3b01      	subs	r3, #1
 8009f48:	2b06      	cmp	r3, #6
 8009f4a:	f200 8128 	bhi.w	800a19e <USBD_GetDescriptor+0x276>
 8009f4e:	a201      	add	r2, pc, #4	; (adr r2, 8009f54 <USBD_GetDescriptor+0x2c>)
 8009f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f54:	08009f71 	.word	0x08009f71
 8009f58:	08009f89 	.word	0x08009f89
 8009f5c:	08009fc9 	.word	0x08009fc9
 8009f60:	0800a19f 	.word	0x0800a19f
 8009f64:	0800a19f 	.word	0x0800a19f
 8009f68:	0800a13f 	.word	0x0800a13f
 8009f6c:	0800a16b 	.word	0x0800a16b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	7c12      	ldrb	r2, [r2, #16]
 8009f7c:	f107 0108 	add.w	r1, r7, #8
 8009f80:	4610      	mov	r0, r2
 8009f82:	4798      	blx	r3
 8009f84:	60f8      	str	r0, [r7, #12]
      break;
 8009f86:	e112      	b.n	800a1ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	7c1b      	ldrb	r3, [r3, #16]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d10d      	bne.n	8009fac <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f98:	f107 0208 	add.w	r2, r7, #8
 8009f9c:	4610      	mov	r0, r2
 8009f9e:	4798      	blx	r3
 8009fa0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	2202      	movs	r2, #2
 8009fa8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009faa:	e100      	b.n	800a1ae <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb4:	f107 0208 	add.w	r2, r7, #8
 8009fb8:	4610      	mov	r0, r2
 8009fba:	4798      	blx	r3
 8009fbc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	2202      	movs	r2, #2
 8009fc4:	701a      	strb	r2, [r3, #0]
      break;
 8009fc6:	e0f2      	b.n	800a1ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	885b      	ldrh	r3, [r3, #2]
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	2b05      	cmp	r3, #5
 8009fd0:	f200 80ac 	bhi.w	800a12c <USBD_GetDescriptor+0x204>
 8009fd4:	a201      	add	r2, pc, #4	; (adr r2, 8009fdc <USBD_GetDescriptor+0xb4>)
 8009fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fda:	bf00      	nop
 8009fdc:	08009ff5 	.word	0x08009ff5
 8009fe0:	0800a029 	.word	0x0800a029
 8009fe4:	0800a05d 	.word	0x0800a05d
 8009fe8:	0800a091 	.word	0x0800a091
 8009fec:	0800a0c5 	.word	0x0800a0c5
 8009ff0:	0800a0f9 	.word	0x0800a0f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d00b      	beq.n	800a018 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	7c12      	ldrb	r2, [r2, #16]
 800a00c:	f107 0108 	add.w	r1, r7, #8
 800a010:	4610      	mov	r0, r2
 800a012:	4798      	blx	r3
 800a014:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a016:	e091      	b.n	800a13c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a018:	6839      	ldr	r1, [r7, #0]
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 facb 	bl	800a5b6 <USBD_CtlError>
            err++;
 800a020:	7afb      	ldrb	r3, [r7, #11]
 800a022:	3301      	adds	r3, #1
 800a024:	72fb      	strb	r3, [r7, #11]
          break;
 800a026:	e089      	b.n	800a13c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00b      	beq.n	800a04c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a03a:	689b      	ldr	r3, [r3, #8]
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	7c12      	ldrb	r2, [r2, #16]
 800a040:	f107 0108 	add.w	r1, r7, #8
 800a044:	4610      	mov	r0, r2
 800a046:	4798      	blx	r3
 800a048:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a04a:	e077      	b.n	800a13c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a04c:	6839      	ldr	r1, [r7, #0]
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 fab1 	bl	800a5b6 <USBD_CtlError>
            err++;
 800a054:	7afb      	ldrb	r3, [r7, #11]
 800a056:	3301      	adds	r3, #1
 800a058:	72fb      	strb	r3, [r7, #11]
          break;
 800a05a:	e06f      	b.n	800a13c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a062:	68db      	ldr	r3, [r3, #12]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d00b      	beq.n	800a080 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	7c12      	ldrb	r2, [r2, #16]
 800a074:	f107 0108 	add.w	r1, r7, #8
 800a078:	4610      	mov	r0, r2
 800a07a:	4798      	blx	r3
 800a07c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a07e:	e05d      	b.n	800a13c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a080:	6839      	ldr	r1, [r7, #0]
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 fa97 	bl	800a5b6 <USBD_CtlError>
            err++;
 800a088:	7afb      	ldrb	r3, [r7, #11]
 800a08a:	3301      	adds	r3, #1
 800a08c:	72fb      	strb	r3, [r7, #11]
          break;
 800a08e:	e055      	b.n	800a13c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a096:	691b      	ldr	r3, [r3, #16]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d00b      	beq.n	800a0b4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0a2:	691b      	ldr	r3, [r3, #16]
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	7c12      	ldrb	r2, [r2, #16]
 800a0a8:	f107 0108 	add.w	r1, r7, #8
 800a0ac:	4610      	mov	r0, r2
 800a0ae:	4798      	blx	r3
 800a0b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0b2:	e043      	b.n	800a13c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0b4:	6839      	ldr	r1, [r7, #0]
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 fa7d 	bl	800a5b6 <USBD_CtlError>
            err++;
 800a0bc:	7afb      	ldrb	r3, [r7, #11]
 800a0be:	3301      	adds	r3, #1
 800a0c0:	72fb      	strb	r3, [r7, #11]
          break;
 800a0c2:	e03b      	b.n	800a13c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0ca:	695b      	ldr	r3, [r3, #20]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d00b      	beq.n	800a0e8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0d6:	695b      	ldr	r3, [r3, #20]
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	7c12      	ldrb	r2, [r2, #16]
 800a0dc:	f107 0108 	add.w	r1, r7, #8
 800a0e0:	4610      	mov	r0, r2
 800a0e2:	4798      	blx	r3
 800a0e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0e6:	e029      	b.n	800a13c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0e8:	6839      	ldr	r1, [r7, #0]
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 fa63 	bl	800a5b6 <USBD_CtlError>
            err++;
 800a0f0:	7afb      	ldrb	r3, [r7, #11]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	72fb      	strb	r3, [r7, #11]
          break;
 800a0f6:	e021      	b.n	800a13c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0fe:	699b      	ldr	r3, [r3, #24]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d00b      	beq.n	800a11c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a10a:	699b      	ldr	r3, [r3, #24]
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	7c12      	ldrb	r2, [r2, #16]
 800a110:	f107 0108 	add.w	r1, r7, #8
 800a114:	4610      	mov	r0, r2
 800a116:	4798      	blx	r3
 800a118:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a11a:	e00f      	b.n	800a13c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a11c:	6839      	ldr	r1, [r7, #0]
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 fa49 	bl	800a5b6 <USBD_CtlError>
            err++;
 800a124:	7afb      	ldrb	r3, [r7, #11]
 800a126:	3301      	adds	r3, #1
 800a128:	72fb      	strb	r3, [r7, #11]
          break;
 800a12a:	e007      	b.n	800a13c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a12c:	6839      	ldr	r1, [r7, #0]
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fa41 	bl	800a5b6 <USBD_CtlError>
          err++;
 800a134:	7afb      	ldrb	r3, [r7, #11]
 800a136:	3301      	adds	r3, #1
 800a138:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a13a:	bf00      	nop
      }
      break;
 800a13c:	e037      	b.n	800a1ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	7c1b      	ldrb	r3, [r3, #16]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d109      	bne.n	800a15a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a14c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a14e:	f107 0208 	add.w	r2, r7, #8
 800a152:	4610      	mov	r0, r2
 800a154:	4798      	blx	r3
 800a156:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a158:	e029      	b.n	800a1ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a15a:	6839      	ldr	r1, [r7, #0]
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 fa2a 	bl	800a5b6 <USBD_CtlError>
        err++;
 800a162:	7afb      	ldrb	r3, [r7, #11]
 800a164:	3301      	adds	r3, #1
 800a166:	72fb      	strb	r3, [r7, #11]
      break;
 800a168:	e021      	b.n	800a1ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	7c1b      	ldrb	r3, [r3, #16]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d10d      	bne.n	800a18e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a17a:	f107 0208 	add.w	r2, r7, #8
 800a17e:	4610      	mov	r0, r2
 800a180:	4798      	blx	r3
 800a182:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	3301      	adds	r3, #1
 800a188:	2207      	movs	r2, #7
 800a18a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a18c:	e00f      	b.n	800a1ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a18e:	6839      	ldr	r1, [r7, #0]
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 fa10 	bl	800a5b6 <USBD_CtlError>
        err++;
 800a196:	7afb      	ldrb	r3, [r7, #11]
 800a198:	3301      	adds	r3, #1
 800a19a:	72fb      	strb	r3, [r7, #11]
      break;
 800a19c:	e007      	b.n	800a1ae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a19e:	6839      	ldr	r1, [r7, #0]
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 fa08 	bl	800a5b6 <USBD_CtlError>
      err++;
 800a1a6:	7afb      	ldrb	r3, [r7, #11]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	72fb      	strb	r3, [r7, #11]
      break;
 800a1ac:	bf00      	nop
  }

  if (err != 0U)
 800a1ae:	7afb      	ldrb	r3, [r7, #11]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d11e      	bne.n	800a1f2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	88db      	ldrh	r3, [r3, #6]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d016      	beq.n	800a1ea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a1bc:	893b      	ldrh	r3, [r7, #8]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d00e      	beq.n	800a1e0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	88da      	ldrh	r2, [r3, #6]
 800a1c6:	893b      	ldrh	r3, [r7, #8]
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	bf28      	it	cs
 800a1cc:	4613      	movcs	r3, r2
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a1d2:	893b      	ldrh	r3, [r7, #8]
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	68f9      	ldr	r1, [r7, #12]
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 fa5d 	bl	800a698 <USBD_CtlSendData>
 800a1de:	e009      	b.n	800a1f4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a1e0:	6839      	ldr	r1, [r7, #0]
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 f9e7 	bl	800a5b6 <USBD_CtlError>
 800a1e8:	e004      	b.n	800a1f4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 faae 	bl	800a74c <USBD_CtlSendStatus>
 800a1f0:	e000      	b.n	800a1f4 <USBD_GetDescriptor+0x2cc>
    return;
 800a1f2:	bf00      	nop
  }
}
 800a1f4:	3710      	adds	r7, #16
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop

0800a1fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	889b      	ldrh	r3, [r3, #4]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d131      	bne.n	800a272 <USBD_SetAddress+0x76>
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	88db      	ldrh	r3, [r3, #6]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d12d      	bne.n	800a272 <USBD_SetAddress+0x76>
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	885b      	ldrh	r3, [r3, #2]
 800a21a:	2b7f      	cmp	r3, #127	; 0x7f
 800a21c:	d829      	bhi.n	800a272 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	885b      	ldrh	r3, [r3, #2]
 800a222:	b2db      	uxtb	r3, r3
 800a224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a228:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a230:	b2db      	uxtb	r3, r3
 800a232:	2b03      	cmp	r3, #3
 800a234:	d104      	bne.n	800a240 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a236:	6839      	ldr	r1, [r7, #0]
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 f9bc 	bl	800a5b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a23e:	e01d      	b.n	800a27c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	7bfa      	ldrb	r2, [r7, #15]
 800a244:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a248:	7bfb      	ldrb	r3, [r7, #15]
 800a24a:	4619      	mov	r1, r3
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f002 fff5 	bl	800d23c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 fa7a 	bl	800a74c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a258:	7bfb      	ldrb	r3, [r7, #15]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d004      	beq.n	800a268 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2202      	movs	r2, #2
 800a262:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a266:	e009      	b.n	800a27c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a270:	e004      	b.n	800a27c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a272:	6839      	ldr	r1, [r7, #0]
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 f99e 	bl	800a5b6 <USBD_CtlError>
  }
}
 800a27a:	bf00      	nop
 800a27c:	bf00      	nop
 800a27e:	3710      	adds	r7, #16
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a28e:	2300      	movs	r3, #0
 800a290:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	885b      	ldrh	r3, [r3, #2]
 800a296:	b2da      	uxtb	r2, r3
 800a298:	4b4e      	ldr	r3, [pc, #312]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a29a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a29c:	4b4d      	ldr	r3, [pc, #308]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d905      	bls.n	800a2b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a2a4:	6839      	ldr	r1, [r7, #0]
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 f985 	bl	800a5b6 <USBD_CtlError>
    return USBD_FAIL;
 800a2ac:	2303      	movs	r3, #3
 800a2ae:	e08c      	b.n	800a3ca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	2b02      	cmp	r3, #2
 800a2ba:	d002      	beq.n	800a2c2 <USBD_SetConfig+0x3e>
 800a2bc:	2b03      	cmp	r3, #3
 800a2be:	d029      	beq.n	800a314 <USBD_SetConfig+0x90>
 800a2c0:	e075      	b.n	800a3ae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a2c2:	4b44      	ldr	r3, [pc, #272]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d020      	beq.n	800a30c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a2ca:	4b42      	ldr	r3, [pc, #264]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a2d4:	4b3f      	ldr	r3, [pc, #252]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	4619      	mov	r1, r3
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f7fe ffe7 	bl	80092ae <USBD_SetClassConfig>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a2e4:	7bfb      	ldrb	r3, [r7, #15]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d008      	beq.n	800a2fc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a2ea:	6839      	ldr	r1, [r7, #0]
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 f962 	bl	800a5b6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2202      	movs	r2, #2
 800a2f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a2fa:	e065      	b.n	800a3c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 fa25 	bl	800a74c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2203      	movs	r2, #3
 800a306:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a30a:	e05d      	b.n	800a3c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 fa1d 	bl	800a74c <USBD_CtlSendStatus>
      break;
 800a312:	e059      	b.n	800a3c8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a314:	4b2f      	ldr	r3, [pc, #188]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d112      	bne.n	800a342 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2202      	movs	r2, #2
 800a320:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a324:	4b2b      	ldr	r3, [pc, #172]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	461a      	mov	r2, r3
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a32e:	4b29      	ldr	r3, [pc, #164]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	4619      	mov	r1, r3
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f7fe ffd6 	bl	80092e6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 fa06 	bl	800a74c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a340:	e042      	b.n	800a3c8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a342:	4b24      	ldr	r3, [pc, #144]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	461a      	mov	r2, r3
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d02a      	beq.n	800a3a6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	b2db      	uxtb	r3, r3
 800a356:	4619      	mov	r1, r3
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f7fe ffc4 	bl	80092e6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a35e:	4b1d      	ldr	r3, [pc, #116]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	461a      	mov	r2, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a368:	4b1a      	ldr	r3, [pc, #104]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	4619      	mov	r1, r3
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f7fe ff9d 	bl	80092ae <USBD_SetClassConfig>
 800a374:	4603      	mov	r3, r0
 800a376:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a378:	7bfb      	ldrb	r3, [r7, #15]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d00f      	beq.n	800a39e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a37e:	6839      	ldr	r1, [r7, #0]
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 f918 	bl	800a5b6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	4619      	mov	r1, r3
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f7fe ffa9 	bl	80092e6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2202      	movs	r2, #2
 800a398:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a39c:	e014      	b.n	800a3c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 f9d4 	bl	800a74c <USBD_CtlSendStatus>
      break;
 800a3a4:	e010      	b.n	800a3c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 f9d0 	bl	800a74c <USBD_CtlSendStatus>
      break;
 800a3ac:	e00c      	b.n	800a3c8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a3ae:	6839      	ldr	r1, [r7, #0]
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 f900 	bl	800a5b6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a3b6:	4b07      	ldr	r3, [pc, #28]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f7fe ff92 	bl	80092e6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	73fb      	strb	r3, [r7, #15]
      break;
 800a3c6:	bf00      	nop
  }

  return ret;
 800a3c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3710      	adds	r7, #16
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	200084c4 	.word	0x200084c4

0800a3d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b082      	sub	sp, #8
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	88db      	ldrh	r3, [r3, #6]
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d004      	beq.n	800a3f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a3ea:	6839      	ldr	r1, [r7, #0]
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 f8e2 	bl	800a5b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a3f2:	e023      	b.n	800a43c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	2b02      	cmp	r3, #2
 800a3fe:	dc02      	bgt.n	800a406 <USBD_GetConfig+0x2e>
 800a400:	2b00      	cmp	r3, #0
 800a402:	dc03      	bgt.n	800a40c <USBD_GetConfig+0x34>
 800a404:	e015      	b.n	800a432 <USBD_GetConfig+0x5a>
 800a406:	2b03      	cmp	r3, #3
 800a408:	d00b      	beq.n	800a422 <USBD_GetConfig+0x4a>
 800a40a:	e012      	b.n	800a432 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	3308      	adds	r3, #8
 800a416:	2201      	movs	r2, #1
 800a418:	4619      	mov	r1, r3
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 f93c 	bl	800a698 <USBD_CtlSendData>
        break;
 800a420:	e00c      	b.n	800a43c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	3304      	adds	r3, #4
 800a426:	2201      	movs	r2, #1
 800a428:	4619      	mov	r1, r3
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 f934 	bl	800a698 <USBD_CtlSendData>
        break;
 800a430:	e004      	b.n	800a43c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a432:	6839      	ldr	r1, [r7, #0]
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 f8be 	bl	800a5b6 <USBD_CtlError>
        break;
 800a43a:	bf00      	nop
}
 800a43c:	bf00      	nop
 800a43e:	3708      	adds	r7, #8
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a454:	b2db      	uxtb	r3, r3
 800a456:	3b01      	subs	r3, #1
 800a458:	2b02      	cmp	r3, #2
 800a45a:	d81e      	bhi.n	800a49a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	88db      	ldrh	r3, [r3, #6]
 800a460:	2b02      	cmp	r3, #2
 800a462:	d004      	beq.n	800a46e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a464:	6839      	ldr	r1, [r7, #0]
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 f8a5 	bl	800a5b6 <USBD_CtlError>
        break;
 800a46c:	e01a      	b.n	800a4a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2201      	movs	r2, #1
 800a472:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d005      	beq.n	800a48a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	68db      	ldr	r3, [r3, #12]
 800a482:	f043 0202 	orr.w	r2, r3, #2
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	330c      	adds	r3, #12
 800a48e:	2202      	movs	r2, #2
 800a490:	4619      	mov	r1, r3
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f000 f900 	bl	800a698 <USBD_CtlSendData>
      break;
 800a498:	e004      	b.n	800a4a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a49a:	6839      	ldr	r1, [r7, #0]
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f000 f88a 	bl	800a5b6 <USBD_CtlError>
      break;
 800a4a2:	bf00      	nop
  }
}
 800a4a4:	bf00      	nop
 800a4a6:	3708      	adds	r7, #8
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	885b      	ldrh	r3, [r3, #2]
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d107      	bne.n	800a4ce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 f940 	bl	800a74c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a4cc:	e013      	b.n	800a4f6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	885b      	ldrh	r3, [r3, #2]
 800a4d2:	2b02      	cmp	r3, #2
 800a4d4:	d10b      	bne.n	800a4ee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	889b      	ldrh	r3, [r3, #4]
 800a4da:	0a1b      	lsrs	r3, r3, #8
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	b2da      	uxtb	r2, r3
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 f930 	bl	800a74c <USBD_CtlSendStatus>
}
 800a4ec:	e003      	b.n	800a4f6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a4ee:	6839      	ldr	r1, [r7, #0]
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 f860 	bl	800a5b6 <USBD_CtlError>
}
 800a4f6:	bf00      	nop
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b082      	sub	sp, #8
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
 800a506:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	3b01      	subs	r3, #1
 800a512:	2b02      	cmp	r3, #2
 800a514:	d80b      	bhi.n	800a52e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	885b      	ldrh	r3, [r3, #2]
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d10c      	bne.n	800a538 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 f910 	bl	800a74c <USBD_CtlSendStatus>
      }
      break;
 800a52c:	e004      	b.n	800a538 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a52e:	6839      	ldr	r1, [r7, #0]
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 f840 	bl	800a5b6 <USBD_CtlError>
      break;
 800a536:	e000      	b.n	800a53a <USBD_ClrFeature+0x3c>
      break;
 800a538:	bf00      	nop
  }
}
 800a53a:	bf00      	nop
 800a53c:	3708      	adds	r7, #8
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}

0800a542 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a542:	b580      	push	{r7, lr}
 800a544:	b084      	sub	sp, #16
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
 800a54a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	781a      	ldrb	r2, [r3, #0]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	3301      	adds	r3, #1
 800a55c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	781a      	ldrb	r2, [r3, #0]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	3301      	adds	r3, #1
 800a56a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a56c:	68f8      	ldr	r0, [r7, #12]
 800a56e:	f7ff fa41 	bl	80099f4 <SWAPBYTE>
 800a572:	4603      	mov	r3, r0
 800a574:	461a      	mov	r2, r3
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	3301      	adds	r3, #1
 800a57e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	3301      	adds	r3, #1
 800a584:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f7ff fa34 	bl	80099f4 <SWAPBYTE>
 800a58c:	4603      	mov	r3, r0
 800a58e:	461a      	mov	r2, r3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	3301      	adds	r3, #1
 800a598:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	3301      	adds	r3, #1
 800a59e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f7ff fa27 	bl	80099f4 <SWAPBYTE>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	80da      	strh	r2, [r3, #6]
}
 800a5ae:	bf00      	nop
 800a5b0:	3710      	adds	r7, #16
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}

0800a5b6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5b6:	b580      	push	{r7, lr}
 800a5b8:	b082      	sub	sp, #8
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
 800a5be:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5c0:	2180      	movs	r1, #128	; 0x80
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f002 fdd0 	bl	800d168 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a5c8:	2100      	movs	r1, #0
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f002 fdcc 	bl	800d168 <USBD_LL_StallEP>
}
 800a5d0:	bf00      	nop
 800a5d2:	3708      	adds	r7, #8
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b086      	sub	sp, #24
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	60f8      	str	r0, [r7, #12]
 800a5e0:	60b9      	str	r1, [r7, #8]
 800a5e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d036      	beq.n	800a65c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a5f2:	6938      	ldr	r0, [r7, #16]
 800a5f4:	f000 f836 	bl	800a664 <USBD_GetLen>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	005b      	lsls	r3, r3, #1
 800a600:	b29a      	uxth	r2, r3
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a606:	7dfb      	ldrb	r3, [r7, #23]
 800a608:	68ba      	ldr	r2, [r7, #8]
 800a60a:	4413      	add	r3, r2
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	7812      	ldrb	r2, [r2, #0]
 800a610:	701a      	strb	r2, [r3, #0]
  idx++;
 800a612:	7dfb      	ldrb	r3, [r7, #23]
 800a614:	3301      	adds	r3, #1
 800a616:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a618:	7dfb      	ldrb	r3, [r7, #23]
 800a61a:	68ba      	ldr	r2, [r7, #8]
 800a61c:	4413      	add	r3, r2
 800a61e:	2203      	movs	r2, #3
 800a620:	701a      	strb	r2, [r3, #0]
  idx++;
 800a622:	7dfb      	ldrb	r3, [r7, #23]
 800a624:	3301      	adds	r3, #1
 800a626:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a628:	e013      	b.n	800a652 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a62a:	7dfb      	ldrb	r3, [r7, #23]
 800a62c:	68ba      	ldr	r2, [r7, #8]
 800a62e:	4413      	add	r3, r2
 800a630:	693a      	ldr	r2, [r7, #16]
 800a632:	7812      	ldrb	r2, [r2, #0]
 800a634:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	3301      	adds	r3, #1
 800a63a:	613b      	str	r3, [r7, #16]
    idx++;
 800a63c:	7dfb      	ldrb	r3, [r7, #23]
 800a63e:	3301      	adds	r3, #1
 800a640:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a642:	7dfb      	ldrb	r3, [r7, #23]
 800a644:	68ba      	ldr	r2, [r7, #8]
 800a646:	4413      	add	r3, r2
 800a648:	2200      	movs	r2, #0
 800a64a:	701a      	strb	r2, [r3, #0]
    idx++;
 800a64c:	7dfb      	ldrb	r3, [r7, #23]
 800a64e:	3301      	adds	r3, #1
 800a650:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d1e7      	bne.n	800a62a <USBD_GetString+0x52>
 800a65a:	e000      	b.n	800a65e <USBD_GetString+0x86>
    return;
 800a65c:	bf00      	nop
  }
}
 800a65e:	3718      	adds	r7, #24
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a664:	b480      	push	{r7}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a66c:	2300      	movs	r3, #0
 800a66e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a674:	e005      	b.n	800a682 <USBD_GetLen+0x1e>
  {
    len++;
 800a676:	7bfb      	ldrb	r3, [r7, #15]
 800a678:	3301      	adds	r3, #1
 800a67a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	3301      	adds	r3, #1
 800a680:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d1f5      	bne.n	800a676 <USBD_GetLen+0x12>
  }

  return len;
 800a68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3714      	adds	r7, #20
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2202      	movs	r2, #2
 800a6a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	68ba      	ldr	r2, [r7, #8]
 800a6bc:	2100      	movs	r1, #0
 800a6be:	68f8      	ldr	r0, [r7, #12]
 800a6c0:	f002 fddb 	bl	800d27a <USBD_LL_Transmit>

  return USBD_OK;
 800a6c4:	2300      	movs	r3, #0
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3710      	adds	r7, #16
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b084      	sub	sp, #16
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	60f8      	str	r0, [r7, #12]
 800a6d6:	60b9      	str	r1, [r7, #8]
 800a6d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	68ba      	ldr	r2, [r7, #8]
 800a6de:	2100      	movs	r1, #0
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	f002 fdca 	bl	800d27a <USBD_LL_Transmit>

  return USBD_OK;
 800a6e6:	2300      	movs	r3, #0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3710      	adds	r7, #16
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2203      	movs	r2, #3
 800a700:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	68ba      	ldr	r2, [r7, #8]
 800a718:	2100      	movs	r1, #0
 800a71a:	68f8      	ldr	r0, [r7, #12]
 800a71c:	f002 fdce 	bl	800d2bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a720:	2300      	movs	r3, #0
}
 800a722:	4618      	mov	r0, r3
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b084      	sub	sp, #16
 800a72e:	af00      	add	r7, sp, #0
 800a730:	60f8      	str	r0, [r7, #12]
 800a732:	60b9      	str	r1, [r7, #8]
 800a734:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	68ba      	ldr	r2, [r7, #8]
 800a73a:	2100      	movs	r1, #0
 800a73c:	68f8      	ldr	r0, [r7, #12]
 800a73e:	f002 fdbd 	bl	800d2bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a742:	2300      	movs	r3, #0
}
 800a744:	4618      	mov	r0, r3
 800a746:	3710      	adds	r7, #16
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2204      	movs	r2, #4
 800a758:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a75c:	2300      	movs	r3, #0
 800a75e:	2200      	movs	r2, #0
 800a760:	2100      	movs	r1, #0
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f002 fd89 	bl	800d27a <USBD_LL_Transmit>

  return USBD_OK;
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3708      	adds	r7, #8
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}

0800a772 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a772:	b580      	push	{r7, lr}
 800a774:	b082      	sub	sp, #8
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2205      	movs	r2, #5
 800a77e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a782:	2300      	movs	r3, #0
 800a784:	2200      	movs	r2, #0
 800a786:	2100      	movs	r1, #0
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f002 fd97 	bl	800d2bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a78e:	2300      	movs	r3, #0
}
 800a790:	4618      	mov	r0, r3
 800a792:	3708      	adds	r7, #8
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800a798:	b580      	push	{r7, lr}
 800a79a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800a79c:	4803      	ldr	r0, [pc, #12]	; (800a7ac <_cbSendSystemDesc+0x14>)
 800a79e:	f001 fdad 	bl	800c2fc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800a7a2:	4803      	ldr	r0, [pc, #12]	; (800a7b0 <_cbSendSystemDesc+0x18>)
 800a7a4:	f001 fdaa 	bl	800c2fc <SEGGER_SYSVIEW_SendSysDesc>
}
 800a7a8:	bf00      	nop
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	0800ddb0 	.word	0x0800ddb0
 800a7b0:	0800ddf4 	.word	0x0800ddf4

0800a7b4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800a7b8:	4b06      	ldr	r3, [pc, #24]	; (800a7d4 <SEGGER_SYSVIEW_Conf+0x20>)
 800a7ba:	6818      	ldr	r0, [r3, #0]
 800a7bc:	4b05      	ldr	r3, [pc, #20]	; (800a7d4 <SEGGER_SYSVIEW_Conf+0x20>)
 800a7be:	6819      	ldr	r1, [r3, #0]
 800a7c0:	4b05      	ldr	r3, [pc, #20]	; (800a7d8 <SEGGER_SYSVIEW_Conf+0x24>)
 800a7c2:	4a06      	ldr	r2, [pc, #24]	; (800a7dc <SEGGER_SYSVIEW_Conf+0x28>)
 800a7c4:	f001 f918 	bl	800b9f8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800a7c8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800a7cc:	f001 f958 	bl	800ba80 <SEGGER_SYSVIEW_SetRAMBase>
}
 800a7d0:	bf00      	nop
 800a7d2:	bd80      	pop	{r7, pc}
 800a7d4:	20000000 	.word	0x20000000
 800a7d8:	0800a799 	.word	0x0800a799
 800a7dc:	0800ded0 	.word	0x0800ded0

0800a7e0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800a7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7e2:	b085      	sub	sp, #20
 800a7e4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	607b      	str	r3, [r7, #4]
 800a7ea:	e033      	b.n	800a854 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800a7ec:	491e      	ldr	r1, [pc, #120]	; (800a868 <_cbSendTaskList+0x88>)
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	4613      	mov	r3, r2
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	4413      	add	r3, r2
 800a7f6:	009b      	lsls	r3, r3, #2
 800a7f8:	440b      	add	r3, r1
 800a7fa:	6818      	ldr	r0, [r3, #0]
 800a7fc:	491a      	ldr	r1, [pc, #104]	; (800a868 <_cbSendTaskList+0x88>)
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	4613      	mov	r3, r2
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	4413      	add	r3, r2
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	440b      	add	r3, r1
 800a80a:	3304      	adds	r3, #4
 800a80c:	6819      	ldr	r1, [r3, #0]
 800a80e:	4c16      	ldr	r4, [pc, #88]	; (800a868 <_cbSendTaskList+0x88>)
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	4613      	mov	r3, r2
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	4413      	add	r3, r2
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	4423      	add	r3, r4
 800a81c:	3308      	adds	r3, #8
 800a81e:	681c      	ldr	r4, [r3, #0]
 800a820:	4d11      	ldr	r5, [pc, #68]	; (800a868 <_cbSendTaskList+0x88>)
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	4613      	mov	r3, r2
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	4413      	add	r3, r2
 800a82a:	009b      	lsls	r3, r3, #2
 800a82c:	442b      	add	r3, r5
 800a82e:	330c      	adds	r3, #12
 800a830:	681d      	ldr	r5, [r3, #0]
 800a832:	4e0d      	ldr	r6, [pc, #52]	; (800a868 <_cbSendTaskList+0x88>)
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	4613      	mov	r3, r2
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	4413      	add	r3, r2
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	4433      	add	r3, r6
 800a840:	3310      	adds	r3, #16
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	9300      	str	r3, [sp, #0]
 800a846:	462b      	mov	r3, r5
 800a848:	4622      	mov	r2, r4
 800a84a:	f000 f8bd 	bl	800a9c8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	3301      	adds	r3, #1
 800a852:	607b      	str	r3, [r7, #4]
 800a854:	4b05      	ldr	r3, [pc, #20]	; (800a86c <_cbSendTaskList+0x8c>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d3c6      	bcc.n	800a7ec <_cbSendTaskList+0xc>
  }
}
 800a85e:	bf00      	nop
 800a860:	bf00      	nop
 800a862:	370c      	adds	r7, #12
 800a864:	46bd      	mov	sp, r7
 800a866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a868:	200084c8 	.word	0x200084c8
 800a86c:	20008568 	.word	0x20008568

0800a870 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800a870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a874:	b082      	sub	sp, #8
 800a876:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800a878:	f7fc fc46 	bl	8007108 <xTaskGetTickCountFromISR>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2200      	movs	r2, #0
 800a880:	469a      	mov	sl, r3
 800a882:	4693      	mov	fp, r2
 800a884:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800a888:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a88c:	4602      	mov	r2, r0
 800a88e:	460b      	mov	r3, r1
 800a890:	f04f 0a00 	mov.w	sl, #0
 800a894:	f04f 0b00 	mov.w	fp, #0
 800a898:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800a89c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800a8a0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800a8a4:	4652      	mov	r2, sl
 800a8a6:	465b      	mov	r3, fp
 800a8a8:	1a14      	subs	r4, r2, r0
 800a8aa:	eb63 0501 	sbc.w	r5, r3, r1
 800a8ae:	f04f 0200 	mov.w	r2, #0
 800a8b2:	f04f 0300 	mov.w	r3, #0
 800a8b6:	00ab      	lsls	r3, r5, #2
 800a8b8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800a8bc:	00a2      	lsls	r2, r4, #2
 800a8be:	4614      	mov	r4, r2
 800a8c0:	461d      	mov	r5, r3
 800a8c2:	eb14 0800 	adds.w	r8, r4, r0
 800a8c6:	eb45 0901 	adc.w	r9, r5, r1
 800a8ca:	f04f 0200 	mov.w	r2, #0
 800a8ce:	f04f 0300 	mov.w	r3, #0
 800a8d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a8d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a8da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a8de:	4690      	mov	r8, r2
 800a8e0:	4699      	mov	r9, r3
 800a8e2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800a8e6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800a8ea:	4610      	mov	r0, r2
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	3708      	adds	r7, #8
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800a8f8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b086      	sub	sp, #24
 800a8fc:	af02      	add	r7, sp, #8
 800a8fe:	60f8      	str	r0, [r7, #12]
 800a900:	60b9      	str	r1, [r7, #8]
 800a902:	607a      	str	r2, [r7, #4]
 800a904:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800a906:	2205      	movs	r2, #5
 800a908:	492b      	ldr	r1, [pc, #172]	; (800a9b8 <SYSVIEW_AddTask+0xc0>)
 800a90a:	68b8      	ldr	r0, [r7, #8]
 800a90c:	f002 fd78 	bl	800d400 <memcmp>
 800a910:	4603      	mov	r3, r0
 800a912:	2b00      	cmp	r3, #0
 800a914:	d04b      	beq.n	800a9ae <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800a916:	4b29      	ldr	r3, [pc, #164]	; (800a9bc <SYSVIEW_AddTask+0xc4>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2b07      	cmp	r3, #7
 800a91c:	d903      	bls.n	800a926 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800a91e:	4828      	ldr	r0, [pc, #160]	; (800a9c0 <SYSVIEW_AddTask+0xc8>)
 800a920:	f001 fffe 	bl	800c920 <SEGGER_SYSVIEW_Warn>
    return;
 800a924:	e044      	b.n	800a9b0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800a926:	4b25      	ldr	r3, [pc, #148]	; (800a9bc <SYSVIEW_AddTask+0xc4>)
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	4926      	ldr	r1, [pc, #152]	; (800a9c4 <SYSVIEW_AddTask+0xcc>)
 800a92c:	4613      	mov	r3, r2
 800a92e:	009b      	lsls	r3, r3, #2
 800a930:	4413      	add	r3, r2
 800a932:	009b      	lsls	r3, r3, #2
 800a934:	440b      	add	r3, r1
 800a936:	68fa      	ldr	r2, [r7, #12]
 800a938:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800a93a:	4b20      	ldr	r3, [pc, #128]	; (800a9bc <SYSVIEW_AddTask+0xc4>)
 800a93c:	681a      	ldr	r2, [r3, #0]
 800a93e:	4921      	ldr	r1, [pc, #132]	; (800a9c4 <SYSVIEW_AddTask+0xcc>)
 800a940:	4613      	mov	r3, r2
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	4413      	add	r3, r2
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	440b      	add	r3, r1
 800a94a:	3304      	adds	r3, #4
 800a94c:	68ba      	ldr	r2, [r7, #8]
 800a94e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800a950:	4b1a      	ldr	r3, [pc, #104]	; (800a9bc <SYSVIEW_AddTask+0xc4>)
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	491b      	ldr	r1, [pc, #108]	; (800a9c4 <SYSVIEW_AddTask+0xcc>)
 800a956:	4613      	mov	r3, r2
 800a958:	009b      	lsls	r3, r3, #2
 800a95a:	4413      	add	r3, r2
 800a95c:	009b      	lsls	r3, r3, #2
 800a95e:	440b      	add	r3, r1
 800a960:	3308      	adds	r3, #8
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800a966:	4b15      	ldr	r3, [pc, #84]	; (800a9bc <SYSVIEW_AddTask+0xc4>)
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	4916      	ldr	r1, [pc, #88]	; (800a9c4 <SYSVIEW_AddTask+0xcc>)
 800a96c:	4613      	mov	r3, r2
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	4413      	add	r3, r2
 800a972:	009b      	lsls	r3, r3, #2
 800a974:	440b      	add	r3, r1
 800a976:	330c      	adds	r3, #12
 800a978:	683a      	ldr	r2, [r7, #0]
 800a97a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800a97c:	4b0f      	ldr	r3, [pc, #60]	; (800a9bc <SYSVIEW_AddTask+0xc4>)
 800a97e:	681a      	ldr	r2, [r3, #0]
 800a980:	4910      	ldr	r1, [pc, #64]	; (800a9c4 <SYSVIEW_AddTask+0xcc>)
 800a982:	4613      	mov	r3, r2
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	4413      	add	r3, r2
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	440b      	add	r3, r1
 800a98c:	3310      	adds	r3, #16
 800a98e:	69ba      	ldr	r2, [r7, #24]
 800a990:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800a992:	4b0a      	ldr	r3, [pc, #40]	; (800a9bc <SYSVIEW_AddTask+0xc4>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	3301      	adds	r3, #1
 800a998:	4a08      	ldr	r2, [pc, #32]	; (800a9bc <SYSVIEW_AddTask+0xc4>)
 800a99a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800a99c:	69bb      	ldr	r3, [r7, #24]
 800a99e:	9300      	str	r3, [sp, #0]
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	687a      	ldr	r2, [r7, #4]
 800a9a4:	68b9      	ldr	r1, [r7, #8]
 800a9a6:	68f8      	ldr	r0, [r7, #12]
 800a9a8:	f000 f80e 	bl	800a9c8 <SYSVIEW_SendTaskInfo>
 800a9ac:	e000      	b.n	800a9b0 <SYSVIEW_AddTask+0xb8>
    return;
 800a9ae:	bf00      	nop

}
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	0800de04 	.word	0x0800de04
 800a9bc:	20008568 	.word	0x20008568
 800a9c0:	0800de0c 	.word	0x0800de0c
 800a9c4:	200084c8 	.word	0x200084c8

0800a9c8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b08a      	sub	sp, #40	; 0x28
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
 800a9d4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800a9d6:	f107 0314 	add.w	r3, r7, #20
 800a9da:	2214      	movs	r2, #20
 800a9dc:	2100      	movs	r1, #0
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f002 fd2c 	bl	800d43c <memset>
  TaskInfo.TaskID     = TaskID;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800a9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800a9f8:	f107 0314 	add.w	r3, r7, #20
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f001 fb85 	bl	800c10c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800aa02:	bf00      	nop
 800aa04:	3728      	adds	r7, #40	; 0x28
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
	...

0800aa0c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800aa12:	4b26      	ldr	r3, [pc, #152]	; (800aaac <_DoInit+0xa0>)
 800aa14:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800aa16:	22a8      	movs	r2, #168	; 0xa8
 800aa18:	2100      	movs	r1, #0
 800aa1a:	6838      	ldr	r0, [r7, #0]
 800aa1c:	f002 fd0e 	bl	800d43c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	2203      	movs	r2, #3
 800aa24:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	2203      	movs	r2, #3
 800aa2a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	4a20      	ldr	r2, [pc, #128]	; (800aab0 <_DoInit+0xa4>)
 800aa30:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	4a1f      	ldr	r2, [pc, #124]	; (800aab4 <_DoInit+0xa8>)
 800aa36:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aa3e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	2200      	movs	r2, #0
 800aa44:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	4a16      	ldr	r2, [pc, #88]	; (800aab0 <_DoInit+0xa4>)
 800aa56:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	4a17      	ldr	r2, [pc, #92]	; (800aab8 <_DoInit+0xac>)
 800aa5c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	2210      	movs	r2, #16
 800aa62:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	2200      	movs	r2, #0
 800aa68:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	2200      	movs	r2, #0
 800aa74:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800aa76:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	607b      	str	r3, [r7, #4]
 800aa7e:	e00c      	b.n	800aa9a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f1c3 030f 	rsb	r3, r3, #15
 800aa86:	4a0d      	ldr	r2, [pc, #52]	; (800aabc <_DoInit+0xb0>)
 800aa88:	5cd1      	ldrb	r1, [r2, r3]
 800aa8a:	683a      	ldr	r2, [r7, #0]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	4413      	add	r3, r2
 800aa90:	460a      	mov	r2, r1
 800aa92:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	3301      	adds	r3, #1
 800aa98:	607b      	str	r3, [r7, #4]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2b0f      	cmp	r3, #15
 800aa9e:	d9ef      	bls.n	800aa80 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800aaa0:	f3bf 8f5f 	dmb	sy
}
 800aaa4:	bf00      	nop
 800aaa6:	3708      	adds	r7, #8
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}
 800aaac:	2000856c 	.word	0x2000856c
 800aab0:	0800de5c 	.word	0x0800de5c
 800aab4:	20008614 	.word	0x20008614
 800aab8:	20008a14 	.word	0x20008a14
 800aabc:	0800ded8 	.word	0x0800ded8

0800aac0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b08c      	sub	sp, #48	; 0x30
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800aacc:	4b3e      	ldr	r3, [pc, #248]	; (800abc8 <SEGGER_RTT_ReadNoLock+0x108>)
 800aace:	623b      	str	r3, [r7, #32]
 800aad0:	6a3b      	ldr	r3, [r7, #32]
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d101      	bne.n	800aade <SEGGER_RTT_ReadNoLock+0x1e>
 800aada:	f7ff ff97 	bl	800aa0c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800aade:	68fa      	ldr	r2, [r7, #12]
 800aae0:	4613      	mov	r3, r2
 800aae2:	005b      	lsls	r3, r3, #1
 800aae4:	4413      	add	r3, r2
 800aae6:	00db      	lsls	r3, r3, #3
 800aae8:	3360      	adds	r3, #96	; 0x60
 800aaea:	4a37      	ldr	r2, [pc, #220]	; (800abc8 <SEGGER_RTT_ReadNoLock+0x108>)
 800aaec:	4413      	add	r3, r2
 800aaee:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	691b      	ldr	r3, [r3, #16]
 800aaf8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800aafa:	69fb      	ldr	r3, [r7, #28]
 800aafc:	68db      	ldr	r3, [r3, #12]
 800aafe:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800ab00:	2300      	movs	r3, #0
 800ab02:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800ab04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab06:	69bb      	ldr	r3, [r7, #24]
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d92b      	bls.n	800ab64 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800ab0c:	69fb      	ldr	r3, [r7, #28]
 800ab0e:	689a      	ldr	r2, [r3, #8]
 800ab10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab12:	1ad3      	subs	r3, r2, r3
 800ab14:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800ab16:	697a      	ldr	r2, [r7, #20]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	bf28      	it	cs
 800ab1e:	4613      	movcs	r3, r2
 800ab20:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800ab22:	69fb      	ldr	r3, [r7, #28]
 800ab24:	685a      	ldr	r2, [r3, #4]
 800ab26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab28:	4413      	add	r3, r2
 800ab2a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800ab2c:	697a      	ldr	r2, [r7, #20]
 800ab2e:	6939      	ldr	r1, [r7, #16]
 800ab30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab32:	f002 fc75 	bl	800d420 <memcpy>
    NumBytesRead += NumBytesRem;
 800ab36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	4413      	add	r3, r2
 800ab3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800ab3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	4413      	add	r3, r2
 800ab44:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	1ad3      	subs	r3, r2, r3
 800ab4c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800ab4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	4413      	add	r3, r2
 800ab54:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800ab56:	69fb      	ldr	r3, [r7, #28]
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d101      	bne.n	800ab64 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800ab60:	2300      	movs	r3, #0
 800ab62:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800ab64:	69ba      	ldr	r2, [r7, #24]
 800ab66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab68:	1ad3      	subs	r3, r2, r3
 800ab6a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800ab6c:	697a      	ldr	r2, [r7, #20]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	4293      	cmp	r3, r2
 800ab72:	bf28      	it	cs
 800ab74:	4613      	movcs	r3, r2
 800ab76:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d019      	beq.n	800abb2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	685a      	ldr	r2, [r3, #4]
 800ab82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab84:	4413      	add	r3, r2
 800ab86:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800ab88:	697a      	ldr	r2, [r7, #20]
 800ab8a:	6939      	ldr	r1, [r7, #16]
 800ab8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab8e:	f002 fc47 	bl	800d420 <memcpy>
    NumBytesRead += NumBytesRem;
 800ab92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	4413      	add	r3, r2
 800ab98:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800ab9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	4413      	add	r3, r2
 800aba0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	1ad3      	subs	r3, r2, r3
 800aba8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800abaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	4413      	add	r3, r2
 800abb0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800abb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d002      	beq.n	800abbe <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800abb8:	69fb      	ldr	r3, [r7, #28]
 800abba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abbc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800abbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3730      	adds	r7, #48	; 0x30
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	2000856c 	.word	0x2000856c

0800abcc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800abcc:	b580      	push	{r7, lr}
 800abce:	b088      	sub	sp, #32
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	607a      	str	r2, [r7, #4]
 800abd8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800abda:	4b3d      	ldr	r3, [pc, #244]	; (800acd0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800abdc:	61bb      	str	r3, [r7, #24]
 800abde:	69bb      	ldr	r3, [r7, #24]
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d101      	bne.n	800abec <SEGGER_RTT_AllocUpBuffer+0x20>
 800abe8:	f7ff ff10 	bl	800aa0c <_DoInit>
  SEGGER_RTT_LOCK();
 800abec:	f3ef 8311 	mrs	r3, BASEPRI
 800abf0:	f04f 0120 	mov.w	r1, #32
 800abf4:	f381 8811 	msr	BASEPRI, r1
 800abf8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800abfa:	4b35      	ldr	r3, [pc, #212]	; (800acd0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800abfc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800abfe:	2300      	movs	r3, #0
 800ac00:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800ac02:	6939      	ldr	r1, [r7, #16]
 800ac04:	69fb      	ldr	r3, [r7, #28]
 800ac06:	1c5a      	adds	r2, r3, #1
 800ac08:	4613      	mov	r3, r2
 800ac0a:	005b      	lsls	r3, r3, #1
 800ac0c:	4413      	add	r3, r2
 800ac0e:	00db      	lsls	r3, r3, #3
 800ac10:	440b      	add	r3, r1
 800ac12:	3304      	adds	r3, #4
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d008      	beq.n	800ac2c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800ac1a:	69fb      	ldr	r3, [r7, #28]
 800ac1c:	3301      	adds	r3, #1
 800ac1e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	691b      	ldr	r3, [r3, #16]
 800ac24:	69fa      	ldr	r2, [r7, #28]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	dbeb      	blt.n	800ac02 <SEGGER_RTT_AllocUpBuffer+0x36>
 800ac2a:	e000      	b.n	800ac2e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800ac2c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	691b      	ldr	r3, [r3, #16]
 800ac32:	69fa      	ldr	r2, [r7, #28]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	da3f      	bge.n	800acb8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800ac38:	6939      	ldr	r1, [r7, #16]
 800ac3a:	69fb      	ldr	r3, [r7, #28]
 800ac3c:	1c5a      	adds	r2, r3, #1
 800ac3e:	4613      	mov	r3, r2
 800ac40:	005b      	lsls	r3, r3, #1
 800ac42:	4413      	add	r3, r2
 800ac44:	00db      	lsls	r3, r3, #3
 800ac46:	440b      	add	r3, r1
 800ac48:	68fa      	ldr	r2, [r7, #12]
 800ac4a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800ac4c:	6939      	ldr	r1, [r7, #16]
 800ac4e:	69fb      	ldr	r3, [r7, #28]
 800ac50:	1c5a      	adds	r2, r3, #1
 800ac52:	4613      	mov	r3, r2
 800ac54:	005b      	lsls	r3, r3, #1
 800ac56:	4413      	add	r3, r2
 800ac58:	00db      	lsls	r3, r3, #3
 800ac5a:	440b      	add	r3, r1
 800ac5c:	3304      	adds	r3, #4
 800ac5e:	68ba      	ldr	r2, [r7, #8]
 800ac60:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800ac62:	6939      	ldr	r1, [r7, #16]
 800ac64:	69fa      	ldr	r2, [r7, #28]
 800ac66:	4613      	mov	r3, r2
 800ac68:	005b      	lsls	r3, r3, #1
 800ac6a:	4413      	add	r3, r2
 800ac6c:	00db      	lsls	r3, r3, #3
 800ac6e:	440b      	add	r3, r1
 800ac70:	3320      	adds	r3, #32
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800ac76:	6939      	ldr	r1, [r7, #16]
 800ac78:	69fa      	ldr	r2, [r7, #28]
 800ac7a:	4613      	mov	r3, r2
 800ac7c:	005b      	lsls	r3, r3, #1
 800ac7e:	4413      	add	r3, r2
 800ac80:	00db      	lsls	r3, r3, #3
 800ac82:	440b      	add	r3, r1
 800ac84:	3328      	adds	r3, #40	; 0x28
 800ac86:	2200      	movs	r2, #0
 800ac88:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800ac8a:	6939      	ldr	r1, [r7, #16]
 800ac8c:	69fa      	ldr	r2, [r7, #28]
 800ac8e:	4613      	mov	r3, r2
 800ac90:	005b      	lsls	r3, r3, #1
 800ac92:	4413      	add	r3, r2
 800ac94:	00db      	lsls	r3, r3, #3
 800ac96:	440b      	add	r3, r1
 800ac98:	3324      	adds	r3, #36	; 0x24
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800ac9e:	6939      	ldr	r1, [r7, #16]
 800aca0:	69fa      	ldr	r2, [r7, #28]
 800aca2:	4613      	mov	r3, r2
 800aca4:	005b      	lsls	r3, r3, #1
 800aca6:	4413      	add	r3, r2
 800aca8:	00db      	lsls	r3, r3, #3
 800acaa:	440b      	add	r3, r1
 800acac:	332c      	adds	r3, #44	; 0x2c
 800acae:	683a      	ldr	r2, [r7, #0]
 800acb0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800acb2:	f3bf 8f5f 	dmb	sy
 800acb6:	e002      	b.n	800acbe <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800acb8:	f04f 33ff 	mov.w	r3, #4294967295
 800acbc:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800acc4:	69fb      	ldr	r3, [r7, #28]
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3720      	adds	r7, #32
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	2000856c 	.word	0x2000856c

0800acd4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b08a      	sub	sp, #40	; 0x28
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
 800ace0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800ace2:	4b21      	ldr	r3, [pc, #132]	; (800ad68 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800ace4:	623b      	str	r3, [r7, #32]
 800ace6:	6a3b      	ldr	r3, [r7, #32]
 800ace8:	781b      	ldrb	r3, [r3, #0]
 800acea:	b2db      	uxtb	r3, r3
 800acec:	2b00      	cmp	r3, #0
 800acee:	d101      	bne.n	800acf4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800acf0:	f7ff fe8c 	bl	800aa0c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800acf4:	4b1c      	ldr	r3, [pc, #112]	; (800ad68 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800acf6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2b02      	cmp	r3, #2
 800acfc:	d82c      	bhi.n	800ad58 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800acfe:	f3ef 8311 	mrs	r3, BASEPRI
 800ad02:	f04f 0120 	mov.w	r1, #32
 800ad06:	f381 8811 	msr	BASEPRI, r1
 800ad0a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800ad0c:	68fa      	ldr	r2, [r7, #12]
 800ad0e:	4613      	mov	r3, r2
 800ad10:	005b      	lsls	r3, r3, #1
 800ad12:	4413      	add	r3, r2
 800ad14:	00db      	lsls	r3, r3, #3
 800ad16:	3360      	adds	r3, #96	; 0x60
 800ad18:	69fa      	ldr	r2, [r7, #28]
 800ad1a:	4413      	add	r3, r2
 800ad1c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d00e      	beq.n	800ad42 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	68ba      	ldr	r2, [r7, #8]
 800ad28:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	683a      	ldr	r2, [r7, #0]
 800ad34:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad46:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800ad48:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800ad4c:	69bb      	ldr	r3, [r7, #24]
 800ad4e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800ad52:	2300      	movs	r3, #0
 800ad54:	627b      	str	r3, [r7, #36]	; 0x24
 800ad56:	e002      	b.n	800ad5e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800ad58:	f04f 33ff 	mov.w	r3, #4294967295
 800ad5c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800ad5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3728      	adds	r7, #40	; 0x28
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	2000856c 	.word	0x2000856c

0800ad6c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800ad6c:	b480      	push	{r7}
 800ad6e:	b087      	sub	sp, #28
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	60b9      	str	r1, [r7, #8]
 800ad76:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d00f      	beq.n	800ada2 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800ad82:	e002      	b.n	800ad8a <_EncodeStr+0x1e>
      Len++;
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	3301      	adds	r3, #1
 800ad88:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800ad8a:	68ba      	ldr	r2, [r7, #8]
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	4413      	add	r3, r2
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d1f6      	bne.n	800ad84 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800ad96:	693a      	ldr	r2, [r7, #16]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d901      	bls.n	800ada2 <_EncodeStr+0x36>
      Len = Limit;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	2bfe      	cmp	r3, #254	; 0xfe
 800ada6:	d806      	bhi.n	800adb6 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	1c5a      	adds	r2, r3, #1
 800adac:	60fa      	str	r2, [r7, #12]
 800adae:	693a      	ldr	r2, [r7, #16]
 800adb0:	b2d2      	uxtb	r2, r2
 800adb2:	701a      	strb	r2, [r3, #0]
 800adb4:	e011      	b.n	800adda <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	1c5a      	adds	r2, r3, #1
 800adba:	60fa      	str	r2, [r7, #12]
 800adbc:	22ff      	movs	r2, #255	; 0xff
 800adbe:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	1c5a      	adds	r2, r3, #1
 800adc4:	60fa      	str	r2, [r7, #12]
 800adc6:	693a      	ldr	r2, [r7, #16]
 800adc8:	b2d2      	uxtb	r2, r2
 800adca:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	0a19      	lsrs	r1, r3, #8
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	1c5a      	adds	r2, r3, #1
 800add4:	60fa      	str	r2, [r7, #12]
 800add6:	b2ca      	uxtb	r2, r1
 800add8:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800adda:	2300      	movs	r3, #0
 800addc:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800adde:	e00a      	b.n	800adf6 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800ade0:	68ba      	ldr	r2, [r7, #8]
 800ade2:	1c53      	adds	r3, r2, #1
 800ade4:	60bb      	str	r3, [r7, #8]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	1c59      	adds	r1, r3, #1
 800adea:	60f9      	str	r1, [r7, #12]
 800adec:	7812      	ldrb	r2, [r2, #0]
 800adee:	701a      	strb	r2, [r3, #0]
    n++;
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	3301      	adds	r3, #1
 800adf4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800adf6:	697a      	ldr	r2, [r7, #20]
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d3f0      	bcc.n	800ade0 <_EncodeStr+0x74>
  }
  return pPayload;
 800adfe:	68fb      	ldr	r3, [r7, #12]
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	371c      	adds	r7, #28
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr

0800ae0c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	3307      	adds	r3, #7
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	370c      	adds	r7, #12
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr

0800ae24 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800ae2a:	4b35      	ldr	r3, [pc, #212]	; (800af00 <_HandleIncomingPacket+0xdc>)
 800ae2c:	7e1b      	ldrb	r3, [r3, #24]
 800ae2e:	4618      	mov	r0, r3
 800ae30:	1cfb      	adds	r3, r7, #3
 800ae32:	2201      	movs	r2, #1
 800ae34:	4619      	mov	r1, r3
 800ae36:	f7ff fe43 	bl	800aac0 <SEGGER_RTT_ReadNoLock>
 800ae3a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d052      	beq.n	800aee8 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800ae42:	78fb      	ldrb	r3, [r7, #3]
 800ae44:	2b80      	cmp	r3, #128	; 0x80
 800ae46:	d031      	beq.n	800aeac <_HandleIncomingPacket+0x88>
 800ae48:	2b80      	cmp	r3, #128	; 0x80
 800ae4a:	dc40      	bgt.n	800aece <_HandleIncomingPacket+0xaa>
 800ae4c:	2b07      	cmp	r3, #7
 800ae4e:	dc15      	bgt.n	800ae7c <_HandleIncomingPacket+0x58>
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	dd3c      	ble.n	800aece <_HandleIncomingPacket+0xaa>
 800ae54:	3b01      	subs	r3, #1
 800ae56:	2b06      	cmp	r3, #6
 800ae58:	d839      	bhi.n	800aece <_HandleIncomingPacket+0xaa>
 800ae5a:	a201      	add	r2, pc, #4	; (adr r2, 800ae60 <_HandleIncomingPacket+0x3c>)
 800ae5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae60:	0800ae83 	.word	0x0800ae83
 800ae64:	0800ae89 	.word	0x0800ae89
 800ae68:	0800ae8f 	.word	0x0800ae8f
 800ae6c:	0800ae95 	.word	0x0800ae95
 800ae70:	0800ae9b 	.word	0x0800ae9b
 800ae74:	0800aea1 	.word	0x0800aea1
 800ae78:	0800aea7 	.word	0x0800aea7
 800ae7c:	2b7f      	cmp	r3, #127	; 0x7f
 800ae7e:	d035      	beq.n	800aeec <_HandleIncomingPacket+0xc8>
 800ae80:	e025      	b.n	800aece <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800ae82:	f000 ffc9 	bl	800be18 <SEGGER_SYSVIEW_Start>
      break;
 800ae86:	e036      	b.n	800aef6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800ae88:	f001 f880 	bl	800bf8c <SEGGER_SYSVIEW_Stop>
      break;
 800ae8c:	e033      	b.n	800aef6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800ae8e:	f001 fa59 	bl	800c344 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800ae92:	e030      	b.n	800aef6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800ae94:	f001 fa1e 	bl	800c2d4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800ae98:	e02d      	b.n	800aef6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800ae9a:	f001 f89d 	bl	800bfd8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800ae9e:	e02a      	b.n	800aef6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800aea0:	f001 fcec 	bl	800c87c <SEGGER_SYSVIEW_SendNumModules>
      break;
 800aea4:	e027      	b.n	800aef6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800aea6:	f001 fccb 	bl	800c840 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800aeaa:	e024      	b.n	800aef6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800aeac:	4b14      	ldr	r3, [pc, #80]	; (800af00 <_HandleIncomingPacket+0xdc>)
 800aeae:	7e1b      	ldrb	r3, [r3, #24]
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	1cfb      	adds	r3, r7, #3
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	f7ff fe02 	bl	800aac0 <SEGGER_RTT_ReadNoLock>
 800aebc:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d015      	beq.n	800aef0 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800aec4:	78fb      	ldrb	r3, [r7, #3]
 800aec6:	4618      	mov	r0, r3
 800aec8:	f001 fc3a 	bl	800c740 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800aecc:	e010      	b.n	800aef0 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800aece:	78fb      	ldrb	r3, [r7, #3]
 800aed0:	b25b      	sxtb	r3, r3
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	da0e      	bge.n	800aef4 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800aed6:	4b0a      	ldr	r3, [pc, #40]	; (800af00 <_HandleIncomingPacket+0xdc>)
 800aed8:	7e1b      	ldrb	r3, [r3, #24]
 800aeda:	4618      	mov	r0, r3
 800aedc:	1cfb      	adds	r3, r7, #3
 800aede:	2201      	movs	r2, #1
 800aee0:	4619      	mov	r1, r3
 800aee2:	f7ff fded 	bl	800aac0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800aee6:	e005      	b.n	800aef4 <_HandleIncomingPacket+0xd0>
    }
  }
 800aee8:	bf00      	nop
 800aeea:	e004      	b.n	800aef6 <_HandleIncomingPacket+0xd2>
      break;
 800aeec:	bf00      	nop
 800aeee:	e002      	b.n	800aef6 <_HandleIncomingPacket+0xd2>
      break;
 800aef0:	bf00      	nop
 800aef2:	e000      	b.n	800aef6 <_HandleIncomingPacket+0xd2>
      break;
 800aef4:	bf00      	nop
}
 800aef6:	bf00      	nop
 800aef8:	3708      	adds	r7, #8
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	20009a2c 	.word	0x20009a2c

0800af04 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800af04:	b580      	push	{r7, lr}
 800af06:	b08c      	sub	sp, #48	; 0x30
 800af08:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800af0a:	2301      	movs	r3, #1
 800af0c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800af0e:	1d3b      	adds	r3, r7, #4
 800af10:	3301      	adds	r3, #1
 800af12:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800af14:	69fb      	ldr	r3, [r7, #28]
 800af16:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af18:	4b31      	ldr	r3, [pc, #196]	; (800afe0 <_TrySendOverflowPacket+0xdc>)
 800af1a:	695b      	ldr	r3, [r3, #20]
 800af1c:	62bb      	str	r3, [r7, #40]	; 0x28
 800af1e:	e00b      	b.n	800af38 <_TrySendOverflowPacket+0x34>
 800af20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af22:	b2da      	uxtb	r2, r3
 800af24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af26:	1c59      	adds	r1, r3, #1
 800af28:	62f9      	str	r1, [r7, #44]	; 0x2c
 800af2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800af2e:	b2d2      	uxtb	r2, r2
 800af30:	701a      	strb	r2, [r3, #0]
 800af32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af34:	09db      	lsrs	r3, r3, #7
 800af36:	62bb      	str	r3, [r7, #40]	; 0x28
 800af38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3a:	2b7f      	cmp	r3, #127	; 0x7f
 800af3c:	d8f0      	bhi.n	800af20 <_TrySendOverflowPacket+0x1c>
 800af3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af40:	1c5a      	adds	r2, r3, #1
 800af42:	62fa      	str	r2, [r7, #44]	; 0x2c
 800af44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af46:	b2d2      	uxtb	r2, r2
 800af48:	701a      	strb	r2, [r3, #0]
 800af4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af4c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800af4e:	4b25      	ldr	r3, [pc, #148]	; (800afe4 <_TrySendOverflowPacket+0xe0>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800af54:	4b22      	ldr	r3, [pc, #136]	; (800afe0 <_TrySendOverflowPacket+0xdc>)
 800af56:	68db      	ldr	r3, [r3, #12]
 800af58:	69ba      	ldr	r2, [r7, #24]
 800af5a:	1ad3      	subs	r3, r2, r3
 800af5c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800af5e:	69fb      	ldr	r3, [r7, #28]
 800af60:	627b      	str	r3, [r7, #36]	; 0x24
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	623b      	str	r3, [r7, #32]
 800af66:	e00b      	b.n	800af80 <_TrySendOverflowPacket+0x7c>
 800af68:	6a3b      	ldr	r3, [r7, #32]
 800af6a:	b2da      	uxtb	r2, r3
 800af6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6e:	1c59      	adds	r1, r3, #1
 800af70:	6279      	str	r1, [r7, #36]	; 0x24
 800af72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800af76:	b2d2      	uxtb	r2, r2
 800af78:	701a      	strb	r2, [r3, #0]
 800af7a:	6a3b      	ldr	r3, [r7, #32]
 800af7c:	09db      	lsrs	r3, r3, #7
 800af7e:	623b      	str	r3, [r7, #32]
 800af80:	6a3b      	ldr	r3, [r7, #32]
 800af82:	2b7f      	cmp	r3, #127	; 0x7f
 800af84:	d8f0      	bhi.n	800af68 <_TrySendOverflowPacket+0x64>
 800af86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af88:	1c5a      	adds	r2, r3, #1
 800af8a:	627a      	str	r2, [r7, #36]	; 0x24
 800af8c:	6a3a      	ldr	r2, [r7, #32]
 800af8e:	b2d2      	uxtb	r2, r2
 800af90:	701a      	strb	r2, [r3, #0]
 800af92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af94:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800af96:	4b12      	ldr	r3, [pc, #72]	; (800afe0 <_TrySendOverflowPacket+0xdc>)
 800af98:	785b      	ldrb	r3, [r3, #1]
 800af9a:	4618      	mov	r0, r3
 800af9c:	1d3b      	adds	r3, r7, #4
 800af9e:	69fa      	ldr	r2, [r7, #28]
 800afa0:	1ad3      	subs	r3, r2, r3
 800afa2:	461a      	mov	r2, r3
 800afa4:	1d3b      	adds	r3, r7, #4
 800afa6:	4619      	mov	r1, r3
 800afa8:	f7f5 f91a 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800afac:	4603      	mov	r3, r0
 800afae:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d009      	beq.n	800afca <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800afb6:	4a0a      	ldr	r2, [pc, #40]	; (800afe0 <_TrySendOverflowPacket+0xdc>)
 800afb8:	69bb      	ldr	r3, [r7, #24]
 800afba:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800afbc:	4b08      	ldr	r3, [pc, #32]	; (800afe0 <_TrySendOverflowPacket+0xdc>)
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	3b01      	subs	r3, #1
 800afc2:	b2da      	uxtb	r2, r3
 800afc4:	4b06      	ldr	r3, [pc, #24]	; (800afe0 <_TrySendOverflowPacket+0xdc>)
 800afc6:	701a      	strb	r2, [r3, #0]
 800afc8:	e004      	b.n	800afd4 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800afca:	4b05      	ldr	r3, [pc, #20]	; (800afe0 <_TrySendOverflowPacket+0xdc>)
 800afcc:	695b      	ldr	r3, [r3, #20]
 800afce:	3301      	adds	r3, #1
 800afd0:	4a03      	ldr	r2, [pc, #12]	; (800afe0 <_TrySendOverflowPacket+0xdc>)
 800afd2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800afd4:	693b      	ldr	r3, [r7, #16]
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3730      	adds	r7, #48	; 0x30
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	20009a2c 	.word	0x20009a2c
 800afe4:	e0001004 	.word	0xe0001004

0800afe8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800afe8:	b580      	push	{r7, lr}
 800afea:	b08a      	sub	sp, #40	; 0x28
 800afec:	af00      	add	r7, sp, #0
 800afee:	60f8      	str	r0, [r7, #12]
 800aff0:	60b9      	str	r1, [r7, #8]
 800aff2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800aff4:	4b98      	ldr	r3, [pc, #608]	; (800b258 <_SendPacket+0x270>)
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d010      	beq.n	800b01e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800affc:	4b96      	ldr	r3, [pc, #600]	; (800b258 <_SendPacket+0x270>)
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	2b00      	cmp	r3, #0
 800b002:	f000 812d 	beq.w	800b260 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800b006:	4b94      	ldr	r3, [pc, #592]	; (800b258 <_SendPacket+0x270>)
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	2b02      	cmp	r3, #2
 800b00c:	d109      	bne.n	800b022 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800b00e:	f7ff ff79 	bl	800af04 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800b012:	4b91      	ldr	r3, [pc, #580]	; (800b258 <_SendPacket+0x270>)
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	2b01      	cmp	r3, #1
 800b018:	f040 8124 	bne.w	800b264 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 800b01c:	e001      	b.n	800b022 <_SendPacket+0x3a>
    goto Send;
 800b01e:	bf00      	nop
 800b020:	e000      	b.n	800b024 <_SendPacket+0x3c>
Send:
 800b022:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2b1f      	cmp	r3, #31
 800b028:	d809      	bhi.n	800b03e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800b02a:	4b8b      	ldr	r3, [pc, #556]	; (800b258 <_SendPacket+0x270>)
 800b02c:	69da      	ldr	r2, [r3, #28]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	fa22 f303 	lsr.w	r3, r2, r3
 800b034:	f003 0301 	and.w	r3, r3, #1
 800b038:	2b00      	cmp	r3, #0
 800b03a:	f040 8115 	bne.w	800b268 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2b17      	cmp	r3, #23
 800b042:	d807      	bhi.n	800b054 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	3b01      	subs	r3, #1
 800b048:	60fb      	str	r3, [r7, #12]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	b2da      	uxtb	r2, r3
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	701a      	strb	r2, [r3, #0]
 800b052:	e0c4      	b.n	800b1de <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800b054:	68ba      	ldr	r2, [r7, #8]
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	1ad3      	subs	r3, r2, r3
 800b05a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	2b7f      	cmp	r3, #127	; 0x7f
 800b060:	d912      	bls.n	800b088 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800b062:	69fb      	ldr	r3, [r7, #28]
 800b064:	09da      	lsrs	r2, r3, #7
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	3b01      	subs	r3, #1
 800b06a:	60fb      	str	r3, [r7, #12]
 800b06c:	b2d2      	uxtb	r2, r2
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800b072:	69fb      	ldr	r3, [r7, #28]
 800b074:	b2db      	uxtb	r3, r3
 800b076:	68fa      	ldr	r2, [r7, #12]
 800b078:	3a01      	subs	r2, #1
 800b07a:	60fa      	str	r2, [r7, #12]
 800b07c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b080:	b2da      	uxtb	r2, r3
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	701a      	strb	r2, [r3, #0]
 800b086:	e006      	b.n	800b096 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	3b01      	subs	r3, #1
 800b08c:	60fb      	str	r3, [r7, #12]
 800b08e:	69fb      	ldr	r3, [r7, #28]
 800b090:	b2da      	uxtb	r2, r3
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2b7e      	cmp	r3, #126	; 0x7e
 800b09a:	d807      	bhi.n	800b0ac <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	3b01      	subs	r3, #1
 800b0a0:	60fb      	str	r3, [r7, #12]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	b2da      	uxtb	r2, r3
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	701a      	strb	r2, [r3, #0]
 800b0aa:	e098      	b.n	800b1de <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b0b2:	d212      	bcs.n	800b0da <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	09da      	lsrs	r2, r3, #7
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	3b01      	subs	r3, #1
 800b0bc:	60fb      	str	r3, [r7, #12]
 800b0be:	b2d2      	uxtb	r2, r2
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	68fa      	ldr	r2, [r7, #12]
 800b0ca:	3a01      	subs	r2, #1
 800b0cc:	60fa      	str	r2, [r7, #12]
 800b0ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b0d2:	b2da      	uxtb	r2, r3
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	701a      	strb	r2, [r3, #0]
 800b0d8:	e081      	b.n	800b1de <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b0e0:	d21d      	bcs.n	800b11e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	0b9a      	lsrs	r2, r3, #14
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	3b01      	subs	r3, #1
 800b0ea:	60fb      	str	r3, [r7, #12]
 800b0ec:	b2d2      	uxtb	r2, r2
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	09db      	lsrs	r3, r3, #7
 800b0f6:	b2db      	uxtb	r3, r3
 800b0f8:	68fa      	ldr	r2, [r7, #12]
 800b0fa:	3a01      	subs	r2, #1
 800b0fc:	60fa      	str	r2, [r7, #12]
 800b0fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b102:	b2da      	uxtb	r2, r3
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	b2db      	uxtb	r3, r3
 800b10c:	68fa      	ldr	r2, [r7, #12]
 800b10e:	3a01      	subs	r2, #1
 800b110:	60fa      	str	r2, [r7, #12]
 800b112:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b116:	b2da      	uxtb	r2, r3
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	701a      	strb	r2, [r3, #0]
 800b11c:	e05f      	b.n	800b1de <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b124:	d228      	bcs.n	800b178 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	0d5a      	lsrs	r2, r3, #21
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	3b01      	subs	r3, #1
 800b12e:	60fb      	str	r3, [r7, #12]
 800b130:	b2d2      	uxtb	r2, r2
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	0b9b      	lsrs	r3, r3, #14
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	68fa      	ldr	r2, [r7, #12]
 800b13e:	3a01      	subs	r2, #1
 800b140:	60fa      	str	r2, [r7, #12]
 800b142:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b146:	b2da      	uxtb	r2, r3
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	09db      	lsrs	r3, r3, #7
 800b150:	b2db      	uxtb	r3, r3
 800b152:	68fa      	ldr	r2, [r7, #12]
 800b154:	3a01      	subs	r2, #1
 800b156:	60fa      	str	r2, [r7, #12]
 800b158:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b15c:	b2da      	uxtb	r2, r3
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	b2db      	uxtb	r3, r3
 800b166:	68fa      	ldr	r2, [r7, #12]
 800b168:	3a01      	subs	r2, #1
 800b16a:	60fa      	str	r2, [r7, #12]
 800b16c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b170:	b2da      	uxtb	r2, r3
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	701a      	strb	r2, [r3, #0]
 800b176:	e032      	b.n	800b1de <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	0f1a      	lsrs	r2, r3, #28
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	3b01      	subs	r3, #1
 800b180:	60fb      	str	r3, [r7, #12]
 800b182:	b2d2      	uxtb	r2, r2
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	0d5b      	lsrs	r3, r3, #21
 800b18c:	b2db      	uxtb	r3, r3
 800b18e:	68fa      	ldr	r2, [r7, #12]
 800b190:	3a01      	subs	r2, #1
 800b192:	60fa      	str	r2, [r7, #12]
 800b194:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b198:	b2da      	uxtb	r2, r3
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	0b9b      	lsrs	r3, r3, #14
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	68fa      	ldr	r2, [r7, #12]
 800b1a6:	3a01      	subs	r2, #1
 800b1a8:	60fa      	str	r2, [r7, #12]
 800b1aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b1ae:	b2da      	uxtb	r2, r3
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	09db      	lsrs	r3, r3, #7
 800b1b8:	b2db      	uxtb	r3, r3
 800b1ba:	68fa      	ldr	r2, [r7, #12]
 800b1bc:	3a01      	subs	r2, #1
 800b1be:	60fa      	str	r2, [r7, #12]
 800b1c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b1c4:	b2da      	uxtb	r2, r3
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	b2db      	uxtb	r3, r3
 800b1ce:	68fa      	ldr	r2, [r7, #12]
 800b1d0:	3a01      	subs	r2, #1
 800b1d2:	60fa      	str	r2, [r7, #12]
 800b1d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b1d8:	b2da      	uxtb	r2, r3
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800b1de:	4b1f      	ldr	r3, [pc, #124]	; (800b25c <_SendPacket+0x274>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800b1e4:	4b1c      	ldr	r3, [pc, #112]	; (800b258 <_SendPacket+0x270>)
 800b1e6:	68db      	ldr	r3, [r3, #12]
 800b1e8:	69ba      	ldr	r2, [r7, #24]
 800b1ea:	1ad3      	subs	r3, r2, r3
 800b1ec:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	627b      	str	r3, [r7, #36]	; 0x24
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	623b      	str	r3, [r7, #32]
 800b1f6:	e00b      	b.n	800b210 <_SendPacket+0x228>
 800b1f8:	6a3b      	ldr	r3, [r7, #32]
 800b1fa:	b2da      	uxtb	r2, r3
 800b1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fe:	1c59      	adds	r1, r3, #1
 800b200:	6279      	str	r1, [r7, #36]	; 0x24
 800b202:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b206:	b2d2      	uxtb	r2, r2
 800b208:	701a      	strb	r2, [r3, #0]
 800b20a:	6a3b      	ldr	r3, [r7, #32]
 800b20c:	09db      	lsrs	r3, r3, #7
 800b20e:	623b      	str	r3, [r7, #32]
 800b210:	6a3b      	ldr	r3, [r7, #32]
 800b212:	2b7f      	cmp	r3, #127	; 0x7f
 800b214:	d8f0      	bhi.n	800b1f8 <_SendPacket+0x210>
 800b216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b218:	1c5a      	adds	r2, r3, #1
 800b21a:	627a      	str	r2, [r7, #36]	; 0x24
 800b21c:	6a3a      	ldr	r2, [r7, #32]
 800b21e:	b2d2      	uxtb	r2, r2
 800b220:	701a      	strb	r2, [r3, #0]
 800b222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b224:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800b226:	4b0c      	ldr	r3, [pc, #48]	; (800b258 <_SendPacket+0x270>)
 800b228:	785b      	ldrb	r3, [r3, #1]
 800b22a:	4618      	mov	r0, r3
 800b22c:	68ba      	ldr	r2, [r7, #8]
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	1ad3      	subs	r3, r2, r3
 800b232:	461a      	mov	r2, r3
 800b234:	68f9      	ldr	r1, [r7, #12]
 800b236:	f7f4 ffd3 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800b23a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d003      	beq.n	800b24a <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800b242:	4a05      	ldr	r2, [pc, #20]	; (800b258 <_SendPacket+0x270>)
 800b244:	69bb      	ldr	r3, [r7, #24]
 800b246:	60d3      	str	r3, [r2, #12]
 800b248:	e00f      	b.n	800b26a <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800b24a:	4b03      	ldr	r3, [pc, #12]	; (800b258 <_SendPacket+0x270>)
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	3301      	adds	r3, #1
 800b250:	b2da      	uxtb	r2, r3
 800b252:	4b01      	ldr	r3, [pc, #4]	; (800b258 <_SendPacket+0x270>)
 800b254:	701a      	strb	r2, [r3, #0]
 800b256:	e008      	b.n	800b26a <_SendPacket+0x282>
 800b258:	20009a2c 	.word	0x20009a2c
 800b25c:	e0001004 	.word	0xe0001004
    goto SendDone;
 800b260:	bf00      	nop
 800b262:	e002      	b.n	800b26a <_SendPacket+0x282>
      goto SendDone;
 800b264:	bf00      	nop
 800b266:	e000      	b.n	800b26a <_SendPacket+0x282>
      goto SendDone;
 800b268:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800b26a:	4b14      	ldr	r3, [pc, #80]	; (800b2bc <_SendPacket+0x2d4>)
 800b26c:	7e1b      	ldrb	r3, [r3, #24]
 800b26e:	4619      	mov	r1, r3
 800b270:	4a13      	ldr	r2, [pc, #76]	; (800b2c0 <_SendPacket+0x2d8>)
 800b272:	460b      	mov	r3, r1
 800b274:	005b      	lsls	r3, r3, #1
 800b276:	440b      	add	r3, r1
 800b278:	00db      	lsls	r3, r3, #3
 800b27a:	4413      	add	r3, r2
 800b27c:	336c      	adds	r3, #108	; 0x6c
 800b27e:	681a      	ldr	r2, [r3, #0]
 800b280:	4b0e      	ldr	r3, [pc, #56]	; (800b2bc <_SendPacket+0x2d4>)
 800b282:	7e1b      	ldrb	r3, [r3, #24]
 800b284:	4618      	mov	r0, r3
 800b286:	490e      	ldr	r1, [pc, #56]	; (800b2c0 <_SendPacket+0x2d8>)
 800b288:	4603      	mov	r3, r0
 800b28a:	005b      	lsls	r3, r3, #1
 800b28c:	4403      	add	r3, r0
 800b28e:	00db      	lsls	r3, r3, #3
 800b290:	440b      	add	r3, r1
 800b292:	3370      	adds	r3, #112	; 0x70
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	429a      	cmp	r2, r3
 800b298:	d00b      	beq.n	800b2b2 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800b29a:	4b08      	ldr	r3, [pc, #32]	; (800b2bc <_SendPacket+0x2d4>)
 800b29c:	789b      	ldrb	r3, [r3, #2]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d107      	bne.n	800b2b2 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800b2a2:	4b06      	ldr	r3, [pc, #24]	; (800b2bc <_SendPacket+0x2d4>)
 800b2a4:	2201      	movs	r2, #1
 800b2a6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800b2a8:	f7ff fdbc 	bl	800ae24 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800b2ac:	4b03      	ldr	r3, [pc, #12]	; (800b2bc <_SendPacket+0x2d4>)
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800b2b2:	bf00      	nop
 800b2b4:	3728      	adds	r7, #40	; 0x28
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	20009a2c 	.word	0x20009a2c
 800b2c0:	2000856c 	.word	0x2000856c

0800b2c4 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b08a      	sub	sp, #40	; 0x28
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	691b      	ldr	r3, [r3, #16]
 800b2d4:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	3301      	adds	r3, #1
 800b2da:	2b80      	cmp	r3, #128	; 0x80
 800b2dc:	d80a      	bhi.n	800b2f4 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	1c59      	adds	r1, r3, #1
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	6051      	str	r1, [r2, #4]
 800b2e8:	78fa      	ldrb	r2, [r7, #3]
 800b2ea:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	1c5a      	adds	r2, r3, #1
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	691b      	ldr	r3, [r3, #16]
 800b2f8:	2b80      	cmp	r3, #128	; 0x80
 800b2fa:	d15a      	bne.n	800b3b2 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	691a      	ldr	r2, [r3, #16]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	b2d2      	uxtb	r2, r2
 800b306:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	627b      	str	r3, [r7, #36]	; 0x24
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	623b      	str	r3, [r7, #32]
 800b31c:	e00b      	b.n	800b336 <_StoreChar+0x72>
 800b31e:	6a3b      	ldr	r3, [r7, #32]
 800b320:	b2da      	uxtb	r2, r3
 800b322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b324:	1c59      	adds	r1, r3, #1
 800b326:	6279      	str	r1, [r7, #36]	; 0x24
 800b328:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b32c:	b2d2      	uxtb	r2, r2
 800b32e:	701a      	strb	r2, [r3, #0]
 800b330:	6a3b      	ldr	r3, [r7, #32]
 800b332:	09db      	lsrs	r3, r3, #7
 800b334:	623b      	str	r3, [r7, #32]
 800b336:	6a3b      	ldr	r3, [r7, #32]
 800b338:	2b7f      	cmp	r3, #127	; 0x7f
 800b33a:	d8f0      	bhi.n	800b31e <_StoreChar+0x5a>
 800b33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33e:	1c5a      	adds	r2, r3, #1
 800b340:	627a      	str	r2, [r7, #36]	; 0x24
 800b342:	6a3a      	ldr	r2, [r7, #32]
 800b344:	b2d2      	uxtb	r2, r2
 800b346:	701a      	strb	r2, [r3, #0]
 800b348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b34a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	61fb      	str	r3, [r7, #28]
 800b350:	2300      	movs	r3, #0
 800b352:	61bb      	str	r3, [r7, #24]
 800b354:	e00b      	b.n	800b36e <_StoreChar+0xaa>
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	b2da      	uxtb	r2, r3
 800b35a:	69fb      	ldr	r3, [r7, #28]
 800b35c:	1c59      	adds	r1, r3, #1
 800b35e:	61f9      	str	r1, [r7, #28]
 800b360:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b364:	b2d2      	uxtb	r2, r2
 800b366:	701a      	strb	r2, [r3, #0]
 800b368:	69bb      	ldr	r3, [r7, #24]
 800b36a:	09db      	lsrs	r3, r3, #7
 800b36c:	61bb      	str	r3, [r7, #24]
 800b36e:	69bb      	ldr	r3, [r7, #24]
 800b370:	2b7f      	cmp	r3, #127	; 0x7f
 800b372:	d8f0      	bhi.n	800b356 <_StoreChar+0x92>
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	1c5a      	adds	r2, r3, #1
 800b378:	61fa      	str	r2, [r7, #28]
 800b37a:	69ba      	ldr	r2, [r7, #24]
 800b37c:	b2d2      	uxtb	r2, r2
 800b37e:	701a      	strb	r2, [r3, #0]
 800b380:	69fb      	ldr	r3, [r7, #28]
 800b382:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	221a      	movs	r2, #26
 800b38a:	6939      	ldr	r1, [r7, #16]
 800b38c:	4618      	mov	r0, r3
 800b38e:	f7ff fe2b 	bl	800afe8 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	4618      	mov	r0, r3
 800b398:	f7ff fd38 	bl	800ae0c <_PreparePacket>
 800b39c:	4602      	mov	r2, r0
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	689b      	ldr	r3, [r3, #8]
 800b3a6:	1c5a      	adds	r2, r3, #1
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	611a      	str	r2, [r3, #16]
  }
}
 800b3b2:	bf00      	nop
 800b3b4:	3728      	adds	r7, #40	; 0x28
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
	...

0800b3bc <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b08a      	sub	sp, #40	; 0x28
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	607a      	str	r2, [r7, #4]
 800b3c8:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800b3d6:	e007      	b.n	800b3e8 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800b3d8:	6a3a      	ldr	r2, [r7, #32]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3e0:	623b      	str	r3, [r7, #32]
    Width++;
 800b3e2:	69fb      	ldr	r3, [r7, #28]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800b3e8:	6a3a      	ldr	r2, [r7, #32]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d2f3      	bcs.n	800b3d8 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800b3f0:	683a      	ldr	r2, [r7, #0]
 800b3f2:	69fb      	ldr	r3, [r7, #28]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d901      	bls.n	800b3fc <_PrintUnsigned+0x40>
    Width = NumDigits;
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800b3fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3fe:	f003 0301 	and.w	r3, r3, #1
 800b402:	2b00      	cmp	r3, #0
 800b404:	d11f      	bne.n	800b446 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800b406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d01c      	beq.n	800b446 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800b40c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b40e:	f003 0302 	and.w	r3, r3, #2
 800b412:	2b00      	cmp	r3, #0
 800b414:	d005      	beq.n	800b422 <_PrintUnsigned+0x66>
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d102      	bne.n	800b422 <_PrintUnsigned+0x66>
        c = '0';
 800b41c:	2330      	movs	r3, #48	; 0x30
 800b41e:	76fb      	strb	r3, [r7, #27]
 800b420:	e001      	b.n	800b426 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800b422:	2320      	movs	r3, #32
 800b424:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800b426:	e007      	b.n	800b438 <_PrintUnsigned+0x7c>
        FieldWidth--;
 800b428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b42a:	3b01      	subs	r3, #1
 800b42c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800b42e:	7efb      	ldrb	r3, [r7, #27]
 800b430:	4619      	mov	r1, r3
 800b432:	68f8      	ldr	r0, [r7, #12]
 800b434:	f7ff ff46 	bl	800b2c4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800b438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d003      	beq.n	800b446 <_PrintUnsigned+0x8a>
 800b43e:	69fa      	ldr	r2, [r7, #28]
 800b440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b442:	429a      	cmp	r2, r3
 800b444:	d3f0      	bcc.n	800b428 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d903      	bls.n	800b454 <_PrintUnsigned+0x98>
      NumDigits--;
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	3b01      	subs	r3, #1
 800b450:	603b      	str	r3, [r7, #0]
 800b452:	e009      	b.n	800b468 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 800b454:	68ba      	ldr	r2, [r7, #8]
 800b456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b458:	fbb2 f3f3 	udiv	r3, r2, r3
 800b45c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800b45e:	697a      	ldr	r2, [r7, #20]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	429a      	cmp	r2, r3
 800b464:	d200      	bcs.n	800b468 <_PrintUnsigned+0xac>
        break;
 800b466:	e005      	b.n	800b474 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 800b468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46a:	687a      	ldr	r2, [r7, #4]
 800b46c:	fb02 f303 	mul.w	r3, r2, r3
 800b470:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800b472:	e7e8      	b.n	800b446 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800b474:	68ba      	ldr	r2, [r7, #8]
 800b476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b478:	fbb2 f3f3 	udiv	r3, r2, r3
 800b47c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b482:	fb02 f303 	mul.w	r3, r2, r3
 800b486:	68ba      	ldr	r2, [r7, #8]
 800b488:	1ad3      	subs	r3, r2, r3
 800b48a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800b48c:	4a15      	ldr	r2, [pc, #84]	; (800b4e4 <_PrintUnsigned+0x128>)
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	4413      	add	r3, r2
 800b492:	781b      	ldrb	r3, [r3, #0]
 800b494:	4619      	mov	r1, r3
 800b496:	68f8      	ldr	r0, [r7, #12]
 800b498:	f7ff ff14 	bl	800b2c4 <_StoreChar>
    Digit /= Base;
 800b49c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4a4:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 800b4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d1e3      	bne.n	800b474 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800b4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ae:	f003 0301 	and.w	r3, r3, #1
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d011      	beq.n	800b4da <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800b4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d00e      	beq.n	800b4da <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800b4bc:	e006      	b.n	800b4cc <_PrintUnsigned+0x110>
        FieldWidth--;
 800b4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c0:	3b01      	subs	r3, #1
 800b4c2:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 800b4c4:	2120      	movs	r1, #32
 800b4c6:	68f8      	ldr	r0, [r7, #12]
 800b4c8:	f7ff fefc 	bl	800b2c4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800b4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d003      	beq.n	800b4da <_PrintUnsigned+0x11e>
 800b4d2:	69fa      	ldr	r2, [r7, #28]
 800b4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d3f1      	bcc.n	800b4be <_PrintUnsigned+0x102>
      }
    }
  }
}
 800b4da:	bf00      	nop
 800b4dc:	3728      	adds	r7, #40	; 0x28
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	bf00      	nop
 800b4e4:	0800def8 	.word	0x0800def8

0800b4e8 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b088      	sub	sp, #32
 800b4ec:	af02      	add	r7, sp, #8
 800b4ee:	60f8      	str	r0, [r7, #12]
 800b4f0:	60b9      	str	r1, [r7, #8]
 800b4f2:	607a      	str	r2, [r7, #4]
 800b4f4:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	bfb8      	it	lt
 800b4fc:	425b      	neglt	r3, r3
 800b4fe:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800b500:	2301      	movs	r3, #1
 800b502:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800b504:	e007      	b.n	800b516 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	693a      	ldr	r2, [r7, #16]
 800b50a:	fb92 f3f3 	sdiv	r3, r2, r3
 800b50e:	613b      	str	r3, [r7, #16]
    Width++;
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	3301      	adds	r3, #1
 800b514:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	693a      	ldr	r2, [r7, #16]
 800b51a:	429a      	cmp	r2, r3
 800b51c:	daf3      	bge.n	800b506 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800b51e:	683a      	ldr	r2, [r7, #0]
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	429a      	cmp	r2, r3
 800b524:	d901      	bls.n	800b52a <_PrintInt+0x42>
    Width = NumDigits;
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800b52a:	6a3b      	ldr	r3, [r7, #32]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d00a      	beq.n	800b546 <_PrintInt+0x5e>
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	2b00      	cmp	r3, #0
 800b534:	db04      	blt.n	800b540 <_PrintInt+0x58>
 800b536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b538:	f003 0304 	and.w	r3, r3, #4
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d002      	beq.n	800b546 <_PrintInt+0x5e>
    FieldWidth--;
 800b540:	6a3b      	ldr	r3, [r7, #32]
 800b542:	3b01      	subs	r3, #1
 800b544:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800b546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b548:	f003 0302 	and.w	r3, r3, #2
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d002      	beq.n	800b556 <_PrintInt+0x6e>
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d016      	beq.n	800b584 <_PrintInt+0x9c>
 800b556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b558:	f003 0301 	and.w	r3, r3, #1
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d111      	bne.n	800b584 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 800b560:	6a3b      	ldr	r3, [r7, #32]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d00e      	beq.n	800b584 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800b566:	e006      	b.n	800b576 <_PrintInt+0x8e>
        FieldWidth--;
 800b568:	6a3b      	ldr	r3, [r7, #32]
 800b56a:	3b01      	subs	r3, #1
 800b56c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800b56e:	2120      	movs	r1, #32
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	f7ff fea7 	bl	800b2c4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800b576:	6a3b      	ldr	r3, [r7, #32]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d003      	beq.n	800b584 <_PrintInt+0x9c>
 800b57c:	697a      	ldr	r2, [r7, #20]
 800b57e:	6a3b      	ldr	r3, [r7, #32]
 800b580:	429a      	cmp	r2, r3
 800b582:	d3f1      	bcc.n	800b568 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	2b00      	cmp	r3, #0
 800b588:	da07      	bge.n	800b59a <_PrintInt+0xb2>
    v = -v;
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	425b      	negs	r3, r3
 800b58e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 800b590:	212d      	movs	r1, #45	; 0x2d
 800b592:	68f8      	ldr	r0, [r7, #12]
 800b594:	f7ff fe96 	bl	800b2c4 <_StoreChar>
 800b598:	e008      	b.n	800b5ac <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800b59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59c:	f003 0304 	and.w	r3, r3, #4
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d003      	beq.n	800b5ac <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 800b5a4:	212b      	movs	r1, #43	; 0x2b
 800b5a6:	68f8      	ldr	r0, [r7, #12]
 800b5a8:	f7ff fe8c 	bl	800b2c4 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800b5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ae:	f003 0302 	and.w	r3, r3, #2
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d019      	beq.n	800b5ea <_PrintInt+0x102>
 800b5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b8:	f003 0301 	and.w	r3, r3, #1
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d114      	bne.n	800b5ea <_PrintInt+0x102>
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d111      	bne.n	800b5ea <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800b5c6:	6a3b      	ldr	r3, [r7, #32]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d00e      	beq.n	800b5ea <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800b5cc:	e006      	b.n	800b5dc <_PrintInt+0xf4>
        FieldWidth--;
 800b5ce:	6a3b      	ldr	r3, [r7, #32]
 800b5d0:	3b01      	subs	r3, #1
 800b5d2:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 800b5d4:	2130      	movs	r1, #48	; 0x30
 800b5d6:	68f8      	ldr	r0, [r7, #12]
 800b5d8:	f7ff fe74 	bl	800b2c4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800b5dc:	6a3b      	ldr	r3, [r7, #32]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d003      	beq.n	800b5ea <_PrintInt+0x102>
 800b5e2:	697a      	ldr	r2, [r7, #20]
 800b5e4:	6a3b      	ldr	r3, [r7, #32]
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d3f1      	bcc.n	800b5ce <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800b5ea:	68b9      	ldr	r1, [r7, #8]
 800b5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ee:	9301      	str	r3, [sp, #4]
 800b5f0:	6a3b      	ldr	r3, [r7, #32]
 800b5f2:	9300      	str	r3, [sp, #0]
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	687a      	ldr	r2, [r7, #4]
 800b5f8:	68f8      	ldr	r0, [r7, #12]
 800b5fa:	f7ff fedf 	bl	800b3bc <_PrintUnsigned>
}
 800b5fe:	bf00      	nop
 800b600:	3718      	adds	r7, #24
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
	...

0800b608 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800b608:	b580      	push	{r7, lr}
 800b60a:	b098      	sub	sp, #96	; 0x60
 800b60c:	af02      	add	r7, sp, #8
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	60b9      	str	r1, [r7, #8]
 800b612:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800b614:	f3ef 8311 	mrs	r3, BASEPRI
 800b618:	f04f 0120 	mov.w	r1, #32
 800b61c:	f381 8811 	msr	BASEPRI, r1
 800b620:	633b      	str	r3, [r7, #48]	; 0x30
 800b622:	48b7      	ldr	r0, [pc, #732]	; (800b900 <_VPrintTarget+0x2f8>)
 800b624:	f7ff fbf2 	bl	800ae0c <_PreparePacket>
 800b628:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800b62a:	4bb5      	ldr	r3, [pc, #724]	; (800b900 <_VPrintTarget+0x2f8>)
 800b62c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800b62e:	2300      	movs	r3, #0
 800b630:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800b632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b634:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800b636:	69fb      	ldr	r3, [r7, #28]
 800b638:	3301      	adds	r3, #1
 800b63a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	3301      	adds	r3, #1
 800b64c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800b64e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b652:	2b00      	cmp	r3, #0
 800b654:	f000 8183 	beq.w	800b95e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 800b658:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b65c:	2b25      	cmp	r3, #37	; 0x25
 800b65e:	f040 8170 	bne.w	800b942 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800b662:	2300      	movs	r3, #0
 800b664:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800b666:	2301      	movs	r3, #1
 800b668:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800b672:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b676:	3b23      	subs	r3, #35	; 0x23
 800b678:	2b0d      	cmp	r3, #13
 800b67a:	d83f      	bhi.n	800b6fc <_VPrintTarget+0xf4>
 800b67c:	a201      	add	r2, pc, #4	; (adr r2, 800b684 <_VPrintTarget+0x7c>)
 800b67e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b682:	bf00      	nop
 800b684:	0800b6ed 	.word	0x0800b6ed
 800b688:	0800b6fd 	.word	0x0800b6fd
 800b68c:	0800b6fd 	.word	0x0800b6fd
 800b690:	0800b6fd 	.word	0x0800b6fd
 800b694:	0800b6fd 	.word	0x0800b6fd
 800b698:	0800b6fd 	.word	0x0800b6fd
 800b69c:	0800b6fd 	.word	0x0800b6fd
 800b6a0:	0800b6fd 	.word	0x0800b6fd
 800b6a4:	0800b6dd 	.word	0x0800b6dd
 800b6a8:	0800b6fd 	.word	0x0800b6fd
 800b6ac:	0800b6bd 	.word	0x0800b6bd
 800b6b0:	0800b6fd 	.word	0x0800b6fd
 800b6b4:	0800b6fd 	.word	0x0800b6fd
 800b6b8:	0800b6cd 	.word	0x0800b6cd
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800b6bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6be:	f043 0301 	orr.w	r3, r3, #1
 800b6c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	60fb      	str	r3, [r7, #12]
 800b6ca:	e01a      	b.n	800b702 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800b6cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6ce:	f043 0302 	orr.w	r3, r3, #2
 800b6d2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	60fb      	str	r3, [r7, #12]
 800b6da:	e012      	b.n	800b702 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800b6dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6de:	f043 0304 	orr.w	r3, r3, #4
 800b6e2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	3301      	adds	r3, #1
 800b6e8:	60fb      	str	r3, [r7, #12]
 800b6ea:	e00a      	b.n	800b702 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800b6ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6ee:	f043 0308 	orr.w	r3, r3, #8
 800b6f2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	60fb      	str	r3, [r7, #12]
 800b6fa:	e002      	b.n	800b702 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	653b      	str	r3, [r7, #80]	; 0x50
 800b700:	bf00      	nop
        }
      } while (v);
 800b702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b704:	2b00      	cmp	r3, #0
 800b706:	d1b0      	bne.n	800b66a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800b708:	2300      	movs	r3, #0
 800b70a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	781b      	ldrb	r3, [r3, #0]
 800b710:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 800b714:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b718:	2b2f      	cmp	r3, #47	; 0x2f
 800b71a:	d912      	bls.n	800b742 <_VPrintTarget+0x13a>
 800b71c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b720:	2b39      	cmp	r3, #57	; 0x39
 800b722:	d80e      	bhi.n	800b742 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	3301      	adds	r3, #1
 800b728:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800b72a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b72c:	4613      	mov	r3, r2
 800b72e:	009b      	lsls	r3, r3, #2
 800b730:	4413      	add	r3, r2
 800b732:	005b      	lsls	r3, r3, #1
 800b734:	461a      	mov	r2, r3
 800b736:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b73a:	4413      	add	r3, r2
 800b73c:	3b30      	subs	r3, #48	; 0x30
 800b73e:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 800b740:	e7e4      	b.n	800b70c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800b742:	2300      	movs	r3, #0
 800b744:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800b74e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b752:	2b2e      	cmp	r3, #46	; 0x2e
 800b754:	d11d      	bne.n	800b792 <_VPrintTarget+0x18a>
        sFormat++;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	3301      	adds	r3, #1
 800b75a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	781b      	ldrb	r3, [r3, #0]
 800b760:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 800b764:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b768:	2b2f      	cmp	r3, #47	; 0x2f
 800b76a:	d912      	bls.n	800b792 <_VPrintTarget+0x18a>
 800b76c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b770:	2b39      	cmp	r3, #57	; 0x39
 800b772:	d80e      	bhi.n	800b792 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	3301      	adds	r3, #1
 800b778:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800b77a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b77c:	4613      	mov	r3, r2
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	4413      	add	r3, r2
 800b782:	005b      	lsls	r3, r3, #1
 800b784:	461a      	mov	r2, r3
 800b786:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b78a:	4413      	add	r3, r2
 800b78c:	3b30      	subs	r3, #48	; 0x30
 800b78e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 800b790:	e7e4      	b.n	800b75c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800b79a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b79e:	2b6c      	cmp	r3, #108	; 0x6c
 800b7a0:	d003      	beq.n	800b7aa <_VPrintTarget+0x1a2>
 800b7a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b7a6:	2b68      	cmp	r3, #104	; 0x68
 800b7a8:	d107      	bne.n	800b7ba <_VPrintTarget+0x1b2>
          c = *sFormat;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	3301      	adds	r3, #1
 800b7b6:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 800b7b8:	e7ef      	b.n	800b79a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800b7ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b7be:	2b25      	cmp	r3, #37	; 0x25
 800b7c0:	f000 80b3 	beq.w	800b92a <_VPrintTarget+0x322>
 800b7c4:	2b25      	cmp	r3, #37	; 0x25
 800b7c6:	f2c0 80b7 	blt.w	800b938 <_VPrintTarget+0x330>
 800b7ca:	2b78      	cmp	r3, #120	; 0x78
 800b7cc:	f300 80b4 	bgt.w	800b938 <_VPrintTarget+0x330>
 800b7d0:	2b58      	cmp	r3, #88	; 0x58
 800b7d2:	f2c0 80b1 	blt.w	800b938 <_VPrintTarget+0x330>
 800b7d6:	3b58      	subs	r3, #88	; 0x58
 800b7d8:	2b20      	cmp	r3, #32
 800b7da:	f200 80ad 	bhi.w	800b938 <_VPrintTarget+0x330>
 800b7de:	a201      	add	r2, pc, #4	; (adr r2, 800b7e4 <_VPrintTarget+0x1dc>)
 800b7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7e4:	0800b8db 	.word	0x0800b8db
 800b7e8:	0800b939 	.word	0x0800b939
 800b7ec:	0800b939 	.word	0x0800b939
 800b7f0:	0800b939 	.word	0x0800b939
 800b7f4:	0800b939 	.word	0x0800b939
 800b7f8:	0800b939 	.word	0x0800b939
 800b7fc:	0800b939 	.word	0x0800b939
 800b800:	0800b939 	.word	0x0800b939
 800b804:	0800b939 	.word	0x0800b939
 800b808:	0800b939 	.word	0x0800b939
 800b80c:	0800b939 	.word	0x0800b939
 800b810:	0800b869 	.word	0x0800b869
 800b814:	0800b88f 	.word	0x0800b88f
 800b818:	0800b939 	.word	0x0800b939
 800b81c:	0800b939 	.word	0x0800b939
 800b820:	0800b939 	.word	0x0800b939
 800b824:	0800b939 	.word	0x0800b939
 800b828:	0800b939 	.word	0x0800b939
 800b82c:	0800b939 	.word	0x0800b939
 800b830:	0800b939 	.word	0x0800b939
 800b834:	0800b939 	.word	0x0800b939
 800b838:	0800b939 	.word	0x0800b939
 800b83c:	0800b939 	.word	0x0800b939
 800b840:	0800b939 	.word	0x0800b939
 800b844:	0800b905 	.word	0x0800b905
 800b848:	0800b939 	.word	0x0800b939
 800b84c:	0800b939 	.word	0x0800b939
 800b850:	0800b939 	.word	0x0800b939
 800b854:	0800b939 	.word	0x0800b939
 800b858:	0800b8b5 	.word	0x0800b8b5
 800b85c:	0800b939 	.word	0x0800b939
 800b860:	0800b939 	.word	0x0800b939
 800b864:	0800b8db 	.word	0x0800b8db
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	1d19      	adds	r1, r3, #4
 800b86e:	687a      	ldr	r2, [r7, #4]
 800b870:	6011      	str	r1, [r2, #0]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800b876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b878:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 800b87c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800b880:	f107 0314 	add.w	r3, r7, #20
 800b884:	4611      	mov	r1, r2
 800b886:	4618      	mov	r0, r3
 800b888:	f7ff fd1c 	bl	800b2c4 <_StoreChar>
        break;
 800b88c:	e055      	b.n	800b93a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	1d19      	adds	r1, r3, #4
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	6011      	str	r1, [r2, #0]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800b89c:	f107 0014 	add.w	r0, r7, #20
 800b8a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8a2:	9301      	str	r3, [sp, #4]
 800b8a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8a6:	9300      	str	r3, [sp, #0]
 800b8a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8aa:	220a      	movs	r2, #10
 800b8ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b8ae:	f7ff fe1b 	bl	800b4e8 <_PrintInt>
        break;
 800b8b2:	e042      	b.n	800b93a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	1d19      	adds	r1, r3, #4
 800b8ba:	687a      	ldr	r2, [r7, #4]
 800b8bc:	6011      	str	r1, [r2, #0]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800b8c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b8c4:	f107 0014 	add.w	r0, r7, #20
 800b8c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8ca:	9301      	str	r3, [sp, #4]
 800b8cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8ce:	9300      	str	r3, [sp, #0]
 800b8d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8d2:	220a      	movs	r2, #10
 800b8d4:	f7ff fd72 	bl	800b3bc <_PrintUnsigned>
        break;
 800b8d8:	e02f      	b.n	800b93a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	1d19      	adds	r1, r3, #4
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	6011      	str	r1, [r2, #0]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800b8e8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b8ea:	f107 0014 	add.w	r0, r7, #20
 800b8ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8f0:	9301      	str	r3, [sp, #4]
 800b8f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8f4:	9300      	str	r3, [sp, #0]
 800b8f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8f8:	2210      	movs	r2, #16
 800b8fa:	f7ff fd5f 	bl	800b3bc <_PrintUnsigned>
        break;
 800b8fe:	e01c      	b.n	800b93a <_VPrintTarget+0x332>
 800b900:	20009a5c 	.word	0x20009a5c
      case 'p':
        v = va_arg(*pParamList, int);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	1d19      	adds	r1, r3, #4
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	6011      	str	r1, [r2, #0]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800b912:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b914:	f107 0014 	add.w	r0, r7, #20
 800b918:	2300      	movs	r3, #0
 800b91a:	9301      	str	r3, [sp, #4]
 800b91c:	2308      	movs	r3, #8
 800b91e:	9300      	str	r3, [sp, #0]
 800b920:	2308      	movs	r3, #8
 800b922:	2210      	movs	r2, #16
 800b924:	f7ff fd4a 	bl	800b3bc <_PrintUnsigned>
        break;
 800b928:	e007      	b.n	800b93a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800b92a:	f107 0314 	add.w	r3, r7, #20
 800b92e:	2125      	movs	r1, #37	; 0x25
 800b930:	4618      	mov	r0, r3
 800b932:	f7ff fcc7 	bl	800b2c4 <_StoreChar>
        break;
 800b936:	e000      	b.n	800b93a <_VPrintTarget+0x332>
      default:
        break;
 800b938:	bf00      	nop
      }
      sFormat++;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	3301      	adds	r3, #1
 800b93e:	60fb      	str	r3, [r7, #12]
 800b940:	e007      	b.n	800b952 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800b942:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b946:	f107 0314 	add.w	r3, r7, #20
 800b94a:	4611      	mov	r1, r2
 800b94c:	4618      	mov	r0, r3
 800b94e:	f7ff fcb9 	bl	800b2c4 <_StoreChar>
    }
  } while (*sFormat);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	2b00      	cmp	r3, #0
 800b958:	f47f ae72 	bne.w	800b640 <_VPrintTarget+0x38>
 800b95c:	e000      	b.n	800b960 <_VPrintTarget+0x358>
      break;
 800b95e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800b960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b962:	2b00      	cmp	r3, #0
 800b964:	d041      	beq.n	800b9ea <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 800b966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	b2d2      	uxtb	r2, r2
 800b96c:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800b96e:	69bb      	ldr	r3, [r7, #24]
 800b970:	643b      	str	r3, [r7, #64]	; 0x40
 800b972:	6a3b      	ldr	r3, [r7, #32]
 800b974:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b976:	e00b      	b.n	800b990 <_VPrintTarget+0x388>
 800b978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b97a:	b2da      	uxtb	r2, r3
 800b97c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b97e:	1c59      	adds	r1, r3, #1
 800b980:	6439      	str	r1, [r7, #64]	; 0x40
 800b982:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b986:	b2d2      	uxtb	r2, r2
 800b988:	701a      	strb	r2, [r3, #0]
 800b98a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b98c:	09db      	lsrs	r3, r3, #7
 800b98e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b992:	2b7f      	cmp	r3, #127	; 0x7f
 800b994:	d8f0      	bhi.n	800b978 <_VPrintTarget+0x370>
 800b996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b998:	1c5a      	adds	r2, r3, #1
 800b99a:	643a      	str	r2, [r7, #64]	; 0x40
 800b99c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b99e:	b2d2      	uxtb	r2, r2
 800b9a0:	701a      	strb	r2, [r3, #0]
 800b9a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9a4:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800b9a6:	69bb      	ldr	r3, [r7, #24]
 800b9a8:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	637b      	str	r3, [r7, #52]	; 0x34
 800b9ae:	e00b      	b.n	800b9c8 <_VPrintTarget+0x3c0>
 800b9b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9b2:	b2da      	uxtb	r2, r3
 800b9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b6:	1c59      	adds	r1, r3, #1
 800b9b8:	63b9      	str	r1, [r7, #56]	; 0x38
 800b9ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b9be:	b2d2      	uxtb	r2, r2
 800b9c0:	701a      	strb	r2, [r3, #0]
 800b9c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9c4:	09db      	lsrs	r3, r3, #7
 800b9c6:	637b      	str	r3, [r7, #52]	; 0x34
 800b9c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9ca:	2b7f      	cmp	r3, #127	; 0x7f
 800b9cc:	d8f0      	bhi.n	800b9b0 <_VPrintTarget+0x3a8>
 800b9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d0:	1c5a      	adds	r2, r3, #1
 800b9d2:	63ba      	str	r2, [r7, #56]	; 0x38
 800b9d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9d6:	b2d2      	uxtb	r2, r2
 800b9d8:	701a      	strb	r2, [r3, #0]
 800b9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9dc:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800b9de:	69fb      	ldr	r3, [r7, #28]
 800b9e0:	69b9      	ldr	r1, [r7, #24]
 800b9e2:	221a      	movs	r2, #26
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f7ff faff 	bl	800afe8 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800b9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ec:	f383 8811 	msr	BASEPRI, r3
#endif
}
 800b9f0:	bf00      	nop
 800b9f2:	3758      	adds	r7, #88	; 0x58
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b086      	sub	sp, #24
 800b9fc:	af02      	add	r7, sp, #8
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	607a      	str	r2, [r7, #4]
 800ba04:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800ba06:	2300      	movs	r3, #0
 800ba08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ba0c:	4917      	ldr	r1, [pc, #92]	; (800ba6c <SEGGER_SYSVIEW_Init+0x74>)
 800ba0e:	4818      	ldr	r0, [pc, #96]	; (800ba70 <SEGGER_SYSVIEW_Init+0x78>)
 800ba10:	f7ff f8dc 	bl	800abcc <SEGGER_RTT_AllocUpBuffer>
 800ba14:	4603      	mov	r3, r0
 800ba16:	b2da      	uxtb	r2, r3
 800ba18:	4b16      	ldr	r3, [pc, #88]	; (800ba74 <SEGGER_SYSVIEW_Init+0x7c>)
 800ba1a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800ba1c:	4b15      	ldr	r3, [pc, #84]	; (800ba74 <SEGGER_SYSVIEW_Init+0x7c>)
 800ba1e:	785a      	ldrb	r2, [r3, #1]
 800ba20:	4b14      	ldr	r3, [pc, #80]	; (800ba74 <SEGGER_SYSVIEW_Init+0x7c>)
 800ba22:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800ba24:	4b13      	ldr	r3, [pc, #76]	; (800ba74 <SEGGER_SYSVIEW_Init+0x7c>)
 800ba26:	7e1b      	ldrb	r3, [r3, #24]
 800ba28:	4618      	mov	r0, r3
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	9300      	str	r3, [sp, #0]
 800ba2e:	2308      	movs	r3, #8
 800ba30:	4a11      	ldr	r2, [pc, #68]	; (800ba78 <SEGGER_SYSVIEW_Init+0x80>)
 800ba32:	490f      	ldr	r1, [pc, #60]	; (800ba70 <SEGGER_SYSVIEW_Init+0x78>)
 800ba34:	f7ff f94e 	bl	800acd4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800ba38:	4b0e      	ldr	r3, [pc, #56]	; (800ba74 <SEGGER_SYSVIEW_Init+0x7c>)
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800ba3e:	4b0f      	ldr	r3, [pc, #60]	; (800ba7c <SEGGER_SYSVIEW_Init+0x84>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	4a0c      	ldr	r2, [pc, #48]	; (800ba74 <SEGGER_SYSVIEW_Init+0x7c>)
 800ba44:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800ba46:	4a0b      	ldr	r2, [pc, #44]	; (800ba74 <SEGGER_SYSVIEW_Init+0x7c>)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800ba4c:	4a09      	ldr	r2, [pc, #36]	; (800ba74 <SEGGER_SYSVIEW_Init+0x7c>)
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800ba52:	4a08      	ldr	r2, [pc, #32]	; (800ba74 <SEGGER_SYSVIEW_Init+0x7c>)
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800ba58:	4a06      	ldr	r2, [pc, #24]	; (800ba74 <SEGGER_SYSVIEW_Init+0x7c>)
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800ba5e:	4b05      	ldr	r3, [pc, #20]	; (800ba74 <SEGGER_SYSVIEW_Init+0x7c>)
 800ba60:	2200      	movs	r2, #0
 800ba62:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800ba64:	bf00      	nop
 800ba66:	3710      	adds	r7, #16
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}
 800ba6c:	20008a24 	.word	0x20008a24
 800ba70:	0800de68 	.word	0x0800de68
 800ba74:	20009a2c 	.word	0x20009a2c
 800ba78:	20009a24 	.word	0x20009a24
 800ba7c:	e0001004 	.word	0xe0001004

0800ba80 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800ba80:	b480      	push	{r7}
 800ba82:	b083      	sub	sp, #12
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800ba88:	4a04      	ldr	r2, [pc, #16]	; (800ba9c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6113      	str	r3, [r2, #16]
}
 800ba8e:	bf00      	nop
 800ba90:	370c      	adds	r7, #12
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr
 800ba9a:	bf00      	nop
 800ba9c:	20009a2c 	.word	0x20009a2c

0800baa0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800baa8:	f3ef 8311 	mrs	r3, BASEPRI
 800baac:	f04f 0120 	mov.w	r1, #32
 800bab0:	f381 8811 	msr	BASEPRI, r1
 800bab4:	60fb      	str	r3, [r7, #12]
 800bab6:	4808      	ldr	r0, [pc, #32]	; (800bad8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800bab8:	f7ff f9a8 	bl	800ae0c <_PreparePacket>
 800babc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800babe:	687a      	ldr	r2, [r7, #4]
 800bac0:	68b9      	ldr	r1, [r7, #8]
 800bac2:	68b8      	ldr	r0, [r7, #8]
 800bac4:	f7ff fa90 	bl	800afe8 <_SendPacket>
  RECORD_END();
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f383 8811 	msr	BASEPRI, r3
}
 800bace:	bf00      	nop
 800bad0:	3710      	adds	r7, #16
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}
 800bad6:	bf00      	nop
 800bad8:	20009a5c 	.word	0x20009a5c

0800badc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800badc:	b580      	push	{r7, lr}
 800bade:	b088      	sub	sp, #32
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800bae6:	f3ef 8311 	mrs	r3, BASEPRI
 800baea:	f04f 0120 	mov.w	r1, #32
 800baee:	f381 8811 	msr	BASEPRI, r1
 800baf2:	617b      	str	r3, [r7, #20]
 800baf4:	4816      	ldr	r0, [pc, #88]	; (800bb50 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800baf6:	f7ff f989 	bl	800ae0c <_PreparePacket>
 800bafa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	61fb      	str	r3, [r7, #28]
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	61bb      	str	r3, [r7, #24]
 800bb08:	e00b      	b.n	800bb22 <SEGGER_SYSVIEW_RecordU32+0x46>
 800bb0a:	69bb      	ldr	r3, [r7, #24]
 800bb0c:	b2da      	uxtb	r2, r3
 800bb0e:	69fb      	ldr	r3, [r7, #28]
 800bb10:	1c59      	adds	r1, r3, #1
 800bb12:	61f9      	str	r1, [r7, #28]
 800bb14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bb18:	b2d2      	uxtb	r2, r2
 800bb1a:	701a      	strb	r2, [r3, #0]
 800bb1c:	69bb      	ldr	r3, [r7, #24]
 800bb1e:	09db      	lsrs	r3, r3, #7
 800bb20:	61bb      	str	r3, [r7, #24]
 800bb22:	69bb      	ldr	r3, [r7, #24]
 800bb24:	2b7f      	cmp	r3, #127	; 0x7f
 800bb26:	d8f0      	bhi.n	800bb0a <SEGGER_SYSVIEW_RecordU32+0x2e>
 800bb28:	69fb      	ldr	r3, [r7, #28]
 800bb2a:	1c5a      	adds	r2, r3, #1
 800bb2c:	61fa      	str	r2, [r7, #28]
 800bb2e:	69ba      	ldr	r2, [r7, #24]
 800bb30:	b2d2      	uxtb	r2, r2
 800bb32:	701a      	strb	r2, [r3, #0]
 800bb34:	69fb      	ldr	r3, [r7, #28]
 800bb36:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	68f9      	ldr	r1, [r7, #12]
 800bb3c:	6938      	ldr	r0, [r7, #16]
 800bb3e:	f7ff fa53 	bl	800afe8 <_SendPacket>
  RECORD_END();
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	f383 8811 	msr	BASEPRI, r3
}
 800bb48:	bf00      	nop
 800bb4a:	3720      	adds	r7, #32
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	20009a5c 	.word	0x20009a5c

0800bb54 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b08c      	sub	sp, #48	; 0x30
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	60f8      	str	r0, [r7, #12]
 800bb5c:	60b9      	str	r1, [r7, #8]
 800bb5e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800bb60:	f3ef 8311 	mrs	r3, BASEPRI
 800bb64:	f04f 0120 	mov.w	r1, #32
 800bb68:	f381 8811 	msr	BASEPRI, r1
 800bb6c:	61fb      	str	r3, [r7, #28]
 800bb6e:	4825      	ldr	r0, [pc, #148]	; (800bc04 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800bb70:	f7ff f94c 	bl	800ae0c <_PreparePacket>
 800bb74:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800bb76:	69bb      	ldr	r3, [r7, #24]
 800bb78:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb82:	e00b      	b.n	800bb9c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800bb84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb86:	b2da      	uxtb	r2, r3
 800bb88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb8a:	1c59      	adds	r1, r3, #1
 800bb8c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bb8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bb92:	b2d2      	uxtb	r2, r2
 800bb94:	701a      	strb	r2, [r3, #0]
 800bb96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb98:	09db      	lsrs	r3, r3, #7
 800bb9a:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb9e:	2b7f      	cmp	r3, #127	; 0x7f
 800bba0:	d8f0      	bhi.n	800bb84 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800bba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bba4:	1c5a      	adds	r2, r3, #1
 800bba6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbaa:	b2d2      	uxtb	r2, r2
 800bbac:	701a      	strb	r2, [r3, #0]
 800bbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	627b      	str	r3, [r7, #36]	; 0x24
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	623b      	str	r3, [r7, #32]
 800bbba:	e00b      	b.n	800bbd4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800bbbc:	6a3b      	ldr	r3, [r7, #32]
 800bbbe:	b2da      	uxtb	r2, r3
 800bbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc2:	1c59      	adds	r1, r3, #1
 800bbc4:	6279      	str	r1, [r7, #36]	; 0x24
 800bbc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bbca:	b2d2      	uxtb	r2, r2
 800bbcc:	701a      	strb	r2, [r3, #0]
 800bbce:	6a3b      	ldr	r3, [r7, #32]
 800bbd0:	09db      	lsrs	r3, r3, #7
 800bbd2:	623b      	str	r3, [r7, #32]
 800bbd4:	6a3b      	ldr	r3, [r7, #32]
 800bbd6:	2b7f      	cmp	r3, #127	; 0x7f
 800bbd8:	d8f0      	bhi.n	800bbbc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800bbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbdc:	1c5a      	adds	r2, r3, #1
 800bbde:	627a      	str	r2, [r7, #36]	; 0x24
 800bbe0:	6a3a      	ldr	r2, [r7, #32]
 800bbe2:	b2d2      	uxtb	r2, r2
 800bbe4:	701a      	strb	r2, [r3, #0]
 800bbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800bbea:	68fa      	ldr	r2, [r7, #12]
 800bbec:	6979      	ldr	r1, [r7, #20]
 800bbee:	69b8      	ldr	r0, [r7, #24]
 800bbf0:	f7ff f9fa 	bl	800afe8 <_SendPacket>
  RECORD_END();
 800bbf4:	69fb      	ldr	r3, [r7, #28]
 800bbf6:	f383 8811 	msr	BASEPRI, r3
}
 800bbfa:	bf00      	nop
 800bbfc:	3730      	adds	r7, #48	; 0x30
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
 800bc02:	bf00      	nop
 800bc04:	20009a5c 	.word	0x20009a5c

0800bc08 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b08e      	sub	sp, #56	; 0x38
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	607a      	str	r2, [r7, #4]
 800bc14:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800bc16:	f3ef 8311 	mrs	r3, BASEPRI
 800bc1a:	f04f 0120 	mov.w	r1, #32
 800bc1e:	f381 8811 	msr	BASEPRI, r1
 800bc22:	61fb      	str	r3, [r7, #28]
 800bc24:	4832      	ldr	r0, [pc, #200]	; (800bcf0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800bc26:	f7ff f8f1 	bl	800ae0c <_PreparePacket>
 800bc2a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800bc2c:	69bb      	ldr	r3, [r7, #24]
 800bc2e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	637b      	str	r3, [r7, #52]	; 0x34
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	633b      	str	r3, [r7, #48]	; 0x30
 800bc38:	e00b      	b.n	800bc52 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800bc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3c:	b2da      	uxtb	r2, r3
 800bc3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc40:	1c59      	adds	r1, r3, #1
 800bc42:	6379      	str	r1, [r7, #52]	; 0x34
 800bc44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bc48:	b2d2      	uxtb	r2, r2
 800bc4a:	701a      	strb	r2, [r3, #0]
 800bc4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4e:	09db      	lsrs	r3, r3, #7
 800bc50:	633b      	str	r3, [r7, #48]	; 0x30
 800bc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc54:	2b7f      	cmp	r3, #127	; 0x7f
 800bc56:	d8f0      	bhi.n	800bc3a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800bc58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc5a:	1c5a      	adds	r2, r3, #1
 800bc5c:	637a      	str	r2, [r7, #52]	; 0x34
 800bc5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc60:	b2d2      	uxtb	r2, r2
 800bc62:	701a      	strb	r2, [r3, #0]
 800bc64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc66:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc70:	e00b      	b.n	800bc8a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800bc72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc74:	b2da      	uxtb	r2, r3
 800bc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc78:	1c59      	adds	r1, r3, #1
 800bc7a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bc7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bc80:	b2d2      	uxtb	r2, r2
 800bc82:	701a      	strb	r2, [r3, #0]
 800bc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc86:	09db      	lsrs	r3, r3, #7
 800bc88:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8c:	2b7f      	cmp	r3, #127	; 0x7f
 800bc8e:	d8f0      	bhi.n	800bc72 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800bc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc92:	1c5a      	adds	r2, r3, #1
 800bc94:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bc96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc98:	b2d2      	uxtb	r2, r2
 800bc9a:	701a      	strb	r2, [r3, #0]
 800bc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc9e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	627b      	str	r3, [r7, #36]	; 0x24
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	623b      	str	r3, [r7, #32]
 800bca8:	e00b      	b.n	800bcc2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800bcaa:	6a3b      	ldr	r3, [r7, #32]
 800bcac:	b2da      	uxtb	r2, r3
 800bcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb0:	1c59      	adds	r1, r3, #1
 800bcb2:	6279      	str	r1, [r7, #36]	; 0x24
 800bcb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bcb8:	b2d2      	uxtb	r2, r2
 800bcba:	701a      	strb	r2, [r3, #0]
 800bcbc:	6a3b      	ldr	r3, [r7, #32]
 800bcbe:	09db      	lsrs	r3, r3, #7
 800bcc0:	623b      	str	r3, [r7, #32]
 800bcc2:	6a3b      	ldr	r3, [r7, #32]
 800bcc4:	2b7f      	cmp	r3, #127	; 0x7f
 800bcc6:	d8f0      	bhi.n	800bcaa <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800bcc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcca:	1c5a      	adds	r2, r3, #1
 800bccc:	627a      	str	r2, [r7, #36]	; 0x24
 800bcce:	6a3a      	ldr	r2, [r7, #32]
 800bcd0:	b2d2      	uxtb	r2, r2
 800bcd2:	701a      	strb	r2, [r3, #0]
 800bcd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800bcd8:	68fa      	ldr	r2, [r7, #12]
 800bcda:	6979      	ldr	r1, [r7, #20]
 800bcdc:	69b8      	ldr	r0, [r7, #24]
 800bcde:	f7ff f983 	bl	800afe8 <_SendPacket>
  RECORD_END();
 800bce2:	69fb      	ldr	r3, [r7, #28]
 800bce4:	f383 8811 	msr	BASEPRI, r3
}
 800bce8:	bf00      	nop
 800bcea:	3738      	adds	r7, #56	; 0x38
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}
 800bcf0:	20009a5c 	.word	0x20009a5c

0800bcf4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b090      	sub	sp, #64	; 0x40
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	60f8      	str	r0, [r7, #12]
 800bcfc:	60b9      	str	r1, [r7, #8]
 800bcfe:	607a      	str	r2, [r7, #4]
 800bd00:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800bd02:	f3ef 8311 	mrs	r3, BASEPRI
 800bd06:	f04f 0120 	mov.w	r1, #32
 800bd0a:	f381 8811 	msr	BASEPRI, r1
 800bd0e:	61fb      	str	r3, [r7, #28]
 800bd10:	4840      	ldr	r0, [pc, #256]	; (800be14 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800bd12:	f7ff f87b 	bl	800ae0c <_PreparePacket>
 800bd16:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800bd18:	69bb      	ldr	r3, [r7, #24]
 800bd1a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd24:	e00b      	b.n	800bd3e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800bd26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd28:	b2da      	uxtb	r2, r3
 800bd2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd2c:	1c59      	adds	r1, r3, #1
 800bd2e:	63f9      	str	r1, [r7, #60]	; 0x3c
 800bd30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bd34:	b2d2      	uxtb	r2, r2
 800bd36:	701a      	strb	r2, [r3, #0]
 800bd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd3a:	09db      	lsrs	r3, r3, #7
 800bd3c:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd40:	2b7f      	cmp	r3, #127	; 0x7f
 800bd42:	d8f0      	bhi.n	800bd26 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800bd44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd46:	1c5a      	adds	r2, r3, #1
 800bd48:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bd4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd4c:	b2d2      	uxtb	r2, r2
 800bd4e:	701a      	strb	r2, [r3, #0]
 800bd50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd52:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	637b      	str	r3, [r7, #52]	; 0x34
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	633b      	str	r3, [r7, #48]	; 0x30
 800bd5c:	e00b      	b.n	800bd76 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800bd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd60:	b2da      	uxtb	r2, r3
 800bd62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd64:	1c59      	adds	r1, r3, #1
 800bd66:	6379      	str	r1, [r7, #52]	; 0x34
 800bd68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bd6c:	b2d2      	uxtb	r2, r2
 800bd6e:	701a      	strb	r2, [r3, #0]
 800bd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd72:	09db      	lsrs	r3, r3, #7
 800bd74:	633b      	str	r3, [r7, #48]	; 0x30
 800bd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd78:	2b7f      	cmp	r3, #127	; 0x7f
 800bd7a:	d8f0      	bhi.n	800bd5e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800bd7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd7e:	1c5a      	adds	r2, r3, #1
 800bd80:	637a      	str	r2, [r7, #52]	; 0x34
 800bd82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd84:	b2d2      	uxtb	r2, r2
 800bd86:	701a      	strb	r2, [r3, #0]
 800bd88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd8a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd94:	e00b      	b.n	800bdae <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800bd96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd98:	b2da      	uxtb	r2, r3
 800bd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd9c:	1c59      	adds	r1, r3, #1
 800bd9e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bda0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bda4:	b2d2      	uxtb	r2, r2
 800bda6:	701a      	strb	r2, [r3, #0]
 800bda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdaa:	09db      	lsrs	r3, r3, #7
 800bdac:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb0:	2b7f      	cmp	r3, #127	; 0x7f
 800bdb2:	d8f0      	bhi.n	800bd96 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800bdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb6:	1c5a      	adds	r2, r3, #1
 800bdb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bdba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdbc:	b2d2      	uxtb	r2, r2
 800bdbe:	701a      	strb	r2, [r3, #0]
 800bdc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	627b      	str	r3, [r7, #36]	; 0x24
 800bdc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdca:	623b      	str	r3, [r7, #32]
 800bdcc:	e00b      	b.n	800bde6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800bdce:	6a3b      	ldr	r3, [r7, #32]
 800bdd0:	b2da      	uxtb	r2, r3
 800bdd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd4:	1c59      	adds	r1, r3, #1
 800bdd6:	6279      	str	r1, [r7, #36]	; 0x24
 800bdd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bddc:	b2d2      	uxtb	r2, r2
 800bdde:	701a      	strb	r2, [r3, #0]
 800bde0:	6a3b      	ldr	r3, [r7, #32]
 800bde2:	09db      	lsrs	r3, r3, #7
 800bde4:	623b      	str	r3, [r7, #32]
 800bde6:	6a3b      	ldr	r3, [r7, #32]
 800bde8:	2b7f      	cmp	r3, #127	; 0x7f
 800bdea:	d8f0      	bhi.n	800bdce <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800bdec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdee:	1c5a      	adds	r2, r3, #1
 800bdf0:	627a      	str	r2, [r7, #36]	; 0x24
 800bdf2:	6a3a      	ldr	r2, [r7, #32]
 800bdf4:	b2d2      	uxtb	r2, r2
 800bdf6:	701a      	strb	r2, [r3, #0]
 800bdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800bdfc:	68fa      	ldr	r2, [r7, #12]
 800bdfe:	6979      	ldr	r1, [r7, #20]
 800be00:	69b8      	ldr	r0, [r7, #24]
 800be02:	f7ff f8f1 	bl	800afe8 <_SendPacket>
  RECORD_END();
 800be06:	69fb      	ldr	r3, [r7, #28]
 800be08:	f383 8811 	msr	BASEPRI, r3
}
 800be0c:	bf00      	nop
 800be0e:	3740      	adds	r7, #64	; 0x40
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}
 800be14:	20009a5c 	.word	0x20009a5c

0800be18 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800be18:	b580      	push	{r7, lr}
 800be1a:	b08c      	sub	sp, #48	; 0x30
 800be1c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800be1e:	4b58      	ldr	r3, [pc, #352]	; (800bf80 <SEGGER_SYSVIEW_Start+0x168>)
 800be20:	2201      	movs	r2, #1
 800be22:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800be24:	f3ef 8311 	mrs	r3, BASEPRI
 800be28:	f04f 0120 	mov.w	r1, #32
 800be2c:	f381 8811 	msr	BASEPRI, r1
 800be30:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800be32:	4b53      	ldr	r3, [pc, #332]	; (800bf80 <SEGGER_SYSVIEW_Start+0x168>)
 800be34:	785b      	ldrb	r3, [r3, #1]
 800be36:	220a      	movs	r2, #10
 800be38:	4952      	ldr	r1, [pc, #328]	; (800bf84 <SEGGER_SYSVIEW_Start+0x16c>)
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7f4 f9d0 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800be46:	200a      	movs	r0, #10
 800be48:	f7ff fe2a 	bl	800baa0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800be4c:	f3ef 8311 	mrs	r3, BASEPRI
 800be50:	f04f 0120 	mov.w	r1, #32
 800be54:	f381 8811 	msr	BASEPRI, r1
 800be58:	60bb      	str	r3, [r7, #8]
 800be5a:	484b      	ldr	r0, [pc, #300]	; (800bf88 <SEGGER_SYSVIEW_Start+0x170>)
 800be5c:	f7fe ffd6 	bl	800ae0c <_PreparePacket>
 800be60:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be6a:	4b45      	ldr	r3, [pc, #276]	; (800bf80 <SEGGER_SYSVIEW_Start+0x168>)
 800be6c:	685b      	ldr	r3, [r3, #4]
 800be6e:	62bb      	str	r3, [r7, #40]	; 0x28
 800be70:	e00b      	b.n	800be8a <SEGGER_SYSVIEW_Start+0x72>
 800be72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be74:	b2da      	uxtb	r2, r3
 800be76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be78:	1c59      	adds	r1, r3, #1
 800be7a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800be7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800be80:	b2d2      	uxtb	r2, r2
 800be82:	701a      	strb	r2, [r3, #0]
 800be84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be86:	09db      	lsrs	r3, r3, #7
 800be88:	62bb      	str	r3, [r7, #40]	; 0x28
 800be8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be8c:	2b7f      	cmp	r3, #127	; 0x7f
 800be8e:	d8f0      	bhi.n	800be72 <SEGGER_SYSVIEW_Start+0x5a>
 800be90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be92:	1c5a      	adds	r2, r3, #1
 800be94:	62fa      	str	r2, [r7, #44]	; 0x2c
 800be96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be98:	b2d2      	uxtb	r2, r2
 800be9a:	701a      	strb	r2, [r3, #0]
 800be9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be9e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	627b      	str	r3, [r7, #36]	; 0x24
 800bea4:	4b36      	ldr	r3, [pc, #216]	; (800bf80 <SEGGER_SYSVIEW_Start+0x168>)
 800bea6:	689b      	ldr	r3, [r3, #8]
 800bea8:	623b      	str	r3, [r7, #32]
 800beaa:	e00b      	b.n	800bec4 <SEGGER_SYSVIEW_Start+0xac>
 800beac:	6a3b      	ldr	r3, [r7, #32]
 800beae:	b2da      	uxtb	r2, r3
 800beb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb2:	1c59      	adds	r1, r3, #1
 800beb4:	6279      	str	r1, [r7, #36]	; 0x24
 800beb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800beba:	b2d2      	uxtb	r2, r2
 800bebc:	701a      	strb	r2, [r3, #0]
 800bebe:	6a3b      	ldr	r3, [r7, #32]
 800bec0:	09db      	lsrs	r3, r3, #7
 800bec2:	623b      	str	r3, [r7, #32]
 800bec4:	6a3b      	ldr	r3, [r7, #32]
 800bec6:	2b7f      	cmp	r3, #127	; 0x7f
 800bec8:	d8f0      	bhi.n	800beac <SEGGER_SYSVIEW_Start+0x94>
 800beca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800becc:	1c5a      	adds	r2, r3, #1
 800bece:	627a      	str	r2, [r7, #36]	; 0x24
 800bed0:	6a3a      	ldr	r2, [r7, #32]
 800bed2:	b2d2      	uxtb	r2, r2
 800bed4:	701a      	strb	r2, [r3, #0]
 800bed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	61fb      	str	r3, [r7, #28]
 800bede:	4b28      	ldr	r3, [pc, #160]	; (800bf80 <SEGGER_SYSVIEW_Start+0x168>)
 800bee0:	691b      	ldr	r3, [r3, #16]
 800bee2:	61bb      	str	r3, [r7, #24]
 800bee4:	e00b      	b.n	800befe <SEGGER_SYSVIEW_Start+0xe6>
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	b2da      	uxtb	r2, r3
 800beea:	69fb      	ldr	r3, [r7, #28]
 800beec:	1c59      	adds	r1, r3, #1
 800beee:	61f9      	str	r1, [r7, #28]
 800bef0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bef4:	b2d2      	uxtb	r2, r2
 800bef6:	701a      	strb	r2, [r3, #0]
 800bef8:	69bb      	ldr	r3, [r7, #24]
 800befa:	09db      	lsrs	r3, r3, #7
 800befc:	61bb      	str	r3, [r7, #24]
 800befe:	69bb      	ldr	r3, [r7, #24]
 800bf00:	2b7f      	cmp	r3, #127	; 0x7f
 800bf02:	d8f0      	bhi.n	800bee6 <SEGGER_SYSVIEW_Start+0xce>
 800bf04:	69fb      	ldr	r3, [r7, #28]
 800bf06:	1c5a      	adds	r2, r3, #1
 800bf08:	61fa      	str	r2, [r7, #28]
 800bf0a:	69ba      	ldr	r2, [r7, #24]
 800bf0c:	b2d2      	uxtb	r2, r2
 800bf0e:	701a      	strb	r2, [r3, #0]
 800bf10:	69fb      	ldr	r3, [r7, #28]
 800bf12:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	617b      	str	r3, [r7, #20]
 800bf18:	2300      	movs	r3, #0
 800bf1a:	613b      	str	r3, [r7, #16]
 800bf1c:	e00b      	b.n	800bf36 <SEGGER_SYSVIEW_Start+0x11e>
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	b2da      	uxtb	r2, r3
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	1c59      	adds	r1, r3, #1
 800bf26:	6179      	str	r1, [r7, #20]
 800bf28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bf2c:	b2d2      	uxtb	r2, r2
 800bf2e:	701a      	strb	r2, [r3, #0]
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	09db      	lsrs	r3, r3, #7
 800bf34:	613b      	str	r3, [r7, #16]
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	2b7f      	cmp	r3, #127	; 0x7f
 800bf3a:	d8f0      	bhi.n	800bf1e <SEGGER_SYSVIEW_Start+0x106>
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	1c5a      	adds	r2, r3, #1
 800bf40:	617a      	str	r2, [r7, #20]
 800bf42:	693a      	ldr	r2, [r7, #16]
 800bf44:	b2d2      	uxtb	r2, r2
 800bf46:	701a      	strb	r2, [r3, #0]
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800bf4c:	2218      	movs	r2, #24
 800bf4e:	6839      	ldr	r1, [r7, #0]
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f7ff f849 	bl	800afe8 <_SendPacket>
      RECORD_END();
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800bf5c:	4b08      	ldr	r3, [pc, #32]	; (800bf80 <SEGGER_SYSVIEW_Start+0x168>)
 800bf5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d002      	beq.n	800bf6a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800bf64:	4b06      	ldr	r3, [pc, #24]	; (800bf80 <SEGGER_SYSVIEW_Start+0x168>)
 800bf66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf68:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800bf6a:	f000 f9eb 	bl	800c344 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800bf6e:	f000 f9b1 	bl	800c2d4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800bf72:	f000 fc83 	bl	800c87c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800bf76:	bf00      	nop
 800bf78:	3730      	adds	r7, #48	; 0x30
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	20009a2c 	.word	0x20009a2c
 800bf84:	0800deec 	.word	0x0800deec
 800bf88:	20009a5c 	.word	0x20009a5c

0800bf8c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b082      	sub	sp, #8
 800bf90:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800bf92:	f3ef 8311 	mrs	r3, BASEPRI
 800bf96:	f04f 0120 	mov.w	r1, #32
 800bf9a:	f381 8811 	msr	BASEPRI, r1
 800bf9e:	607b      	str	r3, [r7, #4]
 800bfa0:	480b      	ldr	r0, [pc, #44]	; (800bfd0 <SEGGER_SYSVIEW_Stop+0x44>)
 800bfa2:	f7fe ff33 	bl	800ae0c <_PreparePacket>
 800bfa6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800bfa8:	4b0a      	ldr	r3, [pc, #40]	; (800bfd4 <SEGGER_SYSVIEW_Stop+0x48>)
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d007      	beq.n	800bfc0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800bfb0:	220b      	movs	r2, #11
 800bfb2:	6839      	ldr	r1, [r7, #0]
 800bfb4:	6838      	ldr	r0, [r7, #0]
 800bfb6:	f7ff f817 	bl	800afe8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800bfba:	4b06      	ldr	r3, [pc, #24]	; (800bfd4 <SEGGER_SYSVIEW_Stop+0x48>)
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f383 8811 	msr	BASEPRI, r3
}
 800bfc6:	bf00      	nop
 800bfc8:	3708      	adds	r7, #8
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	20009a5c 	.word	0x20009a5c
 800bfd4:	20009a2c 	.word	0x20009a2c

0800bfd8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b08c      	sub	sp, #48	; 0x30
 800bfdc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800bfde:	f3ef 8311 	mrs	r3, BASEPRI
 800bfe2:	f04f 0120 	mov.w	r1, #32
 800bfe6:	f381 8811 	msr	BASEPRI, r1
 800bfea:	60fb      	str	r3, [r7, #12]
 800bfec:	4845      	ldr	r0, [pc, #276]	; (800c104 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800bfee:	f7fe ff0d 	bl	800ae0c <_PreparePacket>
 800bff2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bffc:	4b42      	ldr	r3, [pc, #264]	; (800c108 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	62bb      	str	r3, [r7, #40]	; 0x28
 800c002:	e00b      	b.n	800c01c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800c004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c006:	b2da      	uxtb	r2, r3
 800c008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c00a:	1c59      	adds	r1, r3, #1
 800c00c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c00e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c012:	b2d2      	uxtb	r2, r2
 800c014:	701a      	strb	r2, [r3, #0]
 800c016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c018:	09db      	lsrs	r3, r3, #7
 800c01a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c01e:	2b7f      	cmp	r3, #127	; 0x7f
 800c020:	d8f0      	bhi.n	800c004 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800c022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c024:	1c5a      	adds	r2, r3, #1
 800c026:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c02a:	b2d2      	uxtb	r2, r2
 800c02c:	701a      	strb	r2, [r3, #0]
 800c02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c030:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	627b      	str	r3, [r7, #36]	; 0x24
 800c036:	4b34      	ldr	r3, [pc, #208]	; (800c108 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c038:	689b      	ldr	r3, [r3, #8]
 800c03a:	623b      	str	r3, [r7, #32]
 800c03c:	e00b      	b.n	800c056 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800c03e:	6a3b      	ldr	r3, [r7, #32]
 800c040:	b2da      	uxtb	r2, r3
 800c042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c044:	1c59      	adds	r1, r3, #1
 800c046:	6279      	str	r1, [r7, #36]	; 0x24
 800c048:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c04c:	b2d2      	uxtb	r2, r2
 800c04e:	701a      	strb	r2, [r3, #0]
 800c050:	6a3b      	ldr	r3, [r7, #32]
 800c052:	09db      	lsrs	r3, r3, #7
 800c054:	623b      	str	r3, [r7, #32]
 800c056:	6a3b      	ldr	r3, [r7, #32]
 800c058:	2b7f      	cmp	r3, #127	; 0x7f
 800c05a:	d8f0      	bhi.n	800c03e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800c05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05e:	1c5a      	adds	r2, r3, #1
 800c060:	627a      	str	r2, [r7, #36]	; 0x24
 800c062:	6a3a      	ldr	r2, [r7, #32]
 800c064:	b2d2      	uxtb	r2, r2
 800c066:	701a      	strb	r2, [r3, #0]
 800c068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c06a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	61fb      	str	r3, [r7, #28]
 800c070:	4b25      	ldr	r3, [pc, #148]	; (800c108 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c072:	691b      	ldr	r3, [r3, #16]
 800c074:	61bb      	str	r3, [r7, #24]
 800c076:	e00b      	b.n	800c090 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800c078:	69bb      	ldr	r3, [r7, #24]
 800c07a:	b2da      	uxtb	r2, r3
 800c07c:	69fb      	ldr	r3, [r7, #28]
 800c07e:	1c59      	adds	r1, r3, #1
 800c080:	61f9      	str	r1, [r7, #28]
 800c082:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c086:	b2d2      	uxtb	r2, r2
 800c088:	701a      	strb	r2, [r3, #0]
 800c08a:	69bb      	ldr	r3, [r7, #24]
 800c08c:	09db      	lsrs	r3, r3, #7
 800c08e:	61bb      	str	r3, [r7, #24]
 800c090:	69bb      	ldr	r3, [r7, #24]
 800c092:	2b7f      	cmp	r3, #127	; 0x7f
 800c094:	d8f0      	bhi.n	800c078 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800c096:	69fb      	ldr	r3, [r7, #28]
 800c098:	1c5a      	adds	r2, r3, #1
 800c09a:	61fa      	str	r2, [r7, #28]
 800c09c:	69ba      	ldr	r2, [r7, #24]
 800c09e:	b2d2      	uxtb	r2, r2
 800c0a0:	701a      	strb	r2, [r3, #0]
 800c0a2:	69fb      	ldr	r3, [r7, #28]
 800c0a4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	617b      	str	r3, [r7, #20]
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	613b      	str	r3, [r7, #16]
 800c0ae:	e00b      	b.n	800c0c8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	b2da      	uxtb	r2, r3
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	1c59      	adds	r1, r3, #1
 800c0b8:	6179      	str	r1, [r7, #20]
 800c0ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c0be:	b2d2      	uxtb	r2, r2
 800c0c0:	701a      	strb	r2, [r3, #0]
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	09db      	lsrs	r3, r3, #7
 800c0c6:	613b      	str	r3, [r7, #16]
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	2b7f      	cmp	r3, #127	; 0x7f
 800c0cc:	d8f0      	bhi.n	800c0b0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	1c5a      	adds	r2, r3, #1
 800c0d2:	617a      	str	r2, [r7, #20]
 800c0d4:	693a      	ldr	r2, [r7, #16]
 800c0d6:	b2d2      	uxtb	r2, r2
 800c0d8:	701a      	strb	r2, [r3, #0]
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800c0de:	2218      	movs	r2, #24
 800c0e0:	6879      	ldr	r1, [r7, #4]
 800c0e2:	68b8      	ldr	r0, [r7, #8]
 800c0e4:	f7fe ff80 	bl	800afe8 <_SendPacket>
  RECORD_END();
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800c0ee:	4b06      	ldr	r3, [pc, #24]	; (800c108 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d002      	beq.n	800c0fc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800c0f6:	4b04      	ldr	r3, [pc, #16]	; (800c108 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0fa:	4798      	blx	r3
  }
}
 800c0fc:	bf00      	nop
 800c0fe:	3730      	adds	r7, #48	; 0x30
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}
 800c104:	20009a5c 	.word	0x20009a5c
 800c108:	20009a2c 	.word	0x20009a2c

0800c10c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b092      	sub	sp, #72	; 0x48
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800c114:	f3ef 8311 	mrs	r3, BASEPRI
 800c118:	f04f 0120 	mov.w	r1, #32
 800c11c:	f381 8811 	msr	BASEPRI, r1
 800c120:	617b      	str	r3, [r7, #20]
 800c122:	486a      	ldr	r0, [pc, #424]	; (800c2cc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800c124:	f7fe fe72 	bl	800ae0c <_PreparePacket>
 800c128:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	647b      	str	r3, [r7, #68]	; 0x44
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681a      	ldr	r2, [r3, #0]
 800c136:	4b66      	ldr	r3, [pc, #408]	; (800c2d0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800c138:	691b      	ldr	r3, [r3, #16]
 800c13a:	1ad3      	subs	r3, r2, r3
 800c13c:	643b      	str	r3, [r7, #64]	; 0x40
 800c13e:	e00b      	b.n	800c158 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800c140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c142:	b2da      	uxtb	r2, r3
 800c144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c146:	1c59      	adds	r1, r3, #1
 800c148:	6479      	str	r1, [r7, #68]	; 0x44
 800c14a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c14e:	b2d2      	uxtb	r2, r2
 800c150:	701a      	strb	r2, [r3, #0]
 800c152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c154:	09db      	lsrs	r3, r3, #7
 800c156:	643b      	str	r3, [r7, #64]	; 0x40
 800c158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c15a:	2b7f      	cmp	r3, #127	; 0x7f
 800c15c:	d8f0      	bhi.n	800c140 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800c15e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c160:	1c5a      	adds	r2, r3, #1
 800c162:	647a      	str	r2, [r7, #68]	; 0x44
 800c164:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c166:	b2d2      	uxtb	r2, r2
 800c168:	701a      	strb	r2, [r3, #0]
 800c16a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c16c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	689b      	ldr	r3, [r3, #8]
 800c176:	63bb      	str	r3, [r7, #56]	; 0x38
 800c178:	e00b      	b.n	800c192 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800c17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c17c:	b2da      	uxtb	r2, r3
 800c17e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c180:	1c59      	adds	r1, r3, #1
 800c182:	63f9      	str	r1, [r7, #60]	; 0x3c
 800c184:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c188:	b2d2      	uxtb	r2, r2
 800c18a:	701a      	strb	r2, [r3, #0]
 800c18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c18e:	09db      	lsrs	r3, r3, #7
 800c190:	63bb      	str	r3, [r7, #56]	; 0x38
 800c192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c194:	2b7f      	cmp	r3, #127	; 0x7f
 800c196:	d8f0      	bhi.n	800c17a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800c198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c19a:	1c5a      	adds	r2, r3, #1
 800c19c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c19e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1a0:	b2d2      	uxtb	r2, r2
 800c1a2:	701a      	strb	r2, [r3, #0]
 800c1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1a6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	685b      	ldr	r3, [r3, #4]
 800c1ac:	2220      	movs	r2, #32
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	68f8      	ldr	r0, [r7, #12]
 800c1b2:	f7fe fddb 	bl	800ad6c <_EncodeStr>
 800c1b6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800c1b8:	2209      	movs	r2, #9
 800c1ba:	68f9      	ldr	r1, [r7, #12]
 800c1bc:	6938      	ldr	r0, [r7, #16]
 800c1be:	f7fe ff13 	bl	800afe8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	637b      	str	r3, [r7, #52]	; 0x34
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681a      	ldr	r2, [r3, #0]
 800c1ce:	4b40      	ldr	r3, [pc, #256]	; (800c2d0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800c1d0:	691b      	ldr	r3, [r3, #16]
 800c1d2:	1ad3      	subs	r3, r2, r3
 800c1d4:	633b      	str	r3, [r7, #48]	; 0x30
 800c1d6:	e00b      	b.n	800c1f0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800c1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1da:	b2da      	uxtb	r2, r3
 800c1dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1de:	1c59      	adds	r1, r3, #1
 800c1e0:	6379      	str	r1, [r7, #52]	; 0x34
 800c1e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c1e6:	b2d2      	uxtb	r2, r2
 800c1e8:	701a      	strb	r2, [r3, #0]
 800c1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ec:	09db      	lsrs	r3, r3, #7
 800c1ee:	633b      	str	r3, [r7, #48]	; 0x30
 800c1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f2:	2b7f      	cmp	r3, #127	; 0x7f
 800c1f4:	d8f0      	bhi.n	800c1d8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800c1f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1f8:	1c5a      	adds	r2, r3, #1
 800c1fa:	637a      	str	r2, [r7, #52]	; 0x34
 800c1fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1fe:	b2d2      	uxtb	r2, r2
 800c200:	701a      	strb	r2, [r3, #0]
 800c202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c204:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	68db      	ldr	r3, [r3, #12]
 800c20e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c210:	e00b      	b.n	800c22a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800c212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c214:	b2da      	uxtb	r2, r3
 800c216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c218:	1c59      	adds	r1, r3, #1
 800c21a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c21c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c220:	b2d2      	uxtb	r2, r2
 800c222:	701a      	strb	r2, [r3, #0]
 800c224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c226:	09db      	lsrs	r3, r3, #7
 800c228:	62bb      	str	r3, [r7, #40]	; 0x28
 800c22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22c:	2b7f      	cmp	r3, #127	; 0x7f
 800c22e:	d8f0      	bhi.n	800c212 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800c230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c232:	1c5a      	adds	r2, r3, #1
 800c234:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c238:	b2d2      	uxtb	r2, r2
 800c23a:	701a      	strb	r2, [r3, #0]
 800c23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c23e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	627b      	str	r3, [r7, #36]	; 0x24
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	691b      	ldr	r3, [r3, #16]
 800c248:	623b      	str	r3, [r7, #32]
 800c24a:	e00b      	b.n	800c264 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800c24c:	6a3b      	ldr	r3, [r7, #32]
 800c24e:	b2da      	uxtb	r2, r3
 800c250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c252:	1c59      	adds	r1, r3, #1
 800c254:	6279      	str	r1, [r7, #36]	; 0x24
 800c256:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c25a:	b2d2      	uxtb	r2, r2
 800c25c:	701a      	strb	r2, [r3, #0]
 800c25e:	6a3b      	ldr	r3, [r7, #32]
 800c260:	09db      	lsrs	r3, r3, #7
 800c262:	623b      	str	r3, [r7, #32]
 800c264:	6a3b      	ldr	r3, [r7, #32]
 800c266:	2b7f      	cmp	r3, #127	; 0x7f
 800c268:	d8f0      	bhi.n	800c24c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800c26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26c:	1c5a      	adds	r2, r3, #1
 800c26e:	627a      	str	r2, [r7, #36]	; 0x24
 800c270:	6a3a      	ldr	r2, [r7, #32]
 800c272:	b2d2      	uxtb	r2, r2
 800c274:	701a      	strb	r2, [r3, #0]
 800c276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c278:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	61fb      	str	r3, [r7, #28]
 800c27e:	2300      	movs	r3, #0
 800c280:	61bb      	str	r3, [r7, #24]
 800c282:	e00b      	b.n	800c29c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800c284:	69bb      	ldr	r3, [r7, #24]
 800c286:	b2da      	uxtb	r2, r3
 800c288:	69fb      	ldr	r3, [r7, #28]
 800c28a:	1c59      	adds	r1, r3, #1
 800c28c:	61f9      	str	r1, [r7, #28]
 800c28e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c292:	b2d2      	uxtb	r2, r2
 800c294:	701a      	strb	r2, [r3, #0]
 800c296:	69bb      	ldr	r3, [r7, #24]
 800c298:	09db      	lsrs	r3, r3, #7
 800c29a:	61bb      	str	r3, [r7, #24]
 800c29c:	69bb      	ldr	r3, [r7, #24]
 800c29e:	2b7f      	cmp	r3, #127	; 0x7f
 800c2a0:	d8f0      	bhi.n	800c284 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800c2a2:	69fb      	ldr	r3, [r7, #28]
 800c2a4:	1c5a      	adds	r2, r3, #1
 800c2a6:	61fa      	str	r2, [r7, #28]
 800c2a8:	69ba      	ldr	r2, [r7, #24]
 800c2aa:	b2d2      	uxtb	r2, r2
 800c2ac:	701a      	strb	r2, [r3, #0]
 800c2ae:	69fb      	ldr	r3, [r7, #28]
 800c2b0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800c2b2:	2215      	movs	r2, #21
 800c2b4:	68f9      	ldr	r1, [r7, #12]
 800c2b6:	6938      	ldr	r0, [r7, #16]
 800c2b8:	f7fe fe96 	bl	800afe8 <_SendPacket>
  RECORD_END();
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	f383 8811 	msr	BASEPRI, r3
}
 800c2c2:	bf00      	nop
 800c2c4:	3748      	adds	r7, #72	; 0x48
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	20009a5c 	.word	0x20009a5c
 800c2d0:	20009a2c 	.word	0x20009a2c

0800c2d4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800c2d8:	4b07      	ldr	r3, [pc, #28]	; (800c2f8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c2da:	6a1b      	ldr	r3, [r3, #32]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d008      	beq.n	800c2f2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800c2e0:	4b05      	ldr	r3, [pc, #20]	; (800c2f8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c2e2:	6a1b      	ldr	r3, [r3, #32]
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d003      	beq.n	800c2f2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800c2ea:	4b03      	ldr	r3, [pc, #12]	; (800c2f8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c2ec:	6a1b      	ldr	r3, [r3, #32]
 800c2ee:	685b      	ldr	r3, [r3, #4]
 800c2f0:	4798      	blx	r3
  }
}
 800c2f2:	bf00      	nop
 800c2f4:	bd80      	pop	{r7, pc}
 800c2f6:	bf00      	nop
 800c2f8:	20009a2c 	.word	0x20009a2c

0800c2fc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b086      	sub	sp, #24
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c304:	f3ef 8311 	mrs	r3, BASEPRI
 800c308:	f04f 0120 	mov.w	r1, #32
 800c30c:	f381 8811 	msr	BASEPRI, r1
 800c310:	617b      	str	r3, [r7, #20]
 800c312:	480b      	ldr	r0, [pc, #44]	; (800c340 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800c314:	f7fe fd7a 	bl	800ae0c <_PreparePacket>
 800c318:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c31a:	2280      	movs	r2, #128	; 0x80
 800c31c:	6879      	ldr	r1, [r7, #4]
 800c31e:	6938      	ldr	r0, [r7, #16]
 800c320:	f7fe fd24 	bl	800ad6c <_EncodeStr>
 800c324:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800c326:	220e      	movs	r2, #14
 800c328:	68f9      	ldr	r1, [r7, #12]
 800c32a:	6938      	ldr	r0, [r7, #16]
 800c32c:	f7fe fe5c 	bl	800afe8 <_SendPacket>
  RECORD_END();
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	f383 8811 	msr	BASEPRI, r3
}
 800c336:	bf00      	nop
 800c338:	3718      	adds	r7, #24
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
 800c33e:	bf00      	nop
 800c340:	20009a5c 	.word	0x20009a5c

0800c344 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800c344:	b590      	push	{r4, r7, lr}
 800c346:	b083      	sub	sp, #12
 800c348:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800c34a:	4b15      	ldr	r3, [pc, #84]	; (800c3a0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c34c:	6a1b      	ldr	r3, [r3, #32]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d01a      	beq.n	800c388 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800c352:	4b13      	ldr	r3, [pc, #76]	; (800c3a0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c354:	6a1b      	ldr	r3, [r3, #32]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d015      	beq.n	800c388 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800c35c:	4b10      	ldr	r3, [pc, #64]	; (800c3a0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c35e:	6a1b      	ldr	r3, [r3, #32]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	4798      	blx	r3
 800c364:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800c368:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800c36a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c36e:	f04f 0200 	mov.w	r2, #0
 800c372:	f04f 0300 	mov.w	r3, #0
 800c376:	000a      	movs	r2, r1
 800c378:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800c37a:	4613      	mov	r3, r2
 800c37c:	461a      	mov	r2, r3
 800c37e:	4621      	mov	r1, r4
 800c380:	200d      	movs	r0, #13
 800c382:	f7ff fbe7 	bl	800bb54 <SEGGER_SYSVIEW_RecordU32x2>
 800c386:	e006      	b.n	800c396 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800c388:	4b06      	ldr	r3, [pc, #24]	; (800c3a4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	4619      	mov	r1, r3
 800c38e:	200c      	movs	r0, #12
 800c390:	f7ff fba4 	bl	800badc <SEGGER_SYSVIEW_RecordU32>
  }
}
 800c394:	bf00      	nop
 800c396:	bf00      	nop
 800c398:	370c      	adds	r7, #12
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd90      	pop	{r4, r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	20009a2c 	.word	0x20009a2c
 800c3a4:	e0001004 	.word	0xe0001004

0800c3a8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b086      	sub	sp, #24
 800c3ac:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c3ae:	f3ef 8311 	mrs	r3, BASEPRI
 800c3b2:	f04f 0120 	mov.w	r1, #32
 800c3b6:	f381 8811 	msr	BASEPRI, r1
 800c3ba:	60fb      	str	r3, [r7, #12]
 800c3bc:	4819      	ldr	r0, [pc, #100]	; (800c424 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800c3be:	f7fe fd25 	bl	800ae0c <_PreparePacket>
 800c3c2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800c3c8:	4b17      	ldr	r3, [pc, #92]	; (800c428 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3d0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	617b      	str	r3, [r7, #20]
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	613b      	str	r3, [r7, #16]
 800c3da:	e00b      	b.n	800c3f4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	b2da      	uxtb	r2, r3
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	1c59      	adds	r1, r3, #1
 800c3e4:	6179      	str	r1, [r7, #20]
 800c3e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c3ea:	b2d2      	uxtb	r2, r2
 800c3ec:	701a      	strb	r2, [r3, #0]
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	09db      	lsrs	r3, r3, #7
 800c3f2:	613b      	str	r3, [r7, #16]
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	2b7f      	cmp	r3, #127	; 0x7f
 800c3f8:	d8f0      	bhi.n	800c3dc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	1c5a      	adds	r2, r3, #1
 800c3fe:	617a      	str	r2, [r7, #20]
 800c400:	693a      	ldr	r2, [r7, #16]
 800c402:	b2d2      	uxtb	r2, r2
 800c404:	701a      	strb	r2, [r3, #0]
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800c40a:	2202      	movs	r2, #2
 800c40c:	6879      	ldr	r1, [r7, #4]
 800c40e:	68b8      	ldr	r0, [r7, #8]
 800c410:	f7fe fdea 	bl	800afe8 <_SendPacket>
  RECORD_END();
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	f383 8811 	msr	BASEPRI, r3
}
 800c41a:	bf00      	nop
 800c41c:	3718      	adds	r7, #24
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
 800c422:	bf00      	nop
 800c424:	20009a5c 	.word	0x20009a5c
 800c428:	e000ed04 	.word	0xe000ed04

0800c42c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b082      	sub	sp, #8
 800c430:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c432:	f3ef 8311 	mrs	r3, BASEPRI
 800c436:	f04f 0120 	mov.w	r1, #32
 800c43a:	f381 8811 	msr	BASEPRI, r1
 800c43e:	607b      	str	r3, [r7, #4]
 800c440:	4807      	ldr	r0, [pc, #28]	; (800c460 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800c442:	f7fe fce3 	bl	800ae0c <_PreparePacket>
 800c446:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800c448:	2203      	movs	r2, #3
 800c44a:	6839      	ldr	r1, [r7, #0]
 800c44c:	6838      	ldr	r0, [r7, #0]
 800c44e:	f7fe fdcb 	bl	800afe8 <_SendPacket>
  RECORD_END();
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f383 8811 	msr	BASEPRI, r3
}
 800c458:	bf00      	nop
 800c45a:	3708      	adds	r7, #8
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}
 800c460:	20009a5c 	.word	0x20009a5c

0800c464 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800c464:	b580      	push	{r7, lr}
 800c466:	b082      	sub	sp, #8
 800c468:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c46a:	f3ef 8311 	mrs	r3, BASEPRI
 800c46e:	f04f 0120 	mov.w	r1, #32
 800c472:	f381 8811 	msr	BASEPRI, r1
 800c476:	607b      	str	r3, [r7, #4]
 800c478:	4807      	ldr	r0, [pc, #28]	; (800c498 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800c47a:	f7fe fcc7 	bl	800ae0c <_PreparePacket>
 800c47e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800c480:	2212      	movs	r2, #18
 800c482:	6839      	ldr	r1, [r7, #0]
 800c484:	6838      	ldr	r0, [r7, #0]
 800c486:	f7fe fdaf 	bl	800afe8 <_SendPacket>
  RECORD_END();
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f383 8811 	msr	BASEPRI, r3
}
 800c490:	bf00      	nop
 800c492:	3708      	adds	r7, #8
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}
 800c498:	20009a5c 	.word	0x20009a5c

0800c49c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c4a2:	f3ef 8311 	mrs	r3, BASEPRI
 800c4a6:	f04f 0120 	mov.w	r1, #32
 800c4aa:	f381 8811 	msr	BASEPRI, r1
 800c4ae:	607b      	str	r3, [r7, #4]
 800c4b0:	4807      	ldr	r0, [pc, #28]	; (800c4d0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800c4b2:	f7fe fcab 	bl	800ae0c <_PreparePacket>
 800c4b6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800c4b8:	2211      	movs	r2, #17
 800c4ba:	6839      	ldr	r1, [r7, #0]
 800c4bc:	6838      	ldr	r0, [r7, #0]
 800c4be:	f7fe fd93 	bl	800afe8 <_SendPacket>
  RECORD_END();
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f383 8811 	msr	BASEPRI, r3
}
 800c4c8:	bf00      	nop
 800c4ca:	3708      	adds	r7, #8
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}
 800c4d0:	20009a5c 	.word	0x20009a5c

0800c4d4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b088      	sub	sp, #32
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c4dc:	f3ef 8311 	mrs	r3, BASEPRI
 800c4e0:	f04f 0120 	mov.w	r1, #32
 800c4e4:	f381 8811 	msr	BASEPRI, r1
 800c4e8:	617b      	str	r3, [r7, #20]
 800c4ea:	4819      	ldr	r0, [pc, #100]	; (800c550 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800c4ec:	f7fe fc8e 	bl	800ae0c <_PreparePacket>
 800c4f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c4f6:	4b17      	ldr	r3, [pc, #92]	; (800c554 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800c4f8:	691b      	ldr	r3, [r3, #16]
 800c4fa:	687a      	ldr	r2, [r7, #4]
 800c4fc:	1ad3      	subs	r3, r2, r3
 800c4fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	61fb      	str	r3, [r7, #28]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	61bb      	str	r3, [r7, #24]
 800c508:	e00b      	b.n	800c522 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800c50a:	69bb      	ldr	r3, [r7, #24]
 800c50c:	b2da      	uxtb	r2, r3
 800c50e:	69fb      	ldr	r3, [r7, #28]
 800c510:	1c59      	adds	r1, r3, #1
 800c512:	61f9      	str	r1, [r7, #28]
 800c514:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c518:	b2d2      	uxtb	r2, r2
 800c51a:	701a      	strb	r2, [r3, #0]
 800c51c:	69bb      	ldr	r3, [r7, #24]
 800c51e:	09db      	lsrs	r3, r3, #7
 800c520:	61bb      	str	r3, [r7, #24]
 800c522:	69bb      	ldr	r3, [r7, #24]
 800c524:	2b7f      	cmp	r3, #127	; 0x7f
 800c526:	d8f0      	bhi.n	800c50a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800c528:	69fb      	ldr	r3, [r7, #28]
 800c52a:	1c5a      	adds	r2, r3, #1
 800c52c:	61fa      	str	r2, [r7, #28]
 800c52e:	69ba      	ldr	r2, [r7, #24]
 800c530:	b2d2      	uxtb	r2, r2
 800c532:	701a      	strb	r2, [r3, #0]
 800c534:	69fb      	ldr	r3, [r7, #28]
 800c536:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800c538:	2208      	movs	r2, #8
 800c53a:	68f9      	ldr	r1, [r7, #12]
 800c53c:	6938      	ldr	r0, [r7, #16]
 800c53e:	f7fe fd53 	bl	800afe8 <_SendPacket>
  RECORD_END();
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	f383 8811 	msr	BASEPRI, r3
}
 800c548:	bf00      	nop
 800c54a:	3720      	adds	r7, #32
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}
 800c550:	20009a5c 	.word	0x20009a5c
 800c554:	20009a2c 	.word	0x20009a2c

0800c558 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800c558:	b580      	push	{r7, lr}
 800c55a:	b088      	sub	sp, #32
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c560:	f3ef 8311 	mrs	r3, BASEPRI
 800c564:	f04f 0120 	mov.w	r1, #32
 800c568:	f381 8811 	msr	BASEPRI, r1
 800c56c:	617b      	str	r3, [r7, #20]
 800c56e:	4819      	ldr	r0, [pc, #100]	; (800c5d4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800c570:	f7fe fc4c 	bl	800ae0c <_PreparePacket>
 800c574:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c57a:	4b17      	ldr	r3, [pc, #92]	; (800c5d8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800c57c:	691b      	ldr	r3, [r3, #16]
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	1ad3      	subs	r3, r2, r3
 800c582:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	61fb      	str	r3, [r7, #28]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	61bb      	str	r3, [r7, #24]
 800c58c:	e00b      	b.n	800c5a6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800c58e:	69bb      	ldr	r3, [r7, #24]
 800c590:	b2da      	uxtb	r2, r3
 800c592:	69fb      	ldr	r3, [r7, #28]
 800c594:	1c59      	adds	r1, r3, #1
 800c596:	61f9      	str	r1, [r7, #28]
 800c598:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c59c:	b2d2      	uxtb	r2, r2
 800c59e:	701a      	strb	r2, [r3, #0]
 800c5a0:	69bb      	ldr	r3, [r7, #24]
 800c5a2:	09db      	lsrs	r3, r3, #7
 800c5a4:	61bb      	str	r3, [r7, #24]
 800c5a6:	69bb      	ldr	r3, [r7, #24]
 800c5a8:	2b7f      	cmp	r3, #127	; 0x7f
 800c5aa:	d8f0      	bhi.n	800c58e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800c5ac:	69fb      	ldr	r3, [r7, #28]
 800c5ae:	1c5a      	adds	r2, r3, #1
 800c5b0:	61fa      	str	r2, [r7, #28]
 800c5b2:	69ba      	ldr	r2, [r7, #24]
 800c5b4:	b2d2      	uxtb	r2, r2
 800c5b6:	701a      	strb	r2, [r3, #0]
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800c5bc:	2204      	movs	r2, #4
 800c5be:	68f9      	ldr	r1, [r7, #12]
 800c5c0:	6938      	ldr	r0, [r7, #16]
 800c5c2:	f7fe fd11 	bl	800afe8 <_SendPacket>
  RECORD_END();
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	f383 8811 	msr	BASEPRI, r3
}
 800c5cc:	bf00      	nop
 800c5ce:	3720      	adds	r7, #32
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}
 800c5d4:	20009a5c 	.word	0x20009a5c
 800c5d8:	20009a2c 	.word	0x20009a2c

0800c5dc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b088      	sub	sp, #32
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c5e4:	f3ef 8311 	mrs	r3, BASEPRI
 800c5e8:	f04f 0120 	mov.w	r1, #32
 800c5ec:	f381 8811 	msr	BASEPRI, r1
 800c5f0:	617b      	str	r3, [r7, #20]
 800c5f2:	4819      	ldr	r0, [pc, #100]	; (800c658 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800c5f4:	f7fe fc0a 	bl	800ae0c <_PreparePacket>
 800c5f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c5fe:	4b17      	ldr	r3, [pc, #92]	; (800c65c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800c600:	691b      	ldr	r3, [r3, #16]
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	1ad3      	subs	r3, r2, r3
 800c606:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	61fb      	str	r3, [r7, #28]
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	61bb      	str	r3, [r7, #24]
 800c610:	e00b      	b.n	800c62a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800c612:	69bb      	ldr	r3, [r7, #24]
 800c614:	b2da      	uxtb	r2, r3
 800c616:	69fb      	ldr	r3, [r7, #28]
 800c618:	1c59      	adds	r1, r3, #1
 800c61a:	61f9      	str	r1, [r7, #28]
 800c61c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c620:	b2d2      	uxtb	r2, r2
 800c622:	701a      	strb	r2, [r3, #0]
 800c624:	69bb      	ldr	r3, [r7, #24]
 800c626:	09db      	lsrs	r3, r3, #7
 800c628:	61bb      	str	r3, [r7, #24]
 800c62a:	69bb      	ldr	r3, [r7, #24]
 800c62c:	2b7f      	cmp	r3, #127	; 0x7f
 800c62e:	d8f0      	bhi.n	800c612 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800c630:	69fb      	ldr	r3, [r7, #28]
 800c632:	1c5a      	adds	r2, r3, #1
 800c634:	61fa      	str	r2, [r7, #28]
 800c636:	69ba      	ldr	r2, [r7, #24]
 800c638:	b2d2      	uxtb	r2, r2
 800c63a:	701a      	strb	r2, [r3, #0]
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800c640:	2206      	movs	r2, #6
 800c642:	68f9      	ldr	r1, [r7, #12]
 800c644:	6938      	ldr	r0, [r7, #16]
 800c646:	f7fe fccf 	bl	800afe8 <_SendPacket>
  RECORD_END();
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	f383 8811 	msr	BASEPRI, r3
}
 800c650:	bf00      	nop
 800c652:	3720      	adds	r7, #32
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}
 800c658:	20009a5c 	.word	0x20009a5c
 800c65c:	20009a2c 	.word	0x20009a2c

0800c660 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800c660:	b580      	push	{r7, lr}
 800c662:	b08a      	sub	sp, #40	; 0x28
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800c66a:	f3ef 8311 	mrs	r3, BASEPRI
 800c66e:	f04f 0120 	mov.w	r1, #32
 800c672:	f381 8811 	msr	BASEPRI, r1
 800c676:	617b      	str	r3, [r7, #20]
 800c678:	4827      	ldr	r0, [pc, #156]	; (800c718 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800c67a:	f7fe fbc7 	bl	800ae0c <_PreparePacket>
 800c67e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c684:	4b25      	ldr	r3, [pc, #148]	; (800c71c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800c686:	691b      	ldr	r3, [r3, #16]
 800c688:	687a      	ldr	r2, [r7, #4]
 800c68a:	1ad3      	subs	r3, r2, r3
 800c68c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	627b      	str	r3, [r7, #36]	; 0x24
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	623b      	str	r3, [r7, #32]
 800c696:	e00b      	b.n	800c6b0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800c698:	6a3b      	ldr	r3, [r7, #32]
 800c69a:	b2da      	uxtb	r2, r3
 800c69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c69e:	1c59      	adds	r1, r3, #1
 800c6a0:	6279      	str	r1, [r7, #36]	; 0x24
 800c6a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c6a6:	b2d2      	uxtb	r2, r2
 800c6a8:	701a      	strb	r2, [r3, #0]
 800c6aa:	6a3b      	ldr	r3, [r7, #32]
 800c6ac:	09db      	lsrs	r3, r3, #7
 800c6ae:	623b      	str	r3, [r7, #32]
 800c6b0:	6a3b      	ldr	r3, [r7, #32]
 800c6b2:	2b7f      	cmp	r3, #127	; 0x7f
 800c6b4:	d8f0      	bhi.n	800c698 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800c6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b8:	1c5a      	adds	r2, r3, #1
 800c6ba:	627a      	str	r2, [r7, #36]	; 0x24
 800c6bc:	6a3a      	ldr	r2, [r7, #32]
 800c6be:	b2d2      	uxtb	r2, r2
 800c6c0:	701a      	strb	r2, [r3, #0]
 800c6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	61fb      	str	r3, [r7, #28]
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	61bb      	str	r3, [r7, #24]
 800c6ce:	e00b      	b.n	800c6e8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800c6d0:	69bb      	ldr	r3, [r7, #24]
 800c6d2:	b2da      	uxtb	r2, r3
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	1c59      	adds	r1, r3, #1
 800c6d8:	61f9      	str	r1, [r7, #28]
 800c6da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c6de:	b2d2      	uxtb	r2, r2
 800c6e0:	701a      	strb	r2, [r3, #0]
 800c6e2:	69bb      	ldr	r3, [r7, #24]
 800c6e4:	09db      	lsrs	r3, r3, #7
 800c6e6:	61bb      	str	r3, [r7, #24]
 800c6e8:	69bb      	ldr	r3, [r7, #24]
 800c6ea:	2b7f      	cmp	r3, #127	; 0x7f
 800c6ec:	d8f0      	bhi.n	800c6d0 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800c6ee:	69fb      	ldr	r3, [r7, #28]
 800c6f0:	1c5a      	adds	r2, r3, #1
 800c6f2:	61fa      	str	r2, [r7, #28]
 800c6f4:	69ba      	ldr	r2, [r7, #24]
 800c6f6:	b2d2      	uxtb	r2, r2
 800c6f8:	701a      	strb	r2, [r3, #0]
 800c6fa:	69fb      	ldr	r3, [r7, #28]
 800c6fc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800c6fe:	2207      	movs	r2, #7
 800c700:	68f9      	ldr	r1, [r7, #12]
 800c702:	6938      	ldr	r0, [r7, #16]
 800c704:	f7fe fc70 	bl	800afe8 <_SendPacket>
  RECORD_END();
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	f383 8811 	msr	BASEPRI, r3
}
 800c70e:	bf00      	nop
 800c710:	3728      	adds	r7, #40	; 0x28
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop
 800c718:	20009a5c 	.word	0x20009a5c
 800c71c:	20009a2c 	.word	0x20009a2c

0800c720 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800c720:	b480      	push	{r7}
 800c722:	b083      	sub	sp, #12
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800c728:	4b04      	ldr	r3, [pc, #16]	; (800c73c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800c72a:	691b      	ldr	r3, [r3, #16]
 800c72c:	687a      	ldr	r2, [r7, #4]
 800c72e:	1ad3      	subs	r3, r2, r3
}
 800c730:	4618      	mov	r0, r3
 800c732:	370c      	adds	r7, #12
 800c734:	46bd      	mov	sp, r7
 800c736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73a:	4770      	bx	lr
 800c73c:	20009a2c 	.word	0x20009a2c

0800c740 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800c740:	b580      	push	{r7, lr}
 800c742:	b08c      	sub	sp, #48	; 0x30
 800c744:	af00      	add	r7, sp, #0
 800c746:	4603      	mov	r3, r0
 800c748:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800c74a:	4b3b      	ldr	r3, [pc, #236]	; (800c838 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d06d      	beq.n	800c82e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800c752:	4b39      	ldr	r3, [pc, #228]	; (800c838 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800c758:	2300      	movs	r3, #0
 800c75a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c75c:	e008      	b.n	800c770 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800c75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c760:	691b      	ldr	r3, [r3, #16]
 800c762:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800c764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c766:	2b00      	cmp	r3, #0
 800c768:	d007      	beq.n	800c77a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800c76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c76c:	3301      	adds	r3, #1
 800c76e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c770:	79fb      	ldrb	r3, [r7, #7]
 800c772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c774:	429a      	cmp	r2, r3
 800c776:	d3f2      	bcc.n	800c75e <SEGGER_SYSVIEW_SendModule+0x1e>
 800c778:	e000      	b.n	800c77c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800c77a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800c77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d055      	beq.n	800c82e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c782:	f3ef 8311 	mrs	r3, BASEPRI
 800c786:	f04f 0120 	mov.w	r1, #32
 800c78a:	f381 8811 	msr	BASEPRI, r1
 800c78e:	617b      	str	r3, [r7, #20]
 800c790:	482a      	ldr	r0, [pc, #168]	; (800c83c <SEGGER_SYSVIEW_SendModule+0xfc>)
 800c792:	f7fe fb3b 	bl	800ae0c <_PreparePacket>
 800c796:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	627b      	str	r3, [r7, #36]	; 0x24
 800c7a0:	79fb      	ldrb	r3, [r7, #7]
 800c7a2:	623b      	str	r3, [r7, #32]
 800c7a4:	e00b      	b.n	800c7be <SEGGER_SYSVIEW_SendModule+0x7e>
 800c7a6:	6a3b      	ldr	r3, [r7, #32]
 800c7a8:	b2da      	uxtb	r2, r3
 800c7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ac:	1c59      	adds	r1, r3, #1
 800c7ae:	6279      	str	r1, [r7, #36]	; 0x24
 800c7b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c7b4:	b2d2      	uxtb	r2, r2
 800c7b6:	701a      	strb	r2, [r3, #0]
 800c7b8:	6a3b      	ldr	r3, [r7, #32]
 800c7ba:	09db      	lsrs	r3, r3, #7
 800c7bc:	623b      	str	r3, [r7, #32]
 800c7be:	6a3b      	ldr	r3, [r7, #32]
 800c7c0:	2b7f      	cmp	r3, #127	; 0x7f
 800c7c2:	d8f0      	bhi.n	800c7a6 <SEGGER_SYSVIEW_SendModule+0x66>
 800c7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c6:	1c5a      	adds	r2, r3, #1
 800c7c8:	627a      	str	r2, [r7, #36]	; 0x24
 800c7ca:	6a3a      	ldr	r2, [r7, #32]
 800c7cc:	b2d2      	uxtb	r2, r2
 800c7ce:	701a      	strb	r2, [r3, #0]
 800c7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	61fb      	str	r3, [r7, #28]
 800c7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7da:	689b      	ldr	r3, [r3, #8]
 800c7dc:	61bb      	str	r3, [r7, #24]
 800c7de:	e00b      	b.n	800c7f8 <SEGGER_SYSVIEW_SendModule+0xb8>
 800c7e0:	69bb      	ldr	r3, [r7, #24]
 800c7e2:	b2da      	uxtb	r2, r3
 800c7e4:	69fb      	ldr	r3, [r7, #28]
 800c7e6:	1c59      	adds	r1, r3, #1
 800c7e8:	61f9      	str	r1, [r7, #28]
 800c7ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c7ee:	b2d2      	uxtb	r2, r2
 800c7f0:	701a      	strb	r2, [r3, #0]
 800c7f2:	69bb      	ldr	r3, [r7, #24]
 800c7f4:	09db      	lsrs	r3, r3, #7
 800c7f6:	61bb      	str	r3, [r7, #24]
 800c7f8:	69bb      	ldr	r3, [r7, #24]
 800c7fa:	2b7f      	cmp	r3, #127	; 0x7f
 800c7fc:	d8f0      	bhi.n	800c7e0 <SEGGER_SYSVIEW_SendModule+0xa0>
 800c7fe:	69fb      	ldr	r3, [r7, #28]
 800c800:	1c5a      	adds	r2, r3, #1
 800c802:	61fa      	str	r2, [r7, #28]
 800c804:	69ba      	ldr	r2, [r7, #24]
 800c806:	b2d2      	uxtb	r2, r2
 800c808:	701a      	strb	r2, [r3, #0]
 800c80a:	69fb      	ldr	r3, [r7, #28]
 800c80c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	2280      	movs	r2, #128	; 0x80
 800c814:	4619      	mov	r1, r3
 800c816:	68f8      	ldr	r0, [r7, #12]
 800c818:	f7fe faa8 	bl	800ad6c <_EncodeStr>
 800c81c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800c81e:	2216      	movs	r2, #22
 800c820:	68f9      	ldr	r1, [r7, #12]
 800c822:	6938      	ldr	r0, [r7, #16]
 800c824:	f7fe fbe0 	bl	800afe8 <_SendPacket>
      RECORD_END();
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800c82e:	bf00      	nop
 800c830:	3730      	adds	r7, #48	; 0x30
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
 800c836:	bf00      	nop
 800c838:	20009a54 	.word	0x20009a54
 800c83c:	20009a5c 	.word	0x20009a5c

0800c840 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800c840:	b580      	push	{r7, lr}
 800c842:	b082      	sub	sp, #8
 800c844:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800c846:	4b0c      	ldr	r3, [pc, #48]	; (800c878 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d00f      	beq.n	800c86e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800c84e:	4b0a      	ldr	r3, [pc, #40]	; (800c878 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	68db      	ldr	r3, [r3, #12]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d002      	beq.n	800c862 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	68db      	ldr	r3, [r3, #12]
 800c860:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	691b      	ldr	r3, [r3, #16]
 800c866:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d1f2      	bne.n	800c854 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800c86e:	bf00      	nop
 800c870:	3708      	adds	r7, #8
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
 800c876:	bf00      	nop
 800c878:	20009a54 	.word	0x20009a54

0800c87c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b086      	sub	sp, #24
 800c880:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800c882:	f3ef 8311 	mrs	r3, BASEPRI
 800c886:	f04f 0120 	mov.w	r1, #32
 800c88a:	f381 8811 	msr	BASEPRI, r1
 800c88e:	60fb      	str	r3, [r7, #12]
 800c890:	4817      	ldr	r0, [pc, #92]	; (800c8f0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800c892:	f7fe fabb 	bl	800ae0c <_PreparePacket>
 800c896:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	617b      	str	r3, [r7, #20]
 800c8a0:	4b14      	ldr	r3, [pc, #80]	; (800c8f4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800c8a2:	781b      	ldrb	r3, [r3, #0]
 800c8a4:	613b      	str	r3, [r7, #16]
 800c8a6:	e00b      	b.n	800c8c0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	b2da      	uxtb	r2, r3
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	1c59      	adds	r1, r3, #1
 800c8b0:	6179      	str	r1, [r7, #20]
 800c8b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c8b6:	b2d2      	uxtb	r2, r2
 800c8b8:	701a      	strb	r2, [r3, #0]
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	09db      	lsrs	r3, r3, #7
 800c8be:	613b      	str	r3, [r7, #16]
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	2b7f      	cmp	r3, #127	; 0x7f
 800c8c4:	d8f0      	bhi.n	800c8a8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800c8c6:	697b      	ldr	r3, [r7, #20]
 800c8c8:	1c5a      	adds	r2, r3, #1
 800c8ca:	617a      	str	r2, [r7, #20]
 800c8cc:	693a      	ldr	r2, [r7, #16]
 800c8ce:	b2d2      	uxtb	r2, r2
 800c8d0:	701a      	strb	r2, [r3, #0]
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800c8d6:	221b      	movs	r2, #27
 800c8d8:	6879      	ldr	r1, [r7, #4]
 800c8da:	68b8      	ldr	r0, [r7, #8]
 800c8dc:	f7fe fb84 	bl	800afe8 <_SendPacket>
  RECORD_END();
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	f383 8811 	msr	BASEPRI, r3
}
 800c8e6:	bf00      	nop
 800c8e8:	3718      	adds	r7, #24
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	20009a5c 	.word	0x20009a5c
 800c8f4:	20009a58 	.word	0x20009a58

0800c8f8 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 800c8f8:	b40f      	push	{r0, r1, r2, r3}
 800c8fa:	b580      	push	{r7, lr}
 800c8fc:	b082      	sub	sp, #8
 800c8fe:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 800c900:	f107 0314 	add.w	r3, r7, #20
 800c904:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800c906:	1d3b      	adds	r3, r7, #4
 800c908:	461a      	mov	r2, r3
 800c90a:	2100      	movs	r1, #0
 800c90c:	6938      	ldr	r0, [r7, #16]
 800c90e:	f7fe fe7b 	bl	800b608 <_VPrintTarget>
  va_end(ParamList);
}
 800c912:	bf00      	nop
 800c914:	3708      	adds	r7, #8
 800c916:	46bd      	mov	sp, r7
 800c918:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c91c:	b004      	add	sp, #16
 800c91e:	4770      	bx	lr

0800c920 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800c920:	b580      	push	{r7, lr}
 800c922:	b08a      	sub	sp, #40	; 0x28
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c928:	f3ef 8311 	mrs	r3, BASEPRI
 800c92c:	f04f 0120 	mov.w	r1, #32
 800c930:	f381 8811 	msr	BASEPRI, r1
 800c934:	617b      	str	r3, [r7, #20]
 800c936:	4827      	ldr	r0, [pc, #156]	; (800c9d4 <SEGGER_SYSVIEW_Warn+0xb4>)
 800c938:	f7fe fa68 	bl	800ae0c <_PreparePacket>
 800c93c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c93e:	2280      	movs	r2, #128	; 0x80
 800c940:	6879      	ldr	r1, [r7, #4]
 800c942:	6938      	ldr	r0, [r7, #16]
 800c944:	f7fe fa12 	bl	800ad6c <_EncodeStr>
 800c948:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	627b      	str	r3, [r7, #36]	; 0x24
 800c94e:	2301      	movs	r3, #1
 800c950:	623b      	str	r3, [r7, #32]
 800c952:	e00b      	b.n	800c96c <SEGGER_SYSVIEW_Warn+0x4c>
 800c954:	6a3b      	ldr	r3, [r7, #32]
 800c956:	b2da      	uxtb	r2, r3
 800c958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95a:	1c59      	adds	r1, r3, #1
 800c95c:	6279      	str	r1, [r7, #36]	; 0x24
 800c95e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c962:	b2d2      	uxtb	r2, r2
 800c964:	701a      	strb	r2, [r3, #0]
 800c966:	6a3b      	ldr	r3, [r7, #32]
 800c968:	09db      	lsrs	r3, r3, #7
 800c96a:	623b      	str	r3, [r7, #32]
 800c96c:	6a3b      	ldr	r3, [r7, #32]
 800c96e:	2b7f      	cmp	r3, #127	; 0x7f
 800c970:	d8f0      	bhi.n	800c954 <SEGGER_SYSVIEW_Warn+0x34>
 800c972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c974:	1c5a      	adds	r2, r3, #1
 800c976:	627a      	str	r2, [r7, #36]	; 0x24
 800c978:	6a3a      	ldr	r2, [r7, #32]
 800c97a:	b2d2      	uxtb	r2, r2
 800c97c:	701a      	strb	r2, [r3, #0]
 800c97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c980:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	61fb      	str	r3, [r7, #28]
 800c986:	2300      	movs	r3, #0
 800c988:	61bb      	str	r3, [r7, #24]
 800c98a:	e00b      	b.n	800c9a4 <SEGGER_SYSVIEW_Warn+0x84>
 800c98c:	69bb      	ldr	r3, [r7, #24]
 800c98e:	b2da      	uxtb	r2, r3
 800c990:	69fb      	ldr	r3, [r7, #28]
 800c992:	1c59      	adds	r1, r3, #1
 800c994:	61f9      	str	r1, [r7, #28]
 800c996:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c99a:	b2d2      	uxtb	r2, r2
 800c99c:	701a      	strb	r2, [r3, #0]
 800c99e:	69bb      	ldr	r3, [r7, #24]
 800c9a0:	09db      	lsrs	r3, r3, #7
 800c9a2:	61bb      	str	r3, [r7, #24]
 800c9a4:	69bb      	ldr	r3, [r7, #24]
 800c9a6:	2b7f      	cmp	r3, #127	; 0x7f
 800c9a8:	d8f0      	bhi.n	800c98c <SEGGER_SYSVIEW_Warn+0x6c>
 800c9aa:	69fb      	ldr	r3, [r7, #28]
 800c9ac:	1c5a      	adds	r2, r3, #1
 800c9ae:	61fa      	str	r2, [r7, #28]
 800c9b0:	69ba      	ldr	r2, [r7, #24]
 800c9b2:	b2d2      	uxtb	r2, r2
 800c9b4:	701a      	strb	r2, [r3, #0]
 800c9b6:	69fb      	ldr	r3, [r7, #28]
 800c9b8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800c9ba:	221a      	movs	r2, #26
 800c9bc:	68f9      	ldr	r1, [r7, #12]
 800c9be:	6938      	ldr	r0, [r7, #16]
 800c9c0:	f7fe fb12 	bl	800afe8 <_SendPacket>
  RECORD_END();
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	f383 8811 	msr	BASEPRI, r3
}
 800c9ca:	bf00      	nop
 800c9cc:	3728      	adds	r7, #40	; 0x28
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
 800c9d2:	bf00      	nop
 800c9d4:	20009a5c 	.word	0x20009a5c

0800c9d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c9dc:	2200      	movs	r2, #0
 800c9de:	4912      	ldr	r1, [pc, #72]	; (800ca28 <MX_USB_DEVICE_Init+0x50>)
 800c9e0:	4812      	ldr	r0, [pc, #72]	; (800ca2c <MX_USB_DEVICE_Init+0x54>)
 800c9e2:	f7fc fbe7 	bl	80091b4 <USBD_Init>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d001      	beq.n	800c9f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c9ec:	f7f4 f8c2 	bl	8000b74 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c9f0:	490f      	ldr	r1, [pc, #60]	; (800ca30 <MX_USB_DEVICE_Init+0x58>)
 800c9f2:	480e      	ldr	r0, [pc, #56]	; (800ca2c <MX_USB_DEVICE_Init+0x54>)
 800c9f4:	f7fc fc0e 	bl	8009214 <USBD_RegisterClass>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d001      	beq.n	800ca02 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c9fe:	f7f4 f8b9 	bl	8000b74 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ca02:	490c      	ldr	r1, [pc, #48]	; (800ca34 <MX_USB_DEVICE_Init+0x5c>)
 800ca04:	4809      	ldr	r0, [pc, #36]	; (800ca2c <MX_USB_DEVICE_Init+0x54>)
 800ca06:	f7fc fb45 	bl	8009094 <USBD_CDC_RegisterInterface>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d001      	beq.n	800ca14 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ca10:	f7f4 f8b0 	bl	8000b74 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ca14:	4805      	ldr	r0, [pc, #20]	; (800ca2c <MX_USB_DEVICE_Init+0x54>)
 800ca16:	f7fc fc33 	bl	8009280 <USBD_Start>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d001      	beq.n	800ca24 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ca20:	f7f4 f8a8 	bl	8000b74 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ca24:	bf00      	nop
 800ca26:	bd80      	pop	{r7, pc}
 800ca28:	200000b4 	.word	0x200000b4
 800ca2c:	20009b40 	.word	0x20009b40
 800ca30:	20000020 	.word	0x20000020
 800ca34:	200000a0 	.word	0x200000a0

0800ca38 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	4905      	ldr	r1, [pc, #20]	; (800ca54 <CDC_Init_FS+0x1c>)
 800ca40:	4805      	ldr	r0, [pc, #20]	; (800ca58 <CDC_Init_FS+0x20>)
 800ca42:	f7fc fb41 	bl	80090c8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ca46:	4905      	ldr	r1, [pc, #20]	; (800ca5c <CDC_Init_FS+0x24>)
 800ca48:	4803      	ldr	r0, [pc, #12]	; (800ca58 <CDC_Init_FS+0x20>)
 800ca4a:	f7fc fb5f 	bl	800910c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ca4e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	bd80      	pop	{r7, pc}
 800ca54:	2000a204 	.word	0x2000a204
 800ca58:	20009b40 	.word	0x20009b40
 800ca5c:	20009e1c 	.word	0x20009e1c

0800ca60 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ca60:	b480      	push	{r7}
 800ca62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ca64:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	4770      	bx	lr

0800ca70 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ca70:	b480      	push	{r7}
 800ca72:	b083      	sub	sp, #12
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	4603      	mov	r3, r0
 800ca78:	6039      	str	r1, [r7, #0]
 800ca7a:	71fb      	strb	r3, [r7, #7]
 800ca7c:	4613      	mov	r3, r2
 800ca7e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ca80:	79fb      	ldrb	r3, [r7, #7]
 800ca82:	2b23      	cmp	r3, #35	; 0x23
 800ca84:	d84a      	bhi.n	800cb1c <CDC_Control_FS+0xac>
 800ca86:	a201      	add	r2, pc, #4	; (adr r2, 800ca8c <CDC_Control_FS+0x1c>)
 800ca88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca8c:	0800cb1d 	.word	0x0800cb1d
 800ca90:	0800cb1d 	.word	0x0800cb1d
 800ca94:	0800cb1d 	.word	0x0800cb1d
 800ca98:	0800cb1d 	.word	0x0800cb1d
 800ca9c:	0800cb1d 	.word	0x0800cb1d
 800caa0:	0800cb1d 	.word	0x0800cb1d
 800caa4:	0800cb1d 	.word	0x0800cb1d
 800caa8:	0800cb1d 	.word	0x0800cb1d
 800caac:	0800cb1d 	.word	0x0800cb1d
 800cab0:	0800cb1d 	.word	0x0800cb1d
 800cab4:	0800cb1d 	.word	0x0800cb1d
 800cab8:	0800cb1d 	.word	0x0800cb1d
 800cabc:	0800cb1d 	.word	0x0800cb1d
 800cac0:	0800cb1d 	.word	0x0800cb1d
 800cac4:	0800cb1d 	.word	0x0800cb1d
 800cac8:	0800cb1d 	.word	0x0800cb1d
 800cacc:	0800cb1d 	.word	0x0800cb1d
 800cad0:	0800cb1d 	.word	0x0800cb1d
 800cad4:	0800cb1d 	.word	0x0800cb1d
 800cad8:	0800cb1d 	.word	0x0800cb1d
 800cadc:	0800cb1d 	.word	0x0800cb1d
 800cae0:	0800cb1d 	.word	0x0800cb1d
 800cae4:	0800cb1d 	.word	0x0800cb1d
 800cae8:	0800cb1d 	.word	0x0800cb1d
 800caec:	0800cb1d 	.word	0x0800cb1d
 800caf0:	0800cb1d 	.word	0x0800cb1d
 800caf4:	0800cb1d 	.word	0x0800cb1d
 800caf8:	0800cb1d 	.word	0x0800cb1d
 800cafc:	0800cb1d 	.word	0x0800cb1d
 800cb00:	0800cb1d 	.word	0x0800cb1d
 800cb04:	0800cb1d 	.word	0x0800cb1d
 800cb08:	0800cb1d 	.word	0x0800cb1d
 800cb0c:	0800cb1d 	.word	0x0800cb1d
 800cb10:	0800cb1d 	.word	0x0800cb1d
 800cb14:	0800cb1d 	.word	0x0800cb1d
 800cb18:	0800cb1d 	.word	0x0800cb1d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cb1c:	bf00      	nop
  }

  return (USBD_OK);
 800cb1e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	370c      	adds	r7, #12
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr

0800cb2c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b082      	sub	sp, #8
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
 800cb34:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cb36:	6879      	ldr	r1, [r7, #4]
 800cb38:	4805      	ldr	r0, [pc, #20]	; (800cb50 <CDC_Receive_FS+0x24>)
 800cb3a:	f7fc fae7 	bl	800910c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cb3e:	4804      	ldr	r0, [pc, #16]	; (800cb50 <CDC_Receive_FS+0x24>)
 800cb40:	f7fc fb02 	bl	8009148 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cb44:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3708      	adds	r7, #8
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}
 800cb4e:	bf00      	nop
 800cb50:	20009b40 	.word	0x20009b40

0800cb54 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cb54:	b480      	push	{r7}
 800cb56:	b087      	sub	sp, #28
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	60f8      	str	r0, [r7, #12]
 800cb5c:	60b9      	str	r1, [r7, #8]
 800cb5e:	4613      	mov	r3, r2
 800cb60:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cb62:	2300      	movs	r3, #0
 800cb64:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cb66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	371c      	adds	r7, #28
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb74:	4770      	bx	lr
	...

0800cb78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b083      	sub	sp, #12
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	4603      	mov	r3, r0
 800cb80:	6039      	str	r1, [r7, #0]
 800cb82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	2212      	movs	r2, #18
 800cb88:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cb8a:	4b03      	ldr	r3, [pc, #12]	; (800cb98 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	370c      	adds	r7, #12
 800cb90:	46bd      	mov	sp, r7
 800cb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb96:	4770      	bx	lr
 800cb98:	200000d0 	.word	0x200000d0

0800cb9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b083      	sub	sp, #12
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	4603      	mov	r3, r0
 800cba4:	6039      	str	r1, [r7, #0]
 800cba6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	2204      	movs	r2, #4
 800cbac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cbae:	4b03      	ldr	r3, [pc, #12]	; (800cbbc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	370c      	adds	r7, #12
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr
 800cbbc:	200000e4 	.word	0x200000e4

0800cbc0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b082      	sub	sp, #8
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	6039      	str	r1, [r7, #0]
 800cbca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cbcc:	79fb      	ldrb	r3, [r7, #7]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d105      	bne.n	800cbde <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cbd2:	683a      	ldr	r2, [r7, #0]
 800cbd4:	4907      	ldr	r1, [pc, #28]	; (800cbf4 <USBD_FS_ProductStrDescriptor+0x34>)
 800cbd6:	4808      	ldr	r0, [pc, #32]	; (800cbf8 <USBD_FS_ProductStrDescriptor+0x38>)
 800cbd8:	f7fd fcfe 	bl	800a5d8 <USBD_GetString>
 800cbdc:	e004      	b.n	800cbe8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cbde:	683a      	ldr	r2, [r7, #0]
 800cbe0:	4904      	ldr	r1, [pc, #16]	; (800cbf4 <USBD_FS_ProductStrDescriptor+0x34>)
 800cbe2:	4805      	ldr	r0, [pc, #20]	; (800cbf8 <USBD_FS_ProductStrDescriptor+0x38>)
 800cbe4:	f7fd fcf8 	bl	800a5d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cbe8:	4b02      	ldr	r3, [pc, #8]	; (800cbf4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3708      	adds	r7, #8
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
 800cbf2:	bf00      	nop
 800cbf4:	2000a5ec 	.word	0x2000a5ec
 800cbf8:	0800de70 	.word	0x0800de70

0800cbfc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b082      	sub	sp, #8
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	4603      	mov	r3, r0
 800cc04:	6039      	str	r1, [r7, #0]
 800cc06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cc08:	683a      	ldr	r2, [r7, #0]
 800cc0a:	4904      	ldr	r1, [pc, #16]	; (800cc1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cc0c:	4804      	ldr	r0, [pc, #16]	; (800cc20 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cc0e:	f7fd fce3 	bl	800a5d8 <USBD_GetString>
  return USBD_StrDesc;
 800cc12:	4b02      	ldr	r3, [pc, #8]	; (800cc1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	3708      	adds	r7, #8
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}
 800cc1c:	2000a5ec 	.word	0x2000a5ec
 800cc20:	0800de88 	.word	0x0800de88

0800cc24 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	6039      	str	r1, [r7, #0]
 800cc2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	221a      	movs	r2, #26
 800cc34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cc36:	f000 f843 	bl	800ccc0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cc3a:	4b02      	ldr	r3, [pc, #8]	; (800cc44 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3708      	adds	r7, #8
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	200000e8 	.word	0x200000e8

0800cc48 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	4603      	mov	r3, r0
 800cc50:	6039      	str	r1, [r7, #0]
 800cc52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cc54:	79fb      	ldrb	r3, [r7, #7]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d105      	bne.n	800cc66 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc5a:	683a      	ldr	r2, [r7, #0]
 800cc5c:	4907      	ldr	r1, [pc, #28]	; (800cc7c <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc5e:	4808      	ldr	r0, [pc, #32]	; (800cc80 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc60:	f7fd fcba 	bl	800a5d8 <USBD_GetString>
 800cc64:	e004      	b.n	800cc70 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc66:	683a      	ldr	r2, [r7, #0]
 800cc68:	4904      	ldr	r1, [pc, #16]	; (800cc7c <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc6a:	4805      	ldr	r0, [pc, #20]	; (800cc80 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc6c:	f7fd fcb4 	bl	800a5d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc70:	4b02      	ldr	r3, [pc, #8]	; (800cc7c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3708      	adds	r7, #8
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	bf00      	nop
 800cc7c:	2000a5ec 	.word	0x2000a5ec
 800cc80:	0800de9c 	.word	0x0800de9c

0800cc84 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b082      	sub	sp, #8
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	6039      	str	r1, [r7, #0]
 800cc8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc90:	79fb      	ldrb	r3, [r7, #7]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d105      	bne.n	800cca2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cc96:	683a      	ldr	r2, [r7, #0]
 800cc98:	4907      	ldr	r1, [pc, #28]	; (800ccb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cc9a:	4808      	ldr	r0, [pc, #32]	; (800ccbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cc9c:	f7fd fc9c 	bl	800a5d8 <USBD_GetString>
 800cca0:	e004      	b.n	800ccac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cca2:	683a      	ldr	r2, [r7, #0]
 800cca4:	4904      	ldr	r1, [pc, #16]	; (800ccb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cca6:	4805      	ldr	r0, [pc, #20]	; (800ccbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cca8:	f7fd fc96 	bl	800a5d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ccac:	4b02      	ldr	r3, [pc, #8]	; (800ccb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3708      	adds	r7, #8
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}
 800ccb6:	bf00      	nop
 800ccb8:	2000a5ec 	.word	0x2000a5ec
 800ccbc:	0800dea8 	.word	0x0800dea8

0800ccc0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b084      	sub	sp, #16
 800ccc4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ccc6:	4b0f      	ldr	r3, [pc, #60]	; (800cd04 <Get_SerialNum+0x44>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cccc:	4b0e      	ldr	r3, [pc, #56]	; (800cd08 <Get_SerialNum+0x48>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ccd2:	4b0e      	ldr	r3, [pc, #56]	; (800cd0c <Get_SerialNum+0x4c>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ccd8:	68fa      	ldr	r2, [r7, #12]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	4413      	add	r3, r2
 800ccde:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d009      	beq.n	800ccfa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cce6:	2208      	movs	r2, #8
 800cce8:	4909      	ldr	r1, [pc, #36]	; (800cd10 <Get_SerialNum+0x50>)
 800ccea:	68f8      	ldr	r0, [r7, #12]
 800ccec:	f000 f814 	bl	800cd18 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ccf0:	2204      	movs	r2, #4
 800ccf2:	4908      	ldr	r1, [pc, #32]	; (800cd14 <Get_SerialNum+0x54>)
 800ccf4:	68b8      	ldr	r0, [r7, #8]
 800ccf6:	f000 f80f 	bl	800cd18 <IntToUnicode>
  }
}
 800ccfa:	bf00      	nop
 800ccfc:	3710      	adds	r7, #16
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}
 800cd02:	bf00      	nop
 800cd04:	1fff7a10 	.word	0x1fff7a10
 800cd08:	1fff7a14 	.word	0x1fff7a14
 800cd0c:	1fff7a18 	.word	0x1fff7a18
 800cd10:	200000ea 	.word	0x200000ea
 800cd14:	200000fa 	.word	0x200000fa

0800cd18 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b087      	sub	sp, #28
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	60f8      	str	r0, [r7, #12]
 800cd20:	60b9      	str	r1, [r7, #8]
 800cd22:	4613      	mov	r3, r2
 800cd24:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cd26:	2300      	movs	r3, #0
 800cd28:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	75fb      	strb	r3, [r7, #23]
 800cd2e:	e027      	b.n	800cd80 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	0f1b      	lsrs	r3, r3, #28
 800cd34:	2b09      	cmp	r3, #9
 800cd36:	d80b      	bhi.n	800cd50 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	0f1b      	lsrs	r3, r3, #28
 800cd3c:	b2da      	uxtb	r2, r3
 800cd3e:	7dfb      	ldrb	r3, [r7, #23]
 800cd40:	005b      	lsls	r3, r3, #1
 800cd42:	4619      	mov	r1, r3
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	440b      	add	r3, r1
 800cd48:	3230      	adds	r2, #48	; 0x30
 800cd4a:	b2d2      	uxtb	r2, r2
 800cd4c:	701a      	strb	r2, [r3, #0]
 800cd4e:	e00a      	b.n	800cd66 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	0f1b      	lsrs	r3, r3, #28
 800cd54:	b2da      	uxtb	r2, r3
 800cd56:	7dfb      	ldrb	r3, [r7, #23]
 800cd58:	005b      	lsls	r3, r3, #1
 800cd5a:	4619      	mov	r1, r3
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	440b      	add	r3, r1
 800cd60:	3237      	adds	r2, #55	; 0x37
 800cd62:	b2d2      	uxtb	r2, r2
 800cd64:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	011b      	lsls	r3, r3, #4
 800cd6a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cd6c:	7dfb      	ldrb	r3, [r7, #23]
 800cd6e:	005b      	lsls	r3, r3, #1
 800cd70:	3301      	adds	r3, #1
 800cd72:	68ba      	ldr	r2, [r7, #8]
 800cd74:	4413      	add	r3, r2
 800cd76:	2200      	movs	r2, #0
 800cd78:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cd7a:	7dfb      	ldrb	r3, [r7, #23]
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	75fb      	strb	r3, [r7, #23]
 800cd80:	7dfa      	ldrb	r2, [r7, #23]
 800cd82:	79fb      	ldrb	r3, [r7, #7]
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d3d3      	bcc.n	800cd30 <IntToUnicode+0x18>
  }
}
 800cd88:	bf00      	nop
 800cd8a:	bf00      	nop
 800cd8c:	371c      	adds	r7, #28
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr
	...

0800cd98 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b08a      	sub	sp, #40	; 0x28
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cda0:	f107 0314 	add.w	r3, r7, #20
 800cda4:	2200      	movs	r2, #0
 800cda6:	601a      	str	r2, [r3, #0]
 800cda8:	605a      	str	r2, [r3, #4]
 800cdaa:	609a      	str	r2, [r3, #8]
 800cdac:	60da      	str	r2, [r3, #12]
 800cdae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cdb8:	d13a      	bne.n	800ce30 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cdba:	2300      	movs	r3, #0
 800cdbc:	613b      	str	r3, [r7, #16]
 800cdbe:	4b1e      	ldr	r3, [pc, #120]	; (800ce38 <HAL_PCD_MspInit+0xa0>)
 800cdc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdc2:	4a1d      	ldr	r2, [pc, #116]	; (800ce38 <HAL_PCD_MspInit+0xa0>)
 800cdc4:	f043 0301 	orr.w	r3, r3, #1
 800cdc8:	6313      	str	r3, [r2, #48]	; 0x30
 800cdca:	4b1b      	ldr	r3, [pc, #108]	; (800ce38 <HAL_PCD_MspInit+0xa0>)
 800cdcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdce:	f003 0301 	and.w	r3, r3, #1
 800cdd2:	613b      	str	r3, [r7, #16]
 800cdd4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cdd6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cdda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cddc:	2302      	movs	r3, #2
 800cdde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cde0:	2300      	movs	r3, #0
 800cde2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cde4:	2303      	movs	r3, #3
 800cde6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cde8:	230a      	movs	r3, #10
 800cdea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cdec:	f107 0314 	add.w	r3, r7, #20
 800cdf0:	4619      	mov	r1, r3
 800cdf2:	4812      	ldr	r0, [pc, #72]	; (800ce3c <HAL_PCD_MspInit+0xa4>)
 800cdf4:	f7f4 fcf4 	bl	80017e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cdf8:	4b0f      	ldr	r3, [pc, #60]	; (800ce38 <HAL_PCD_MspInit+0xa0>)
 800cdfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdfc:	4a0e      	ldr	r2, [pc, #56]	; (800ce38 <HAL_PCD_MspInit+0xa0>)
 800cdfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce02:	6353      	str	r3, [r2, #52]	; 0x34
 800ce04:	2300      	movs	r3, #0
 800ce06:	60fb      	str	r3, [r7, #12]
 800ce08:	4b0b      	ldr	r3, [pc, #44]	; (800ce38 <HAL_PCD_MspInit+0xa0>)
 800ce0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce0c:	4a0a      	ldr	r2, [pc, #40]	; (800ce38 <HAL_PCD_MspInit+0xa0>)
 800ce0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ce12:	6453      	str	r3, [r2, #68]	; 0x44
 800ce14:	4b08      	ldr	r3, [pc, #32]	; (800ce38 <HAL_PCD_MspInit+0xa0>)
 800ce16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ce1c:	60fb      	str	r3, [r7, #12]
 800ce1e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ce20:	2200      	movs	r2, #0
 800ce22:	2100      	movs	r1, #0
 800ce24:	2043      	movs	r0, #67	; 0x43
 800ce26:	f7f4 fcb1 	bl	800178c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ce2a:	2043      	movs	r0, #67	; 0x43
 800ce2c:	f7f4 fcca 	bl	80017c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ce30:	bf00      	nop
 800ce32:	3728      	adds	r7, #40	; 0x28
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}
 800ce38:	40023800 	.word	0x40023800
 800ce3c:	40020000 	.word	0x40020000

0800ce40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ce54:	4619      	mov	r1, r3
 800ce56:	4610      	mov	r0, r2
 800ce58:	f7fc fa5f 	bl	800931a <USBD_LL_SetupStage>
}
 800ce5c:	bf00      	nop
 800ce5e:	3708      	adds	r7, #8
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}

0800ce64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b082      	sub	sp, #8
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
 800ce6c:	460b      	mov	r3, r1
 800ce6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ce76:	78fa      	ldrb	r2, [r7, #3]
 800ce78:	6879      	ldr	r1, [r7, #4]
 800ce7a:	4613      	mov	r3, r2
 800ce7c:	00db      	lsls	r3, r3, #3
 800ce7e:	4413      	add	r3, r2
 800ce80:	009b      	lsls	r3, r3, #2
 800ce82:	440b      	add	r3, r1
 800ce84:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ce88:	681a      	ldr	r2, [r3, #0]
 800ce8a:	78fb      	ldrb	r3, [r7, #3]
 800ce8c:	4619      	mov	r1, r3
 800ce8e:	f7fc fa99 	bl	80093c4 <USBD_LL_DataOutStage>
}
 800ce92:	bf00      	nop
 800ce94:	3708      	adds	r7, #8
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}

0800ce9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce9a:	b580      	push	{r7, lr}
 800ce9c:	b082      	sub	sp, #8
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	6078      	str	r0, [r7, #4]
 800cea2:	460b      	mov	r3, r1
 800cea4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ceac:	78fa      	ldrb	r2, [r7, #3]
 800ceae:	6879      	ldr	r1, [r7, #4]
 800ceb0:	4613      	mov	r3, r2
 800ceb2:	00db      	lsls	r3, r3, #3
 800ceb4:	4413      	add	r3, r2
 800ceb6:	009b      	lsls	r3, r3, #2
 800ceb8:	440b      	add	r3, r1
 800ceba:	334c      	adds	r3, #76	; 0x4c
 800cebc:	681a      	ldr	r2, [r3, #0]
 800cebe:	78fb      	ldrb	r3, [r7, #3]
 800cec0:	4619      	mov	r1, r3
 800cec2:	f7fc fb32 	bl	800952a <USBD_LL_DataInStage>
}
 800cec6:	bf00      	nop
 800cec8:	3708      	adds	r7, #8
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}

0800cece <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cece:	b580      	push	{r7, lr}
 800ced0:	b082      	sub	sp, #8
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cedc:	4618      	mov	r0, r3
 800cede:	f7fc fc66 	bl	80097ae <USBD_LL_SOF>
}
 800cee2:	bf00      	nop
 800cee4:	3708      	adds	r7, #8
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}

0800ceea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ceea:	b580      	push	{r7, lr}
 800ceec:	b084      	sub	sp, #16
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cef2:	2301      	movs	r3, #1
 800cef4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	68db      	ldr	r3, [r3, #12]
 800cefa:	2b02      	cmp	r3, #2
 800cefc:	d001      	beq.n	800cf02 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cefe:	f7f3 fe39 	bl	8000b74 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cf08:	7bfa      	ldrb	r2, [r7, #15]
 800cf0a:	4611      	mov	r1, r2
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f7fc fc10 	bl	8009732 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f7fc fbb8 	bl	800968e <USBD_LL_Reset>
}
 800cf1e:	bf00      	nop
 800cf20:	3710      	adds	r7, #16
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}
	...

0800cf28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b082      	sub	sp, #8
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cf36:	4618      	mov	r0, r3
 800cf38:	f7fc fc0b 	bl	8009752 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	687a      	ldr	r2, [r7, #4]
 800cf48:	6812      	ldr	r2, [r2, #0]
 800cf4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cf4e:	f043 0301 	orr.w	r3, r3, #1
 800cf52:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6a1b      	ldr	r3, [r3, #32]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d005      	beq.n	800cf68 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf5c:	4b04      	ldr	r3, [pc, #16]	; (800cf70 <HAL_PCD_SuspendCallback+0x48>)
 800cf5e:	691b      	ldr	r3, [r3, #16]
 800cf60:	4a03      	ldr	r2, [pc, #12]	; (800cf70 <HAL_PCD_SuspendCallback+0x48>)
 800cf62:	f043 0306 	orr.w	r3, r3, #6
 800cf66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cf68:	bf00      	nop
 800cf6a:	3708      	adds	r7, #8
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}
 800cf70:	e000ed00 	.word	0xe000ed00

0800cf74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b082      	sub	sp, #8
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7fc fbfb 	bl	800977e <USBD_LL_Resume>
}
 800cf88:	bf00      	nop
 800cf8a:	3708      	adds	r7, #8
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}

0800cf90 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b082      	sub	sp, #8
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
 800cf98:	460b      	mov	r3, r1
 800cf9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cfa2:	78fa      	ldrb	r2, [r7, #3]
 800cfa4:	4611      	mov	r1, r2
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f7fc fc53 	bl	8009852 <USBD_LL_IsoOUTIncomplete>
}
 800cfac:	bf00      	nop
 800cfae:	3708      	adds	r7, #8
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b082      	sub	sp, #8
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	460b      	mov	r3, r1
 800cfbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cfc6:	78fa      	ldrb	r2, [r7, #3]
 800cfc8:	4611      	mov	r1, r2
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f7fc fc0f 	bl	80097ee <USBD_LL_IsoINIncomplete>
}
 800cfd0:	bf00      	nop
 800cfd2:	3708      	adds	r7, #8
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b082      	sub	sp, #8
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7fc fc65 	bl	80098b6 <USBD_LL_DevConnected>
}
 800cfec:	bf00      	nop
 800cfee:	3708      	adds	r7, #8
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}

0800cff4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b082      	sub	sp, #8
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d002:	4618      	mov	r0, r3
 800d004:	f7fc fc62 	bl	80098cc <USBD_LL_DevDisconnected>
}
 800d008:	bf00      	nop
 800d00a:	3708      	adds	r7, #8
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}

0800d010 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b082      	sub	sp, #8
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	781b      	ldrb	r3, [r3, #0]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d13c      	bne.n	800d09a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d020:	4a20      	ldr	r2, [pc, #128]	; (800d0a4 <USBD_LL_Init+0x94>)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	4a1e      	ldr	r2, [pc, #120]	; (800d0a4 <USBD_LL_Init+0x94>)
 800d02c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d030:	4b1c      	ldr	r3, [pc, #112]	; (800d0a4 <USBD_LL_Init+0x94>)
 800d032:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d036:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d038:	4b1a      	ldr	r3, [pc, #104]	; (800d0a4 <USBD_LL_Init+0x94>)
 800d03a:	2204      	movs	r2, #4
 800d03c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d03e:	4b19      	ldr	r3, [pc, #100]	; (800d0a4 <USBD_LL_Init+0x94>)
 800d040:	2202      	movs	r2, #2
 800d042:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d044:	4b17      	ldr	r3, [pc, #92]	; (800d0a4 <USBD_LL_Init+0x94>)
 800d046:	2200      	movs	r2, #0
 800d048:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d04a:	4b16      	ldr	r3, [pc, #88]	; (800d0a4 <USBD_LL_Init+0x94>)
 800d04c:	2202      	movs	r2, #2
 800d04e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d050:	4b14      	ldr	r3, [pc, #80]	; (800d0a4 <USBD_LL_Init+0x94>)
 800d052:	2200      	movs	r2, #0
 800d054:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d056:	4b13      	ldr	r3, [pc, #76]	; (800d0a4 <USBD_LL_Init+0x94>)
 800d058:	2200      	movs	r2, #0
 800d05a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d05c:	4b11      	ldr	r3, [pc, #68]	; (800d0a4 <USBD_LL_Init+0x94>)
 800d05e:	2200      	movs	r2, #0
 800d060:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d062:	4b10      	ldr	r3, [pc, #64]	; (800d0a4 <USBD_LL_Init+0x94>)
 800d064:	2200      	movs	r2, #0
 800d066:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d068:	4b0e      	ldr	r3, [pc, #56]	; (800d0a4 <USBD_LL_Init+0x94>)
 800d06a:	2200      	movs	r2, #0
 800d06c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d06e:	480d      	ldr	r0, [pc, #52]	; (800d0a4 <USBD_LL_Init+0x94>)
 800d070:	f7f4 fe98 	bl	8001da4 <HAL_PCD_Init>
 800d074:	4603      	mov	r3, r0
 800d076:	2b00      	cmp	r3, #0
 800d078:	d001      	beq.n	800d07e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d07a:	f7f3 fd7b 	bl	8000b74 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d07e:	2180      	movs	r1, #128	; 0x80
 800d080:	4808      	ldr	r0, [pc, #32]	; (800d0a4 <USBD_LL_Init+0x94>)
 800d082:	f7f6 f8f0 	bl	8003266 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d086:	2240      	movs	r2, #64	; 0x40
 800d088:	2100      	movs	r1, #0
 800d08a:	4806      	ldr	r0, [pc, #24]	; (800d0a4 <USBD_LL_Init+0x94>)
 800d08c:	f7f6 f8a4 	bl	80031d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d090:	2280      	movs	r2, #128	; 0x80
 800d092:	2101      	movs	r1, #1
 800d094:	4803      	ldr	r0, [pc, #12]	; (800d0a4 <USBD_LL_Init+0x94>)
 800d096:	f7f6 f89f 	bl	80031d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d09a:	2300      	movs	r3, #0
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3708      	adds	r7, #8
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}
 800d0a4:	2000a7ec 	.word	0x2000a7ec

0800d0a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b084      	sub	sp, #16
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f7f4 ff8d 	bl	8001fde <HAL_PCD_Start>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0c8:	7bfb      	ldrb	r3, [r7, #15]
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f000 f942 	bl	800d354 <USBD_Get_USB_Status>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3710      	adds	r7, #16
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}

0800d0de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d0de:	b580      	push	{r7, lr}
 800d0e0:	b084      	sub	sp, #16
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	6078      	str	r0, [r7, #4]
 800d0e6:	4608      	mov	r0, r1
 800d0e8:	4611      	mov	r1, r2
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	70fb      	strb	r3, [r7, #3]
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	70bb      	strb	r3, [r7, #2]
 800d0f4:	4613      	mov	r3, r2
 800d0f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d106:	78bb      	ldrb	r3, [r7, #2]
 800d108:	883a      	ldrh	r2, [r7, #0]
 800d10a:	78f9      	ldrb	r1, [r7, #3]
 800d10c:	f7f5 fc5e 	bl	80029cc <HAL_PCD_EP_Open>
 800d110:	4603      	mov	r3, r0
 800d112:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d114:	7bfb      	ldrb	r3, [r7, #15]
 800d116:	4618      	mov	r0, r3
 800d118:	f000 f91c 	bl	800d354 <USBD_Get_USB_Status>
 800d11c:	4603      	mov	r3, r0
 800d11e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d120:	7bbb      	ldrb	r3, [r7, #14]
}
 800d122:	4618      	mov	r0, r3
 800d124:	3710      	adds	r7, #16
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}

0800d12a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d12a:	b580      	push	{r7, lr}
 800d12c:	b084      	sub	sp, #16
 800d12e:	af00      	add	r7, sp, #0
 800d130:	6078      	str	r0, [r7, #4]
 800d132:	460b      	mov	r3, r1
 800d134:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d136:	2300      	movs	r3, #0
 800d138:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d13a:	2300      	movs	r3, #0
 800d13c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d144:	78fa      	ldrb	r2, [r7, #3]
 800d146:	4611      	mov	r1, r2
 800d148:	4618      	mov	r0, r3
 800d14a:	f7f5 fca7 	bl	8002a9c <HAL_PCD_EP_Close>
 800d14e:	4603      	mov	r3, r0
 800d150:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d152:	7bfb      	ldrb	r3, [r7, #15]
 800d154:	4618      	mov	r0, r3
 800d156:	f000 f8fd 	bl	800d354 <USBD_Get_USB_Status>
 800d15a:	4603      	mov	r3, r0
 800d15c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d15e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d160:	4618      	mov	r0, r3
 800d162:	3710      	adds	r7, #16
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}

0800d168 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b084      	sub	sp, #16
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	460b      	mov	r3, r1
 800d172:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d174:	2300      	movs	r3, #0
 800d176:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d178:	2300      	movs	r3, #0
 800d17a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d182:	78fa      	ldrb	r2, [r7, #3]
 800d184:	4611      	mov	r1, r2
 800d186:	4618      	mov	r0, r3
 800d188:	f7f5 fd7f 	bl	8002c8a <HAL_PCD_EP_SetStall>
 800d18c:	4603      	mov	r3, r0
 800d18e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d190:	7bfb      	ldrb	r3, [r7, #15]
 800d192:	4618      	mov	r0, r3
 800d194:	f000 f8de 	bl	800d354 <USBD_Get_USB_Status>
 800d198:	4603      	mov	r3, r0
 800d19a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d19c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3710      	adds	r7, #16
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}

0800d1a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1a6:	b580      	push	{r7, lr}
 800d1a8:	b084      	sub	sp, #16
 800d1aa:	af00      	add	r7, sp, #0
 800d1ac:	6078      	str	r0, [r7, #4]
 800d1ae:	460b      	mov	r3, r1
 800d1b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d1c0:	78fa      	ldrb	r2, [r7, #3]
 800d1c2:	4611      	mov	r1, r2
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f7f5 fdc4 	bl	8002d52 <HAL_PCD_EP_ClrStall>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1ce:	7bfb      	ldrb	r3, [r7, #15]
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f000 f8bf 	bl	800d354 <USBD_Get_USB_Status>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1da:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3710      	adds	r7, #16
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}

0800d1e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b085      	sub	sp, #20
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
 800d1ec:	460b      	mov	r3, r1
 800d1ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d1f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d1f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	da0b      	bge.n	800d218 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d200:	78fb      	ldrb	r3, [r7, #3]
 800d202:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d206:	68f9      	ldr	r1, [r7, #12]
 800d208:	4613      	mov	r3, r2
 800d20a:	00db      	lsls	r3, r3, #3
 800d20c:	4413      	add	r3, r2
 800d20e:	009b      	lsls	r3, r3, #2
 800d210:	440b      	add	r3, r1
 800d212:	333e      	adds	r3, #62	; 0x3e
 800d214:	781b      	ldrb	r3, [r3, #0]
 800d216:	e00b      	b.n	800d230 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d218:	78fb      	ldrb	r3, [r7, #3]
 800d21a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d21e:	68f9      	ldr	r1, [r7, #12]
 800d220:	4613      	mov	r3, r2
 800d222:	00db      	lsls	r3, r3, #3
 800d224:	4413      	add	r3, r2
 800d226:	009b      	lsls	r3, r3, #2
 800d228:	440b      	add	r3, r1
 800d22a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d22e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d230:	4618      	mov	r0, r3
 800d232:	3714      	adds	r7, #20
 800d234:	46bd      	mov	sp, r7
 800d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23a:	4770      	bx	lr

0800d23c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b084      	sub	sp, #16
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
 800d244:	460b      	mov	r3, r1
 800d246:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d248:	2300      	movs	r3, #0
 800d24a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d24c:	2300      	movs	r3, #0
 800d24e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d256:	78fa      	ldrb	r2, [r7, #3]
 800d258:	4611      	mov	r1, r2
 800d25a:	4618      	mov	r0, r3
 800d25c:	f7f5 fb91 	bl	8002982 <HAL_PCD_SetAddress>
 800d260:	4603      	mov	r3, r0
 800d262:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d264:	7bfb      	ldrb	r3, [r7, #15]
 800d266:	4618      	mov	r0, r3
 800d268:	f000 f874 	bl	800d354 <USBD_Get_USB_Status>
 800d26c:	4603      	mov	r3, r0
 800d26e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d270:	7bbb      	ldrb	r3, [r7, #14]
}
 800d272:	4618      	mov	r0, r3
 800d274:	3710      	adds	r7, #16
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}

0800d27a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d27a:	b580      	push	{r7, lr}
 800d27c:	b086      	sub	sp, #24
 800d27e:	af00      	add	r7, sp, #0
 800d280:	60f8      	str	r0, [r7, #12]
 800d282:	607a      	str	r2, [r7, #4]
 800d284:	603b      	str	r3, [r7, #0]
 800d286:	460b      	mov	r3, r1
 800d288:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d28a:	2300      	movs	r3, #0
 800d28c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d28e:	2300      	movs	r3, #0
 800d290:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d298:	7af9      	ldrb	r1, [r7, #11]
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	687a      	ldr	r2, [r7, #4]
 800d29e:	f7f5 fcaa 	bl	8002bf6 <HAL_PCD_EP_Transmit>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2a6:	7dfb      	ldrb	r3, [r7, #23]
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f000 f853 	bl	800d354 <USBD_Get_USB_Status>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d2b2:	7dbb      	ldrb	r3, [r7, #22]
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3718      	adds	r7, #24
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}

0800d2bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b086      	sub	sp, #24
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	60f8      	str	r0, [r7, #12]
 800d2c4:	607a      	str	r2, [r7, #4]
 800d2c6:	603b      	str	r3, [r7, #0]
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d2da:	7af9      	ldrb	r1, [r7, #11]
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	687a      	ldr	r2, [r7, #4]
 800d2e0:	f7f5 fc26 	bl	8002b30 <HAL_PCD_EP_Receive>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2e8:	7dfb      	ldrb	r3, [r7, #23]
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f000 f832 	bl	800d354 <USBD_Get_USB_Status>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d2f4:	7dbb      	ldrb	r3, [r7, #22]
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3718      	adds	r7, #24
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}

0800d2fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2fe:	b580      	push	{r7, lr}
 800d300:	b082      	sub	sp, #8
 800d302:	af00      	add	r7, sp, #0
 800d304:	6078      	str	r0, [r7, #4]
 800d306:	460b      	mov	r3, r1
 800d308:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d310:	78fa      	ldrb	r2, [r7, #3]
 800d312:	4611      	mov	r1, r2
 800d314:	4618      	mov	r0, r3
 800d316:	f7f5 fc56 	bl	8002bc6 <HAL_PCD_EP_GetRxCount>
 800d31a:	4603      	mov	r3, r0
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	3708      	adds	r7, #8
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}

0800d324 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d324:	b480      	push	{r7}
 800d326:	b083      	sub	sp, #12
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d32c:	4b03      	ldr	r3, [pc, #12]	; (800d33c <USBD_static_malloc+0x18>)
}
 800d32e:	4618      	mov	r0, r3
 800d330:	370c      	adds	r7, #12
 800d332:	46bd      	mov	sp, r7
 800d334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d338:	4770      	bx	lr
 800d33a:	bf00      	nop
 800d33c:	2000acf8 	.word	0x2000acf8

0800d340 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d340:	b480      	push	{r7}
 800d342:	b083      	sub	sp, #12
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]

}
 800d348:	bf00      	nop
 800d34a:	370c      	adds	r7, #12
 800d34c:	46bd      	mov	sp, r7
 800d34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d352:	4770      	bx	lr

0800d354 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d354:	b480      	push	{r7}
 800d356:	b085      	sub	sp, #20
 800d358:	af00      	add	r7, sp, #0
 800d35a:	4603      	mov	r3, r0
 800d35c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d35e:	2300      	movs	r3, #0
 800d360:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d362:	79fb      	ldrb	r3, [r7, #7]
 800d364:	2b03      	cmp	r3, #3
 800d366:	d817      	bhi.n	800d398 <USBD_Get_USB_Status+0x44>
 800d368:	a201      	add	r2, pc, #4	; (adr r2, 800d370 <USBD_Get_USB_Status+0x1c>)
 800d36a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d36e:	bf00      	nop
 800d370:	0800d381 	.word	0x0800d381
 800d374:	0800d387 	.word	0x0800d387
 800d378:	0800d38d 	.word	0x0800d38d
 800d37c:	0800d393 	.word	0x0800d393
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d380:	2300      	movs	r3, #0
 800d382:	73fb      	strb	r3, [r7, #15]
    break;
 800d384:	e00b      	b.n	800d39e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d386:	2303      	movs	r3, #3
 800d388:	73fb      	strb	r3, [r7, #15]
    break;
 800d38a:	e008      	b.n	800d39e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d38c:	2301      	movs	r3, #1
 800d38e:	73fb      	strb	r3, [r7, #15]
    break;
 800d390:	e005      	b.n	800d39e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d392:	2303      	movs	r3, #3
 800d394:	73fb      	strb	r3, [r7, #15]
    break;
 800d396:	e002      	b.n	800d39e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d398:	2303      	movs	r3, #3
 800d39a:	73fb      	strb	r3, [r7, #15]
    break;
 800d39c:	bf00      	nop
  }
  return usb_status;
 800d39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3714      	adds	r7, #20
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3aa:	4770      	bx	lr

0800d3ac <__errno>:
 800d3ac:	4b01      	ldr	r3, [pc, #4]	; (800d3b4 <__errno+0x8>)
 800d3ae:	6818      	ldr	r0, [r3, #0]
 800d3b0:	4770      	bx	lr
 800d3b2:	bf00      	nop
 800d3b4:	20000104 	.word	0x20000104

0800d3b8 <__libc_init_array>:
 800d3b8:	b570      	push	{r4, r5, r6, lr}
 800d3ba:	4d0d      	ldr	r5, [pc, #52]	; (800d3f0 <__libc_init_array+0x38>)
 800d3bc:	4c0d      	ldr	r4, [pc, #52]	; (800d3f4 <__libc_init_array+0x3c>)
 800d3be:	1b64      	subs	r4, r4, r5
 800d3c0:	10a4      	asrs	r4, r4, #2
 800d3c2:	2600      	movs	r6, #0
 800d3c4:	42a6      	cmp	r6, r4
 800d3c6:	d109      	bne.n	800d3dc <__libc_init_array+0x24>
 800d3c8:	4d0b      	ldr	r5, [pc, #44]	; (800d3f8 <__libc_init_array+0x40>)
 800d3ca:	4c0c      	ldr	r4, [pc, #48]	; (800d3fc <__libc_init_array+0x44>)
 800d3cc:	f000 fcb2 	bl	800dd34 <_init>
 800d3d0:	1b64      	subs	r4, r4, r5
 800d3d2:	10a4      	asrs	r4, r4, #2
 800d3d4:	2600      	movs	r6, #0
 800d3d6:	42a6      	cmp	r6, r4
 800d3d8:	d105      	bne.n	800d3e6 <__libc_init_array+0x2e>
 800d3da:	bd70      	pop	{r4, r5, r6, pc}
 800d3dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3e0:	4798      	blx	r3
 800d3e2:	3601      	adds	r6, #1
 800d3e4:	e7ee      	b.n	800d3c4 <__libc_init_array+0xc>
 800d3e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3ea:	4798      	blx	r3
 800d3ec:	3601      	adds	r6, #1
 800d3ee:	e7f2      	b.n	800d3d6 <__libc_init_array+0x1e>
 800d3f0:	0800df44 	.word	0x0800df44
 800d3f4:	0800df44 	.word	0x0800df44
 800d3f8:	0800df44 	.word	0x0800df44
 800d3fc:	0800df48 	.word	0x0800df48

0800d400 <memcmp>:
 800d400:	b510      	push	{r4, lr}
 800d402:	3901      	subs	r1, #1
 800d404:	4402      	add	r2, r0
 800d406:	4290      	cmp	r0, r2
 800d408:	d101      	bne.n	800d40e <memcmp+0xe>
 800d40a:	2000      	movs	r0, #0
 800d40c:	e005      	b.n	800d41a <memcmp+0x1a>
 800d40e:	7803      	ldrb	r3, [r0, #0]
 800d410:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d414:	42a3      	cmp	r3, r4
 800d416:	d001      	beq.n	800d41c <memcmp+0x1c>
 800d418:	1b18      	subs	r0, r3, r4
 800d41a:	bd10      	pop	{r4, pc}
 800d41c:	3001      	adds	r0, #1
 800d41e:	e7f2      	b.n	800d406 <memcmp+0x6>

0800d420 <memcpy>:
 800d420:	440a      	add	r2, r1
 800d422:	4291      	cmp	r1, r2
 800d424:	f100 33ff 	add.w	r3, r0, #4294967295
 800d428:	d100      	bne.n	800d42c <memcpy+0xc>
 800d42a:	4770      	bx	lr
 800d42c:	b510      	push	{r4, lr}
 800d42e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d432:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d436:	4291      	cmp	r1, r2
 800d438:	d1f9      	bne.n	800d42e <memcpy+0xe>
 800d43a:	bd10      	pop	{r4, pc}

0800d43c <memset>:
 800d43c:	4402      	add	r2, r0
 800d43e:	4603      	mov	r3, r0
 800d440:	4293      	cmp	r3, r2
 800d442:	d100      	bne.n	800d446 <memset+0xa>
 800d444:	4770      	bx	lr
 800d446:	f803 1b01 	strb.w	r1, [r3], #1
 800d44a:	e7f9      	b.n	800d440 <memset+0x4>

0800d44c <sniprintf>:
 800d44c:	b40c      	push	{r2, r3}
 800d44e:	b530      	push	{r4, r5, lr}
 800d450:	4b17      	ldr	r3, [pc, #92]	; (800d4b0 <sniprintf+0x64>)
 800d452:	1e0c      	subs	r4, r1, #0
 800d454:	681d      	ldr	r5, [r3, #0]
 800d456:	b09d      	sub	sp, #116	; 0x74
 800d458:	da08      	bge.n	800d46c <sniprintf+0x20>
 800d45a:	238b      	movs	r3, #139	; 0x8b
 800d45c:	602b      	str	r3, [r5, #0]
 800d45e:	f04f 30ff 	mov.w	r0, #4294967295
 800d462:	b01d      	add	sp, #116	; 0x74
 800d464:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d468:	b002      	add	sp, #8
 800d46a:	4770      	bx	lr
 800d46c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d470:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d474:	bf14      	ite	ne
 800d476:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d47a:	4623      	moveq	r3, r4
 800d47c:	9304      	str	r3, [sp, #16]
 800d47e:	9307      	str	r3, [sp, #28]
 800d480:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d484:	9002      	str	r0, [sp, #8]
 800d486:	9006      	str	r0, [sp, #24]
 800d488:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d48c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d48e:	ab21      	add	r3, sp, #132	; 0x84
 800d490:	a902      	add	r1, sp, #8
 800d492:	4628      	mov	r0, r5
 800d494:	9301      	str	r3, [sp, #4]
 800d496:	f000 f869 	bl	800d56c <_svfiprintf_r>
 800d49a:	1c43      	adds	r3, r0, #1
 800d49c:	bfbc      	itt	lt
 800d49e:	238b      	movlt	r3, #139	; 0x8b
 800d4a0:	602b      	strlt	r3, [r5, #0]
 800d4a2:	2c00      	cmp	r4, #0
 800d4a4:	d0dd      	beq.n	800d462 <sniprintf+0x16>
 800d4a6:	9b02      	ldr	r3, [sp, #8]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	701a      	strb	r2, [r3, #0]
 800d4ac:	e7d9      	b.n	800d462 <sniprintf+0x16>
 800d4ae:	bf00      	nop
 800d4b0:	20000104 	.word	0x20000104

0800d4b4 <__ssputs_r>:
 800d4b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4b8:	688e      	ldr	r6, [r1, #8]
 800d4ba:	429e      	cmp	r6, r3
 800d4bc:	4682      	mov	sl, r0
 800d4be:	460c      	mov	r4, r1
 800d4c0:	4690      	mov	r8, r2
 800d4c2:	461f      	mov	r7, r3
 800d4c4:	d838      	bhi.n	800d538 <__ssputs_r+0x84>
 800d4c6:	898a      	ldrh	r2, [r1, #12]
 800d4c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d4cc:	d032      	beq.n	800d534 <__ssputs_r+0x80>
 800d4ce:	6825      	ldr	r5, [r4, #0]
 800d4d0:	6909      	ldr	r1, [r1, #16]
 800d4d2:	eba5 0901 	sub.w	r9, r5, r1
 800d4d6:	6965      	ldr	r5, [r4, #20]
 800d4d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d4dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	444b      	add	r3, r9
 800d4e4:	106d      	asrs	r5, r5, #1
 800d4e6:	429d      	cmp	r5, r3
 800d4e8:	bf38      	it	cc
 800d4ea:	461d      	movcc	r5, r3
 800d4ec:	0553      	lsls	r3, r2, #21
 800d4ee:	d531      	bpl.n	800d554 <__ssputs_r+0xa0>
 800d4f0:	4629      	mov	r1, r5
 800d4f2:	f000 fb55 	bl	800dba0 <_malloc_r>
 800d4f6:	4606      	mov	r6, r0
 800d4f8:	b950      	cbnz	r0, 800d510 <__ssputs_r+0x5c>
 800d4fa:	230c      	movs	r3, #12
 800d4fc:	f8ca 3000 	str.w	r3, [sl]
 800d500:	89a3      	ldrh	r3, [r4, #12]
 800d502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d506:	81a3      	strh	r3, [r4, #12]
 800d508:	f04f 30ff 	mov.w	r0, #4294967295
 800d50c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d510:	6921      	ldr	r1, [r4, #16]
 800d512:	464a      	mov	r2, r9
 800d514:	f7ff ff84 	bl	800d420 <memcpy>
 800d518:	89a3      	ldrh	r3, [r4, #12]
 800d51a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d51e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d522:	81a3      	strh	r3, [r4, #12]
 800d524:	6126      	str	r6, [r4, #16]
 800d526:	6165      	str	r5, [r4, #20]
 800d528:	444e      	add	r6, r9
 800d52a:	eba5 0509 	sub.w	r5, r5, r9
 800d52e:	6026      	str	r6, [r4, #0]
 800d530:	60a5      	str	r5, [r4, #8]
 800d532:	463e      	mov	r6, r7
 800d534:	42be      	cmp	r6, r7
 800d536:	d900      	bls.n	800d53a <__ssputs_r+0x86>
 800d538:	463e      	mov	r6, r7
 800d53a:	6820      	ldr	r0, [r4, #0]
 800d53c:	4632      	mov	r2, r6
 800d53e:	4641      	mov	r1, r8
 800d540:	f000 faa8 	bl	800da94 <memmove>
 800d544:	68a3      	ldr	r3, [r4, #8]
 800d546:	1b9b      	subs	r3, r3, r6
 800d548:	60a3      	str	r3, [r4, #8]
 800d54a:	6823      	ldr	r3, [r4, #0]
 800d54c:	4433      	add	r3, r6
 800d54e:	6023      	str	r3, [r4, #0]
 800d550:	2000      	movs	r0, #0
 800d552:	e7db      	b.n	800d50c <__ssputs_r+0x58>
 800d554:	462a      	mov	r2, r5
 800d556:	f000 fb97 	bl	800dc88 <_realloc_r>
 800d55a:	4606      	mov	r6, r0
 800d55c:	2800      	cmp	r0, #0
 800d55e:	d1e1      	bne.n	800d524 <__ssputs_r+0x70>
 800d560:	6921      	ldr	r1, [r4, #16]
 800d562:	4650      	mov	r0, sl
 800d564:	f000 fab0 	bl	800dac8 <_free_r>
 800d568:	e7c7      	b.n	800d4fa <__ssputs_r+0x46>
	...

0800d56c <_svfiprintf_r>:
 800d56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d570:	4698      	mov	r8, r3
 800d572:	898b      	ldrh	r3, [r1, #12]
 800d574:	061b      	lsls	r3, r3, #24
 800d576:	b09d      	sub	sp, #116	; 0x74
 800d578:	4607      	mov	r7, r0
 800d57a:	460d      	mov	r5, r1
 800d57c:	4614      	mov	r4, r2
 800d57e:	d50e      	bpl.n	800d59e <_svfiprintf_r+0x32>
 800d580:	690b      	ldr	r3, [r1, #16]
 800d582:	b963      	cbnz	r3, 800d59e <_svfiprintf_r+0x32>
 800d584:	2140      	movs	r1, #64	; 0x40
 800d586:	f000 fb0b 	bl	800dba0 <_malloc_r>
 800d58a:	6028      	str	r0, [r5, #0]
 800d58c:	6128      	str	r0, [r5, #16]
 800d58e:	b920      	cbnz	r0, 800d59a <_svfiprintf_r+0x2e>
 800d590:	230c      	movs	r3, #12
 800d592:	603b      	str	r3, [r7, #0]
 800d594:	f04f 30ff 	mov.w	r0, #4294967295
 800d598:	e0d1      	b.n	800d73e <_svfiprintf_r+0x1d2>
 800d59a:	2340      	movs	r3, #64	; 0x40
 800d59c:	616b      	str	r3, [r5, #20]
 800d59e:	2300      	movs	r3, #0
 800d5a0:	9309      	str	r3, [sp, #36]	; 0x24
 800d5a2:	2320      	movs	r3, #32
 800d5a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d5a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5ac:	2330      	movs	r3, #48	; 0x30
 800d5ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d758 <_svfiprintf_r+0x1ec>
 800d5b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d5b6:	f04f 0901 	mov.w	r9, #1
 800d5ba:	4623      	mov	r3, r4
 800d5bc:	469a      	mov	sl, r3
 800d5be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5c2:	b10a      	cbz	r2, 800d5c8 <_svfiprintf_r+0x5c>
 800d5c4:	2a25      	cmp	r2, #37	; 0x25
 800d5c6:	d1f9      	bne.n	800d5bc <_svfiprintf_r+0x50>
 800d5c8:	ebba 0b04 	subs.w	fp, sl, r4
 800d5cc:	d00b      	beq.n	800d5e6 <_svfiprintf_r+0x7a>
 800d5ce:	465b      	mov	r3, fp
 800d5d0:	4622      	mov	r2, r4
 800d5d2:	4629      	mov	r1, r5
 800d5d4:	4638      	mov	r0, r7
 800d5d6:	f7ff ff6d 	bl	800d4b4 <__ssputs_r>
 800d5da:	3001      	adds	r0, #1
 800d5dc:	f000 80aa 	beq.w	800d734 <_svfiprintf_r+0x1c8>
 800d5e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5e2:	445a      	add	r2, fp
 800d5e4:	9209      	str	r2, [sp, #36]	; 0x24
 800d5e6:	f89a 3000 	ldrb.w	r3, [sl]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	f000 80a2 	beq.w	800d734 <_svfiprintf_r+0x1c8>
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	f04f 32ff 	mov.w	r2, #4294967295
 800d5f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5fa:	f10a 0a01 	add.w	sl, sl, #1
 800d5fe:	9304      	str	r3, [sp, #16]
 800d600:	9307      	str	r3, [sp, #28]
 800d602:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d606:	931a      	str	r3, [sp, #104]	; 0x68
 800d608:	4654      	mov	r4, sl
 800d60a:	2205      	movs	r2, #5
 800d60c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d610:	4851      	ldr	r0, [pc, #324]	; (800d758 <_svfiprintf_r+0x1ec>)
 800d612:	f7f2 fe35 	bl	8000280 <memchr>
 800d616:	9a04      	ldr	r2, [sp, #16]
 800d618:	b9d8      	cbnz	r0, 800d652 <_svfiprintf_r+0xe6>
 800d61a:	06d0      	lsls	r0, r2, #27
 800d61c:	bf44      	itt	mi
 800d61e:	2320      	movmi	r3, #32
 800d620:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d624:	0711      	lsls	r1, r2, #28
 800d626:	bf44      	itt	mi
 800d628:	232b      	movmi	r3, #43	; 0x2b
 800d62a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d62e:	f89a 3000 	ldrb.w	r3, [sl]
 800d632:	2b2a      	cmp	r3, #42	; 0x2a
 800d634:	d015      	beq.n	800d662 <_svfiprintf_r+0xf6>
 800d636:	9a07      	ldr	r2, [sp, #28]
 800d638:	4654      	mov	r4, sl
 800d63a:	2000      	movs	r0, #0
 800d63c:	f04f 0c0a 	mov.w	ip, #10
 800d640:	4621      	mov	r1, r4
 800d642:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d646:	3b30      	subs	r3, #48	; 0x30
 800d648:	2b09      	cmp	r3, #9
 800d64a:	d94e      	bls.n	800d6ea <_svfiprintf_r+0x17e>
 800d64c:	b1b0      	cbz	r0, 800d67c <_svfiprintf_r+0x110>
 800d64e:	9207      	str	r2, [sp, #28]
 800d650:	e014      	b.n	800d67c <_svfiprintf_r+0x110>
 800d652:	eba0 0308 	sub.w	r3, r0, r8
 800d656:	fa09 f303 	lsl.w	r3, r9, r3
 800d65a:	4313      	orrs	r3, r2
 800d65c:	9304      	str	r3, [sp, #16]
 800d65e:	46a2      	mov	sl, r4
 800d660:	e7d2      	b.n	800d608 <_svfiprintf_r+0x9c>
 800d662:	9b03      	ldr	r3, [sp, #12]
 800d664:	1d19      	adds	r1, r3, #4
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	9103      	str	r1, [sp, #12]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	bfbb      	ittet	lt
 800d66e:	425b      	neglt	r3, r3
 800d670:	f042 0202 	orrlt.w	r2, r2, #2
 800d674:	9307      	strge	r3, [sp, #28]
 800d676:	9307      	strlt	r3, [sp, #28]
 800d678:	bfb8      	it	lt
 800d67a:	9204      	strlt	r2, [sp, #16]
 800d67c:	7823      	ldrb	r3, [r4, #0]
 800d67e:	2b2e      	cmp	r3, #46	; 0x2e
 800d680:	d10c      	bne.n	800d69c <_svfiprintf_r+0x130>
 800d682:	7863      	ldrb	r3, [r4, #1]
 800d684:	2b2a      	cmp	r3, #42	; 0x2a
 800d686:	d135      	bne.n	800d6f4 <_svfiprintf_r+0x188>
 800d688:	9b03      	ldr	r3, [sp, #12]
 800d68a:	1d1a      	adds	r2, r3, #4
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	9203      	str	r2, [sp, #12]
 800d690:	2b00      	cmp	r3, #0
 800d692:	bfb8      	it	lt
 800d694:	f04f 33ff 	movlt.w	r3, #4294967295
 800d698:	3402      	adds	r4, #2
 800d69a:	9305      	str	r3, [sp, #20]
 800d69c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d768 <_svfiprintf_r+0x1fc>
 800d6a0:	7821      	ldrb	r1, [r4, #0]
 800d6a2:	2203      	movs	r2, #3
 800d6a4:	4650      	mov	r0, sl
 800d6a6:	f7f2 fdeb 	bl	8000280 <memchr>
 800d6aa:	b140      	cbz	r0, 800d6be <_svfiprintf_r+0x152>
 800d6ac:	2340      	movs	r3, #64	; 0x40
 800d6ae:	eba0 000a 	sub.w	r0, r0, sl
 800d6b2:	fa03 f000 	lsl.w	r0, r3, r0
 800d6b6:	9b04      	ldr	r3, [sp, #16]
 800d6b8:	4303      	orrs	r3, r0
 800d6ba:	3401      	adds	r4, #1
 800d6bc:	9304      	str	r3, [sp, #16]
 800d6be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6c2:	4826      	ldr	r0, [pc, #152]	; (800d75c <_svfiprintf_r+0x1f0>)
 800d6c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d6c8:	2206      	movs	r2, #6
 800d6ca:	f7f2 fdd9 	bl	8000280 <memchr>
 800d6ce:	2800      	cmp	r0, #0
 800d6d0:	d038      	beq.n	800d744 <_svfiprintf_r+0x1d8>
 800d6d2:	4b23      	ldr	r3, [pc, #140]	; (800d760 <_svfiprintf_r+0x1f4>)
 800d6d4:	bb1b      	cbnz	r3, 800d71e <_svfiprintf_r+0x1b2>
 800d6d6:	9b03      	ldr	r3, [sp, #12]
 800d6d8:	3307      	adds	r3, #7
 800d6da:	f023 0307 	bic.w	r3, r3, #7
 800d6de:	3308      	adds	r3, #8
 800d6e0:	9303      	str	r3, [sp, #12]
 800d6e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6e4:	4433      	add	r3, r6
 800d6e6:	9309      	str	r3, [sp, #36]	; 0x24
 800d6e8:	e767      	b.n	800d5ba <_svfiprintf_r+0x4e>
 800d6ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6ee:	460c      	mov	r4, r1
 800d6f0:	2001      	movs	r0, #1
 800d6f2:	e7a5      	b.n	800d640 <_svfiprintf_r+0xd4>
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	3401      	adds	r4, #1
 800d6f8:	9305      	str	r3, [sp, #20]
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	f04f 0c0a 	mov.w	ip, #10
 800d700:	4620      	mov	r0, r4
 800d702:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d706:	3a30      	subs	r2, #48	; 0x30
 800d708:	2a09      	cmp	r2, #9
 800d70a:	d903      	bls.n	800d714 <_svfiprintf_r+0x1a8>
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d0c5      	beq.n	800d69c <_svfiprintf_r+0x130>
 800d710:	9105      	str	r1, [sp, #20]
 800d712:	e7c3      	b.n	800d69c <_svfiprintf_r+0x130>
 800d714:	fb0c 2101 	mla	r1, ip, r1, r2
 800d718:	4604      	mov	r4, r0
 800d71a:	2301      	movs	r3, #1
 800d71c:	e7f0      	b.n	800d700 <_svfiprintf_r+0x194>
 800d71e:	ab03      	add	r3, sp, #12
 800d720:	9300      	str	r3, [sp, #0]
 800d722:	462a      	mov	r2, r5
 800d724:	4b0f      	ldr	r3, [pc, #60]	; (800d764 <_svfiprintf_r+0x1f8>)
 800d726:	a904      	add	r1, sp, #16
 800d728:	4638      	mov	r0, r7
 800d72a:	f3af 8000 	nop.w
 800d72e:	1c42      	adds	r2, r0, #1
 800d730:	4606      	mov	r6, r0
 800d732:	d1d6      	bne.n	800d6e2 <_svfiprintf_r+0x176>
 800d734:	89ab      	ldrh	r3, [r5, #12]
 800d736:	065b      	lsls	r3, r3, #25
 800d738:	f53f af2c 	bmi.w	800d594 <_svfiprintf_r+0x28>
 800d73c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d73e:	b01d      	add	sp, #116	; 0x74
 800d740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d744:	ab03      	add	r3, sp, #12
 800d746:	9300      	str	r3, [sp, #0]
 800d748:	462a      	mov	r2, r5
 800d74a:	4b06      	ldr	r3, [pc, #24]	; (800d764 <_svfiprintf_r+0x1f8>)
 800d74c:	a904      	add	r1, sp, #16
 800d74e:	4638      	mov	r0, r7
 800d750:	f000 f87a 	bl	800d848 <_printf_i>
 800d754:	e7eb      	b.n	800d72e <_svfiprintf_r+0x1c2>
 800d756:	bf00      	nop
 800d758:	0800df08 	.word	0x0800df08
 800d75c:	0800df12 	.word	0x0800df12
 800d760:	00000000 	.word	0x00000000
 800d764:	0800d4b5 	.word	0x0800d4b5
 800d768:	0800df0e 	.word	0x0800df0e

0800d76c <_printf_common>:
 800d76c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d770:	4616      	mov	r6, r2
 800d772:	4699      	mov	r9, r3
 800d774:	688a      	ldr	r2, [r1, #8]
 800d776:	690b      	ldr	r3, [r1, #16]
 800d778:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d77c:	4293      	cmp	r3, r2
 800d77e:	bfb8      	it	lt
 800d780:	4613      	movlt	r3, r2
 800d782:	6033      	str	r3, [r6, #0]
 800d784:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d788:	4607      	mov	r7, r0
 800d78a:	460c      	mov	r4, r1
 800d78c:	b10a      	cbz	r2, 800d792 <_printf_common+0x26>
 800d78e:	3301      	adds	r3, #1
 800d790:	6033      	str	r3, [r6, #0]
 800d792:	6823      	ldr	r3, [r4, #0]
 800d794:	0699      	lsls	r1, r3, #26
 800d796:	bf42      	ittt	mi
 800d798:	6833      	ldrmi	r3, [r6, #0]
 800d79a:	3302      	addmi	r3, #2
 800d79c:	6033      	strmi	r3, [r6, #0]
 800d79e:	6825      	ldr	r5, [r4, #0]
 800d7a0:	f015 0506 	ands.w	r5, r5, #6
 800d7a4:	d106      	bne.n	800d7b4 <_printf_common+0x48>
 800d7a6:	f104 0a19 	add.w	sl, r4, #25
 800d7aa:	68e3      	ldr	r3, [r4, #12]
 800d7ac:	6832      	ldr	r2, [r6, #0]
 800d7ae:	1a9b      	subs	r3, r3, r2
 800d7b0:	42ab      	cmp	r3, r5
 800d7b2:	dc26      	bgt.n	800d802 <_printf_common+0x96>
 800d7b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d7b8:	1e13      	subs	r3, r2, #0
 800d7ba:	6822      	ldr	r2, [r4, #0]
 800d7bc:	bf18      	it	ne
 800d7be:	2301      	movne	r3, #1
 800d7c0:	0692      	lsls	r2, r2, #26
 800d7c2:	d42b      	bmi.n	800d81c <_printf_common+0xb0>
 800d7c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d7c8:	4649      	mov	r1, r9
 800d7ca:	4638      	mov	r0, r7
 800d7cc:	47c0      	blx	r8
 800d7ce:	3001      	adds	r0, #1
 800d7d0:	d01e      	beq.n	800d810 <_printf_common+0xa4>
 800d7d2:	6823      	ldr	r3, [r4, #0]
 800d7d4:	68e5      	ldr	r5, [r4, #12]
 800d7d6:	6832      	ldr	r2, [r6, #0]
 800d7d8:	f003 0306 	and.w	r3, r3, #6
 800d7dc:	2b04      	cmp	r3, #4
 800d7de:	bf08      	it	eq
 800d7e0:	1aad      	subeq	r5, r5, r2
 800d7e2:	68a3      	ldr	r3, [r4, #8]
 800d7e4:	6922      	ldr	r2, [r4, #16]
 800d7e6:	bf0c      	ite	eq
 800d7e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d7ec:	2500      	movne	r5, #0
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	bfc4      	itt	gt
 800d7f2:	1a9b      	subgt	r3, r3, r2
 800d7f4:	18ed      	addgt	r5, r5, r3
 800d7f6:	2600      	movs	r6, #0
 800d7f8:	341a      	adds	r4, #26
 800d7fa:	42b5      	cmp	r5, r6
 800d7fc:	d11a      	bne.n	800d834 <_printf_common+0xc8>
 800d7fe:	2000      	movs	r0, #0
 800d800:	e008      	b.n	800d814 <_printf_common+0xa8>
 800d802:	2301      	movs	r3, #1
 800d804:	4652      	mov	r2, sl
 800d806:	4649      	mov	r1, r9
 800d808:	4638      	mov	r0, r7
 800d80a:	47c0      	blx	r8
 800d80c:	3001      	adds	r0, #1
 800d80e:	d103      	bne.n	800d818 <_printf_common+0xac>
 800d810:	f04f 30ff 	mov.w	r0, #4294967295
 800d814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d818:	3501      	adds	r5, #1
 800d81a:	e7c6      	b.n	800d7aa <_printf_common+0x3e>
 800d81c:	18e1      	adds	r1, r4, r3
 800d81e:	1c5a      	adds	r2, r3, #1
 800d820:	2030      	movs	r0, #48	; 0x30
 800d822:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d826:	4422      	add	r2, r4
 800d828:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d82c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d830:	3302      	adds	r3, #2
 800d832:	e7c7      	b.n	800d7c4 <_printf_common+0x58>
 800d834:	2301      	movs	r3, #1
 800d836:	4622      	mov	r2, r4
 800d838:	4649      	mov	r1, r9
 800d83a:	4638      	mov	r0, r7
 800d83c:	47c0      	blx	r8
 800d83e:	3001      	adds	r0, #1
 800d840:	d0e6      	beq.n	800d810 <_printf_common+0xa4>
 800d842:	3601      	adds	r6, #1
 800d844:	e7d9      	b.n	800d7fa <_printf_common+0x8e>
	...

0800d848 <_printf_i>:
 800d848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d84c:	7e0f      	ldrb	r7, [r1, #24]
 800d84e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d850:	2f78      	cmp	r7, #120	; 0x78
 800d852:	4691      	mov	r9, r2
 800d854:	4680      	mov	r8, r0
 800d856:	460c      	mov	r4, r1
 800d858:	469a      	mov	sl, r3
 800d85a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d85e:	d807      	bhi.n	800d870 <_printf_i+0x28>
 800d860:	2f62      	cmp	r7, #98	; 0x62
 800d862:	d80a      	bhi.n	800d87a <_printf_i+0x32>
 800d864:	2f00      	cmp	r7, #0
 800d866:	f000 80d8 	beq.w	800da1a <_printf_i+0x1d2>
 800d86a:	2f58      	cmp	r7, #88	; 0x58
 800d86c:	f000 80a3 	beq.w	800d9b6 <_printf_i+0x16e>
 800d870:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d874:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d878:	e03a      	b.n	800d8f0 <_printf_i+0xa8>
 800d87a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d87e:	2b15      	cmp	r3, #21
 800d880:	d8f6      	bhi.n	800d870 <_printf_i+0x28>
 800d882:	a101      	add	r1, pc, #4	; (adr r1, 800d888 <_printf_i+0x40>)
 800d884:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d888:	0800d8e1 	.word	0x0800d8e1
 800d88c:	0800d8f5 	.word	0x0800d8f5
 800d890:	0800d871 	.word	0x0800d871
 800d894:	0800d871 	.word	0x0800d871
 800d898:	0800d871 	.word	0x0800d871
 800d89c:	0800d871 	.word	0x0800d871
 800d8a0:	0800d8f5 	.word	0x0800d8f5
 800d8a4:	0800d871 	.word	0x0800d871
 800d8a8:	0800d871 	.word	0x0800d871
 800d8ac:	0800d871 	.word	0x0800d871
 800d8b0:	0800d871 	.word	0x0800d871
 800d8b4:	0800da01 	.word	0x0800da01
 800d8b8:	0800d925 	.word	0x0800d925
 800d8bc:	0800d9e3 	.word	0x0800d9e3
 800d8c0:	0800d871 	.word	0x0800d871
 800d8c4:	0800d871 	.word	0x0800d871
 800d8c8:	0800da23 	.word	0x0800da23
 800d8cc:	0800d871 	.word	0x0800d871
 800d8d0:	0800d925 	.word	0x0800d925
 800d8d4:	0800d871 	.word	0x0800d871
 800d8d8:	0800d871 	.word	0x0800d871
 800d8dc:	0800d9eb 	.word	0x0800d9eb
 800d8e0:	682b      	ldr	r3, [r5, #0]
 800d8e2:	1d1a      	adds	r2, r3, #4
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	602a      	str	r2, [r5, #0]
 800d8e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d8ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	e0a3      	b.n	800da3c <_printf_i+0x1f4>
 800d8f4:	6820      	ldr	r0, [r4, #0]
 800d8f6:	6829      	ldr	r1, [r5, #0]
 800d8f8:	0606      	lsls	r6, r0, #24
 800d8fa:	f101 0304 	add.w	r3, r1, #4
 800d8fe:	d50a      	bpl.n	800d916 <_printf_i+0xce>
 800d900:	680e      	ldr	r6, [r1, #0]
 800d902:	602b      	str	r3, [r5, #0]
 800d904:	2e00      	cmp	r6, #0
 800d906:	da03      	bge.n	800d910 <_printf_i+0xc8>
 800d908:	232d      	movs	r3, #45	; 0x2d
 800d90a:	4276      	negs	r6, r6
 800d90c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d910:	485e      	ldr	r0, [pc, #376]	; (800da8c <_printf_i+0x244>)
 800d912:	230a      	movs	r3, #10
 800d914:	e019      	b.n	800d94a <_printf_i+0x102>
 800d916:	680e      	ldr	r6, [r1, #0]
 800d918:	602b      	str	r3, [r5, #0]
 800d91a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d91e:	bf18      	it	ne
 800d920:	b236      	sxthne	r6, r6
 800d922:	e7ef      	b.n	800d904 <_printf_i+0xbc>
 800d924:	682b      	ldr	r3, [r5, #0]
 800d926:	6820      	ldr	r0, [r4, #0]
 800d928:	1d19      	adds	r1, r3, #4
 800d92a:	6029      	str	r1, [r5, #0]
 800d92c:	0601      	lsls	r1, r0, #24
 800d92e:	d501      	bpl.n	800d934 <_printf_i+0xec>
 800d930:	681e      	ldr	r6, [r3, #0]
 800d932:	e002      	b.n	800d93a <_printf_i+0xf2>
 800d934:	0646      	lsls	r6, r0, #25
 800d936:	d5fb      	bpl.n	800d930 <_printf_i+0xe8>
 800d938:	881e      	ldrh	r6, [r3, #0]
 800d93a:	4854      	ldr	r0, [pc, #336]	; (800da8c <_printf_i+0x244>)
 800d93c:	2f6f      	cmp	r7, #111	; 0x6f
 800d93e:	bf0c      	ite	eq
 800d940:	2308      	moveq	r3, #8
 800d942:	230a      	movne	r3, #10
 800d944:	2100      	movs	r1, #0
 800d946:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d94a:	6865      	ldr	r5, [r4, #4]
 800d94c:	60a5      	str	r5, [r4, #8]
 800d94e:	2d00      	cmp	r5, #0
 800d950:	bfa2      	ittt	ge
 800d952:	6821      	ldrge	r1, [r4, #0]
 800d954:	f021 0104 	bicge.w	r1, r1, #4
 800d958:	6021      	strge	r1, [r4, #0]
 800d95a:	b90e      	cbnz	r6, 800d960 <_printf_i+0x118>
 800d95c:	2d00      	cmp	r5, #0
 800d95e:	d04d      	beq.n	800d9fc <_printf_i+0x1b4>
 800d960:	4615      	mov	r5, r2
 800d962:	fbb6 f1f3 	udiv	r1, r6, r3
 800d966:	fb03 6711 	mls	r7, r3, r1, r6
 800d96a:	5dc7      	ldrb	r7, [r0, r7]
 800d96c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d970:	4637      	mov	r7, r6
 800d972:	42bb      	cmp	r3, r7
 800d974:	460e      	mov	r6, r1
 800d976:	d9f4      	bls.n	800d962 <_printf_i+0x11a>
 800d978:	2b08      	cmp	r3, #8
 800d97a:	d10b      	bne.n	800d994 <_printf_i+0x14c>
 800d97c:	6823      	ldr	r3, [r4, #0]
 800d97e:	07de      	lsls	r6, r3, #31
 800d980:	d508      	bpl.n	800d994 <_printf_i+0x14c>
 800d982:	6923      	ldr	r3, [r4, #16]
 800d984:	6861      	ldr	r1, [r4, #4]
 800d986:	4299      	cmp	r1, r3
 800d988:	bfde      	ittt	le
 800d98a:	2330      	movle	r3, #48	; 0x30
 800d98c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d990:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d994:	1b52      	subs	r2, r2, r5
 800d996:	6122      	str	r2, [r4, #16]
 800d998:	f8cd a000 	str.w	sl, [sp]
 800d99c:	464b      	mov	r3, r9
 800d99e:	aa03      	add	r2, sp, #12
 800d9a0:	4621      	mov	r1, r4
 800d9a2:	4640      	mov	r0, r8
 800d9a4:	f7ff fee2 	bl	800d76c <_printf_common>
 800d9a8:	3001      	adds	r0, #1
 800d9aa:	d14c      	bne.n	800da46 <_printf_i+0x1fe>
 800d9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d9b0:	b004      	add	sp, #16
 800d9b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9b6:	4835      	ldr	r0, [pc, #212]	; (800da8c <_printf_i+0x244>)
 800d9b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d9bc:	6829      	ldr	r1, [r5, #0]
 800d9be:	6823      	ldr	r3, [r4, #0]
 800d9c0:	f851 6b04 	ldr.w	r6, [r1], #4
 800d9c4:	6029      	str	r1, [r5, #0]
 800d9c6:	061d      	lsls	r5, r3, #24
 800d9c8:	d514      	bpl.n	800d9f4 <_printf_i+0x1ac>
 800d9ca:	07df      	lsls	r7, r3, #31
 800d9cc:	bf44      	itt	mi
 800d9ce:	f043 0320 	orrmi.w	r3, r3, #32
 800d9d2:	6023      	strmi	r3, [r4, #0]
 800d9d4:	b91e      	cbnz	r6, 800d9de <_printf_i+0x196>
 800d9d6:	6823      	ldr	r3, [r4, #0]
 800d9d8:	f023 0320 	bic.w	r3, r3, #32
 800d9dc:	6023      	str	r3, [r4, #0]
 800d9de:	2310      	movs	r3, #16
 800d9e0:	e7b0      	b.n	800d944 <_printf_i+0xfc>
 800d9e2:	6823      	ldr	r3, [r4, #0]
 800d9e4:	f043 0320 	orr.w	r3, r3, #32
 800d9e8:	6023      	str	r3, [r4, #0]
 800d9ea:	2378      	movs	r3, #120	; 0x78
 800d9ec:	4828      	ldr	r0, [pc, #160]	; (800da90 <_printf_i+0x248>)
 800d9ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d9f2:	e7e3      	b.n	800d9bc <_printf_i+0x174>
 800d9f4:	0659      	lsls	r1, r3, #25
 800d9f6:	bf48      	it	mi
 800d9f8:	b2b6      	uxthmi	r6, r6
 800d9fa:	e7e6      	b.n	800d9ca <_printf_i+0x182>
 800d9fc:	4615      	mov	r5, r2
 800d9fe:	e7bb      	b.n	800d978 <_printf_i+0x130>
 800da00:	682b      	ldr	r3, [r5, #0]
 800da02:	6826      	ldr	r6, [r4, #0]
 800da04:	6961      	ldr	r1, [r4, #20]
 800da06:	1d18      	adds	r0, r3, #4
 800da08:	6028      	str	r0, [r5, #0]
 800da0a:	0635      	lsls	r5, r6, #24
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	d501      	bpl.n	800da14 <_printf_i+0x1cc>
 800da10:	6019      	str	r1, [r3, #0]
 800da12:	e002      	b.n	800da1a <_printf_i+0x1d2>
 800da14:	0670      	lsls	r0, r6, #25
 800da16:	d5fb      	bpl.n	800da10 <_printf_i+0x1c8>
 800da18:	8019      	strh	r1, [r3, #0]
 800da1a:	2300      	movs	r3, #0
 800da1c:	6123      	str	r3, [r4, #16]
 800da1e:	4615      	mov	r5, r2
 800da20:	e7ba      	b.n	800d998 <_printf_i+0x150>
 800da22:	682b      	ldr	r3, [r5, #0]
 800da24:	1d1a      	adds	r2, r3, #4
 800da26:	602a      	str	r2, [r5, #0]
 800da28:	681d      	ldr	r5, [r3, #0]
 800da2a:	6862      	ldr	r2, [r4, #4]
 800da2c:	2100      	movs	r1, #0
 800da2e:	4628      	mov	r0, r5
 800da30:	f7f2 fc26 	bl	8000280 <memchr>
 800da34:	b108      	cbz	r0, 800da3a <_printf_i+0x1f2>
 800da36:	1b40      	subs	r0, r0, r5
 800da38:	6060      	str	r0, [r4, #4]
 800da3a:	6863      	ldr	r3, [r4, #4]
 800da3c:	6123      	str	r3, [r4, #16]
 800da3e:	2300      	movs	r3, #0
 800da40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da44:	e7a8      	b.n	800d998 <_printf_i+0x150>
 800da46:	6923      	ldr	r3, [r4, #16]
 800da48:	462a      	mov	r2, r5
 800da4a:	4649      	mov	r1, r9
 800da4c:	4640      	mov	r0, r8
 800da4e:	47d0      	blx	sl
 800da50:	3001      	adds	r0, #1
 800da52:	d0ab      	beq.n	800d9ac <_printf_i+0x164>
 800da54:	6823      	ldr	r3, [r4, #0]
 800da56:	079b      	lsls	r3, r3, #30
 800da58:	d413      	bmi.n	800da82 <_printf_i+0x23a>
 800da5a:	68e0      	ldr	r0, [r4, #12]
 800da5c:	9b03      	ldr	r3, [sp, #12]
 800da5e:	4298      	cmp	r0, r3
 800da60:	bfb8      	it	lt
 800da62:	4618      	movlt	r0, r3
 800da64:	e7a4      	b.n	800d9b0 <_printf_i+0x168>
 800da66:	2301      	movs	r3, #1
 800da68:	4632      	mov	r2, r6
 800da6a:	4649      	mov	r1, r9
 800da6c:	4640      	mov	r0, r8
 800da6e:	47d0      	blx	sl
 800da70:	3001      	adds	r0, #1
 800da72:	d09b      	beq.n	800d9ac <_printf_i+0x164>
 800da74:	3501      	adds	r5, #1
 800da76:	68e3      	ldr	r3, [r4, #12]
 800da78:	9903      	ldr	r1, [sp, #12]
 800da7a:	1a5b      	subs	r3, r3, r1
 800da7c:	42ab      	cmp	r3, r5
 800da7e:	dcf2      	bgt.n	800da66 <_printf_i+0x21e>
 800da80:	e7eb      	b.n	800da5a <_printf_i+0x212>
 800da82:	2500      	movs	r5, #0
 800da84:	f104 0619 	add.w	r6, r4, #25
 800da88:	e7f5      	b.n	800da76 <_printf_i+0x22e>
 800da8a:	bf00      	nop
 800da8c:	0800df19 	.word	0x0800df19
 800da90:	0800df2a 	.word	0x0800df2a

0800da94 <memmove>:
 800da94:	4288      	cmp	r0, r1
 800da96:	b510      	push	{r4, lr}
 800da98:	eb01 0402 	add.w	r4, r1, r2
 800da9c:	d902      	bls.n	800daa4 <memmove+0x10>
 800da9e:	4284      	cmp	r4, r0
 800daa0:	4623      	mov	r3, r4
 800daa2:	d807      	bhi.n	800dab4 <memmove+0x20>
 800daa4:	1e43      	subs	r3, r0, #1
 800daa6:	42a1      	cmp	r1, r4
 800daa8:	d008      	beq.n	800dabc <memmove+0x28>
 800daaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800daae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dab2:	e7f8      	b.n	800daa6 <memmove+0x12>
 800dab4:	4402      	add	r2, r0
 800dab6:	4601      	mov	r1, r0
 800dab8:	428a      	cmp	r2, r1
 800daba:	d100      	bne.n	800dabe <memmove+0x2a>
 800dabc:	bd10      	pop	{r4, pc}
 800dabe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dac2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dac6:	e7f7      	b.n	800dab8 <memmove+0x24>

0800dac8 <_free_r>:
 800dac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800daca:	2900      	cmp	r1, #0
 800dacc:	d044      	beq.n	800db58 <_free_r+0x90>
 800dace:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dad2:	9001      	str	r0, [sp, #4]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	f1a1 0404 	sub.w	r4, r1, #4
 800dada:	bfb8      	it	lt
 800dadc:	18e4      	addlt	r4, r4, r3
 800dade:	f000 f913 	bl	800dd08 <__malloc_lock>
 800dae2:	4a1e      	ldr	r2, [pc, #120]	; (800db5c <_free_r+0x94>)
 800dae4:	9801      	ldr	r0, [sp, #4]
 800dae6:	6813      	ldr	r3, [r2, #0]
 800dae8:	b933      	cbnz	r3, 800daf8 <_free_r+0x30>
 800daea:	6063      	str	r3, [r4, #4]
 800daec:	6014      	str	r4, [r2, #0]
 800daee:	b003      	add	sp, #12
 800daf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800daf4:	f000 b90e 	b.w	800dd14 <__malloc_unlock>
 800daf8:	42a3      	cmp	r3, r4
 800dafa:	d908      	bls.n	800db0e <_free_r+0x46>
 800dafc:	6825      	ldr	r5, [r4, #0]
 800dafe:	1961      	adds	r1, r4, r5
 800db00:	428b      	cmp	r3, r1
 800db02:	bf01      	itttt	eq
 800db04:	6819      	ldreq	r1, [r3, #0]
 800db06:	685b      	ldreq	r3, [r3, #4]
 800db08:	1949      	addeq	r1, r1, r5
 800db0a:	6021      	streq	r1, [r4, #0]
 800db0c:	e7ed      	b.n	800daea <_free_r+0x22>
 800db0e:	461a      	mov	r2, r3
 800db10:	685b      	ldr	r3, [r3, #4]
 800db12:	b10b      	cbz	r3, 800db18 <_free_r+0x50>
 800db14:	42a3      	cmp	r3, r4
 800db16:	d9fa      	bls.n	800db0e <_free_r+0x46>
 800db18:	6811      	ldr	r1, [r2, #0]
 800db1a:	1855      	adds	r5, r2, r1
 800db1c:	42a5      	cmp	r5, r4
 800db1e:	d10b      	bne.n	800db38 <_free_r+0x70>
 800db20:	6824      	ldr	r4, [r4, #0]
 800db22:	4421      	add	r1, r4
 800db24:	1854      	adds	r4, r2, r1
 800db26:	42a3      	cmp	r3, r4
 800db28:	6011      	str	r1, [r2, #0]
 800db2a:	d1e0      	bne.n	800daee <_free_r+0x26>
 800db2c:	681c      	ldr	r4, [r3, #0]
 800db2e:	685b      	ldr	r3, [r3, #4]
 800db30:	6053      	str	r3, [r2, #4]
 800db32:	4421      	add	r1, r4
 800db34:	6011      	str	r1, [r2, #0]
 800db36:	e7da      	b.n	800daee <_free_r+0x26>
 800db38:	d902      	bls.n	800db40 <_free_r+0x78>
 800db3a:	230c      	movs	r3, #12
 800db3c:	6003      	str	r3, [r0, #0]
 800db3e:	e7d6      	b.n	800daee <_free_r+0x26>
 800db40:	6825      	ldr	r5, [r4, #0]
 800db42:	1961      	adds	r1, r4, r5
 800db44:	428b      	cmp	r3, r1
 800db46:	bf04      	itt	eq
 800db48:	6819      	ldreq	r1, [r3, #0]
 800db4a:	685b      	ldreq	r3, [r3, #4]
 800db4c:	6063      	str	r3, [r4, #4]
 800db4e:	bf04      	itt	eq
 800db50:	1949      	addeq	r1, r1, r5
 800db52:	6021      	streq	r1, [r4, #0]
 800db54:	6054      	str	r4, [r2, #4]
 800db56:	e7ca      	b.n	800daee <_free_r+0x26>
 800db58:	b003      	add	sp, #12
 800db5a:	bd30      	pop	{r4, r5, pc}
 800db5c:	2000af18 	.word	0x2000af18

0800db60 <sbrk_aligned>:
 800db60:	b570      	push	{r4, r5, r6, lr}
 800db62:	4e0e      	ldr	r6, [pc, #56]	; (800db9c <sbrk_aligned+0x3c>)
 800db64:	460c      	mov	r4, r1
 800db66:	6831      	ldr	r1, [r6, #0]
 800db68:	4605      	mov	r5, r0
 800db6a:	b911      	cbnz	r1, 800db72 <sbrk_aligned+0x12>
 800db6c:	f000 f8bc 	bl	800dce8 <_sbrk_r>
 800db70:	6030      	str	r0, [r6, #0]
 800db72:	4621      	mov	r1, r4
 800db74:	4628      	mov	r0, r5
 800db76:	f000 f8b7 	bl	800dce8 <_sbrk_r>
 800db7a:	1c43      	adds	r3, r0, #1
 800db7c:	d00a      	beq.n	800db94 <sbrk_aligned+0x34>
 800db7e:	1cc4      	adds	r4, r0, #3
 800db80:	f024 0403 	bic.w	r4, r4, #3
 800db84:	42a0      	cmp	r0, r4
 800db86:	d007      	beq.n	800db98 <sbrk_aligned+0x38>
 800db88:	1a21      	subs	r1, r4, r0
 800db8a:	4628      	mov	r0, r5
 800db8c:	f000 f8ac 	bl	800dce8 <_sbrk_r>
 800db90:	3001      	adds	r0, #1
 800db92:	d101      	bne.n	800db98 <sbrk_aligned+0x38>
 800db94:	f04f 34ff 	mov.w	r4, #4294967295
 800db98:	4620      	mov	r0, r4
 800db9a:	bd70      	pop	{r4, r5, r6, pc}
 800db9c:	2000af1c 	.word	0x2000af1c

0800dba0 <_malloc_r>:
 800dba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dba4:	1ccd      	adds	r5, r1, #3
 800dba6:	f025 0503 	bic.w	r5, r5, #3
 800dbaa:	3508      	adds	r5, #8
 800dbac:	2d0c      	cmp	r5, #12
 800dbae:	bf38      	it	cc
 800dbb0:	250c      	movcc	r5, #12
 800dbb2:	2d00      	cmp	r5, #0
 800dbb4:	4607      	mov	r7, r0
 800dbb6:	db01      	blt.n	800dbbc <_malloc_r+0x1c>
 800dbb8:	42a9      	cmp	r1, r5
 800dbba:	d905      	bls.n	800dbc8 <_malloc_r+0x28>
 800dbbc:	230c      	movs	r3, #12
 800dbbe:	603b      	str	r3, [r7, #0]
 800dbc0:	2600      	movs	r6, #0
 800dbc2:	4630      	mov	r0, r6
 800dbc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbc8:	4e2e      	ldr	r6, [pc, #184]	; (800dc84 <_malloc_r+0xe4>)
 800dbca:	f000 f89d 	bl	800dd08 <__malloc_lock>
 800dbce:	6833      	ldr	r3, [r6, #0]
 800dbd0:	461c      	mov	r4, r3
 800dbd2:	bb34      	cbnz	r4, 800dc22 <_malloc_r+0x82>
 800dbd4:	4629      	mov	r1, r5
 800dbd6:	4638      	mov	r0, r7
 800dbd8:	f7ff ffc2 	bl	800db60 <sbrk_aligned>
 800dbdc:	1c43      	adds	r3, r0, #1
 800dbde:	4604      	mov	r4, r0
 800dbe0:	d14d      	bne.n	800dc7e <_malloc_r+0xde>
 800dbe2:	6834      	ldr	r4, [r6, #0]
 800dbe4:	4626      	mov	r6, r4
 800dbe6:	2e00      	cmp	r6, #0
 800dbe8:	d140      	bne.n	800dc6c <_malloc_r+0xcc>
 800dbea:	6823      	ldr	r3, [r4, #0]
 800dbec:	4631      	mov	r1, r6
 800dbee:	4638      	mov	r0, r7
 800dbf0:	eb04 0803 	add.w	r8, r4, r3
 800dbf4:	f000 f878 	bl	800dce8 <_sbrk_r>
 800dbf8:	4580      	cmp	r8, r0
 800dbfa:	d13a      	bne.n	800dc72 <_malloc_r+0xd2>
 800dbfc:	6821      	ldr	r1, [r4, #0]
 800dbfe:	3503      	adds	r5, #3
 800dc00:	1a6d      	subs	r5, r5, r1
 800dc02:	f025 0503 	bic.w	r5, r5, #3
 800dc06:	3508      	adds	r5, #8
 800dc08:	2d0c      	cmp	r5, #12
 800dc0a:	bf38      	it	cc
 800dc0c:	250c      	movcc	r5, #12
 800dc0e:	4629      	mov	r1, r5
 800dc10:	4638      	mov	r0, r7
 800dc12:	f7ff ffa5 	bl	800db60 <sbrk_aligned>
 800dc16:	3001      	adds	r0, #1
 800dc18:	d02b      	beq.n	800dc72 <_malloc_r+0xd2>
 800dc1a:	6823      	ldr	r3, [r4, #0]
 800dc1c:	442b      	add	r3, r5
 800dc1e:	6023      	str	r3, [r4, #0]
 800dc20:	e00e      	b.n	800dc40 <_malloc_r+0xa0>
 800dc22:	6822      	ldr	r2, [r4, #0]
 800dc24:	1b52      	subs	r2, r2, r5
 800dc26:	d41e      	bmi.n	800dc66 <_malloc_r+0xc6>
 800dc28:	2a0b      	cmp	r2, #11
 800dc2a:	d916      	bls.n	800dc5a <_malloc_r+0xba>
 800dc2c:	1961      	adds	r1, r4, r5
 800dc2e:	42a3      	cmp	r3, r4
 800dc30:	6025      	str	r5, [r4, #0]
 800dc32:	bf18      	it	ne
 800dc34:	6059      	strne	r1, [r3, #4]
 800dc36:	6863      	ldr	r3, [r4, #4]
 800dc38:	bf08      	it	eq
 800dc3a:	6031      	streq	r1, [r6, #0]
 800dc3c:	5162      	str	r2, [r4, r5]
 800dc3e:	604b      	str	r3, [r1, #4]
 800dc40:	4638      	mov	r0, r7
 800dc42:	f104 060b 	add.w	r6, r4, #11
 800dc46:	f000 f865 	bl	800dd14 <__malloc_unlock>
 800dc4a:	f026 0607 	bic.w	r6, r6, #7
 800dc4e:	1d23      	adds	r3, r4, #4
 800dc50:	1af2      	subs	r2, r6, r3
 800dc52:	d0b6      	beq.n	800dbc2 <_malloc_r+0x22>
 800dc54:	1b9b      	subs	r3, r3, r6
 800dc56:	50a3      	str	r3, [r4, r2]
 800dc58:	e7b3      	b.n	800dbc2 <_malloc_r+0x22>
 800dc5a:	6862      	ldr	r2, [r4, #4]
 800dc5c:	42a3      	cmp	r3, r4
 800dc5e:	bf0c      	ite	eq
 800dc60:	6032      	streq	r2, [r6, #0]
 800dc62:	605a      	strne	r2, [r3, #4]
 800dc64:	e7ec      	b.n	800dc40 <_malloc_r+0xa0>
 800dc66:	4623      	mov	r3, r4
 800dc68:	6864      	ldr	r4, [r4, #4]
 800dc6a:	e7b2      	b.n	800dbd2 <_malloc_r+0x32>
 800dc6c:	4634      	mov	r4, r6
 800dc6e:	6876      	ldr	r6, [r6, #4]
 800dc70:	e7b9      	b.n	800dbe6 <_malloc_r+0x46>
 800dc72:	230c      	movs	r3, #12
 800dc74:	603b      	str	r3, [r7, #0]
 800dc76:	4638      	mov	r0, r7
 800dc78:	f000 f84c 	bl	800dd14 <__malloc_unlock>
 800dc7c:	e7a1      	b.n	800dbc2 <_malloc_r+0x22>
 800dc7e:	6025      	str	r5, [r4, #0]
 800dc80:	e7de      	b.n	800dc40 <_malloc_r+0xa0>
 800dc82:	bf00      	nop
 800dc84:	2000af18 	.word	0x2000af18

0800dc88 <_realloc_r>:
 800dc88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc8c:	4680      	mov	r8, r0
 800dc8e:	4614      	mov	r4, r2
 800dc90:	460e      	mov	r6, r1
 800dc92:	b921      	cbnz	r1, 800dc9e <_realloc_r+0x16>
 800dc94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc98:	4611      	mov	r1, r2
 800dc9a:	f7ff bf81 	b.w	800dba0 <_malloc_r>
 800dc9e:	b92a      	cbnz	r2, 800dcac <_realloc_r+0x24>
 800dca0:	f7ff ff12 	bl	800dac8 <_free_r>
 800dca4:	4625      	mov	r5, r4
 800dca6:	4628      	mov	r0, r5
 800dca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcac:	f000 f838 	bl	800dd20 <_malloc_usable_size_r>
 800dcb0:	4284      	cmp	r4, r0
 800dcb2:	4607      	mov	r7, r0
 800dcb4:	d802      	bhi.n	800dcbc <_realloc_r+0x34>
 800dcb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dcba:	d812      	bhi.n	800dce2 <_realloc_r+0x5a>
 800dcbc:	4621      	mov	r1, r4
 800dcbe:	4640      	mov	r0, r8
 800dcc0:	f7ff ff6e 	bl	800dba0 <_malloc_r>
 800dcc4:	4605      	mov	r5, r0
 800dcc6:	2800      	cmp	r0, #0
 800dcc8:	d0ed      	beq.n	800dca6 <_realloc_r+0x1e>
 800dcca:	42bc      	cmp	r4, r7
 800dccc:	4622      	mov	r2, r4
 800dcce:	4631      	mov	r1, r6
 800dcd0:	bf28      	it	cs
 800dcd2:	463a      	movcs	r2, r7
 800dcd4:	f7ff fba4 	bl	800d420 <memcpy>
 800dcd8:	4631      	mov	r1, r6
 800dcda:	4640      	mov	r0, r8
 800dcdc:	f7ff fef4 	bl	800dac8 <_free_r>
 800dce0:	e7e1      	b.n	800dca6 <_realloc_r+0x1e>
 800dce2:	4635      	mov	r5, r6
 800dce4:	e7df      	b.n	800dca6 <_realloc_r+0x1e>
	...

0800dce8 <_sbrk_r>:
 800dce8:	b538      	push	{r3, r4, r5, lr}
 800dcea:	4d06      	ldr	r5, [pc, #24]	; (800dd04 <_sbrk_r+0x1c>)
 800dcec:	2300      	movs	r3, #0
 800dcee:	4604      	mov	r4, r0
 800dcf0:	4608      	mov	r0, r1
 800dcf2:	602b      	str	r3, [r5, #0]
 800dcf4:	f7f3 f886 	bl	8000e04 <_sbrk>
 800dcf8:	1c43      	adds	r3, r0, #1
 800dcfa:	d102      	bne.n	800dd02 <_sbrk_r+0x1a>
 800dcfc:	682b      	ldr	r3, [r5, #0]
 800dcfe:	b103      	cbz	r3, 800dd02 <_sbrk_r+0x1a>
 800dd00:	6023      	str	r3, [r4, #0]
 800dd02:	bd38      	pop	{r3, r4, r5, pc}
 800dd04:	2000af20 	.word	0x2000af20

0800dd08 <__malloc_lock>:
 800dd08:	4801      	ldr	r0, [pc, #4]	; (800dd10 <__malloc_lock+0x8>)
 800dd0a:	f000 b811 	b.w	800dd30 <__retarget_lock_acquire_recursive>
 800dd0e:	bf00      	nop
 800dd10:	2000af24 	.word	0x2000af24

0800dd14 <__malloc_unlock>:
 800dd14:	4801      	ldr	r0, [pc, #4]	; (800dd1c <__malloc_unlock+0x8>)
 800dd16:	f000 b80c 	b.w	800dd32 <__retarget_lock_release_recursive>
 800dd1a:	bf00      	nop
 800dd1c:	2000af24 	.word	0x2000af24

0800dd20 <_malloc_usable_size_r>:
 800dd20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd24:	1f18      	subs	r0, r3, #4
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	bfbc      	itt	lt
 800dd2a:	580b      	ldrlt	r3, [r1, r0]
 800dd2c:	18c0      	addlt	r0, r0, r3
 800dd2e:	4770      	bx	lr

0800dd30 <__retarget_lock_acquire_recursive>:
 800dd30:	4770      	bx	lr

0800dd32 <__retarget_lock_release_recursive>:
 800dd32:	4770      	bx	lr

0800dd34 <_init>:
 800dd34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd36:	bf00      	nop
 800dd38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd3a:	bc08      	pop	{r3}
 800dd3c:	469e      	mov	lr, r3
 800dd3e:	4770      	bx	lr

0800dd40 <_fini>:
 800dd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd42:	bf00      	nop
 800dd44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd46:	bc08      	pop	{r3}
 800dd48:	469e      	mov	lr, r3
 800dd4a:	4770      	bx	lr
