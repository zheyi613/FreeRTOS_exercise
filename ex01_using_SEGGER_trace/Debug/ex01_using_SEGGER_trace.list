
ex01_using_SEGGER_trace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e21c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800e3bc  0800e3bc  0001e3bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e5ac  0800e5ac  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  0800e5ac  0800e5ac  0001e5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e5b4  0800e5b4  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e5b4  0800e5b4  0001e5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e5b8  0800e5b8  0001e5b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800e5bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ae04  20000168  0800e724  00020168  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000af6c  0800e724  0002af6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029d61  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005da4  00000000  00000000  00049ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022d0  00000000  00000000  0004fca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002030  00000000  00000000  00051f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f978  00000000  00000000  00053fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002db96  00000000  00000000  00073918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000affdd  00000000  00000000  000a14ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015148b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000095e0  00000000  00000000  001514dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000168 	.word	0x20000168
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e3a4 	.word	0x0800e3a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000016c 	.word	0x2000016c
 80001dc:	0800e3a4 	.word	0x0800e3a4

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	200085b0 	.word	0x200085b0
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800062a:	463b      	mov	r3, r7
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000636:	4b21      	ldr	r3, [pc, #132]	; (80006bc <MX_ADC1_Init+0x98>)
 8000638:	4a21      	ldr	r2, [pc, #132]	; (80006c0 <MX_ADC1_Init+0x9c>)
 800063a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <MX_ADC1_Init+0x98>)
 800063e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000642:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000644:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <MX_ADC1_Init+0x98>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800064a:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <MX_ADC1_Init+0x98>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000650:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <MX_ADC1_Init+0x98>)
 8000652:	2200      	movs	r2, #0
 8000654:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000656:	4b19      	ldr	r3, [pc, #100]	; (80006bc <MX_ADC1_Init+0x98>)
 8000658:	2200      	movs	r2, #0
 800065a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <MX_ADC1_Init+0x98>)
 8000660:	2200      	movs	r2, #0
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000664:	4b15      	ldr	r3, [pc, #84]	; (80006bc <MX_ADC1_Init+0x98>)
 8000666:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <MX_ADC1_Init+0xa0>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <MX_ADC1_Init+0x98>)
 800066c:	2200      	movs	r2, #0
 800066e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_ADC1_Init+0x98>)
 8000672:	2201      	movs	r2, #1
 8000674:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_ADC1_Init+0x98>)
 8000678:	2200      	movs	r2, #0
 800067a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_ADC1_Init+0x98>)
 8000680:	2201      	movs	r2, #1
 8000682:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000684:	480d      	ldr	r0, [pc, #52]	; (80006bc <MX_ADC1_Init+0x98>)
 8000686:	f000 fddb 	bl	8001240 <HAL_ADC_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000690:	f000 fa72 	bl	8000b78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000694:	2304      	movs	r3, #4
 8000696:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000698:	2301      	movs	r3, #1
 800069a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a0:	463b      	mov	r3, r7
 80006a2:	4619      	mov	r1, r3
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_ADC1_Init+0x98>)
 80006a6:	f000 fe0f 	bl	80012c8 <HAL_ADC_ConfigChannel>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006b0:	f000 fa62 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000184 	.word	0x20000184
 80006c0:	40012000 	.word	0x40012000
 80006c4:	0f000001 	.word	0x0f000001

080006c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	; 0x28
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a17      	ldr	r2, [pc, #92]	; (8000744 <HAL_ADC_MspInit+0x7c>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d127      	bne.n	800073a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	4b16      	ldr	r3, [pc, #88]	; (8000748 <HAL_ADC_MspInit+0x80>)
 80006f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006f2:	4a15      	ldr	r2, [pc, #84]	; (8000748 <HAL_ADC_MspInit+0x80>)
 80006f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006f8:	6453      	str	r3, [r2, #68]	; 0x44
 80006fa:	4b13      	ldr	r3, [pc, #76]	; (8000748 <HAL_ADC_MspInit+0x80>)
 80006fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <HAL_ADC_MspInit+0x80>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a0e      	ldr	r2, [pc, #56]	; (8000748 <HAL_ADC_MspInit+0x80>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <HAL_ADC_MspInit+0x80>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000722:	2310      	movs	r3, #16
 8000724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000726:	2303      	movs	r3, #3
 8000728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	4619      	mov	r1, r3
 8000734:	4805      	ldr	r0, [pc, #20]	; (800074c <HAL_ADC_MspInit+0x84>)
 8000736:	f001 f8c7 	bl	80018c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800073a:	bf00      	nop
 800073c:	3728      	adds	r7, #40	; 0x28
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40012000 	.word	0x40012000
 8000748:	40023800 	.word	0x40023800
 800074c:	40020000 	.word	0x40020000

08000750 <DWT_Init>:
 */

#include "dwt_delay.h"

void DWT_Init(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <DWT_Init+0x2c>)
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	4a08      	ldr	r2, [pc, #32]	; (800077c <DWT_Init+0x2c>)
 800075a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800075e:	60d3      	str	r3, [r2, #12]
        #if (__CORTEX_M == 7)
                DWT->LAR = 0xC5ACCE55; /* Use in Core-M7 */
        #endif
        DWT->CYCCNT = 0;
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <DWT_Init+0x30>)
 8000762:	2200      	movs	r2, #0
 8000764:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;     
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <DWT_Init+0x30>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a05      	ldr	r2, [pc, #20]	; (8000780 <DWT_Init+0x30>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6013      	str	r3, [r2, #0]
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000edf0 	.word	0xe000edf0
 8000780:	e0001000 	.word	0xe0001000

08000784 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	; 0x28
 8000788:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	4b27      	ldr	r3, [pc, #156]	; (800083c <MX_GPIO_Init+0xb8>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a26      	ldr	r2, [pc, #152]	; (800083c <MX_GPIO_Init+0xb8>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b24      	ldr	r3, [pc, #144]	; (800083c <MX_GPIO_Init+0xb8>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	4b20      	ldr	r3, [pc, #128]	; (800083c <MX_GPIO_Init+0xb8>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a1f      	ldr	r2, [pc, #124]	; (800083c <MX_GPIO_Init+0xb8>)
 80007c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b1d      	ldr	r3, [pc, #116]	; (800083c <MX_GPIO_Init+0xb8>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	4b19      	ldr	r3, [pc, #100]	; (800083c <MX_GPIO_Init+0xb8>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a18      	ldr	r2, [pc, #96]	; (800083c <MX_GPIO_Init+0xb8>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b16      	ldr	r3, [pc, #88]	; (800083c <MX_GPIO_Init+0xb8>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <MX_GPIO_Init+0xb8>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a11      	ldr	r2, [pc, #68]	; (800083c <MX_GPIO_Init+0xb8>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_GPIO_Init+0xb8>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000810:	480b      	ldr	r0, [pc, #44]	; (8000840 <MX_GPIO_Init+0xbc>)
 8000812:	f001 f9dd 	bl	8001bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8000816:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	2301      	movs	r3, #1
 800081e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4619      	mov	r1, r3
 800082e:	4804      	ldr	r0, [pc, #16]	; (8000840 <MX_GPIO_Init+0xbc>)
 8000830:	f001 f84a 	bl	80018c8 <HAL_GPIO_Init>

}
 8000834:	bf00      	nop
 8000836:	3728      	adds	r7, #40	; 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40023800 	.word	0x40023800
 8000840:	40020800 	.word	0x40020800

08000844 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_I2C1_Init+0x50>)
 800084a:	4a13      	ldr	r2, [pc, #76]	; (8000898 <MX_I2C1_Init+0x54>)
 800084c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_I2C1_Init+0x50>)
 8000850:	4a12      	ldr	r2, [pc, #72]	; (800089c <MX_I2C1_Init+0x58>)
 8000852:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_I2C1_Init+0x50>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_I2C1_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_I2C1_Init+0x50>)
 8000862:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000866:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <MX_I2C1_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_I2C1_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <MX_I2C1_Init+0x50>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_I2C1_Init+0x50>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000880:	4804      	ldr	r0, [pc, #16]	; (8000894 <MX_I2C1_Init+0x50>)
 8000882:	f001 f9bf 	bl	8001c04 <HAL_I2C_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800088c:	f000 f974 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	200001cc 	.word	0x200001cc
 8000898:	40005400 	.word	0x40005400
 800089c:	000186a0 	.word	0x000186a0

080008a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a19      	ldr	r2, [pc, #100]	; (8000924 <HAL_I2C_MspInit+0x84>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d12b      	bne.n	800091a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <HAL_I2C_MspInit+0x88>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a17      	ldr	r2, [pc, #92]	; (8000928 <HAL_I2C_MspInit+0x88>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <HAL_I2C_MspInit+0x88>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008de:	23c0      	movs	r3, #192	; 0xc0
 80008e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008e2:	2312      	movs	r3, #18
 80008e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ea:	2303      	movs	r3, #3
 80008ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008ee:	2304      	movs	r3, #4
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	480c      	ldr	r0, [pc, #48]	; (800092c <HAL_I2C_MspInit+0x8c>)
 80008fa:	f000 ffe5 	bl	80018c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <HAL_I2C_MspInit+0x88>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	4a08      	ldr	r2, [pc, #32]	; (8000928 <HAL_I2C_MspInit+0x88>)
 8000908:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800090c:	6413      	str	r3, [r2, #64]	; 0x40
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_I2C_MspInit+0x88>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800091a:	bf00      	nop
 800091c:	3728      	adds	r7, #40	; 0x28
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40005400 	.word	0x40005400
 8000928:	40023800 	.word	0x40023800
 800092c:	40020400 	.word	0x40020400

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000936:	f000 fc1d 	bl	8001174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093a:	f000 f863 	bl	8000a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093e:	f7ff ff21 	bl	8000784 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000942:	f7ff fe6f 	bl	8000624 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000946:	f7ff ff7d 	bl	8000844 <MX_I2C1_Init>
  MX_SPI1_Init();
 800094a:	f000 f91b 	bl	8000b84 <MX_SPI1_Init>
  MX_TIM2_Init();
 800094e:	f000 faa3 	bl	8000e98 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000952:	f000 fb73 	bl	800103c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000956:	f00c fb77 	bl	800d048 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  vSetVarulMaxPRIGROUPValue();
 800095a:	f008 f88f 	bl	8008a7c <vSetVarulMaxPRIGROUPValue>
  DWT_Init();
 800095e:	f7ff fef7 	bl	8000750 <DWT_Init>
  SEGGER_SYSVIEW_Conf();
 8000962:	f00a fa5f 	bl	800ae24 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000966:	f00b fd8f 	bl	800c488 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler, "task1", 200, "Hello world from task1\n\r", 2, &task1_handle);
 800096a:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <main+0xb0>)
 800096c:	9301      	str	r3, [sp, #4]
 800096e:	2302      	movs	r3, #2
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <main+0xb4>)
 8000974:	22c8      	movs	r2, #200	; 0xc8
 8000976:	491c      	ldr	r1, [pc, #112]	; (80009e8 <main+0xb8>)
 8000978:	481c      	ldr	r0, [pc, #112]	; (80009ec <main+0xbc>)
 800097a:	f006 fc93 	bl	80072a4 <xTaskCreate>
 800097e:	4603      	mov	r3, r0
 8000980:	4a1b      	ldr	r2, [pc, #108]	; (80009f0 <main+0xc0>)
 8000982:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000984:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <main+0xc0>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d00a      	beq.n	80009a2 <main+0x72>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800098c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000990:	f383 8811 	msr	BASEPRI, r3
 8000994:	f3bf 8f6f 	isb	sy
 8000998:	f3bf 8f4f 	dsb	sy
 800099c:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800099e:	bf00      	nop
 80009a0:	e7fe      	b.n	80009a0 <main+0x70>

  status = xTaskCreate(task2_handler, "task2", 200, "Hello world from task2\n\r", 2, &task2_handle);
 80009a2:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <main+0xc4>)
 80009a4:	9301      	str	r3, [sp, #4]
 80009a6:	2302      	movs	r3, #2
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <main+0xc8>)
 80009ac:	22c8      	movs	r2, #200	; 0xc8
 80009ae:	4913      	ldr	r1, [pc, #76]	; (80009fc <main+0xcc>)
 80009b0:	4813      	ldr	r0, [pc, #76]	; (8000a00 <main+0xd0>)
 80009b2:	f006 fc77 	bl	80072a4 <xTaskCreate>
 80009b6:	4603      	mov	r3, r0
 80009b8:	4a0d      	ldr	r2, [pc, #52]	; (80009f0 <main+0xc0>)
 80009ba:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <main+0xc0>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d00a      	beq.n	80009da <main+0xaa>
        __asm volatile
 80009c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009c8:	f383 8811 	msr	BASEPRI, r3
 80009cc:	f3bf 8f6f 	isb	sy
 80009d0:	f3bf 8f4f 	dsb	sy
 80009d4:	603b      	str	r3, [r7, #0]
    }
 80009d6:	bf00      	nop
 80009d8:	e7fe      	b.n	80009d8 <main+0xa8>

  vTaskStartScheduler();
 80009da:	f006 fdb9 	bl	8007550 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009de:	e7fe      	b.n	80009de <main+0xae>
 80009e0:	20000220 	.word	0x20000220
 80009e4:	0800e3bc 	.word	0x0800e3bc
 80009e8:	0800e3d8 	.word	0x0800e3d8
 80009ec:	08000add 	.word	0x08000add
 80009f0:	20000228 	.word	0x20000228
 80009f4:	20000224 	.word	0x20000224
 80009f8:	0800e3e0 	.word	0x0800e3e0
 80009fc:	0800e3fc 	.word	0x0800e3fc
 8000a00:	08000b19 	.word	0x08000b19

08000a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b094      	sub	sp, #80	; 0x50
 8000a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0a:	f107 0320 	add.w	r3, r7, #32
 8000a0e:	2230      	movs	r2, #48	; 0x30
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f00d f84a 	bl	800daac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	4b29      	ldr	r3, [pc, #164]	; (8000ad4 <SystemClock_Config+0xd0>)
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	4a28      	ldr	r2, [pc, #160]	; (8000ad4 <SystemClock_Config+0xd0>)
 8000a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a36:	6413      	str	r3, [r2, #64]	; 0x40
 8000a38:	4b26      	ldr	r3, [pc, #152]	; (8000ad4 <SystemClock_Config+0xd0>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a44:	2300      	movs	r3, #0
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	4b23      	ldr	r3, [pc, #140]	; (8000ad8 <SystemClock_Config+0xd4>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a50:	4a21      	ldr	r2, [pc, #132]	; (8000ad8 <SystemClock_Config+0xd4>)
 8000a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a56:	6013      	str	r3, [r2, #0]
 8000a58:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <SystemClock_Config+0xd4>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a64:	2301      	movs	r3, #1
 8000a66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000a78:	2319      	movs	r3, #25
 8000a7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a7c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a82:	2304      	movs	r3, #4
 8000a84:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a86:	2307      	movs	r3, #7
 8000a88:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8a:	f107 0320 	add.w	r3, r7, #32
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f002 fc7a 	bl	8003388 <HAL_RCC_OscConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a9a:	f000 f86d 	bl	8000b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ab4:	f107 030c 	add.w	r3, r7, #12
 8000ab8:	2102      	movs	r1, #2
 8000aba:	4618      	mov	r0, r3
 8000abc:	f002 fedc 	bl	8003878 <HAL_RCC_ClockConfig>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ac6:	f000 f857 	bl	8000b78 <Error_Handler>
  }
}
 8000aca:	bf00      	nop
 8000acc:	3750      	adds	r7, #80	; 0x50
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40007000 	.word	0x40007000

08000adc <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void *parameters)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b09c      	sub	sp, #112	; 0x70
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  char msg[100];
  while (1) {
    // CDC_Transmit_FS((uint8_t *)parameters, strlen((char *)parameters));
//    printf("%s", (char *)parameters);
	snprintf(msg, 100, "%s", (char *)parameters);
 8000ae4:	f107 000c 	add.w	r0, r7, #12
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a09      	ldr	r2, [pc, #36]	; (8000b10 <task1_handler+0x34>)
 8000aec:	2164      	movs	r1, #100	; 0x64
 8000aee:	f00c ffe5 	bl	800dabc <sniprintf>
	SEGGER_SYSVIEW_PrintfTarget(msg);
 8000af2:	f107 030c 	add.w	r3, r7, #12
 8000af6:	4618      	mov	r0, r3
 8000af8:	f00c fa36 	bl	800cf68 <SEGGER_SYSVIEW_PrintfTarget>
    taskYIELD();
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <task1_handler+0x38>)
 8000afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	f3bf 8f4f 	dsb	sy
 8000b08:	f3bf 8f6f 	isb	sy
	snprintf(msg, 100, "%s", (char *)parameters);
 8000b0c:	e7ea      	b.n	8000ae4 <task1_handler+0x8>
 8000b0e:	bf00      	nop
 8000b10:	0800e404 	.word	0x0800e404
 8000b14:	e000ed04 	.word	0xe000ed04

08000b18 <task2_handler>:
  }
}

static void task2_handler(void *parameters)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b09c      	sub	sp, #112	; 0x70
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  char msg[100];
  while (1) {
    // CDC_Transmit_FS((uint8_t *)parameters, strlen((char *)parameters));
//    printf("%s", (char *)parameters);
    snprintf(msg, 100, "%s", (char *)parameters);
 8000b20:	f107 000c 	add.w	r0, r7, #12
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a09      	ldr	r2, [pc, #36]	; (8000b4c <task2_handler+0x34>)
 8000b28:	2164      	movs	r1, #100	; 0x64
 8000b2a:	f00c ffc7 	bl	800dabc <sniprintf>
    SEGGER_SYSVIEW_PrintfTarget(msg);
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	4618      	mov	r0, r3
 8000b34:	f00c fa18 	bl	800cf68 <SEGGER_SYSVIEW_PrintfTarget>
    taskYIELD();
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <task2_handler+0x38>)
 8000b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	f3bf 8f4f 	dsb	sy
 8000b44:	f3bf 8f6f 	isb	sy
    snprintf(msg, 100, "%s", (char *)parameters);
 8000b48:	e7ea      	b.n	8000b20 <task2_handler+0x8>
 8000b4a:	bf00      	nop
 8000b4c:	0800e404 	.word	0x0800e404
 8000b50:	e000ed04 	.word	0xe000ed04

08000b54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d101      	bne.n	8000b6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b66:	f000 fb27 	bl	80011b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40010000 	.word	0x40010000

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7c:	b672      	cpsid	i
}
 8000b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <Error_Handler+0x8>
	...

08000b84 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000b8a:	4a18      	ldr	r2, [pc, #96]	; (8000bec <MX_SPI1_Init+0x68>)
 8000b8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b8e:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000b90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bc8:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bd0:	220a      	movs	r2, #10
 8000bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bd6:	f003 f861 	bl	8003c9c <HAL_SPI_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000be0:	f7ff ffca 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	2000022c 	.word	0x2000022c
 8000bec:	40013000 	.word	0x40013000

08000bf0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <HAL_SPI_MspInit+0x84>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d12b      	bne.n	8000c6a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	4a17      	ldr	r2, [pc, #92]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c20:	6453      	str	r3, [r2, #68]	; 0x44
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a10      	ldr	r2, [pc, #64]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c4a:	23e0      	movs	r3, #224	; 0xe0
 8000c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c56:	2303      	movs	r3, #3
 8000c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c5a:	2305      	movs	r3, #5
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4805      	ldr	r0, [pc, #20]	; (8000c7c <HAL_SPI_MspInit+0x8c>)
 8000c66:	f000 fe2f 	bl	80018c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	3728      	adds	r7, #40	; 0x28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40013000 	.word	0x40013000
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020000 	.word	0x40020000

08000c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <HAL_MspInit+0x4c>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ccc <HAL_MspInit+0x4c>)
 8000c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c94:	6453      	str	r3, [r2, #68]	; 0x44
 8000c96:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <HAL_MspInit+0x4c>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	603b      	str	r3, [r7, #0]
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <HAL_MspInit+0x4c>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <HAL_MspInit+0x4c>)
 8000cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_MspInit+0x4c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40023800 	.word	0x40023800

08000cd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08c      	sub	sp, #48	; 0x30
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	4b2e      	ldr	r3, [pc, #184]	; (8000da0 <HAL_InitTick+0xd0>)
 8000ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce8:	4a2d      	ldr	r2, [pc, #180]	; (8000da0 <HAL_InitTick+0xd0>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf0:	4b2b      	ldr	r3, [pc, #172]	; (8000da0 <HAL_InitTick+0xd0>)
 8000cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cfc:	f107 020c 	add.w	r2, r7, #12
 8000d00:	f107 0310 	add.w	r3, r7, #16
 8000d04:	4611      	mov	r1, r2
 8000d06:	4618      	mov	r0, r3
 8000d08:	f002 ff96 	bl	8003c38 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d0c:	f002 ff80 	bl	8003c10 <HAL_RCC_GetPCLK2Freq>
 8000d10:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d14:	4a23      	ldr	r2, [pc, #140]	; (8000da4 <HAL_InitTick+0xd4>)
 8000d16:	fba2 2303 	umull	r2, r3, r2, r3
 8000d1a:	0c9b      	lsrs	r3, r3, #18
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d20:	4b21      	ldr	r3, [pc, #132]	; (8000da8 <HAL_InitTick+0xd8>)
 8000d22:	4a22      	ldr	r2, [pc, #136]	; (8000dac <HAL_InitTick+0xdc>)
 8000d24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d26:	4b20      	ldr	r3, [pc, #128]	; (8000da8 <HAL_InitTick+0xd8>)
 8000d28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d2c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d2e:	4a1e      	ldr	r2, [pc, #120]	; (8000da8 <HAL_InitTick+0xd8>)
 8000d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d32:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d34:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <HAL_InitTick+0xd8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3a:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <HAL_InitTick+0xd8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d40:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <HAL_InitTick+0xd8>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000d46:	4818      	ldr	r0, [pc, #96]	; (8000da8 <HAL_InitTick+0xd8>)
 8000d48:	f003 f831 	bl	8003dae <HAL_TIM_Base_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000d52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d11b      	bne.n	8000d92 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000d5a:	4813      	ldr	r0, [pc, #76]	; (8000da8 <HAL_InitTick+0xd8>)
 8000d5c:	f003 f880 	bl	8003e60 <HAL_TIM_Base_Start_IT>
 8000d60:	4603      	mov	r3, r0
 8000d62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000d66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d111      	bne.n	8000d92 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d6e:	2019      	movs	r0, #25
 8000d70:	f000 fd9c 	bl	80018ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b0f      	cmp	r3, #15
 8000d78:	d808      	bhi.n	8000d8c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	6879      	ldr	r1, [r7, #4]
 8000d7e:	2019      	movs	r0, #25
 8000d80:	f000 fd78 	bl	8001874 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d84:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <HAL_InitTick+0xe0>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6013      	str	r3, [r2, #0]
 8000d8a:	e002      	b.n	8000d92 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3730      	adds	r7, #48	; 0x30
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800
 8000da4:	431bde83 	.word	0x431bde83
 8000da8:	20000284 	.word	0x20000284
 8000dac:	40010000 	.word	0x40010000
 8000db0:	20000004 	.word	0x20000004

08000db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <NMI_Handler+0x4>

08000dba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <HardFault_Handler+0x4>

08000dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <MemManage_Handler+0x4>

08000dc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <BusFault_Handler+0x4>

08000dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <UsageFault_Handler+0x4>

08000dd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000de4:	4802      	ldr	r0, [pc, #8]	; (8000df0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000de6:	f003 f8ec 	bl	8003fc2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000284 	.word	0x20000284

08000df4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000df8:	4802      	ldr	r0, [pc, #8]	; (8000e04 <OTG_FS_IRQHandler+0x10>)
 8000dfa:	f001 f997 	bl	800212c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	2000a830 	.word	0x2000a830

08000e08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e10:	4a14      	ldr	r2, [pc, #80]	; (8000e64 <_sbrk+0x5c>)
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <_sbrk+0x60>)
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e1c:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <_sbrk+0x64>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d102      	bne.n	8000e2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <_sbrk+0x64>)
 8000e26:	4a12      	ldr	r2, [pc, #72]	; (8000e70 <_sbrk+0x68>)
 8000e28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <_sbrk+0x64>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d207      	bcs.n	8000e48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e38:	f00c fdf0 	bl	800da1c <__errno>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	220c      	movs	r2, #12
 8000e40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e42:	f04f 33ff 	mov.w	r3, #4294967295
 8000e46:	e009      	b.n	8000e5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <_sbrk+0x64>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e4e:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <_sbrk+0x64>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	4a05      	ldr	r2, [pc, #20]	; (8000e6c <_sbrk+0x64>)
 8000e58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3718      	adds	r7, #24
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20010000 	.word	0x20010000
 8000e68:	00000400 	.word	0x00000400
 8000e6c:	200002cc 	.word	0x200002cc
 8000e70:	2000af70 	.word	0x2000af70

08000e74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <SystemInit+0x20>)
 8000e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e7e:	4a05      	ldr	r2, [pc, #20]	; (8000e94 <SystemInit+0x20>)
 8000e80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e9e:	f107 0320 	add.w	r3, r7, #32
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	611a      	str	r2, [r3, #16]
 8000eb6:	615a      	str	r2, [r3, #20]
 8000eb8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eba:	4b33      	ldr	r3, [pc, #204]	; (8000f88 <MX_TIM2_Init+0xf0>)
 8000ebc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ec0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ec2:	4b31      	ldr	r3, [pc, #196]	; (8000f88 <MX_TIM2_Init+0xf0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec8:	4b2f      	ldr	r3, [pc, #188]	; (8000f88 <MX_TIM2_Init+0xf0>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ece:	4b2e      	ldr	r3, [pc, #184]	; (8000f88 <MX_TIM2_Init+0xf0>)
 8000ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed6:	4b2c      	ldr	r3, [pc, #176]	; (8000f88 <MX_TIM2_Init+0xf0>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000edc:	4b2a      	ldr	r3, [pc, #168]	; (8000f88 <MX_TIM2_Init+0xf0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ee2:	4829      	ldr	r0, [pc, #164]	; (8000f88 <MX_TIM2_Init+0xf0>)
 8000ee4:	f003 f81e 	bl	8003f24 <HAL_TIM_PWM_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000eee:	f7ff fe43 	bl	8000b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000efa:	f107 0320 	add.w	r3, r7, #32
 8000efe:	4619      	mov	r1, r3
 8000f00:	4821      	ldr	r0, [pc, #132]	; (8000f88 <MX_TIM2_Init+0xf0>)
 8000f02:	f003 fc5d 	bl	80047c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000f0c:	f7ff fe34 	bl	8000b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f10:	2360      	movs	r3, #96	; 0x60
 8000f12:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	2200      	movs	r2, #0
 8000f24:	4619      	mov	r1, r3
 8000f26:	4818      	ldr	r0, [pc, #96]	; (8000f88 <MX_TIM2_Init+0xf0>)
 8000f28:	f003 f954 	bl	80041d4 <HAL_TIM_PWM_ConfigChannel>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000f32:	f7ff fe21 	bl	8000b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	2204      	movs	r2, #4
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4812      	ldr	r0, [pc, #72]	; (8000f88 <MX_TIM2_Init+0xf0>)
 8000f3e:	f003 f949 	bl	80041d4 <HAL_TIM_PWM_ConfigChannel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000f48:	f7ff fe16 	bl	8000b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	2208      	movs	r2, #8
 8000f50:	4619      	mov	r1, r3
 8000f52:	480d      	ldr	r0, [pc, #52]	; (8000f88 <MX_TIM2_Init+0xf0>)
 8000f54:	f003 f93e 	bl	80041d4 <HAL_TIM_PWM_ConfigChannel>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8000f5e:	f7ff fe0b 	bl	8000b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	220c      	movs	r2, #12
 8000f66:	4619      	mov	r1, r3
 8000f68:	4807      	ldr	r0, [pc, #28]	; (8000f88 <MX_TIM2_Init+0xf0>)
 8000f6a:	f003 f933 	bl	80041d4 <HAL_TIM_PWM_ConfigChannel>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8000f74:	f7ff fe00 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f78:	4803      	ldr	r0, [pc, #12]	; (8000f88 <MX_TIM2_Init+0xf0>)
 8000f7a:	f000 f827 	bl	8000fcc <HAL_TIM_MspPostInit>

}
 8000f7e:	bf00      	nop
 8000f80:	3728      	adds	r7, #40	; 0x28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200002d0 	.word	0x200002d0

08000f8c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f9c:	d10d      	bne.n	8000fba <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	4a08      	ldr	r2, [pc, #32]	; (8000fc8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6413      	str	r3, [r2, #64]	; 0x40
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800

08000fcc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fec:	d11e      	bne.n	800102c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <HAL_TIM_MspPostInit+0x68>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a0f      	ldr	r2, [pc, #60]	; (8001034 <HAL_TIM_MspPostInit+0x68>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <HAL_TIM_MspPostInit+0x68>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 800100a:	f248 030e 	movw	r3, #32782	; 0x800e
 800100e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800101c:	2301      	movs	r3, #1
 800101e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	4619      	mov	r1, r3
 8001026:	4804      	ldr	r0, [pc, #16]	; (8001038 <HAL_TIM_MspPostInit+0x6c>)
 8001028:	f000 fc4e 	bl	80018c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800102c:	bf00      	nop
 800102e:	3720      	adds	r7, #32
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40023800 	.word	0x40023800
 8001038:	40020000 	.word	0x40020000

0800103c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_USART1_UART_Init+0x4c>)
 8001042:	4a12      	ldr	r2, [pc, #72]	; (800108c <MX_USART1_UART_Init+0x50>)
 8001044:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001046:	4b10      	ldr	r3, [pc, #64]	; (8001088 <MX_USART1_UART_Init+0x4c>)
 8001048:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800104c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <MX_USART1_UART_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_USART1_UART_Init+0x4c>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <MX_USART1_UART_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_USART1_UART_Init+0x4c>)
 8001062:	220c      	movs	r2, #12
 8001064:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <MX_USART1_UART_Init+0x4c>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <MX_USART1_UART_Init+0x4c>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_USART1_UART_Init+0x4c>)
 8001074:	f003 fc26 	bl	80048c4 <HAL_UART_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800107e:	f7ff fd7b 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000318 	.word	0x20000318
 800108c:	40011000 	.word	0x40011000

08001090 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a19      	ldr	r2, [pc, #100]	; (8001114 <HAL_UART_MspInit+0x84>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d12c      	bne.n	800110c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	4b18      	ldr	r3, [pc, #96]	; (8001118 <HAL_UART_MspInit+0x88>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	4a17      	ldr	r2, [pc, #92]	; (8001118 <HAL_UART_MspInit+0x88>)
 80010bc:	f043 0310 	orr.w	r3, r3, #16
 80010c0:	6453      	str	r3, [r2, #68]	; 0x44
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <HAL_UART_MspInit+0x88>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	f003 0310 	and.w	r3, r3, #16
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	4b11      	ldr	r3, [pc, #68]	; (8001118 <HAL_UART_MspInit+0x88>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a10      	ldr	r2, [pc, #64]	; (8001118 <HAL_UART_MspInit+0x88>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <HAL_UART_MspInit+0x88>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f8:	2303      	movs	r3, #3
 80010fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010fc:	2307      	movs	r3, #7
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	4619      	mov	r1, r3
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <HAL_UART_MspInit+0x8c>)
 8001108:	f000 fbde 	bl	80018c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800110c:	bf00      	nop
 800110e:	3728      	adds	r7, #40	; 0x28
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40011000 	.word	0x40011000
 8001118:	40023800 	.word	0x40023800
 800111c:	40020000 	.word	0x40020000

08001120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001158 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001124:	480d      	ldr	r0, [pc, #52]	; (800115c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001126:	490e      	ldr	r1, [pc, #56]	; (8001160 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001128:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800112c:	e002      	b.n	8001134 <LoopCopyDataInit>

0800112e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001132:	3304      	adds	r3, #4

08001134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001138:	d3f9      	bcc.n	800112e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113a:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800113c:	4c0b      	ldr	r4, [pc, #44]	; (800116c <LoopFillZerobss+0x26>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001140:	e001      	b.n	8001146 <LoopFillZerobss>

08001142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001144:	3204      	adds	r2, #4

08001146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001148:	d3fb      	bcc.n	8001142 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800114a:	f7ff fe93 	bl	8000e74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800114e:	f00c fc6b 	bl	800da28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001152:	f7ff fbed 	bl	8000930 <main>
  bx  lr    
 8001156:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001158:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800115c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001160:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8001164:	0800e5bc 	.word	0x0800e5bc
  ldr r2, =_sbss
 8001168:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 800116c:	2000af6c 	.word	0x2000af6c

08001170 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001170:	e7fe      	b.n	8001170 <ADC_IRQHandler>
	...

08001174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <HAL_Init+0x40>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0d      	ldr	r2, [pc, #52]	; (80011b4 <HAL_Init+0x40>)
 800117e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001182:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_Init+0x40>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <HAL_Init+0x40>)
 800118a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800118e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <HAL_Init+0x40>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <HAL_Init+0x40>)
 8001196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119c:	2003      	movs	r0, #3
 800119e:	f000 fb5e 	bl	800185e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a2:	200f      	movs	r0, #15
 80011a4:	f7ff fd94 	bl	8000cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a8:	f7ff fd6a 	bl	8000c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023c00 	.word	0x40023c00

080011b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_IncTick+0x20>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_IncTick+0x24>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4413      	add	r3, r2
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <HAL_IncTick+0x24>)
 80011ca:	6013      	str	r3, [r2, #0]
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000008 	.word	0x20000008
 80011dc:	2000035c 	.word	0x2000035c

080011e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return uwTick;
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <HAL_GetTick+0x14>)
 80011e6:	681b      	ldr	r3, [r3, #0]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	2000035c 	.word	0x2000035c

080011f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001200:	f7ff ffee 	bl	80011e0 <HAL_GetTick>
 8001204:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001210:	d005      	beq.n	800121e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <HAL_Delay+0x44>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	461a      	mov	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4413      	add	r3, r2
 800121c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800121e:	bf00      	nop
 8001220:	f7ff ffde 	bl	80011e0 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	429a      	cmp	r2, r3
 800122e:	d8f7      	bhi.n	8001220 <HAL_Delay+0x28>
  {
  }
}
 8001230:	bf00      	nop
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000008 	.word	0x20000008

08001240 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001248:	2300      	movs	r3, #0
 800124a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e033      	b.n	80012be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	2b00      	cmp	r3, #0
 800125c:	d109      	bne.n	8001272 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff fa32 	bl	80006c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f003 0310 	and.w	r3, r3, #16
 800127a:	2b00      	cmp	r3, #0
 800127c:	d118      	bne.n	80012b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001286:	f023 0302 	bic.w	r3, r3, #2
 800128a:	f043 0202 	orr.w	r2, r3, #2
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 f93a 	bl	800150c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f023 0303 	bic.w	r3, r3, #3
 80012a6:	f043 0201 	orr.w	r2, r3, #1
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40
 80012ae:	e001      	b.n	80012b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d101      	bne.n	80012e4 <HAL_ADC_ConfigChannel+0x1c>
 80012e0:	2302      	movs	r3, #2
 80012e2:	e105      	b.n	80014f0 <HAL_ADC_ConfigChannel+0x228>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2201      	movs	r2, #1
 80012e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b09      	cmp	r3, #9
 80012f2:	d925      	bls.n	8001340 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	68d9      	ldr	r1, [r3, #12]
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	461a      	mov	r2, r3
 8001302:	4613      	mov	r3, r2
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	4413      	add	r3, r2
 8001308:	3b1e      	subs	r3, #30
 800130a:	2207      	movs	r2, #7
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43da      	mvns	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	400a      	ands	r2, r1
 8001318:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	68d9      	ldr	r1, [r3, #12]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	b29b      	uxth	r3, r3
 800132a:	4618      	mov	r0, r3
 800132c:	4603      	mov	r3, r0
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4403      	add	r3, r0
 8001332:	3b1e      	subs	r3, #30
 8001334:	409a      	lsls	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	430a      	orrs	r2, r1
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	e022      	b.n	8001386 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6919      	ldr	r1, [r3, #16]
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	b29b      	uxth	r3, r3
 800134c:	461a      	mov	r2, r3
 800134e:	4613      	mov	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	4413      	add	r3, r2
 8001354:	2207      	movs	r2, #7
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43da      	mvns	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	400a      	ands	r2, r1
 8001362:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6919      	ldr	r1, [r3, #16]
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	b29b      	uxth	r3, r3
 8001374:	4618      	mov	r0, r3
 8001376:	4603      	mov	r3, r0
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	4403      	add	r3, r0
 800137c:	409a      	lsls	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	430a      	orrs	r2, r1
 8001384:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b06      	cmp	r3, #6
 800138c:	d824      	bhi.n	80013d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	4613      	mov	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	3b05      	subs	r3, #5
 80013a0:	221f      	movs	r2, #31
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43da      	mvns	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	400a      	ands	r2, r1
 80013ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	4618      	mov	r0, r3
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	4613      	mov	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	3b05      	subs	r3, #5
 80013ca:	fa00 f203 	lsl.w	r2, r0, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	430a      	orrs	r2, r1
 80013d4:	635a      	str	r2, [r3, #52]	; 0x34
 80013d6:	e04c      	b.n	8001472 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b0c      	cmp	r3, #12
 80013de:	d824      	bhi.n	800142a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	3b23      	subs	r3, #35	; 0x23
 80013f2:	221f      	movs	r2, #31
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43da      	mvns	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	400a      	ands	r2, r1
 8001400:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	b29b      	uxth	r3, r3
 800140e:	4618      	mov	r0, r3
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	3b23      	subs	r3, #35	; 0x23
 800141c:	fa00 f203 	lsl.w	r2, r0, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	430a      	orrs	r2, r1
 8001426:	631a      	str	r2, [r3, #48]	; 0x30
 8001428:	e023      	b.n	8001472 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	3b41      	subs	r3, #65	; 0x41
 800143c:	221f      	movs	r2, #31
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43da      	mvns	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	400a      	ands	r2, r1
 800144a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	b29b      	uxth	r3, r3
 8001458:	4618      	mov	r0, r3
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	3b41      	subs	r3, #65	; 0x41
 8001466:	fa00 f203 	lsl.w	r2, r0, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	430a      	orrs	r2, r1
 8001470:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001472:	4b22      	ldr	r3, [pc, #136]	; (80014fc <HAL_ADC_ConfigChannel+0x234>)
 8001474:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a21      	ldr	r2, [pc, #132]	; (8001500 <HAL_ADC_ConfigChannel+0x238>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d109      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x1cc>
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b12      	cmp	r3, #18
 8001486:	d105      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a19      	ldr	r2, [pc, #100]	; (8001500 <HAL_ADC_ConfigChannel+0x238>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d123      	bne.n	80014e6 <HAL_ADC_ConfigChannel+0x21e>
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b10      	cmp	r3, #16
 80014a4:	d003      	beq.n	80014ae <HAL_ADC_ConfigChannel+0x1e6>
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b11      	cmp	r3, #17
 80014ac:	d11b      	bne.n	80014e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b10      	cmp	r3, #16
 80014c0:	d111      	bne.n	80014e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <HAL_ADC_ConfigChannel+0x23c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a10      	ldr	r2, [pc, #64]	; (8001508 <HAL_ADC_ConfigChannel+0x240>)
 80014c8:	fba2 2303 	umull	r2, r3, r2, r3
 80014cc:	0c9a      	lsrs	r2, r3, #18
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014d8:	e002      	b.n	80014e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	3b01      	subs	r3, #1
 80014de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f9      	bne.n	80014da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	40012300 	.word	0x40012300
 8001500:	40012000 	.word	0x40012000
 8001504:	20000000 	.word	0x20000000
 8001508:	431bde83 	.word	0x431bde83

0800150c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001514:	4b79      	ldr	r3, [pc, #484]	; (80016fc <ADC_Init+0x1f0>)
 8001516:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	431a      	orrs	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001540:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6859      	ldr	r1, [r3, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	021a      	lsls	r2, r3, #8
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	430a      	orrs	r2, r1
 8001554:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001564:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6859      	ldr	r1, [r3, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	430a      	orrs	r2, r1
 8001576:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001586:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6899      	ldr	r1, [r3, #8]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68da      	ldr	r2, [r3, #12]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	430a      	orrs	r2, r1
 8001598:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159e:	4a58      	ldr	r2, [pc, #352]	; (8001700 <ADC_Init+0x1f4>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d022      	beq.n	80015ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6899      	ldr	r1, [r3, #8]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6899      	ldr	r1, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	e00f      	b.n	800160a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001608:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0202 	bic.w	r2, r2, #2
 8001618:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6899      	ldr	r1, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	7e1b      	ldrb	r3, [r3, #24]
 8001624:	005a      	lsls	r2, r3, #1
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d01b      	beq.n	8001670 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001646:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001656:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6859      	ldr	r1, [r3, #4]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001662:	3b01      	subs	r3, #1
 8001664:	035a      	lsls	r2, r3, #13
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	430a      	orrs	r2, r1
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	e007      	b.n	8001680 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800167e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800168e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	3b01      	subs	r3, #1
 800169c:	051a      	lsls	r2, r3, #20
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6899      	ldr	r1, [r3, #8]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016c2:	025a      	lsls	r2, r3, #9
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6899      	ldr	r1, [r3, #8]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	029a      	lsls	r2, r3, #10
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	609a      	str	r2, [r3, #8]
}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	40012300 	.word	0x40012300
 8001700:	0f000001 	.word	0x0f000001

08001704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001720:	4013      	ands	r3, r2
 8001722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800172c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001736:	4a04      	ldr	r2, [pc, #16]	; (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	60d3      	str	r3, [r2, #12]
}
 800173c:	bf00      	nop
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001750:	4b04      	ldr	r3, [pc, #16]	; (8001764 <__NVIC_GetPriorityGrouping+0x18>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	0a1b      	lsrs	r3, r3, #8
 8001756:	f003 0307 	and.w	r3, r3, #7
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	2b00      	cmp	r3, #0
 8001778:	db0b      	blt.n	8001792 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	f003 021f 	and.w	r2, r3, #31
 8001780:	4907      	ldr	r1, [pc, #28]	; (80017a0 <__NVIC_EnableIRQ+0x38>)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	095b      	lsrs	r3, r3, #5
 8001788:	2001      	movs	r0, #1
 800178a:	fa00 f202 	lsl.w	r2, r0, r2
 800178e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000e100 	.word	0xe000e100

080017a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	6039      	str	r1, [r7, #0]
 80017ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	db0a      	blt.n	80017ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	490c      	ldr	r1, [pc, #48]	; (80017f0 <__NVIC_SetPriority+0x4c>)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	0112      	lsls	r2, r2, #4
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	440b      	add	r3, r1
 80017c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017cc:	e00a      	b.n	80017e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4908      	ldr	r1, [pc, #32]	; (80017f4 <__NVIC_SetPriority+0x50>)
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	3b04      	subs	r3, #4
 80017dc:	0112      	lsls	r2, r2, #4
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	440b      	add	r3, r1
 80017e2:	761a      	strb	r2, [r3, #24]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000e100 	.word	0xe000e100
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b089      	sub	sp, #36	; 0x24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f1c3 0307 	rsb	r3, r3, #7
 8001812:	2b04      	cmp	r3, #4
 8001814:	bf28      	it	cs
 8001816:	2304      	movcs	r3, #4
 8001818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3304      	adds	r3, #4
 800181e:	2b06      	cmp	r3, #6
 8001820:	d902      	bls.n	8001828 <NVIC_EncodePriority+0x30>
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3b03      	subs	r3, #3
 8001826:	e000      	b.n	800182a <NVIC_EncodePriority+0x32>
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182c:	f04f 32ff 	mov.w	r2, #4294967295
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43da      	mvns	r2, r3
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	401a      	ands	r2, r3
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001840:	f04f 31ff 	mov.w	r1, #4294967295
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	fa01 f303 	lsl.w	r3, r1, r3
 800184a:	43d9      	mvns	r1, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001850:	4313      	orrs	r3, r2
         );
}
 8001852:	4618      	mov	r0, r3
 8001854:	3724      	adds	r7, #36	; 0x24
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff ff4c 	bl	8001704 <__NVIC_SetPriorityGrouping>
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
 8001880:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001886:	f7ff ff61 	bl	800174c <__NVIC_GetPriorityGrouping>
 800188a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	68b9      	ldr	r1, [r7, #8]
 8001890:	6978      	ldr	r0, [r7, #20]
 8001892:	f7ff ffb1 	bl	80017f8 <NVIC_EncodePriority>
 8001896:	4602      	mov	r2, r0
 8001898:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189c:	4611      	mov	r1, r2
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff ff80 	bl	80017a4 <__NVIC_SetPriority>
}
 80018a4:	bf00      	nop
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff ff54 	bl	8001768 <__NVIC_EnableIRQ>
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018da:	2300      	movs	r3, #0
 80018dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
 80018e2:	e159      	b.n	8001b98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018e4:	2201      	movs	r2, #1
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	f040 8148 	bne.w	8001b92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 0303 	and.w	r3, r3, #3
 800190a:	2b01      	cmp	r3, #1
 800190c:	d005      	beq.n	800191a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001916:	2b02      	cmp	r3, #2
 8001918:	d130      	bne.n	800197c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	2203      	movs	r2, #3
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4013      	ands	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	68da      	ldr	r2, [r3, #12]
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001950:	2201      	movs	r2, #1
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	091b      	lsrs	r3, r3, #4
 8001966:	f003 0201 	and.w	r2, r3, #1
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	2b03      	cmp	r3, #3
 8001986:	d017      	beq.n	80019b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	2203      	movs	r2, #3
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d123      	bne.n	8001a0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	08da      	lsrs	r2, r3, #3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3208      	adds	r2, #8
 80019cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	220f      	movs	r2, #15
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	691a      	ldr	r2, [r3, #16]
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	08da      	lsrs	r2, r3, #3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3208      	adds	r2, #8
 8001a06:	69b9      	ldr	r1, [r7, #24]
 8001a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	2203      	movs	r2, #3
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0203 	and.w	r2, r3, #3
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 80a2 	beq.w	8001b92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	4b57      	ldr	r3, [pc, #348]	; (8001bb0 <HAL_GPIO_Init+0x2e8>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	4a56      	ldr	r2, [pc, #344]	; (8001bb0 <HAL_GPIO_Init+0x2e8>)
 8001a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5e:	4b54      	ldr	r3, [pc, #336]	; (8001bb0 <HAL_GPIO_Init+0x2e8>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a6a:	4a52      	ldr	r2, [pc, #328]	; (8001bb4 <HAL_GPIO_Init+0x2ec>)
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	089b      	lsrs	r3, r3, #2
 8001a70:	3302      	adds	r3, #2
 8001a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	220f      	movs	r2, #15
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a49      	ldr	r2, [pc, #292]	; (8001bb8 <HAL_GPIO_Init+0x2f0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d019      	beq.n	8001aca <HAL_GPIO_Init+0x202>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a48      	ldr	r2, [pc, #288]	; (8001bbc <HAL_GPIO_Init+0x2f4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d013      	beq.n	8001ac6 <HAL_GPIO_Init+0x1fe>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a47      	ldr	r2, [pc, #284]	; (8001bc0 <HAL_GPIO_Init+0x2f8>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d00d      	beq.n	8001ac2 <HAL_GPIO_Init+0x1fa>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a46      	ldr	r2, [pc, #280]	; (8001bc4 <HAL_GPIO_Init+0x2fc>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d007      	beq.n	8001abe <HAL_GPIO_Init+0x1f6>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a45      	ldr	r2, [pc, #276]	; (8001bc8 <HAL_GPIO_Init+0x300>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d101      	bne.n	8001aba <HAL_GPIO_Init+0x1f2>
 8001ab6:	2304      	movs	r3, #4
 8001ab8:	e008      	b.n	8001acc <HAL_GPIO_Init+0x204>
 8001aba:	2307      	movs	r3, #7
 8001abc:	e006      	b.n	8001acc <HAL_GPIO_Init+0x204>
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e004      	b.n	8001acc <HAL_GPIO_Init+0x204>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e002      	b.n	8001acc <HAL_GPIO_Init+0x204>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <HAL_GPIO_Init+0x204>
 8001aca:	2300      	movs	r3, #0
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	f002 0203 	and.w	r2, r2, #3
 8001ad2:	0092      	lsls	r2, r2, #2
 8001ad4:	4093      	lsls	r3, r2
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001adc:	4935      	ldr	r1, [pc, #212]	; (8001bb4 <HAL_GPIO_Init+0x2ec>)
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	089b      	lsrs	r3, r3, #2
 8001ae2:	3302      	adds	r3, #2
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aea:	4b38      	ldr	r3, [pc, #224]	; (8001bcc <HAL_GPIO_Init+0x304>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b0e:	4a2f      	ldr	r2, [pc, #188]	; (8001bcc <HAL_GPIO_Init+0x304>)
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b14:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <HAL_GPIO_Init+0x304>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b38:	4a24      	ldr	r2, [pc, #144]	; (8001bcc <HAL_GPIO_Init+0x304>)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b3e:	4b23      	ldr	r3, [pc, #140]	; (8001bcc <HAL_GPIO_Init+0x304>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b62:	4a1a      	ldr	r2, [pc, #104]	; (8001bcc <HAL_GPIO_Init+0x304>)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b68:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <HAL_GPIO_Init+0x304>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b8c:	4a0f      	ldr	r2, [pc, #60]	; (8001bcc <HAL_GPIO_Init+0x304>)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3301      	adds	r3, #1
 8001b96:	61fb      	str	r3, [r7, #28]
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	2b0f      	cmp	r3, #15
 8001b9c:	f67f aea2 	bls.w	80018e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3724      	adds	r7, #36	; 0x24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40013800 	.word	0x40013800
 8001bb8:	40020000 	.word	0x40020000
 8001bbc:	40020400 	.word	0x40020400
 8001bc0:	40020800 	.word	0x40020800
 8001bc4:	40020c00 	.word	0x40020c00
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40013c00 	.word	0x40013c00

08001bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	807b      	strh	r3, [r7, #2]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001be0:	787b      	ldrb	r3, [r7, #1]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001be6:	887a      	ldrh	r2, [r7, #2]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bec:	e003      	b.n	8001bf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bee:	887b      	ldrh	r3, [r7, #2]
 8001bf0:	041a      	lsls	r2, r3, #16
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	619a      	str	r2, [r3, #24]
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e12b      	b.n	8001e6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d106      	bne.n	8001c30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7fe fe38 	bl	80008a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2224      	movs	r2, #36	; 0x24
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0201 	bic.w	r2, r2, #1
 8001c46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c68:	f001 ffbe 	bl	8003be8 <HAL_RCC_GetPCLK1Freq>
 8001c6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	4a81      	ldr	r2, [pc, #516]	; (8001e78 <HAL_I2C_Init+0x274>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d807      	bhi.n	8001c88 <HAL_I2C_Init+0x84>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4a80      	ldr	r2, [pc, #512]	; (8001e7c <HAL_I2C_Init+0x278>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	bf94      	ite	ls
 8001c80:	2301      	movls	r3, #1
 8001c82:	2300      	movhi	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	e006      	b.n	8001c96 <HAL_I2C_Init+0x92>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4a7d      	ldr	r2, [pc, #500]	; (8001e80 <HAL_I2C_Init+0x27c>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	bf94      	ite	ls
 8001c90:	2301      	movls	r3, #1
 8001c92:	2300      	movhi	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e0e7      	b.n	8001e6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	4a78      	ldr	r2, [pc, #480]	; (8001e84 <HAL_I2C_Init+0x280>)
 8001ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca6:	0c9b      	lsrs	r3, r3, #18
 8001ca8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68ba      	ldr	r2, [r7, #8]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	4a6a      	ldr	r2, [pc, #424]	; (8001e78 <HAL_I2C_Init+0x274>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d802      	bhi.n	8001cd8 <HAL_I2C_Init+0xd4>
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	e009      	b.n	8001cec <HAL_I2C_Init+0xe8>
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cde:	fb02 f303 	mul.w	r3, r2, r3
 8001ce2:	4a69      	ldr	r2, [pc, #420]	; (8001e88 <HAL_I2C_Init+0x284>)
 8001ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce8:	099b      	lsrs	r3, r3, #6
 8001cea:	3301      	adds	r3, #1
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6812      	ldr	r2, [r2, #0]
 8001cf0:	430b      	orrs	r3, r1
 8001cf2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001cfe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	495c      	ldr	r1, [pc, #368]	; (8001e78 <HAL_I2C_Init+0x274>)
 8001d08:	428b      	cmp	r3, r1
 8001d0a:	d819      	bhi.n	8001d40 <HAL_I2C_Init+0x13c>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	1e59      	subs	r1, r3, #1
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d1a:	1c59      	adds	r1, r3, #1
 8001d1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d20:	400b      	ands	r3, r1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00a      	beq.n	8001d3c <HAL_I2C_Init+0x138>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1e59      	subs	r1, r3, #1
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d34:	3301      	adds	r3, #1
 8001d36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d3a:	e051      	b.n	8001de0 <HAL_I2C_Init+0x1dc>
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	e04f      	b.n	8001de0 <HAL_I2C_Init+0x1dc>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d111      	bne.n	8001d6c <HAL_I2C_Init+0x168>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	1e58      	subs	r0, r3, #1
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6859      	ldr	r1, [r3, #4]
 8001d50:	460b      	mov	r3, r1
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	440b      	add	r3, r1
 8001d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	bf0c      	ite	eq
 8001d64:	2301      	moveq	r3, #1
 8001d66:	2300      	movne	r3, #0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	e012      	b.n	8001d92 <HAL_I2C_Init+0x18e>
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	1e58      	subs	r0, r3, #1
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6859      	ldr	r1, [r3, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	0099      	lsls	r1, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d82:	3301      	adds	r3, #1
 8001d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	bf0c      	ite	eq
 8001d8c:	2301      	moveq	r3, #1
 8001d8e:	2300      	movne	r3, #0
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <HAL_I2C_Init+0x196>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e022      	b.n	8001de0 <HAL_I2C_Init+0x1dc>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10e      	bne.n	8001dc0 <HAL_I2C_Init+0x1bc>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1e58      	subs	r0, r3, #1
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6859      	ldr	r1, [r3, #4]
 8001daa:	460b      	mov	r3, r1
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	440b      	add	r3, r1
 8001db0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001db4:	3301      	adds	r3, #1
 8001db6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dbe:	e00f      	b.n	8001de0 <HAL_I2C_Init+0x1dc>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	1e58      	subs	r0, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6859      	ldr	r1, [r3, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	0099      	lsls	r1, r3, #2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ddc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	6809      	ldr	r1, [r1, #0]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69da      	ldr	r2, [r3, #28]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6911      	ldr	r1, [r2, #16]
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	68d2      	ldr	r2, [r2, #12]
 8001e1a:	4311      	orrs	r1, r2
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	430b      	orrs	r3, r1
 8001e22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	695a      	ldr	r2, [r3, #20]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0201 	orr.w	r2, r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2220      	movs	r2, #32
 8001e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	000186a0 	.word	0x000186a0
 8001e7c:	001e847f 	.word	0x001e847f
 8001e80:	003d08ff 	.word	0x003d08ff
 8001e84:	431bde83 	.word	0x431bde83
 8001e88:	10624dd3 	.word	0x10624dd3

08001e8c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e8e:	b08f      	sub	sp, #60	; 0x3c
 8001e90:	af0a      	add	r7, sp, #40	; 0x28
 8001e92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e10f      	b.n	80020be <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d106      	bne.n	8001ebe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f00b faa5 	bl	800d408 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d102      	bne.n	8001ed8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f003 f8c8 	bl	8005072 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	687e      	ldr	r6, [r7, #4]
 8001eea:	466d      	mov	r5, sp
 8001eec:	f106 0410 	add.w	r4, r6, #16
 8001ef0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001efc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f00:	1d33      	adds	r3, r6, #4
 8001f02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f04:	6838      	ldr	r0, [r7, #0]
 8001f06:	f002 ff9f 	bl	8004e48 <USB_CoreInit>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2202      	movs	r2, #2
 8001f14:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e0d0      	b.n	80020be <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2100      	movs	r1, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f003 f8b6 	bl	8005094 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f28:	2300      	movs	r3, #0
 8001f2a:	73fb      	strb	r3, [r7, #15]
 8001f2c:	e04a      	b.n	8001fc4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f2e:	7bfa      	ldrb	r2, [r7, #15]
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	4613      	mov	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4413      	add	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	333d      	adds	r3, #61	; 0x3d
 8001f3e:	2201      	movs	r2, #1
 8001f40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f42:	7bfa      	ldrb	r2, [r7, #15]
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	440b      	add	r3, r1
 8001f50:	333c      	adds	r3, #60	; 0x3c
 8001f52:	7bfa      	ldrb	r2, [r7, #15]
 8001f54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f56:	7bfa      	ldrb	r2, [r7, #15]
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
 8001f5a:	b298      	uxth	r0, r3
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	4413      	add	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	440b      	add	r3, r1
 8001f68:	3344      	adds	r3, #68	; 0x44
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f6e:	7bfa      	ldrb	r2, [r7, #15]
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	4413      	add	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	3340      	adds	r3, #64	; 0x40
 8001f7e:	2200      	movs	r2, #0
 8001f80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f82:	7bfa      	ldrb	r2, [r7, #15]
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	440b      	add	r3, r1
 8001f90:	3348      	adds	r3, #72	; 0x48
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f96:	7bfa      	ldrb	r2, [r7, #15]
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	334c      	adds	r3, #76	; 0x4c
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001faa:	7bfa      	ldrb	r2, [r7, #15]
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	3354      	adds	r3, #84	; 0x54
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	73fb      	strb	r3, [r7, #15]
 8001fc4:	7bfa      	ldrb	r2, [r7, #15]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d3af      	bcc.n	8001f2e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	73fb      	strb	r3, [r7, #15]
 8001fd2:	e044      	b.n	800205e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fd4:	7bfa      	ldrb	r2, [r7, #15]
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4413      	add	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fea:	7bfa      	ldrb	r2, [r7, #15]
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001ffc:	7bfa      	ldrb	r2, [r7, #15]
 8001ffe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002000:	7bfa      	ldrb	r2, [r7, #15]
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4413      	add	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002012:	2200      	movs	r2, #0
 8002014:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002016:	7bfa      	ldrb	r2, [r7, #15]
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4413      	add	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	440b      	add	r3, r1
 8002024:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800202c:	7bfa      	ldrb	r2, [r7, #15]
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002042:	7bfa      	ldrb	r2, [r7, #15]
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	440b      	add	r3, r1
 8002050:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	3301      	adds	r3, #1
 800205c:	73fb      	strb	r3, [r7, #15]
 800205e:	7bfa      	ldrb	r2, [r7, #15]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	429a      	cmp	r2, r3
 8002066:	d3b5      	bcc.n	8001fd4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	603b      	str	r3, [r7, #0]
 800206e:	687e      	ldr	r6, [r7, #4]
 8002070:	466d      	mov	r5, sp
 8002072:	f106 0410 	add.w	r4, r6, #16
 8002076:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002078:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800207a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800207c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800207e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002082:	e885 0003 	stmia.w	r5, {r0, r1}
 8002086:	1d33      	adds	r3, r6, #4
 8002088:	cb0e      	ldmia	r3, {r1, r2, r3}
 800208a:	6838      	ldr	r0, [r7, #0]
 800208c:	f003 f84e 	bl	800512c <USB_DevInit>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d005      	beq.n	80020a2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2202      	movs	r2, #2
 800209a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e00d      	b.n	80020be <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f004 f99d 	bl	80063f6 <USB_DevDisconnect>

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020c6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b084      	sub	sp, #16
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <HAL_PCD_Start+0x1c>
 80020de:	2302      	movs	r3, #2
 80020e0:	e020      	b.n	8002124 <HAL_PCD_Start+0x5e>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d109      	bne.n	8002106 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d005      	beq.n	8002106 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f002 ffa0 	bl	8005050 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f004 f94d 	bl	80063b4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800212c:	b590      	push	{r4, r7, lr}
 800212e:	b08d      	sub	sp, #52	; 0x34
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800213a:	6a3b      	ldr	r3, [r7, #32]
 800213c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f004 fa0b 	bl	800655e <USB_GetMode>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	f040 848a 	bne.w	8002a64 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f004 f96f 	bl	8006438 <USB_ReadInterrupts>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 8480 	beq.w	8002a62 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	0a1b      	lsrs	r3, r3, #8
 800216c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f004 f95c 	bl	8006438 <USB_ReadInterrupts>
 8002180:	4603      	mov	r3, r0
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b02      	cmp	r3, #2
 8002188:	d107      	bne.n	800219a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	695a      	ldr	r2, [r3, #20]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f002 0202 	and.w	r2, r2, #2
 8002198:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f004 f94a 	bl	8006438 <USB_ReadInterrupts>
 80021a4:	4603      	mov	r3, r0
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	2b10      	cmp	r3, #16
 80021ac:	d161      	bne.n	8002272 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	699a      	ldr	r2, [r3, #24]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 0210 	bic.w	r2, r2, #16
 80021bc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	f003 020f 	and.w	r2, r3, #15
 80021ca:	4613      	mov	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	4413      	add	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	4413      	add	r3, r2
 80021da:	3304      	adds	r3, #4
 80021dc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	0c5b      	lsrs	r3, r3, #17
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d124      	bne.n	8002234 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80021f0:	4013      	ands	r3, r2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d035      	beq.n	8002262 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	091b      	lsrs	r3, r3, #4
 80021fe:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002200:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002204:	b29b      	uxth	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	6a38      	ldr	r0, [r7, #32]
 800220a:	f003 ff81 	bl	8006110 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	691a      	ldr	r2, [r3, #16]
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	091b      	lsrs	r3, r3, #4
 8002216:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800221a:	441a      	add	r2, r3
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	6a1a      	ldr	r2, [r3, #32]
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	091b      	lsrs	r3, r3, #4
 8002228:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800222c:	441a      	add	r2, r3
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	621a      	str	r2, [r3, #32]
 8002232:	e016      	b.n	8002262 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	0c5b      	lsrs	r3, r3, #17
 8002238:	f003 030f 	and.w	r3, r3, #15
 800223c:	2b06      	cmp	r3, #6
 800223e:	d110      	bne.n	8002262 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002246:	2208      	movs	r2, #8
 8002248:	4619      	mov	r1, r3
 800224a:	6a38      	ldr	r0, [r7, #32]
 800224c:	f003 ff60 	bl	8006110 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	6a1a      	ldr	r2, [r3, #32]
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	091b      	lsrs	r3, r3, #4
 8002258:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800225c:	441a      	add	r2, r3
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	699a      	ldr	r2, [r3, #24]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f042 0210 	orr.w	r2, r2, #16
 8002270:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f004 f8de 	bl	8006438 <USB_ReadInterrupts>
 800227c:	4603      	mov	r3, r0
 800227e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002282:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002286:	f040 80a7 	bne.w	80023d8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f004 f8e3 	bl	800645e <USB_ReadDevAllOutEpInterrupt>
 8002298:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800229a:	e099      	b.n	80023d0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800229c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 808e 	beq.w	80023c4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	4611      	mov	r1, r2
 80022b2:	4618      	mov	r0, r3
 80022b4:	f004 f907 	bl	80064c6 <USB_ReadDevOutEPInterrupt>
 80022b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00c      	beq.n	80022de <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d0:	461a      	mov	r2, r3
 80022d2:	2301      	movs	r3, #1
 80022d4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80022d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 fec3 	bl	8003064 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00c      	beq.n	8002302 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	015a      	lsls	r2, r3, #5
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	4413      	add	r3, r2
 80022f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f4:	461a      	mov	r2, r3
 80022f6:	2308      	movs	r3, #8
 80022f8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80022fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 ff99 	bl	8003234 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	f003 0310 	and.w	r3, r3, #16
 8002308:	2b00      	cmp	r3, #0
 800230a:	d008      	beq.n	800231e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	015a      	lsls	r2, r3, #5
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	4413      	add	r3, r2
 8002314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002318:	461a      	mov	r2, r3
 800231a:	2310      	movs	r3, #16
 800231c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d030      	beq.n	800238a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002330:	2b80      	cmp	r3, #128	; 0x80
 8002332:	d109      	bne.n	8002348 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	69fa      	ldr	r2, [r7, #28]
 800233e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002342:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002346:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800234a:	4613      	mov	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	4413      	add	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	4413      	add	r3, r2
 800235a:	3304      	adds	r3, #4
 800235c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	78db      	ldrb	r3, [r3, #3]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d108      	bne.n	8002378 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2200      	movs	r2, #0
 800236a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	b2db      	uxtb	r3, r3
 8002370:	4619      	mov	r1, r3
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f00b f944 	bl	800d600 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	015a      	lsls	r2, r3, #5
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	4413      	add	r3, r2
 8002380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002384:	461a      	mov	r2, r3
 8002386:	2302      	movs	r3, #2
 8002388:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	f003 0320 	and.w	r3, r3, #32
 8002390:	2b00      	cmp	r3, #0
 8002392:	d008      	beq.n	80023a6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	4413      	add	r3, r2
 800239c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a0:	461a      	mov	r2, r3
 80023a2:	2320      	movs	r3, #32
 80023a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d009      	beq.n	80023c4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	015a      	lsls	r2, r3, #5
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	4413      	add	r3, r2
 80023b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023bc:	461a      	mov	r2, r3
 80023be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023c2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	3301      	adds	r3, #1
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023cc:	085b      	lsrs	r3, r3, #1
 80023ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f47f af62 	bne.w	800229c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f004 f82b 	bl	8006438 <USB_ReadInterrupts>
 80023e2:	4603      	mov	r3, r0
 80023e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023ec:	f040 80db 	bne.w	80025a6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f004 f84c 	bl	8006492 <USB_ReadDevAllInEpInterrupt>
 80023fa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002400:	e0cd      	b.n	800259e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 80c2 	beq.w	8002592 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f004 f872 	bl	8006502 <USB_ReadDevInEPInterrupt>
 800241e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d057      	beq.n	80024da <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	f003 030f 	and.w	r3, r3, #15
 8002430:	2201      	movs	r2, #1
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800243e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	43db      	mvns	r3, r3
 8002444:	69f9      	ldr	r1, [r7, #28]
 8002446:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800244a:	4013      	ands	r3, r2
 800244c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	015a      	lsls	r2, r3, #5
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	4413      	add	r3, r2
 8002456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800245a:	461a      	mov	r2, r3
 800245c:	2301      	movs	r3, #1
 800245e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d132      	bne.n	80024ce <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800246c:	4613      	mov	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	4413      	add	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	334c      	adds	r3, #76	; 0x4c
 8002478:	6819      	ldr	r1, [r3, #0]
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800247e:	4613      	mov	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	4413      	add	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4403      	add	r3, r0
 8002488:	3348      	adds	r3, #72	; 0x48
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4419      	add	r1, r3
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002492:	4613      	mov	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4403      	add	r3, r0
 800249c:	334c      	adds	r3, #76	; 0x4c
 800249e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d113      	bne.n	80024ce <HAL_PCD_IRQHandler+0x3a2>
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024aa:	4613      	mov	r3, r2
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	4413      	add	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	3354      	adds	r3, #84	; 0x54
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d108      	bne.n	80024ce <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6818      	ldr	r0, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024c6:	461a      	mov	r2, r3
 80024c8:	2101      	movs	r1, #1
 80024ca:	f004 f879 	bl	80065c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	4619      	mov	r1, r3
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f00b f818 	bl	800d50a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d008      	beq.n	80024f6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	015a      	lsls	r2, r3, #5
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024f0:	461a      	mov	r2, r3
 80024f2:	2308      	movs	r3, #8
 80024f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	f003 0310 	and.w	r3, r3, #16
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	015a      	lsls	r2, r3, #5
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	4413      	add	r3, r2
 8002508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800250c:	461a      	mov	r2, r3
 800250e:	2310      	movs	r3, #16
 8002510:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002518:	2b00      	cmp	r3, #0
 800251a:	d008      	beq.n	800252e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	015a      	lsls	r2, r3, #5
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	4413      	add	r3, r2
 8002524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002528:	461a      	mov	r2, r3
 800252a:	2340      	movs	r3, #64	; 0x40
 800252c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d023      	beq.n	8002580 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002538:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800253a:	6a38      	ldr	r0, [r7, #32]
 800253c:	f002 ff5a 	bl	80053f4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002542:	4613      	mov	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	3338      	adds	r3, #56	; 0x38
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	4413      	add	r3, r2
 8002550:	3304      	adds	r3, #4
 8002552:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	78db      	ldrb	r3, [r3, #3]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d108      	bne.n	800256e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	2200      	movs	r2, #0
 8002560:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	b2db      	uxtb	r3, r3
 8002566:	4619      	mov	r1, r3
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f00b f85b 	bl	800d624 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	015a      	lsls	r2, r3, #5
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	4413      	add	r3, r2
 8002576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800257a:	461a      	mov	r2, r3
 800257c:	2302      	movs	r3, #2
 800257e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800258a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 fcdb 	bl	8002f48 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	3301      	adds	r3, #1
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259a:	085b      	lsrs	r3, r3, #1
 800259c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800259e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f47f af2e 	bne.w	8002402 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f003 ff44 	bl	8006438 <USB_ReadInterrupts>
 80025b0:	4603      	mov	r3, r0
 80025b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025ba:	d122      	bne.n	8002602 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	69fa      	ldr	r2, [r7, #28]
 80025c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ca:	f023 0301 	bic.w	r3, r3, #1
 80025ce:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d108      	bne.n	80025ec <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80025e2:	2100      	movs	r1, #0
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 fec3 	bl	8003370 <HAL_PCDEx_LPM_Callback>
 80025ea:	e002      	b.n	80025f2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f00a fff9 	bl	800d5e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695a      	ldr	r2, [r3, #20]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002600:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f003 ff16 	bl	8006438 <USB_ReadInterrupts>
 800260c:	4603      	mov	r3, r0
 800260e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002616:	d112      	bne.n	800263e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b01      	cmp	r3, #1
 8002626:	d102      	bne.n	800262e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f00a ffb5 	bl	800d598 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	695a      	ldr	r2, [r3, #20]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800263c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f003 fef8 	bl	8006438 <USB_ReadInterrupts>
 8002648:	4603      	mov	r3, r0
 800264a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800264e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002652:	f040 80b7 	bne.w	80027c4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	69fa      	ldr	r2, [r7, #28]
 8002660:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002664:	f023 0301 	bic.w	r3, r3, #1
 8002668:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2110      	movs	r1, #16
 8002670:	4618      	mov	r0, r3
 8002672:	f002 febf 	bl	80053f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002676:	2300      	movs	r3, #0
 8002678:	62fb      	str	r3, [r7, #44]	; 0x2c
 800267a:	e046      	b.n	800270a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800267c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	4413      	add	r3, r2
 8002684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002688:	461a      	mov	r2, r3
 800268a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800268e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002692:	015a      	lsls	r2, r3, #5
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	4413      	add	r3, r2
 8002698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026a0:	0151      	lsls	r1, r2, #5
 80026a2:	69fa      	ldr	r2, [r7, #28]
 80026a4:	440a      	add	r2, r1
 80026a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80026aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026ae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80026b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026bc:	461a      	mov	r2, r3
 80026be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026c2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80026c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c6:	015a      	lsls	r2, r3, #5
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	4413      	add	r3, r2
 80026cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026d4:	0151      	lsls	r1, r2, #5
 80026d6:	69fa      	ldr	r2, [r7, #28]
 80026d8:	440a      	add	r2, r1
 80026da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026e2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80026e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026f4:	0151      	lsls	r1, r2, #5
 80026f6:	69fa      	ldr	r2, [r7, #28]
 80026f8:	440a      	add	r2, r1
 80026fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002702:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002706:	3301      	adds	r3, #1
 8002708:	62fb      	str	r3, [r7, #44]	; 0x2c
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002710:	429a      	cmp	r2, r3
 8002712:	d3b3      	bcc.n	800267c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800271a:	69db      	ldr	r3, [r3, #28]
 800271c:	69fa      	ldr	r2, [r7, #28]
 800271e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002722:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002726:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272c:	2b00      	cmp	r3, #0
 800272e:	d016      	beq.n	800275e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002736:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800273a:	69fa      	ldr	r2, [r7, #28]
 800273c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002740:	f043 030b 	orr.w	r3, r3, #11
 8002744:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800274e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002750:	69fa      	ldr	r2, [r7, #28]
 8002752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002756:	f043 030b 	orr.w	r3, r3, #11
 800275a:	6453      	str	r3, [r2, #68]	; 0x44
 800275c:	e015      	b.n	800278a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	69fa      	ldr	r2, [r7, #28]
 8002768:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800276c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002770:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002774:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	69fa      	ldr	r2, [r7, #28]
 8002780:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002784:	f043 030b 	orr.w	r3, r3, #11
 8002788:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002798:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800279c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6818      	ldr	r0, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027ae:	461a      	mov	r2, r3
 80027b0:	f003 ff06 	bl	80065c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695a      	ldr	r2, [r3, #20]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80027c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f003 fe35 	bl	8006438 <USB_ReadInterrupts>
 80027ce:	4603      	mov	r3, r0
 80027d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d8:	d124      	bne.n	8002824 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f003 fecb 	bl	800657a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f002 fe80 	bl	80054ee <USB_GetDevSpeed>
 80027ee:	4603      	mov	r3, r0
 80027f0:	461a      	mov	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681c      	ldr	r4, [r3, #0]
 80027fa:	f001 f9e9 	bl	8003bd0 <HAL_RCC_GetHCLKFreq>
 80027fe:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002804:	b2db      	uxtb	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	4620      	mov	r0, r4
 800280a:	f002 fb7f 	bl	8004f0c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f00a fea3 	bl	800d55a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695a      	ldr	r2, [r3, #20]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002822:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f003 fe05 	bl	8006438 <USB_ReadInterrupts>
 800282e:	4603      	mov	r3, r0
 8002830:	f003 0308 	and.w	r3, r3, #8
 8002834:	2b08      	cmp	r3, #8
 8002836:	d10a      	bne.n	800284e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f00a fe80 	bl	800d53e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695a      	ldr	r2, [r3, #20]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f002 0208 	and.w	r2, r2, #8
 800284c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f003 fdf0 	bl	8006438 <USB_ReadInterrupts>
 8002858:	4603      	mov	r3, r0
 800285a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285e:	2b80      	cmp	r3, #128	; 0x80
 8002860:	d122      	bne.n	80028a8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800286e:	2301      	movs	r3, #1
 8002870:	627b      	str	r3, [r7, #36]	; 0x24
 8002872:	e014      	b.n	800289e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002878:	4613      	mov	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	4413      	add	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d105      	bne.n	8002898 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	b2db      	uxtb	r3, r3
 8002890:	4619      	mov	r1, r3
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 fb27 	bl	8002ee6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	3301      	adds	r3, #1
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d3e5      	bcc.n	8002874 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f003 fdc3 	bl	8006438 <USB_ReadInterrupts>
 80028b2:	4603      	mov	r3, r0
 80028b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028bc:	d13b      	bne.n	8002936 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028be:	2301      	movs	r3, #1
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
 80028c2:	e02b      	b.n	800291c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d8:	4613      	mov	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	4413      	add	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	3340      	adds	r3, #64	; 0x40
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d115      	bne.n	8002916 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80028ea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	da12      	bge.n	8002916 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f4:	4613      	mov	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	4413      	add	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	333f      	adds	r3, #63	; 0x3f
 8002900:	2201      	movs	r2, #1
 8002902:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	b2db      	uxtb	r3, r3
 8002908:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800290c:	b2db      	uxtb	r3, r3
 800290e:	4619      	mov	r1, r3
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 fae8 	bl	8002ee6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	3301      	adds	r3, #1
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002922:	429a      	cmp	r2, r3
 8002924:	d3ce      	bcc.n	80028c4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695a      	ldr	r2, [r3, #20]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002934:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f003 fd7c 	bl	8006438 <USB_ReadInterrupts>
 8002940:	4603      	mov	r3, r0
 8002942:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002946:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800294a:	d155      	bne.n	80029f8 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800294c:	2301      	movs	r3, #1
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
 8002950:	e045      	b.n	80029de <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	015a      	lsls	r2, r3, #5
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	4413      	add	r3, r2
 800295a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002966:	4613      	mov	r3, r2
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	4413      	add	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	440b      	add	r3, r1
 8002970:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d12e      	bne.n	80029d8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800297a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800297c:	2b00      	cmp	r3, #0
 800297e:	da2b      	bge.n	80029d8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800298c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002990:	429a      	cmp	r2, r3
 8002992:	d121      	bne.n	80029d8 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002998:	4613      	mov	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4413      	add	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80029a6:	2201      	movs	r2, #1
 80029a8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10a      	bne.n	80029d8 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	69fa      	ldr	r2, [r7, #28]
 80029cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029d4:	6053      	str	r3, [r2, #4]
            break;
 80029d6:	e007      	b.n	80029e8 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	3301      	adds	r3, #1
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d3b4      	bcc.n	8002952 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695a      	ldr	r2, [r3, #20]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80029f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f003 fd1b 	bl	8006438 <USB_ReadInterrupts>
 8002a02:	4603      	mov	r3, r0
 8002a04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a0c:	d10a      	bne.n	8002a24 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f00a fe1a 	bl	800d648 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	695a      	ldr	r2, [r3, #20]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f003 fd05 	bl	8006438 <USB_ReadInterrupts>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	d115      	bne.n	8002a64 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d002      	beq.n	8002a50 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f00a fe0a 	bl	800d664 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6859      	ldr	r1, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	605a      	str	r2, [r3, #4]
 8002a60:	e000      	b.n	8002a64 <HAL_PCD_IRQHandler+0x938>
      return;
 8002a62:	bf00      	nop
    }
  }
}
 8002a64:	3734      	adds	r7, #52	; 0x34
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd90      	pop	{r4, r7, pc}

08002a6a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	460b      	mov	r3, r1
 8002a74:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_PCD_SetAddress+0x1a>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e013      	b.n	8002aac <HAL_PCD_SetAddress+0x42>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	78fa      	ldrb	r2, [r7, #3]
 8002a90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	78fa      	ldrb	r2, [r7, #3]
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f003 fc63 	bl	8006368 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	4608      	mov	r0, r1
 8002abe:	4611      	mov	r1, r2
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	70fb      	strb	r3, [r7, #3]
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	803b      	strh	r3, [r7, #0]
 8002aca:	4613      	mov	r3, r2
 8002acc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ad2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	da0f      	bge.n	8002afa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ada:	78fb      	ldrb	r3, [r7, #3]
 8002adc:	f003 020f 	and.w	r2, r3, #15
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	3338      	adds	r3, #56	; 0x38
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	4413      	add	r3, r2
 8002aee:	3304      	adds	r3, #4
 8002af0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2201      	movs	r2, #1
 8002af6:	705a      	strb	r2, [r3, #1]
 8002af8:	e00f      	b.n	8002b1a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002afa:	78fb      	ldrb	r3, [r7, #3]
 8002afc:	f003 020f 	and.w	r2, r3, #15
 8002b00:	4613      	mov	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	4413      	add	r3, r2
 8002b10:	3304      	adds	r3, #4
 8002b12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b1a:	78fb      	ldrb	r3, [r7, #3]
 8002b1c:	f003 030f 	and.w	r3, r3, #15
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b26:	883a      	ldrh	r2, [r7, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	78ba      	ldrb	r2, [r7, #2]
 8002b30:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	785b      	ldrb	r3, [r3, #1]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d004      	beq.n	8002b44 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b44:	78bb      	ldrb	r3, [r7, #2]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d102      	bne.n	8002b50 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d101      	bne.n	8002b5e <HAL_PCD_EP_Open+0xaa>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e00e      	b.n	8002b7c <HAL_PCD_EP_Open+0xc8>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68f9      	ldr	r1, [r7, #12]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f002 fce3 	bl	8005538 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002b7a:	7afb      	ldrb	r3, [r7, #11]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	da0f      	bge.n	8002bb8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b98:	78fb      	ldrb	r3, [r7, #3]
 8002b9a:	f003 020f 	and.w	r2, r3, #15
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	3338      	adds	r3, #56	; 0x38
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	4413      	add	r3, r2
 8002bac:	3304      	adds	r3, #4
 8002bae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	705a      	strb	r2, [r3, #1]
 8002bb6:	e00f      	b.n	8002bd8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bb8:	78fb      	ldrb	r3, [r7, #3]
 8002bba:	f003 020f 	and.w	r2, r3, #15
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	4413      	add	r3, r2
 8002bce:	3304      	adds	r3, #4
 8002bd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002bd8:	78fb      	ldrb	r3, [r7, #3]
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d101      	bne.n	8002bf2 <HAL_PCD_EP_Close+0x6e>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e00e      	b.n	8002c10 <HAL_PCD_EP_Close+0x8c>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68f9      	ldr	r1, [r7, #12]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f002 fd21 	bl	8005648 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	607a      	str	r2, [r7, #4]
 8002c22:	603b      	str	r3, [r7, #0]
 8002c24:	460b      	mov	r3, r1
 8002c26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c28:	7afb      	ldrb	r3, [r7, #11]
 8002c2a:	f003 020f 	and.w	r2, r3, #15
 8002c2e:	4613      	mov	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	4413      	add	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	3304      	adds	r3, #4
 8002c40:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	2200      	movs	r2, #0
 8002c52:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	2200      	movs	r2, #0
 8002c58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c5a:	7afb      	ldrb	r3, [r7, #11]
 8002c5c:	f003 030f 	and.w	r3, r3, #15
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d102      	bne.n	8002c74 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c74:	7afb      	ldrb	r3, [r7, #11]
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d109      	bne.n	8002c92 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6818      	ldr	r0, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	461a      	mov	r2, r3
 8002c8a:	6979      	ldr	r1, [r7, #20]
 8002c8c:	f003 f800 	bl	8005c90 <USB_EP0StartXfer>
 8002c90:	e008      	b.n	8002ca4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6818      	ldr	r0, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	6979      	ldr	r1, [r7, #20]
 8002ca0:	f002 fdae 	bl	8005800 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002cba:	78fb      	ldrb	r3, [r7, #3]
 8002cbc:	f003 020f 	and.w	r2, r3, #15
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002cd0:	681b      	ldr	r3, [r3, #0]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b086      	sub	sp, #24
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	60f8      	str	r0, [r7, #12]
 8002ce6:	607a      	str	r2, [r7, #4]
 8002ce8:	603b      	str	r3, [r7, #0]
 8002cea:	460b      	mov	r3, r1
 8002cec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cee:	7afb      	ldrb	r3, [r7, #11]
 8002cf0:	f003 020f 	and.w	r2, r3, #15
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	3338      	adds	r3, #56	; 0x38
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4413      	add	r3, r2
 8002d02:	3304      	adds	r3, #4
 8002d04:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	2200      	movs	r2, #0
 8002d16:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d1e:	7afb      	ldrb	r3, [r7, #11]
 8002d20:	f003 030f 	and.w	r3, r3, #15
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d102      	bne.n	8002d38 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d38:	7afb      	ldrb	r3, [r7, #11]
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d109      	bne.n	8002d56 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6818      	ldr	r0, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	6979      	ldr	r1, [r7, #20]
 8002d50:	f002 ff9e 	bl	8005c90 <USB_EP0StartXfer>
 8002d54:	e008      	b.n	8002d68 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	461a      	mov	r2, r3
 8002d62:	6979      	ldr	r1, [r7, #20]
 8002d64:	f002 fd4c 	bl	8005800 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b084      	sub	sp, #16
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	f003 020f 	and.w	r2, r3, #15
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d901      	bls.n	8002d90 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e050      	b.n	8002e32 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	da0f      	bge.n	8002db8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d98:	78fb      	ldrb	r3, [r7, #3]
 8002d9a:	f003 020f 	and.w	r2, r3, #15
 8002d9e:	4613      	mov	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	4413      	add	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	3338      	adds	r3, #56	; 0x38
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	4413      	add	r3, r2
 8002dac:	3304      	adds	r3, #4
 8002dae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2201      	movs	r2, #1
 8002db4:	705a      	strb	r2, [r3, #1]
 8002db6:	e00d      	b.n	8002dd4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002db8:	78fa      	ldrb	r2, [r7, #3]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	4413      	add	r3, r2
 8002dca:	3304      	adds	r3, #4
 8002dcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_PCD_EP_SetStall+0x82>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e01e      	b.n	8002e32 <HAL_PCD_EP_SetStall+0xc0>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68f9      	ldr	r1, [r7, #12]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f003 f9dc 	bl	80061c0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e08:	78fb      	ldrb	r3, [r7, #3]
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10a      	bne.n	8002e28 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6818      	ldr	r0, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	b2d9      	uxtb	r1, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e22:	461a      	mov	r2, r3
 8002e24:	f003 fbcc 	bl	80065c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b084      	sub	sp, #16
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	460b      	mov	r3, r1
 8002e44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e46:	78fb      	ldrb	r3, [r7, #3]
 8002e48:	f003 020f 	and.w	r2, r3, #15
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d901      	bls.n	8002e58 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e042      	b.n	8002ede <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	da0f      	bge.n	8002e80 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e60:	78fb      	ldrb	r3, [r7, #3]
 8002e62:	f003 020f 	and.w	r2, r3, #15
 8002e66:	4613      	mov	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	3338      	adds	r3, #56	; 0x38
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	4413      	add	r3, r2
 8002e74:	3304      	adds	r3, #4
 8002e76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	705a      	strb	r2, [r3, #1]
 8002e7e:	e00f      	b.n	8002ea0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	f003 020f 	and.w	r2, r3, #15
 8002e86:	4613      	mov	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	4413      	add	r3, r2
 8002e96:	3304      	adds	r3, #4
 8002e98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ea6:	78fb      	ldrb	r3, [r7, #3]
 8002ea8:	f003 030f 	and.w	r3, r3, #15
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_PCD_EP_ClrStall+0x86>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e00e      	b.n	8002ede <HAL_PCD_EP_ClrStall+0xa4>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68f9      	ldr	r1, [r7, #12]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f003 f9e4 	bl	800629c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b084      	sub	sp, #16
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002ef2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	da0c      	bge.n	8002f14 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002efa:	78fb      	ldrb	r3, [r7, #3]
 8002efc:	f003 020f 	and.w	r2, r3, #15
 8002f00:	4613      	mov	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	3338      	adds	r3, #56	; 0x38
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3304      	adds	r3, #4
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	e00c      	b.n	8002f2e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	f003 020f 	and.w	r2, r3, #15
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68f9      	ldr	r1, [r7, #12]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f003 f803 	bl	8005f40 <USB_EPStopXfer>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002f3e:	7afb      	ldrb	r3, [r7, #11]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08a      	sub	sp, #40	; 0x28
 8002f4c:	af02      	add	r7, sp, #8
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	4413      	add	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	3338      	adds	r3, #56	; 0x38
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a1a      	ldr	r2, [r3, #32]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d901      	bls.n	8002f80 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e06c      	b.n	800305a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	699a      	ldr	r2, [r3, #24]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	69fa      	ldr	r2, [r7, #28]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d902      	bls.n	8002f9c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	3303      	adds	r3, #3
 8002fa0:	089b      	lsrs	r3, r3, #2
 8002fa2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fa4:	e02b      	b.n	8002ffe <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	699a      	ldr	r2, [r3, #24]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	69fa      	ldr	r2, [r7, #28]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d902      	bls.n	8002fc2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	3303      	adds	r3, #3
 8002fc6:	089b      	lsrs	r3, r3, #2
 8002fc8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6919      	ldr	r1, [r3, #16]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	4603      	mov	r3, r0
 8002fe0:	6978      	ldr	r0, [r7, #20]
 8002fe2:	f003 f857 	bl	8006094 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	691a      	ldr	r2, [r3, #16]
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	441a      	add	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a1a      	ldr	r2, [r3, #32]
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	441a      	add	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4413      	add	r3, r2
 8003006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	b29b      	uxth	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	429a      	cmp	r2, r3
 8003012:	d809      	bhi.n	8003028 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a1a      	ldr	r2, [r3, #32]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800301c:	429a      	cmp	r2, r3
 800301e:	d203      	bcs.n	8003028 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1be      	bne.n	8002fa6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	699a      	ldr	r2, [r3, #24]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	429a      	cmp	r2, r3
 8003032:	d811      	bhi.n	8003058 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	2201      	movs	r2, #1
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	43db      	mvns	r3, r3
 800304e:	6939      	ldr	r1, [r7, #16]
 8003050:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003054:	4013      	ands	r3, r2
 8003056:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3720      	adds	r7, #32
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	333c      	adds	r3, #60	; 0x3c
 800307c:	3304      	adds	r3, #4
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	015a      	lsls	r2, r3, #5
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	4413      	add	r3, r2
 800308a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d17b      	bne.n	8003192 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d015      	beq.n	80030d0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	4a61      	ldr	r2, [pc, #388]	; (800322c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	f240 80b9 	bls.w	8003220 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 80b3 	beq.w	8003220 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	015a      	lsls	r2, r3, #5
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	4413      	add	r3, r2
 80030c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c6:	461a      	mov	r2, r3
 80030c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030cc:	6093      	str	r3, [r2, #8]
 80030ce:	e0a7      	b.n	8003220 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	f003 0320 	and.w	r3, r3, #32
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d009      	beq.n	80030ee <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	015a      	lsls	r2, r3, #5
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	4413      	add	r3, r2
 80030e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e6:	461a      	mov	r2, r3
 80030e8:	2320      	movs	r3, #32
 80030ea:	6093      	str	r3, [r2, #8]
 80030ec:	e098      	b.n	8003220 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f040 8093 	bne.w	8003220 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	4a4b      	ldr	r2, [pc, #300]	; (800322c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d90f      	bls.n	8003122 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00a      	beq.n	8003122 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	4413      	add	r3, r2
 8003114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003118:	461a      	mov	r2, r3
 800311a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800311e:	6093      	str	r3, [r2, #8]
 8003120:	e07e      	b.n	8003220 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	4613      	mov	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4413      	add	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	4413      	add	r3, r2
 8003134:	3304      	adds	r3, #4
 8003136:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	69da      	ldr	r2, [r3, #28]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	0159      	lsls	r1, r3, #5
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	440b      	add	r3, r1
 8003144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800314e:	1ad2      	subs	r2, r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d114      	bne.n	8003184 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d109      	bne.n	8003176 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800316c:	461a      	mov	r2, r3
 800316e:	2101      	movs	r1, #1
 8003170:	f003 fa26 	bl	80065c0 <USB_EP0_OutStart>
 8003174:	e006      	b.n	8003184 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	691a      	ldr	r2, [r3, #16]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	441a      	add	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	b2db      	uxtb	r3, r3
 8003188:	4619      	mov	r1, r3
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f00a f9a2 	bl	800d4d4 <HAL_PCD_DataOutStageCallback>
 8003190:	e046      	b.n	8003220 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	4a26      	ldr	r2, [pc, #152]	; (8003230 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d124      	bne.n	80031e4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00a      	beq.n	80031ba <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	015a      	lsls	r2, r3, #5
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	4413      	add	r3, r2
 80031ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b0:	461a      	mov	r2, r3
 80031b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031b6:	6093      	str	r3, [r2, #8]
 80031b8:	e032      	b.n	8003220 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d008      	beq.n	80031d6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	015a      	lsls	r2, r3, #5
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d0:	461a      	mov	r2, r3
 80031d2:	2320      	movs	r3, #32
 80031d4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	4619      	mov	r1, r3
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f00a f979 	bl	800d4d4 <HAL_PCD_DataOutStageCallback>
 80031e2:	e01d      	b.n	8003220 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d114      	bne.n	8003214 <PCD_EP_OutXfrComplete_int+0x1b0>
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	4613      	mov	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	4413      	add	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d108      	bne.n	8003214 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6818      	ldr	r0, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800320c:	461a      	mov	r2, r3
 800320e:	2100      	movs	r1, #0
 8003210:	f003 f9d6 	bl	80065c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	b2db      	uxtb	r3, r3
 8003218:	4619      	mov	r1, r3
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f00a f95a 	bl	800d4d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3720      	adds	r7, #32
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	4f54300a 	.word	0x4f54300a
 8003230:	4f54310a 	.word	0x4f54310a

08003234 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	333c      	adds	r3, #60	; 0x3c
 800324c:	3304      	adds	r3, #4
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	4413      	add	r3, r2
 800325a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4a15      	ldr	r2, [pc, #84]	; (80032bc <PCD_EP_OutSetupPacket_int+0x88>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d90e      	bls.n	8003288 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003270:	2b00      	cmp	r3, #0
 8003272:	d009      	beq.n	8003288 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	4413      	add	r3, r2
 800327c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003280:	461a      	mov	r2, r3
 8003282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003286:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f00a f911 	bl	800d4b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4a0a      	ldr	r2, [pc, #40]	; (80032bc <PCD_EP_OutSetupPacket_int+0x88>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d90c      	bls.n	80032b0 <PCD_EP_OutSetupPacket_int+0x7c>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d108      	bne.n	80032b0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6818      	ldr	r0, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032a8:	461a      	mov	r2, r3
 80032aa:	2101      	movs	r1, #1
 80032ac:	f003 f988 	bl	80065c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	4f54300a 	.word	0x4f54300a

080032c0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	460b      	mov	r3, r1
 80032ca:	70fb      	strb	r3, [r7, #3]
 80032cc:	4613      	mov	r3, r2
 80032ce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80032d8:	78fb      	ldrb	r3, [r7, #3]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d107      	bne.n	80032ee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80032de:	883b      	ldrh	r3, [r7, #0]
 80032e0:	0419      	lsls	r1, r3, #16
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	629a      	str	r2, [r3, #40]	; 0x28
 80032ec:	e028      	b.n	8003340 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f4:	0c1b      	lsrs	r3, r3, #16
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	4413      	add	r3, r2
 80032fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032fc:	2300      	movs	r3, #0
 80032fe:	73fb      	strb	r3, [r7, #15]
 8003300:	e00d      	b.n	800331e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	7bfb      	ldrb	r3, [r7, #15]
 8003308:	3340      	adds	r3, #64	; 0x40
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	0c1b      	lsrs	r3, r3, #16
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	4413      	add	r3, r2
 8003316:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003318:	7bfb      	ldrb	r3, [r7, #15]
 800331a:	3301      	adds	r3, #1
 800331c:	73fb      	strb	r3, [r7, #15]
 800331e:	7bfa      	ldrb	r2, [r7, #15]
 8003320:	78fb      	ldrb	r3, [r7, #3]
 8003322:	3b01      	subs	r3, #1
 8003324:	429a      	cmp	r2, r3
 8003326:	d3ec      	bcc.n	8003302 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003328:	883b      	ldrh	r3, [r7, #0]
 800332a:	0418      	lsls	r0, r3, #16
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6819      	ldr	r1, [r3, #0]
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	3b01      	subs	r3, #1
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	4302      	orrs	r2, r0
 8003338:	3340      	adds	r3, #64	; 0x40
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	460b      	mov	r3, r1
 8003358:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	887a      	ldrh	r2, [r7, #2]
 8003360:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e267      	b.n	800386a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d075      	beq.n	8003492 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033a6:	4b88      	ldr	r3, [pc, #544]	; (80035c8 <HAL_RCC_OscConfig+0x240>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d00c      	beq.n	80033cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033b2:	4b85      	ldr	r3, [pc, #532]	; (80035c8 <HAL_RCC_OscConfig+0x240>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d112      	bne.n	80033e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033be:	4b82      	ldr	r3, [pc, #520]	; (80035c8 <HAL_RCC_OscConfig+0x240>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ca:	d10b      	bne.n	80033e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033cc:	4b7e      	ldr	r3, [pc, #504]	; (80035c8 <HAL_RCC_OscConfig+0x240>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d05b      	beq.n	8003490 <HAL_RCC_OscConfig+0x108>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d157      	bne.n	8003490 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e242      	b.n	800386a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ec:	d106      	bne.n	80033fc <HAL_RCC_OscConfig+0x74>
 80033ee:	4b76      	ldr	r3, [pc, #472]	; (80035c8 <HAL_RCC_OscConfig+0x240>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a75      	ldr	r2, [pc, #468]	; (80035c8 <HAL_RCC_OscConfig+0x240>)
 80033f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	e01d      	b.n	8003438 <HAL_RCC_OscConfig+0xb0>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003404:	d10c      	bne.n	8003420 <HAL_RCC_OscConfig+0x98>
 8003406:	4b70      	ldr	r3, [pc, #448]	; (80035c8 <HAL_RCC_OscConfig+0x240>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a6f      	ldr	r2, [pc, #444]	; (80035c8 <HAL_RCC_OscConfig+0x240>)
 800340c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	4b6d      	ldr	r3, [pc, #436]	; (80035c8 <HAL_RCC_OscConfig+0x240>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a6c      	ldr	r2, [pc, #432]	; (80035c8 <HAL_RCC_OscConfig+0x240>)
 8003418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	e00b      	b.n	8003438 <HAL_RCC_OscConfig+0xb0>
 8003420:	4b69      	ldr	r3, [pc, #420]	; (80035c8 <HAL_RCC_OscConfig+0x240>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a68      	ldr	r2, [pc, #416]	; (80035c8 <HAL_RCC_OscConfig+0x240>)
 8003426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	4b66      	ldr	r3, [pc, #408]	; (80035c8 <HAL_RCC_OscConfig+0x240>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a65      	ldr	r2, [pc, #404]	; (80035c8 <HAL_RCC_OscConfig+0x240>)
 8003432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d013      	beq.n	8003468 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003440:	f7fd fece 	bl	80011e0 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003448:	f7fd feca 	bl	80011e0 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b64      	cmp	r3, #100	; 0x64
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e207      	b.n	800386a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345a:	4b5b      	ldr	r3, [pc, #364]	; (80035c8 <HAL_RCC_OscConfig+0x240>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f0      	beq.n	8003448 <HAL_RCC_OscConfig+0xc0>
 8003466:	e014      	b.n	8003492 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003468:	f7fd feba 	bl	80011e0 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003470:	f7fd feb6 	bl	80011e0 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b64      	cmp	r3, #100	; 0x64
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e1f3      	b.n	800386a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003482:	4b51      	ldr	r3, [pc, #324]	; (80035c8 <HAL_RCC_OscConfig+0x240>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f0      	bne.n	8003470 <HAL_RCC_OscConfig+0xe8>
 800348e:	e000      	b.n	8003492 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d063      	beq.n	8003566 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800349e:	4b4a      	ldr	r3, [pc, #296]	; (80035c8 <HAL_RCC_OscConfig+0x240>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 030c 	and.w	r3, r3, #12
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00b      	beq.n	80034c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034aa:	4b47      	ldr	r3, [pc, #284]	; (80035c8 <HAL_RCC_OscConfig+0x240>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d11c      	bne.n	80034f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034b6:	4b44      	ldr	r3, [pc, #272]	; (80035c8 <HAL_RCC_OscConfig+0x240>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d116      	bne.n	80034f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034c2:	4b41      	ldr	r3, [pc, #260]	; (80035c8 <HAL_RCC_OscConfig+0x240>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d005      	beq.n	80034da <HAL_RCC_OscConfig+0x152>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d001      	beq.n	80034da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e1c7      	b.n	800386a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034da:	4b3b      	ldr	r3, [pc, #236]	; (80035c8 <HAL_RCC_OscConfig+0x240>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	4937      	ldr	r1, [pc, #220]	; (80035c8 <HAL_RCC_OscConfig+0x240>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ee:	e03a      	b.n	8003566 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d020      	beq.n	800353a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034f8:	4b34      	ldr	r3, [pc, #208]	; (80035cc <HAL_RCC_OscConfig+0x244>)
 80034fa:	2201      	movs	r2, #1
 80034fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fe:	f7fd fe6f 	bl	80011e0 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003506:	f7fd fe6b 	bl	80011e0 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e1a8      	b.n	800386a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003518:	4b2b      	ldr	r3, [pc, #172]	; (80035c8 <HAL_RCC_OscConfig+0x240>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0f0      	beq.n	8003506 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003524:	4b28      	ldr	r3, [pc, #160]	; (80035c8 <HAL_RCC_OscConfig+0x240>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	4925      	ldr	r1, [pc, #148]	; (80035c8 <HAL_RCC_OscConfig+0x240>)
 8003534:	4313      	orrs	r3, r2
 8003536:	600b      	str	r3, [r1, #0]
 8003538:	e015      	b.n	8003566 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800353a:	4b24      	ldr	r3, [pc, #144]	; (80035cc <HAL_RCC_OscConfig+0x244>)
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003540:	f7fd fe4e 	bl	80011e0 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003548:	f7fd fe4a 	bl	80011e0 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e187      	b.n	800386a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800355a:	4b1b      	ldr	r3, [pc, #108]	; (80035c8 <HAL_RCC_OscConfig+0x240>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f0      	bne.n	8003548 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	2b00      	cmp	r3, #0
 8003570:	d036      	beq.n	80035e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d016      	beq.n	80035a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800357a:	4b15      	ldr	r3, [pc, #84]	; (80035d0 <HAL_RCC_OscConfig+0x248>)
 800357c:	2201      	movs	r2, #1
 800357e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003580:	f7fd fe2e 	bl	80011e0 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003588:	f7fd fe2a 	bl	80011e0 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e167      	b.n	800386a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800359a:	4b0b      	ldr	r3, [pc, #44]	; (80035c8 <HAL_RCC_OscConfig+0x240>)
 800359c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0f0      	beq.n	8003588 <HAL_RCC_OscConfig+0x200>
 80035a6:	e01b      	b.n	80035e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035a8:	4b09      	ldr	r3, [pc, #36]	; (80035d0 <HAL_RCC_OscConfig+0x248>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ae:	f7fd fe17 	bl	80011e0 <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b4:	e00e      	b.n	80035d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035b6:	f7fd fe13 	bl	80011e0 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d907      	bls.n	80035d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e150      	b.n	800386a <HAL_RCC_OscConfig+0x4e2>
 80035c8:	40023800 	.word	0x40023800
 80035cc:	42470000 	.word	0x42470000
 80035d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d4:	4b88      	ldr	r3, [pc, #544]	; (80037f8 <HAL_RCC_OscConfig+0x470>)
 80035d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1ea      	bne.n	80035b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 8097 	beq.w	800371c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ee:	2300      	movs	r3, #0
 80035f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035f2:	4b81      	ldr	r3, [pc, #516]	; (80037f8 <HAL_RCC_OscConfig+0x470>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10f      	bne.n	800361e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	60bb      	str	r3, [r7, #8]
 8003602:	4b7d      	ldr	r3, [pc, #500]	; (80037f8 <HAL_RCC_OscConfig+0x470>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	4a7c      	ldr	r2, [pc, #496]	; (80037f8 <HAL_RCC_OscConfig+0x470>)
 8003608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800360c:	6413      	str	r3, [r2, #64]	; 0x40
 800360e:	4b7a      	ldr	r3, [pc, #488]	; (80037f8 <HAL_RCC_OscConfig+0x470>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003616:	60bb      	str	r3, [r7, #8]
 8003618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800361a:	2301      	movs	r3, #1
 800361c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361e:	4b77      	ldr	r3, [pc, #476]	; (80037fc <HAL_RCC_OscConfig+0x474>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003626:	2b00      	cmp	r3, #0
 8003628:	d118      	bne.n	800365c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800362a:	4b74      	ldr	r3, [pc, #464]	; (80037fc <HAL_RCC_OscConfig+0x474>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a73      	ldr	r2, [pc, #460]	; (80037fc <HAL_RCC_OscConfig+0x474>)
 8003630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003636:	f7fd fdd3 	bl	80011e0 <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363c:	e008      	b.n	8003650 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800363e:	f7fd fdcf 	bl	80011e0 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e10c      	b.n	800386a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003650:	4b6a      	ldr	r3, [pc, #424]	; (80037fc <HAL_RCC_OscConfig+0x474>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0f0      	beq.n	800363e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d106      	bne.n	8003672 <HAL_RCC_OscConfig+0x2ea>
 8003664:	4b64      	ldr	r3, [pc, #400]	; (80037f8 <HAL_RCC_OscConfig+0x470>)
 8003666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003668:	4a63      	ldr	r2, [pc, #396]	; (80037f8 <HAL_RCC_OscConfig+0x470>)
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	6713      	str	r3, [r2, #112]	; 0x70
 8003670:	e01c      	b.n	80036ac <HAL_RCC_OscConfig+0x324>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	2b05      	cmp	r3, #5
 8003678:	d10c      	bne.n	8003694 <HAL_RCC_OscConfig+0x30c>
 800367a:	4b5f      	ldr	r3, [pc, #380]	; (80037f8 <HAL_RCC_OscConfig+0x470>)
 800367c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367e:	4a5e      	ldr	r2, [pc, #376]	; (80037f8 <HAL_RCC_OscConfig+0x470>)
 8003680:	f043 0304 	orr.w	r3, r3, #4
 8003684:	6713      	str	r3, [r2, #112]	; 0x70
 8003686:	4b5c      	ldr	r3, [pc, #368]	; (80037f8 <HAL_RCC_OscConfig+0x470>)
 8003688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368a:	4a5b      	ldr	r2, [pc, #364]	; (80037f8 <HAL_RCC_OscConfig+0x470>)
 800368c:	f043 0301 	orr.w	r3, r3, #1
 8003690:	6713      	str	r3, [r2, #112]	; 0x70
 8003692:	e00b      	b.n	80036ac <HAL_RCC_OscConfig+0x324>
 8003694:	4b58      	ldr	r3, [pc, #352]	; (80037f8 <HAL_RCC_OscConfig+0x470>)
 8003696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003698:	4a57      	ldr	r2, [pc, #348]	; (80037f8 <HAL_RCC_OscConfig+0x470>)
 800369a:	f023 0301 	bic.w	r3, r3, #1
 800369e:	6713      	str	r3, [r2, #112]	; 0x70
 80036a0:	4b55      	ldr	r3, [pc, #340]	; (80037f8 <HAL_RCC_OscConfig+0x470>)
 80036a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a4:	4a54      	ldr	r2, [pc, #336]	; (80037f8 <HAL_RCC_OscConfig+0x470>)
 80036a6:	f023 0304 	bic.w	r3, r3, #4
 80036aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d015      	beq.n	80036e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b4:	f7fd fd94 	bl	80011e0 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ba:	e00a      	b.n	80036d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036bc:	f7fd fd90 	bl	80011e0 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e0cb      	b.n	800386a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d2:	4b49      	ldr	r3, [pc, #292]	; (80037f8 <HAL_RCC_OscConfig+0x470>)
 80036d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0ee      	beq.n	80036bc <HAL_RCC_OscConfig+0x334>
 80036de:	e014      	b.n	800370a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e0:	f7fd fd7e 	bl	80011e0 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036e6:	e00a      	b.n	80036fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036e8:	f7fd fd7a 	bl	80011e0 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e0b5      	b.n	800386a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036fe:	4b3e      	ldr	r3, [pc, #248]	; (80037f8 <HAL_RCC_OscConfig+0x470>)
 8003700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1ee      	bne.n	80036e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800370a:	7dfb      	ldrb	r3, [r7, #23]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d105      	bne.n	800371c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003710:	4b39      	ldr	r3, [pc, #228]	; (80037f8 <HAL_RCC_OscConfig+0x470>)
 8003712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003714:	4a38      	ldr	r2, [pc, #224]	; (80037f8 <HAL_RCC_OscConfig+0x470>)
 8003716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800371a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 80a1 	beq.w	8003868 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003726:	4b34      	ldr	r3, [pc, #208]	; (80037f8 <HAL_RCC_OscConfig+0x470>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 030c 	and.w	r3, r3, #12
 800372e:	2b08      	cmp	r3, #8
 8003730:	d05c      	beq.n	80037ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	2b02      	cmp	r3, #2
 8003738:	d141      	bne.n	80037be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373a:	4b31      	ldr	r3, [pc, #196]	; (8003800 <HAL_RCC_OscConfig+0x478>)
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003740:	f7fd fd4e 	bl	80011e0 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003748:	f7fd fd4a 	bl	80011e0 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e087      	b.n	800386a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375a:	4b27      	ldr	r3, [pc, #156]	; (80037f8 <HAL_RCC_OscConfig+0x470>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f0      	bne.n	8003748 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69da      	ldr	r2, [r3, #28]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	019b      	lsls	r3, r3, #6
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377c:	085b      	lsrs	r3, r3, #1
 800377e:	3b01      	subs	r3, #1
 8003780:	041b      	lsls	r3, r3, #16
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	061b      	lsls	r3, r3, #24
 800378a:	491b      	ldr	r1, [pc, #108]	; (80037f8 <HAL_RCC_OscConfig+0x470>)
 800378c:	4313      	orrs	r3, r2
 800378e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003790:	4b1b      	ldr	r3, [pc, #108]	; (8003800 <HAL_RCC_OscConfig+0x478>)
 8003792:	2201      	movs	r2, #1
 8003794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003796:	f7fd fd23 	bl	80011e0 <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800379c:	e008      	b.n	80037b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800379e:	f7fd fd1f 	bl	80011e0 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e05c      	b.n	800386a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b0:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <HAL_RCC_OscConfig+0x470>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0f0      	beq.n	800379e <HAL_RCC_OscConfig+0x416>
 80037bc:	e054      	b.n	8003868 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037be:	4b10      	ldr	r3, [pc, #64]	; (8003800 <HAL_RCC_OscConfig+0x478>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c4:	f7fd fd0c 	bl	80011e0 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037cc:	f7fd fd08 	bl	80011e0 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e045      	b.n	800386a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037de:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <HAL_RCC_OscConfig+0x470>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1f0      	bne.n	80037cc <HAL_RCC_OscConfig+0x444>
 80037ea:	e03d      	b.n	8003868 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d107      	bne.n	8003804 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e038      	b.n	800386a <HAL_RCC_OscConfig+0x4e2>
 80037f8:	40023800 	.word	0x40023800
 80037fc:	40007000 	.word	0x40007000
 8003800:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003804:	4b1b      	ldr	r3, [pc, #108]	; (8003874 <HAL_RCC_OscConfig+0x4ec>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d028      	beq.n	8003864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800381c:	429a      	cmp	r2, r3
 800381e:	d121      	bne.n	8003864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800382a:	429a      	cmp	r2, r3
 800382c:	d11a      	bne.n	8003864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003834:	4013      	ands	r3, r2
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800383a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800383c:	4293      	cmp	r3, r2
 800383e:	d111      	bne.n	8003864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384a:	085b      	lsrs	r3, r3, #1
 800384c:	3b01      	subs	r3, #1
 800384e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003850:	429a      	cmp	r2, r3
 8003852:	d107      	bne.n	8003864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003860:	429a      	cmp	r2, r3
 8003862:	d001      	beq.n	8003868 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e000      	b.n	800386a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40023800 	.word	0x40023800

08003878 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e0cc      	b.n	8003a26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800388c:	4b68      	ldr	r3, [pc, #416]	; (8003a30 <HAL_RCC_ClockConfig+0x1b8>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d90c      	bls.n	80038b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389a:	4b65      	ldr	r3, [pc, #404]	; (8003a30 <HAL_RCC_ClockConfig+0x1b8>)
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a2:	4b63      	ldr	r3, [pc, #396]	; (8003a30 <HAL_RCC_ClockConfig+0x1b8>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d001      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e0b8      	b.n	8003a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d020      	beq.n	8003902 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038cc:	4b59      	ldr	r3, [pc, #356]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	4a58      	ldr	r2, [pc, #352]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038e4:	4b53      	ldr	r3, [pc, #332]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	4a52      	ldr	r2, [pc, #328]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038f0:	4b50      	ldr	r3, [pc, #320]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	494d      	ldr	r1, [pc, #308]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d044      	beq.n	8003998 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d107      	bne.n	8003926 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003916:	4b47      	ldr	r3, [pc, #284]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d119      	bne.n	8003956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e07f      	b.n	8003a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b02      	cmp	r3, #2
 800392c:	d003      	beq.n	8003936 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003932:	2b03      	cmp	r3, #3
 8003934:	d107      	bne.n	8003946 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003936:	4b3f      	ldr	r3, [pc, #252]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d109      	bne.n	8003956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e06f      	b.n	8003a26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003946:	4b3b      	ldr	r3, [pc, #236]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e067      	b.n	8003a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003956:	4b37      	ldr	r3, [pc, #220]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f023 0203 	bic.w	r2, r3, #3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	4934      	ldr	r1, [pc, #208]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	4313      	orrs	r3, r2
 8003966:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003968:	f7fd fc3a 	bl	80011e0 <HAL_GetTick>
 800396c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396e:	e00a      	b.n	8003986 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003970:	f7fd fc36 	bl	80011e0 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	f241 3288 	movw	r2, #5000	; 0x1388
 800397e:	4293      	cmp	r3, r2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e04f      	b.n	8003a26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003986:	4b2b      	ldr	r3, [pc, #172]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 020c 	and.w	r2, r3, #12
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	429a      	cmp	r2, r3
 8003996:	d1eb      	bne.n	8003970 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003998:	4b25      	ldr	r3, [pc, #148]	; (8003a30 <HAL_RCC_ClockConfig+0x1b8>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d20c      	bcs.n	80039c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a6:	4b22      	ldr	r3, [pc, #136]	; (8003a30 <HAL_RCC_ClockConfig+0x1b8>)
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ae:	4b20      	ldr	r3, [pc, #128]	; (8003a30 <HAL_RCC_ClockConfig+0x1b8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d001      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e032      	b.n	8003a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d008      	beq.n	80039de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039cc:	4b19      	ldr	r3, [pc, #100]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	4916      	ldr	r1, [pc, #88]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d009      	beq.n	80039fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ea:	4b12      	ldr	r3, [pc, #72]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	490e      	ldr	r1, [pc, #56]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039fe:	f000 f821 	bl	8003a44 <HAL_RCC_GetSysClockFreq>
 8003a02:	4602      	mov	r2, r0
 8003a04:	4b0b      	ldr	r3, [pc, #44]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	091b      	lsrs	r3, r3, #4
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	490a      	ldr	r1, [pc, #40]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 8003a10:	5ccb      	ldrb	r3, [r1, r3]
 8003a12:	fa22 f303 	lsr.w	r3, r2, r3
 8003a16:	4a09      	ldr	r2, [pc, #36]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a1a:	4b09      	ldr	r3, [pc, #36]	; (8003a40 <HAL_RCC_ClockConfig+0x1c8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fd f956 	bl	8000cd0 <HAL_InitTick>

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40023c00 	.word	0x40023c00
 8003a34:	40023800 	.word	0x40023800
 8003a38:	0800e528 	.word	0x0800e528
 8003a3c:	20000000 	.word	0x20000000
 8003a40:	20000004 	.word	0x20000004

08003a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a48:	b090      	sub	sp, #64	; 0x40
 8003a4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8003a50:	2300      	movs	r3, #0
 8003a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a54:	2300      	movs	r3, #0
 8003a56:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a5c:	4b59      	ldr	r3, [pc, #356]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f003 030c 	and.w	r3, r3, #12
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d00d      	beq.n	8003a84 <HAL_RCC_GetSysClockFreq+0x40>
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	f200 80a1 	bhi.w	8003bb0 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <HAL_RCC_GetSysClockFreq+0x34>
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d003      	beq.n	8003a7e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a76:	e09b      	b.n	8003bb0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a78:	4b53      	ldr	r3, [pc, #332]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a7a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003a7c:	e09b      	b.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a7e:	4b53      	ldr	r3, [pc, #332]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x188>)
 8003a80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a82:	e098      	b.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a84:	4b4f      	ldr	r3, [pc, #316]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a8c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a8e:	4b4d      	ldr	r3, [pc, #308]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d028      	beq.n	8003aec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a9a:	4b4a      	ldr	r3, [pc, #296]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	099b      	lsrs	r3, r3, #6
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	623b      	str	r3, [r7, #32]
 8003aa4:	627a      	str	r2, [r7, #36]	; 0x24
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003aac:	2100      	movs	r1, #0
 8003aae:	4b47      	ldr	r3, [pc, #284]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x188>)
 8003ab0:	fb03 f201 	mul.w	r2, r3, r1
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	fb00 f303 	mul.w	r3, r0, r3
 8003aba:	4413      	add	r3, r2
 8003abc:	4a43      	ldr	r2, [pc, #268]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x188>)
 8003abe:	fba0 1202 	umull	r1, r2, r0, r2
 8003ac2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ac4:	460a      	mov	r2, r1
 8003ac6:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aca:	4413      	add	r3, r2
 8003acc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	61bb      	str	r3, [r7, #24]
 8003ad4:	61fa      	str	r2, [r7, #28]
 8003ad6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ada:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003ade:	f7fc fc1f 	bl	8000320 <__aeabi_uldivmod>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aea:	e053      	b.n	8003b94 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aec:	4b35      	ldr	r3, [pc, #212]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	099b      	lsrs	r3, r3, #6
 8003af2:	2200      	movs	r2, #0
 8003af4:	613b      	str	r3, [r7, #16]
 8003af6:	617a      	str	r2, [r7, #20]
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003afe:	f04f 0b00 	mov.w	fp, #0
 8003b02:	4652      	mov	r2, sl
 8003b04:	465b      	mov	r3, fp
 8003b06:	f04f 0000 	mov.w	r0, #0
 8003b0a:	f04f 0100 	mov.w	r1, #0
 8003b0e:	0159      	lsls	r1, r3, #5
 8003b10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b14:	0150      	lsls	r0, r2, #5
 8003b16:	4602      	mov	r2, r0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	ebb2 080a 	subs.w	r8, r2, sl
 8003b1e:	eb63 090b 	sbc.w	r9, r3, fp
 8003b22:	f04f 0200 	mov.w	r2, #0
 8003b26:	f04f 0300 	mov.w	r3, #0
 8003b2a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b2e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b32:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b36:	ebb2 0408 	subs.w	r4, r2, r8
 8003b3a:	eb63 0509 	sbc.w	r5, r3, r9
 8003b3e:	f04f 0200 	mov.w	r2, #0
 8003b42:	f04f 0300 	mov.w	r3, #0
 8003b46:	00eb      	lsls	r3, r5, #3
 8003b48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b4c:	00e2      	lsls	r2, r4, #3
 8003b4e:	4614      	mov	r4, r2
 8003b50:	461d      	mov	r5, r3
 8003b52:	eb14 030a 	adds.w	r3, r4, sl
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	eb45 030b 	adc.w	r3, r5, fp
 8003b5c:	607b      	str	r3, [r7, #4]
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b6a:	4629      	mov	r1, r5
 8003b6c:	028b      	lsls	r3, r1, #10
 8003b6e:	4621      	mov	r1, r4
 8003b70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b74:	4621      	mov	r1, r4
 8003b76:	028a      	lsls	r2, r1, #10
 8003b78:	4610      	mov	r0, r2
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b7e:	2200      	movs	r2, #0
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	60fa      	str	r2, [r7, #12]
 8003b84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b88:	f7fc fbca 	bl	8000320 <__aeabi_uldivmod>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4613      	mov	r3, r2
 8003b92:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b94:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	0c1b      	lsrs	r3, r3, #16
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003ba4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bae:	e002      	b.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bb0:	4b05      	ldr	r3, [pc, #20]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003bb2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3740      	adds	r7, #64	; 0x40
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	00f42400 	.word	0x00f42400
 8003bcc:	017d7840 	.word	0x017d7840

08003bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bd4:	4b03      	ldr	r3, [pc, #12]	; (8003be4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	20000000 	.word	0x20000000

08003be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bec:	f7ff fff0 	bl	8003bd0 <HAL_RCC_GetHCLKFreq>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	0a9b      	lsrs	r3, r3, #10
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	4903      	ldr	r1, [pc, #12]	; (8003c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bfe:	5ccb      	ldrb	r3, [r1, r3]
 8003c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	0800e538 	.word	0x0800e538

08003c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c14:	f7ff ffdc 	bl	8003bd0 <HAL_RCC_GetHCLKFreq>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	0b5b      	lsrs	r3, r3, #13
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	4903      	ldr	r1, [pc, #12]	; (8003c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c26:	5ccb      	ldrb	r3, [r1, r3]
 8003c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40023800 	.word	0x40023800
 8003c34:	0800e538 	.word	0x0800e538

08003c38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	220f      	movs	r2, #15
 8003c46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c48:	4b12      	ldr	r3, [pc, #72]	; (8003c94 <HAL_RCC_GetClockConfig+0x5c>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 0203 	and.w	r2, r3, #3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c54:	4b0f      	ldr	r3, [pc, #60]	; (8003c94 <HAL_RCC_GetClockConfig+0x5c>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c60:	4b0c      	ldr	r3, [pc, #48]	; (8003c94 <HAL_RCC_GetClockConfig+0x5c>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003c6c:	4b09      	ldr	r3, [pc, #36]	; (8003c94 <HAL_RCC_GetClockConfig+0x5c>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	08db      	lsrs	r3, r3, #3
 8003c72:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c7a:	4b07      	ldr	r3, [pc, #28]	; (8003c98 <HAL_RCC_GetClockConfig+0x60>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0207 	and.w	r2, r3, #7
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	601a      	str	r2, [r3, #0]
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	40023800 	.word	0x40023800
 8003c98:	40023c00 	.word	0x40023c00

08003c9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e07b      	b.n	8003da6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d108      	bne.n	8003cc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cbe:	d009      	beq.n	8003cd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	61da      	str	r2, [r3, #28]
 8003cc6:	e005      	b.n	8003cd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d106      	bne.n	8003cf4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7fc ff7e 	bl	8000bf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	431a      	orrs	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d44:	431a      	orrs	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d58:	ea42 0103 	orr.w	r1, r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d60:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	0c1b      	lsrs	r3, r3, #16
 8003d72:	f003 0104 	and.w	r1, r3, #4
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	f003 0210 	and.w	r2, r3, #16
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	69da      	ldr	r2, [r3, #28]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e041      	b.n	8003e44 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d106      	bne.n	8003dda <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f839 	bl	8003e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2202      	movs	r2, #2
 8003dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	3304      	adds	r3, #4
 8003dea:	4619      	mov	r1, r3
 8003dec:	4610      	mov	r0, r2
 8003dee:	f000 fadb 	bl	80043a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d001      	beq.n	8003e78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e044      	b.n	8003f02 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68da      	ldr	r2, [r3, #12]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a1e      	ldr	r2, [pc, #120]	; (8003f10 <HAL_TIM_Base_Start_IT+0xb0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d018      	beq.n	8003ecc <HAL_TIM_Base_Start_IT+0x6c>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea2:	d013      	beq.n	8003ecc <HAL_TIM_Base_Start_IT+0x6c>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a1a      	ldr	r2, [pc, #104]	; (8003f14 <HAL_TIM_Base_Start_IT+0xb4>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d00e      	beq.n	8003ecc <HAL_TIM_Base_Start_IT+0x6c>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a19      	ldr	r2, [pc, #100]	; (8003f18 <HAL_TIM_Base_Start_IT+0xb8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d009      	beq.n	8003ecc <HAL_TIM_Base_Start_IT+0x6c>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a17      	ldr	r2, [pc, #92]	; (8003f1c <HAL_TIM_Base_Start_IT+0xbc>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d004      	beq.n	8003ecc <HAL_TIM_Base_Start_IT+0x6c>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a16      	ldr	r2, [pc, #88]	; (8003f20 <HAL_TIM_Base_Start_IT+0xc0>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d111      	bne.n	8003ef0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2b06      	cmp	r3, #6
 8003edc:	d010      	beq.n	8003f00 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0201 	orr.w	r2, r2, #1
 8003eec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eee:	e007      	b.n	8003f00 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0201 	orr.w	r2, r2, #1
 8003efe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40010000 	.word	0x40010000
 8003f14:	40000400 	.word	0x40000400
 8003f18:	40000800 	.word	0x40000800
 8003f1c:	40000c00 	.word	0x40000c00
 8003f20:	40014000 	.word	0x40014000

08003f24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e041      	b.n	8003fba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d106      	bne.n	8003f50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7fd f81e 	bl	8000f8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2202      	movs	r2, #2
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	4619      	mov	r1, r3
 8003f62:	4610      	mov	r0, r2
 8003f64:	f000 fa20 	bl	80043a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b082      	sub	sp, #8
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d122      	bne.n	800401e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d11b      	bne.n	800401e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f06f 0202 	mvn.w	r2, #2
 8003fee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	f003 0303 	and.w	r3, r3, #3
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f9b1 	bl	800436c <HAL_TIM_IC_CaptureCallback>
 800400a:	e005      	b.n	8004018 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f9a3 	bl	8004358 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f9b4 	bl	8004380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b04      	cmp	r3, #4
 800402a:	d122      	bne.n	8004072 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	f003 0304 	and.w	r3, r3, #4
 8004036:	2b04      	cmp	r3, #4
 8004038:	d11b      	bne.n	8004072 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f06f 0204 	mvn.w	r2, #4
 8004042:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2202      	movs	r2, #2
 8004048:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f987 	bl	800436c <HAL_TIM_IC_CaptureCallback>
 800405e:	e005      	b.n	800406c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f979 	bl	8004358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f98a 	bl	8004380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	f003 0308 	and.w	r3, r3, #8
 800407c:	2b08      	cmp	r3, #8
 800407e:	d122      	bne.n	80040c6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	2b08      	cmp	r3, #8
 800408c:	d11b      	bne.n	80040c6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f06f 0208 	mvn.w	r2, #8
 8004096:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2204      	movs	r2, #4
 800409c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	f003 0303 	and.w	r3, r3, #3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d003      	beq.n	80040b4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f95d 	bl	800436c <HAL_TIM_IC_CaptureCallback>
 80040b2:	e005      	b.n	80040c0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f94f 	bl	8004358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f960 	bl	8004380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	f003 0310 	and.w	r3, r3, #16
 80040d0:	2b10      	cmp	r3, #16
 80040d2:	d122      	bne.n	800411a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f003 0310 	and.w	r3, r3, #16
 80040de:	2b10      	cmp	r3, #16
 80040e0:	d11b      	bne.n	800411a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f06f 0210 	mvn.w	r2, #16
 80040ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2208      	movs	r2, #8
 80040f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f933 	bl	800436c <HAL_TIM_IC_CaptureCallback>
 8004106:	e005      	b.n	8004114 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f925 	bl	8004358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f936 	bl	8004380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b01      	cmp	r3, #1
 8004126:	d10e      	bne.n	8004146 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b01      	cmp	r3, #1
 8004134:	d107      	bne.n	8004146 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f06f 0201 	mvn.w	r2, #1
 800413e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7fc fd07 	bl	8000b54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004150:	2b80      	cmp	r3, #128	; 0x80
 8004152:	d10e      	bne.n	8004172 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415e:	2b80      	cmp	r3, #128	; 0x80
 8004160:	d107      	bne.n	8004172 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800416a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 fb9f 	bl	80048b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417c:	2b40      	cmp	r3, #64	; 0x40
 800417e:	d10e      	bne.n	800419e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418a:	2b40      	cmp	r3, #64	; 0x40
 800418c:	d107      	bne.n	800419e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f8fb 	bl	8004394 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	f003 0320 	and.w	r3, r3, #32
 80041a8:	2b20      	cmp	r3, #32
 80041aa:	d10e      	bne.n	80041ca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f003 0320 	and.w	r3, r3, #32
 80041b6:	2b20      	cmp	r3, #32
 80041b8:	d107      	bne.n	80041ca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f06f 0220 	mvn.w	r2, #32
 80041c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 fb69 	bl	800489c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041ca:	bf00      	nop
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
	...

080041d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041e0:	2300      	movs	r3, #0
 80041e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d101      	bne.n	80041f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041ee:	2302      	movs	r3, #2
 80041f0:	e0ae      	b.n	8004350 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b0c      	cmp	r3, #12
 80041fe:	f200 809f 	bhi.w	8004340 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004202:	a201      	add	r2, pc, #4	; (adr r2, 8004208 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004208:	0800423d 	.word	0x0800423d
 800420c:	08004341 	.word	0x08004341
 8004210:	08004341 	.word	0x08004341
 8004214:	08004341 	.word	0x08004341
 8004218:	0800427d 	.word	0x0800427d
 800421c:	08004341 	.word	0x08004341
 8004220:	08004341 	.word	0x08004341
 8004224:	08004341 	.word	0x08004341
 8004228:	080042bf 	.word	0x080042bf
 800422c:	08004341 	.word	0x08004341
 8004230:	08004341 	.word	0x08004341
 8004234:	08004341 	.word	0x08004341
 8004238:	080042ff 	.word	0x080042ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68b9      	ldr	r1, [r7, #8]
 8004242:	4618      	mov	r0, r3
 8004244:	f000 f930 	bl	80044a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699a      	ldr	r2, [r3, #24]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0208 	orr.w	r2, r2, #8
 8004256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699a      	ldr	r2, [r3, #24]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0204 	bic.w	r2, r2, #4
 8004266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6999      	ldr	r1, [r3, #24]
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	619a      	str	r2, [r3, #24]
      break;
 800427a:	e064      	b.n	8004346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68b9      	ldr	r1, [r7, #8]
 8004282:	4618      	mov	r0, r3
 8004284:	f000 f976 	bl	8004574 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699a      	ldr	r2, [r3, #24]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004296:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699a      	ldr	r2, [r3, #24]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6999      	ldr	r1, [r3, #24]
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	021a      	lsls	r2, r3, #8
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	619a      	str	r2, [r3, #24]
      break;
 80042bc:	e043      	b.n	8004346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68b9      	ldr	r1, [r7, #8]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 f9c1 	bl	800464c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	69da      	ldr	r2, [r3, #28]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f042 0208 	orr.w	r2, r2, #8
 80042d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	69da      	ldr	r2, [r3, #28]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0204 	bic.w	r2, r2, #4
 80042e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	69d9      	ldr	r1, [r3, #28]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	61da      	str	r2, [r3, #28]
      break;
 80042fc:	e023      	b.n	8004346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68b9      	ldr	r1, [r7, #8]
 8004304:	4618      	mov	r0, r3
 8004306:	f000 fa0b 	bl	8004720 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	69da      	ldr	r2, [r3, #28]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004318:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	69da      	ldr	r2, [r3, #28]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004328:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	69d9      	ldr	r1, [r3, #28]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	021a      	lsls	r2, r3, #8
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	61da      	str	r2, [r3, #28]
      break;
 800433e:	e002      	b.n	8004346 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	75fb      	strb	r3, [r7, #23]
      break;
 8004344:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800434e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3718      	adds	r7, #24
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a34      	ldr	r2, [pc, #208]	; (800448c <TIM_Base_SetConfig+0xe4>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d00f      	beq.n	80043e0 <TIM_Base_SetConfig+0x38>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c6:	d00b      	beq.n	80043e0 <TIM_Base_SetConfig+0x38>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a31      	ldr	r2, [pc, #196]	; (8004490 <TIM_Base_SetConfig+0xe8>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d007      	beq.n	80043e0 <TIM_Base_SetConfig+0x38>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a30      	ldr	r2, [pc, #192]	; (8004494 <TIM_Base_SetConfig+0xec>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d003      	beq.n	80043e0 <TIM_Base_SetConfig+0x38>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a2f      	ldr	r2, [pc, #188]	; (8004498 <TIM_Base_SetConfig+0xf0>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d108      	bne.n	80043f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a25      	ldr	r2, [pc, #148]	; (800448c <TIM_Base_SetConfig+0xe4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d01b      	beq.n	8004432 <TIM_Base_SetConfig+0x8a>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004400:	d017      	beq.n	8004432 <TIM_Base_SetConfig+0x8a>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a22      	ldr	r2, [pc, #136]	; (8004490 <TIM_Base_SetConfig+0xe8>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d013      	beq.n	8004432 <TIM_Base_SetConfig+0x8a>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a21      	ldr	r2, [pc, #132]	; (8004494 <TIM_Base_SetConfig+0xec>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d00f      	beq.n	8004432 <TIM_Base_SetConfig+0x8a>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a20      	ldr	r2, [pc, #128]	; (8004498 <TIM_Base_SetConfig+0xf0>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d00b      	beq.n	8004432 <TIM_Base_SetConfig+0x8a>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a1f      	ldr	r2, [pc, #124]	; (800449c <TIM_Base_SetConfig+0xf4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d007      	beq.n	8004432 <TIM_Base_SetConfig+0x8a>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a1e      	ldr	r2, [pc, #120]	; (80044a0 <TIM_Base_SetConfig+0xf8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d003      	beq.n	8004432 <TIM_Base_SetConfig+0x8a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a1d      	ldr	r2, [pc, #116]	; (80044a4 <TIM_Base_SetConfig+0xfc>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d108      	bne.n	8004444 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	4313      	orrs	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	4313      	orrs	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a08      	ldr	r2, [pc, #32]	; (800448c <TIM_Base_SetConfig+0xe4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d103      	bne.n	8004478 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	691a      	ldr	r2, [r3, #16]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	615a      	str	r2, [r3, #20]
}
 800447e:	bf00      	nop
 8004480:	3714      	adds	r7, #20
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40010000 	.word	0x40010000
 8004490:	40000400 	.word	0x40000400
 8004494:	40000800 	.word	0x40000800
 8004498:	40000c00 	.word	0x40000c00
 800449c:	40014000 	.word	0x40014000
 80044a0:	40014400 	.word	0x40014400
 80044a4:	40014800 	.word	0x40014800

080044a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b087      	sub	sp, #28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	f023 0201 	bic.w	r2, r3, #1
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0303 	bic.w	r3, r3, #3
 80044de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f023 0302 	bic.w	r3, r3, #2
 80044f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a1c      	ldr	r2, [pc, #112]	; (8004570 <TIM_OC1_SetConfig+0xc8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d10c      	bne.n	800451e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f023 0308 	bic.w	r3, r3, #8
 800450a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	4313      	orrs	r3, r2
 8004514:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f023 0304 	bic.w	r3, r3, #4
 800451c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a13      	ldr	r2, [pc, #76]	; (8004570 <TIM_OC1_SetConfig+0xc8>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d111      	bne.n	800454a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800452c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004534:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	4313      	orrs	r3, r2
 800453e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	621a      	str	r2, [r3, #32]
}
 8004564:	bf00      	nop
 8004566:	371c      	adds	r7, #28
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	40010000 	.word	0x40010000

08004574 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	f023 0210 	bic.w	r2, r3, #16
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	021b      	lsls	r3, r3, #8
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f023 0320 	bic.w	r3, r3, #32
 80045be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a1e      	ldr	r2, [pc, #120]	; (8004648 <TIM_OC2_SetConfig+0xd4>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d10d      	bne.n	80045f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	011b      	lsls	r3, r3, #4
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a15      	ldr	r2, [pc, #84]	; (8004648 <TIM_OC2_SetConfig+0xd4>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d113      	bne.n	8004620 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004606:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	4313      	orrs	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	621a      	str	r2, [r3, #32]
}
 800463a:	bf00      	nop
 800463c:	371c      	adds	r7, #28
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	40010000 	.word	0x40010000

0800464c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800464c:	b480      	push	{r7}
 800464e:	b087      	sub	sp, #28
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f023 0303 	bic.w	r3, r3, #3
 8004682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	4313      	orrs	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	021b      	lsls	r3, r3, #8
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	4313      	orrs	r3, r2
 80046a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a1d      	ldr	r2, [pc, #116]	; (800471c <TIM_OC3_SetConfig+0xd0>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d10d      	bne.n	80046c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	021b      	lsls	r3, r3, #8
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a14      	ldr	r2, [pc, #80]	; (800471c <TIM_OC3_SetConfig+0xd0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d113      	bne.n	80046f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	621a      	str	r2, [r3, #32]
}
 8004710:	bf00      	nop
 8004712:	371c      	adds	r7, #28
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	40010000 	.word	0x40010000

08004720 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800474e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	021b      	lsls	r3, r3, #8
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	4313      	orrs	r3, r2
 8004762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800476a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	031b      	lsls	r3, r3, #12
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	4313      	orrs	r3, r2
 8004776:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a10      	ldr	r2, [pc, #64]	; (80047bc <TIM_OC4_SetConfig+0x9c>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d109      	bne.n	8004794 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004786:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	019b      	lsls	r3, r3, #6
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	4313      	orrs	r3, r2
 8004792:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	621a      	str	r2, [r3, #32]
}
 80047ae:	bf00      	nop
 80047b0:	371c      	adds	r7, #28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	40010000 	.word	0x40010000

080047c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d101      	bne.n	80047d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047d4:	2302      	movs	r3, #2
 80047d6:	e050      	b.n	800487a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a1c      	ldr	r2, [pc, #112]	; (8004888 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d018      	beq.n	800484e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004824:	d013      	beq.n	800484e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a18      	ldr	r2, [pc, #96]	; (800488c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d00e      	beq.n	800484e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a16      	ldr	r2, [pc, #88]	; (8004890 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d009      	beq.n	800484e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a15      	ldr	r2, [pc, #84]	; (8004894 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d004      	beq.n	800484e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a13      	ldr	r2, [pc, #76]	; (8004898 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d10c      	bne.n	8004868 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004854:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	4313      	orrs	r3, r2
 800485e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40010000 	.word	0x40010000
 800488c:	40000400 	.word	0x40000400
 8004890:	40000800 	.word	0x40000800
 8004894:	40000c00 	.word	0x40000c00
 8004898:	40014000 	.word	0x40014000

0800489c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e03f      	b.n	8004956 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d106      	bne.n	80048f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7fc fbd0 	bl	8001090 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2224      	movs	r2, #36	; 0x24
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004906:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 f829 	bl	8004960 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	691a      	ldr	r2, [r3, #16]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800491c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695a      	ldr	r2, [r3, #20]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800492c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68da      	ldr	r2, [r3, #12]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800493c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2220      	movs	r2, #32
 8004950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
	...

08004960 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004964:	b0c0      	sub	sp, #256	; 0x100
 8004966:	af00      	add	r7, sp, #0
 8004968:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800496c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800497c:	68d9      	ldr	r1, [r3, #12]
 800497e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	ea40 0301 	orr.w	r3, r0, r1
 8004988:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800498a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	431a      	orrs	r2, r3
 8004998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	431a      	orrs	r2, r3
 80049a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049b8:	f021 010c 	bic.w	r1, r1, #12
 80049bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049c6:	430b      	orrs	r3, r1
 80049c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049da:	6999      	ldr	r1, [r3, #24]
 80049dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	ea40 0301 	orr.w	r3, r0, r1
 80049e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	4b8f      	ldr	r3, [pc, #572]	; (8004c2c <UART_SetConfig+0x2cc>)
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d005      	beq.n	8004a00 <UART_SetConfig+0xa0>
 80049f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	4b8d      	ldr	r3, [pc, #564]	; (8004c30 <UART_SetConfig+0x2d0>)
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d104      	bne.n	8004a0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a00:	f7ff f906 	bl	8003c10 <HAL_RCC_GetPCLK2Freq>
 8004a04:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a08:	e003      	b.n	8004a12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a0a:	f7ff f8ed 	bl	8003be8 <HAL_RCC_GetPCLK1Freq>
 8004a0e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a1c:	f040 810c 	bne.w	8004c38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a24:	2200      	movs	r2, #0
 8004a26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a2a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a32:	4622      	mov	r2, r4
 8004a34:	462b      	mov	r3, r5
 8004a36:	1891      	adds	r1, r2, r2
 8004a38:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a3a:	415b      	adcs	r3, r3
 8004a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a42:	4621      	mov	r1, r4
 8004a44:	eb12 0801 	adds.w	r8, r2, r1
 8004a48:	4629      	mov	r1, r5
 8004a4a:	eb43 0901 	adc.w	r9, r3, r1
 8004a4e:	f04f 0200 	mov.w	r2, #0
 8004a52:	f04f 0300 	mov.w	r3, #0
 8004a56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a62:	4690      	mov	r8, r2
 8004a64:	4699      	mov	r9, r3
 8004a66:	4623      	mov	r3, r4
 8004a68:	eb18 0303 	adds.w	r3, r8, r3
 8004a6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a70:	462b      	mov	r3, r5
 8004a72:	eb49 0303 	adc.w	r3, r9, r3
 8004a76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a86:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a8e:	460b      	mov	r3, r1
 8004a90:	18db      	adds	r3, r3, r3
 8004a92:	653b      	str	r3, [r7, #80]	; 0x50
 8004a94:	4613      	mov	r3, r2
 8004a96:	eb42 0303 	adc.w	r3, r2, r3
 8004a9a:	657b      	str	r3, [r7, #84]	; 0x54
 8004a9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004aa0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004aa4:	f7fb fc3c 	bl	8000320 <__aeabi_uldivmod>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4b61      	ldr	r3, [pc, #388]	; (8004c34 <UART_SetConfig+0x2d4>)
 8004aae:	fba3 2302 	umull	r2, r3, r3, r2
 8004ab2:	095b      	lsrs	r3, r3, #5
 8004ab4:	011c      	lsls	r4, r3, #4
 8004ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aba:	2200      	movs	r2, #0
 8004abc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ac0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ac4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ac8:	4642      	mov	r2, r8
 8004aca:	464b      	mov	r3, r9
 8004acc:	1891      	adds	r1, r2, r2
 8004ace:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ad0:	415b      	adcs	r3, r3
 8004ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ad4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ad8:	4641      	mov	r1, r8
 8004ada:	eb12 0a01 	adds.w	sl, r2, r1
 8004ade:	4649      	mov	r1, r9
 8004ae0:	eb43 0b01 	adc.w	fp, r3, r1
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	f04f 0300 	mov.w	r3, #0
 8004aec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004af0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004af4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004af8:	4692      	mov	sl, r2
 8004afa:	469b      	mov	fp, r3
 8004afc:	4643      	mov	r3, r8
 8004afe:	eb1a 0303 	adds.w	r3, sl, r3
 8004b02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b06:	464b      	mov	r3, r9
 8004b08:	eb4b 0303 	adc.w	r3, fp, r3
 8004b0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b1c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b24:	460b      	mov	r3, r1
 8004b26:	18db      	adds	r3, r3, r3
 8004b28:	643b      	str	r3, [r7, #64]	; 0x40
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	eb42 0303 	adc.w	r3, r2, r3
 8004b30:	647b      	str	r3, [r7, #68]	; 0x44
 8004b32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b3a:	f7fb fbf1 	bl	8000320 <__aeabi_uldivmod>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	4611      	mov	r1, r2
 8004b44:	4b3b      	ldr	r3, [pc, #236]	; (8004c34 <UART_SetConfig+0x2d4>)
 8004b46:	fba3 2301 	umull	r2, r3, r3, r1
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	2264      	movs	r2, #100	; 0x64
 8004b4e:	fb02 f303 	mul.w	r3, r2, r3
 8004b52:	1acb      	subs	r3, r1, r3
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b5a:	4b36      	ldr	r3, [pc, #216]	; (8004c34 <UART_SetConfig+0x2d4>)
 8004b5c:	fba3 2302 	umull	r2, r3, r3, r2
 8004b60:	095b      	lsrs	r3, r3, #5
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b68:	441c      	add	r4, r3
 8004b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b74:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b7c:	4642      	mov	r2, r8
 8004b7e:	464b      	mov	r3, r9
 8004b80:	1891      	adds	r1, r2, r2
 8004b82:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b84:	415b      	adcs	r3, r3
 8004b86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b8c:	4641      	mov	r1, r8
 8004b8e:	1851      	adds	r1, r2, r1
 8004b90:	6339      	str	r1, [r7, #48]	; 0x30
 8004b92:	4649      	mov	r1, r9
 8004b94:	414b      	adcs	r3, r1
 8004b96:	637b      	str	r3, [r7, #52]	; 0x34
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ba4:	4659      	mov	r1, fp
 8004ba6:	00cb      	lsls	r3, r1, #3
 8004ba8:	4651      	mov	r1, sl
 8004baa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bae:	4651      	mov	r1, sl
 8004bb0:	00ca      	lsls	r2, r1, #3
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	4642      	mov	r2, r8
 8004bba:	189b      	adds	r3, r3, r2
 8004bbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bc0:	464b      	mov	r3, r9
 8004bc2:	460a      	mov	r2, r1
 8004bc4:	eb42 0303 	adc.w	r3, r2, r3
 8004bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004bd8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004bdc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004be0:	460b      	mov	r3, r1
 8004be2:	18db      	adds	r3, r3, r3
 8004be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004be6:	4613      	mov	r3, r2
 8004be8:	eb42 0303 	adc.w	r3, r2, r3
 8004bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bf2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004bf6:	f7fb fb93 	bl	8000320 <__aeabi_uldivmod>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4b0d      	ldr	r3, [pc, #52]	; (8004c34 <UART_SetConfig+0x2d4>)
 8004c00:	fba3 1302 	umull	r1, r3, r3, r2
 8004c04:	095b      	lsrs	r3, r3, #5
 8004c06:	2164      	movs	r1, #100	; 0x64
 8004c08:	fb01 f303 	mul.w	r3, r1, r3
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	3332      	adds	r3, #50	; 0x32
 8004c12:	4a08      	ldr	r2, [pc, #32]	; (8004c34 <UART_SetConfig+0x2d4>)
 8004c14:	fba2 2303 	umull	r2, r3, r2, r3
 8004c18:	095b      	lsrs	r3, r3, #5
 8004c1a:	f003 0207 	and.w	r2, r3, #7
 8004c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4422      	add	r2, r4
 8004c26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c28:	e105      	b.n	8004e36 <UART_SetConfig+0x4d6>
 8004c2a:	bf00      	nop
 8004c2c:	40011000 	.word	0x40011000
 8004c30:	40011400 	.word	0x40011400
 8004c34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c42:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c4a:	4642      	mov	r2, r8
 8004c4c:	464b      	mov	r3, r9
 8004c4e:	1891      	adds	r1, r2, r2
 8004c50:	6239      	str	r1, [r7, #32]
 8004c52:	415b      	adcs	r3, r3
 8004c54:	627b      	str	r3, [r7, #36]	; 0x24
 8004c56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c5a:	4641      	mov	r1, r8
 8004c5c:	1854      	adds	r4, r2, r1
 8004c5e:	4649      	mov	r1, r9
 8004c60:	eb43 0501 	adc.w	r5, r3, r1
 8004c64:	f04f 0200 	mov.w	r2, #0
 8004c68:	f04f 0300 	mov.w	r3, #0
 8004c6c:	00eb      	lsls	r3, r5, #3
 8004c6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c72:	00e2      	lsls	r2, r4, #3
 8004c74:	4614      	mov	r4, r2
 8004c76:	461d      	mov	r5, r3
 8004c78:	4643      	mov	r3, r8
 8004c7a:	18e3      	adds	r3, r4, r3
 8004c7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c80:	464b      	mov	r3, r9
 8004c82:	eb45 0303 	adc.w	r3, r5, r3
 8004c86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c9a:	f04f 0200 	mov.w	r2, #0
 8004c9e:	f04f 0300 	mov.w	r3, #0
 8004ca2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ca6:	4629      	mov	r1, r5
 8004ca8:	008b      	lsls	r3, r1, #2
 8004caa:	4621      	mov	r1, r4
 8004cac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cb0:	4621      	mov	r1, r4
 8004cb2:	008a      	lsls	r2, r1, #2
 8004cb4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004cb8:	f7fb fb32 	bl	8000320 <__aeabi_uldivmod>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4b60      	ldr	r3, [pc, #384]	; (8004e44 <UART_SetConfig+0x4e4>)
 8004cc2:	fba3 2302 	umull	r2, r3, r3, r2
 8004cc6:	095b      	lsrs	r3, r3, #5
 8004cc8:	011c      	lsls	r4, r3, #4
 8004cca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cd4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004cd8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004cdc:	4642      	mov	r2, r8
 8004cde:	464b      	mov	r3, r9
 8004ce0:	1891      	adds	r1, r2, r2
 8004ce2:	61b9      	str	r1, [r7, #24]
 8004ce4:	415b      	adcs	r3, r3
 8004ce6:	61fb      	str	r3, [r7, #28]
 8004ce8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cec:	4641      	mov	r1, r8
 8004cee:	1851      	adds	r1, r2, r1
 8004cf0:	6139      	str	r1, [r7, #16]
 8004cf2:	4649      	mov	r1, r9
 8004cf4:	414b      	adcs	r3, r1
 8004cf6:	617b      	str	r3, [r7, #20]
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	f04f 0300 	mov.w	r3, #0
 8004d00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d04:	4659      	mov	r1, fp
 8004d06:	00cb      	lsls	r3, r1, #3
 8004d08:	4651      	mov	r1, sl
 8004d0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d0e:	4651      	mov	r1, sl
 8004d10:	00ca      	lsls	r2, r1, #3
 8004d12:	4610      	mov	r0, r2
 8004d14:	4619      	mov	r1, r3
 8004d16:	4603      	mov	r3, r0
 8004d18:	4642      	mov	r2, r8
 8004d1a:	189b      	adds	r3, r3, r2
 8004d1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d20:	464b      	mov	r3, r9
 8004d22:	460a      	mov	r2, r1
 8004d24:	eb42 0303 	adc.w	r3, r2, r3
 8004d28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d36:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d38:	f04f 0200 	mov.w	r2, #0
 8004d3c:	f04f 0300 	mov.w	r3, #0
 8004d40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d44:	4649      	mov	r1, r9
 8004d46:	008b      	lsls	r3, r1, #2
 8004d48:	4641      	mov	r1, r8
 8004d4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d4e:	4641      	mov	r1, r8
 8004d50:	008a      	lsls	r2, r1, #2
 8004d52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d56:	f7fb fae3 	bl	8000320 <__aeabi_uldivmod>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4b39      	ldr	r3, [pc, #228]	; (8004e44 <UART_SetConfig+0x4e4>)
 8004d60:	fba3 1302 	umull	r1, r3, r3, r2
 8004d64:	095b      	lsrs	r3, r3, #5
 8004d66:	2164      	movs	r1, #100	; 0x64
 8004d68:	fb01 f303 	mul.w	r3, r1, r3
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	3332      	adds	r3, #50	; 0x32
 8004d72:	4a34      	ldr	r2, [pc, #208]	; (8004e44 <UART_SetConfig+0x4e4>)
 8004d74:	fba2 2303 	umull	r2, r3, r2, r3
 8004d78:	095b      	lsrs	r3, r3, #5
 8004d7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d7e:	441c      	add	r4, r3
 8004d80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d84:	2200      	movs	r2, #0
 8004d86:	673b      	str	r3, [r7, #112]	; 0x70
 8004d88:	677a      	str	r2, [r7, #116]	; 0x74
 8004d8a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d8e:	4642      	mov	r2, r8
 8004d90:	464b      	mov	r3, r9
 8004d92:	1891      	adds	r1, r2, r2
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	415b      	adcs	r3, r3
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d9e:	4641      	mov	r1, r8
 8004da0:	1851      	adds	r1, r2, r1
 8004da2:	6039      	str	r1, [r7, #0]
 8004da4:	4649      	mov	r1, r9
 8004da6:	414b      	adcs	r3, r1
 8004da8:	607b      	str	r3, [r7, #4]
 8004daa:	f04f 0200 	mov.w	r2, #0
 8004dae:	f04f 0300 	mov.w	r3, #0
 8004db2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004db6:	4659      	mov	r1, fp
 8004db8:	00cb      	lsls	r3, r1, #3
 8004dba:	4651      	mov	r1, sl
 8004dbc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dc0:	4651      	mov	r1, sl
 8004dc2:	00ca      	lsls	r2, r1, #3
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	4603      	mov	r3, r0
 8004dca:	4642      	mov	r2, r8
 8004dcc:	189b      	adds	r3, r3, r2
 8004dce:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dd0:	464b      	mov	r3, r9
 8004dd2:	460a      	mov	r2, r1
 8004dd4:	eb42 0303 	adc.w	r3, r2, r3
 8004dd8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	663b      	str	r3, [r7, #96]	; 0x60
 8004de4:	667a      	str	r2, [r7, #100]	; 0x64
 8004de6:	f04f 0200 	mov.w	r2, #0
 8004dea:	f04f 0300 	mov.w	r3, #0
 8004dee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004df2:	4649      	mov	r1, r9
 8004df4:	008b      	lsls	r3, r1, #2
 8004df6:	4641      	mov	r1, r8
 8004df8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dfc:	4641      	mov	r1, r8
 8004dfe:	008a      	lsls	r2, r1, #2
 8004e00:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e04:	f7fb fa8c 	bl	8000320 <__aeabi_uldivmod>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	4b0d      	ldr	r3, [pc, #52]	; (8004e44 <UART_SetConfig+0x4e4>)
 8004e0e:	fba3 1302 	umull	r1, r3, r3, r2
 8004e12:	095b      	lsrs	r3, r3, #5
 8004e14:	2164      	movs	r1, #100	; 0x64
 8004e16:	fb01 f303 	mul.w	r3, r1, r3
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	011b      	lsls	r3, r3, #4
 8004e1e:	3332      	adds	r3, #50	; 0x32
 8004e20:	4a08      	ldr	r2, [pc, #32]	; (8004e44 <UART_SetConfig+0x4e4>)
 8004e22:	fba2 2303 	umull	r2, r3, r2, r3
 8004e26:	095b      	lsrs	r3, r3, #5
 8004e28:	f003 020f 	and.w	r2, r3, #15
 8004e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4422      	add	r2, r4
 8004e34:	609a      	str	r2, [r3, #8]
}
 8004e36:	bf00      	nop
 8004e38:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e42:	bf00      	nop
 8004e44:	51eb851f 	.word	0x51eb851f

08004e48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e48:	b084      	sub	sp, #16
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b084      	sub	sp, #16
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
 8004e52:	f107 001c 	add.w	r0, r7, #28
 8004e56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d122      	bne.n	8004ea6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d105      	bne.n	8004e9a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f001 fbee 	bl	800667c <USB_CoreReset>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	73fb      	strb	r3, [r7, #15]
 8004ea4:	e01a      	b.n	8004edc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f001 fbe2 	bl	800667c <USB_CoreReset>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d106      	bne.n	8004ed0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	639a      	str	r2, [r3, #56]	; 0x38
 8004ece:	e005      	b.n	8004edc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d10b      	bne.n	8004efa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f043 0206 	orr.w	r2, r3, #6
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f043 0220 	orr.w	r2, r3, #32
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f06:	b004      	add	sp, #16
 8004f08:	4770      	bx	lr
	...

08004f0c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	4613      	mov	r3, r2
 8004f18:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004f1a:	79fb      	ldrb	r3, [r7, #7]
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d165      	bne.n	8004fec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	4a41      	ldr	r2, [pc, #260]	; (8005028 <USB_SetTurnaroundTime+0x11c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d906      	bls.n	8004f36 <USB_SetTurnaroundTime+0x2a>
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4a40      	ldr	r2, [pc, #256]	; (800502c <USB_SetTurnaroundTime+0x120>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d202      	bcs.n	8004f36 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004f30:	230f      	movs	r3, #15
 8004f32:	617b      	str	r3, [r7, #20]
 8004f34:	e062      	b.n	8004ffc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	4a3c      	ldr	r2, [pc, #240]	; (800502c <USB_SetTurnaroundTime+0x120>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d306      	bcc.n	8004f4c <USB_SetTurnaroundTime+0x40>
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	4a3b      	ldr	r2, [pc, #236]	; (8005030 <USB_SetTurnaroundTime+0x124>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d202      	bcs.n	8004f4c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004f46:	230e      	movs	r3, #14
 8004f48:	617b      	str	r3, [r7, #20]
 8004f4a:	e057      	b.n	8004ffc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	4a38      	ldr	r2, [pc, #224]	; (8005030 <USB_SetTurnaroundTime+0x124>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d306      	bcc.n	8004f62 <USB_SetTurnaroundTime+0x56>
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4a37      	ldr	r2, [pc, #220]	; (8005034 <USB_SetTurnaroundTime+0x128>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d202      	bcs.n	8004f62 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004f5c:	230d      	movs	r3, #13
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	e04c      	b.n	8004ffc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	4a33      	ldr	r2, [pc, #204]	; (8005034 <USB_SetTurnaroundTime+0x128>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d306      	bcc.n	8004f78 <USB_SetTurnaroundTime+0x6c>
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	4a32      	ldr	r2, [pc, #200]	; (8005038 <USB_SetTurnaroundTime+0x12c>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d802      	bhi.n	8004f78 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004f72:	230c      	movs	r3, #12
 8004f74:	617b      	str	r3, [r7, #20]
 8004f76:	e041      	b.n	8004ffc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	4a2f      	ldr	r2, [pc, #188]	; (8005038 <USB_SetTurnaroundTime+0x12c>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d906      	bls.n	8004f8e <USB_SetTurnaroundTime+0x82>
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	4a2e      	ldr	r2, [pc, #184]	; (800503c <USB_SetTurnaroundTime+0x130>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d802      	bhi.n	8004f8e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004f88:	230b      	movs	r3, #11
 8004f8a:	617b      	str	r3, [r7, #20]
 8004f8c:	e036      	b.n	8004ffc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	4a2a      	ldr	r2, [pc, #168]	; (800503c <USB_SetTurnaroundTime+0x130>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d906      	bls.n	8004fa4 <USB_SetTurnaroundTime+0x98>
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	4a29      	ldr	r2, [pc, #164]	; (8005040 <USB_SetTurnaroundTime+0x134>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d802      	bhi.n	8004fa4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004f9e:	230a      	movs	r3, #10
 8004fa0:	617b      	str	r3, [r7, #20]
 8004fa2:	e02b      	b.n	8004ffc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	4a26      	ldr	r2, [pc, #152]	; (8005040 <USB_SetTurnaroundTime+0x134>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d906      	bls.n	8004fba <USB_SetTurnaroundTime+0xae>
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4a25      	ldr	r2, [pc, #148]	; (8005044 <USB_SetTurnaroundTime+0x138>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d202      	bcs.n	8004fba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004fb4:	2309      	movs	r3, #9
 8004fb6:	617b      	str	r3, [r7, #20]
 8004fb8:	e020      	b.n	8004ffc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	4a21      	ldr	r2, [pc, #132]	; (8005044 <USB_SetTurnaroundTime+0x138>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d306      	bcc.n	8004fd0 <USB_SetTurnaroundTime+0xc4>
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	4a20      	ldr	r2, [pc, #128]	; (8005048 <USB_SetTurnaroundTime+0x13c>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d802      	bhi.n	8004fd0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004fca:	2308      	movs	r3, #8
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	e015      	b.n	8004ffc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	4a1d      	ldr	r2, [pc, #116]	; (8005048 <USB_SetTurnaroundTime+0x13c>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d906      	bls.n	8004fe6 <USB_SetTurnaroundTime+0xda>
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	4a1c      	ldr	r2, [pc, #112]	; (800504c <USB_SetTurnaroundTime+0x140>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d202      	bcs.n	8004fe6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004fe0:	2307      	movs	r3, #7
 8004fe2:	617b      	str	r3, [r7, #20]
 8004fe4:	e00a      	b.n	8004ffc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004fe6:	2306      	movs	r3, #6
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	e007      	b.n	8004ffc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004fec:	79fb      	ldrb	r3, [r7, #7]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d102      	bne.n	8004ff8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004ff2:	2309      	movs	r3, #9
 8004ff4:	617b      	str	r3, [r7, #20]
 8004ff6:	e001      	b.n	8004ffc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004ff8:	2309      	movs	r3, #9
 8004ffa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	68da      	ldr	r2, [r3, #12]
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	029b      	lsls	r3, r3, #10
 8005010:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005014:	431a      	orrs	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	371c      	adds	r7, #28
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	00d8acbf 	.word	0x00d8acbf
 800502c:	00e4e1c0 	.word	0x00e4e1c0
 8005030:	00f42400 	.word	0x00f42400
 8005034:	01067380 	.word	0x01067380
 8005038:	011a499f 	.word	0x011a499f
 800503c:	01312cff 	.word	0x01312cff
 8005040:	014ca43f 	.word	0x014ca43f
 8005044:	016e3600 	.word	0x016e3600
 8005048:	01a6ab1f 	.word	0x01a6ab1f
 800504c:	01e84800 	.word	0x01e84800

08005050 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f043 0201 	orr.w	r2, r3, #1
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005072:	b480      	push	{r7}
 8005074:	b083      	sub	sp, #12
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f023 0201 	bic.w	r2, r3, #1
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	460b      	mov	r3, r1
 800509e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050b0:	78fb      	ldrb	r3, [r7, #3]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d115      	bne.n	80050e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050c2:	2001      	movs	r0, #1
 80050c4:	f7fc f898 	bl	80011f8 <HAL_Delay>
      ms++;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	3301      	adds	r3, #1
 80050cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f001 fa45 	bl	800655e <USB_GetMode>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d01e      	beq.n	8005118 <USB_SetCurrentMode+0x84>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2b31      	cmp	r3, #49	; 0x31
 80050de:	d9f0      	bls.n	80050c2 <USB_SetCurrentMode+0x2e>
 80050e0:	e01a      	b.n	8005118 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050e2:	78fb      	ldrb	r3, [r7, #3]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d115      	bne.n	8005114 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050f4:	2001      	movs	r0, #1
 80050f6:	f7fc f87f 	bl	80011f8 <HAL_Delay>
      ms++;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	3301      	adds	r3, #1
 80050fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f001 fa2c 	bl	800655e <USB_GetMode>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d005      	beq.n	8005118 <USB_SetCurrentMode+0x84>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2b31      	cmp	r3, #49	; 0x31
 8005110:	d9f0      	bls.n	80050f4 <USB_SetCurrentMode+0x60>
 8005112:	e001      	b.n	8005118 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e005      	b.n	8005124 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2b32      	cmp	r3, #50	; 0x32
 800511c:	d101      	bne.n	8005122 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e000      	b.n	8005124 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800512c:	b084      	sub	sp, #16
 800512e:	b580      	push	{r7, lr}
 8005130:	b086      	sub	sp, #24
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800513a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005146:	2300      	movs	r3, #0
 8005148:	613b      	str	r3, [r7, #16]
 800514a:	e009      	b.n	8005160 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	3340      	adds	r3, #64	; 0x40
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	2200      	movs	r2, #0
 8005158:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	3301      	adds	r3, #1
 800515e:	613b      	str	r3, [r7, #16]
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	2b0e      	cmp	r3, #14
 8005164:	d9f2      	bls.n	800514c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005168:	2b00      	cmp	r3, #0
 800516a:	d11c      	bne.n	80051a6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800517a:	f043 0302 	orr.w	r3, r3, #2
 800517e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005184:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005190:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	639a      	str	r2, [r3, #56]	; 0x38
 80051a4:	e00b      	b.n	80051be <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051aa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051c4:	461a      	mov	r2, r3
 80051c6:	2300      	movs	r3, #0
 80051c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d0:	4619      	mov	r1, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d8:	461a      	mov	r2, r3
 80051da:	680b      	ldr	r3, [r1, #0]
 80051dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d10c      	bne.n	80051fe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80051e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d104      	bne.n	80051f4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80051ea:	2100      	movs	r1, #0
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f965 	bl	80054bc <USB_SetDevSpeed>
 80051f2:	e008      	b.n	8005206 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80051f4:	2101      	movs	r1, #1
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f960 	bl	80054bc <USB_SetDevSpeed>
 80051fc:	e003      	b.n	8005206 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80051fe:	2103      	movs	r1, #3
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f95b 	bl	80054bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005206:	2110      	movs	r1, #16
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 f8f3 	bl	80053f4 <USB_FlushTxFifo>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d001      	beq.n	8005218 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f91f 	bl	800545c <USB_FlushRxFifo>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800522e:	461a      	mov	r2, r3
 8005230:	2300      	movs	r3, #0
 8005232:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800523a:	461a      	mov	r2, r3
 800523c:	2300      	movs	r3, #0
 800523e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005246:	461a      	mov	r2, r3
 8005248:	2300      	movs	r3, #0
 800524a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800524c:	2300      	movs	r3, #0
 800524e:	613b      	str	r3, [r7, #16]
 8005250:	e043      	b.n	80052da <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4413      	add	r3, r2
 800525a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005264:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005268:	d118      	bne.n	800529c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10a      	bne.n	8005286 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4413      	add	r3, r2
 8005278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527c:	461a      	mov	r2, r3
 800527e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005282:	6013      	str	r3, [r2, #0]
 8005284:	e013      	b.n	80052ae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005292:	461a      	mov	r2, r3
 8005294:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005298:	6013      	str	r3, [r2, #0]
 800529a:	e008      	b.n	80052ae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a8:	461a      	mov	r2, r3
 80052aa:	2300      	movs	r3, #0
 80052ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ba:	461a      	mov	r2, r3
 80052bc:	2300      	movs	r3, #0
 80052be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052cc:	461a      	mov	r2, r3
 80052ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	3301      	adds	r3, #1
 80052d8:	613b      	str	r3, [r7, #16]
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d3b7      	bcc.n	8005252 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052e2:	2300      	movs	r3, #0
 80052e4:	613b      	str	r3, [r7, #16]
 80052e6:	e043      	b.n	8005370 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052fe:	d118      	bne.n	8005332 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10a      	bne.n	800531c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	015a      	lsls	r2, r3, #5
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4413      	add	r3, r2
 800530e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005312:	461a      	mov	r2, r3
 8005314:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005318:	6013      	str	r3, [r2, #0]
 800531a:	e013      	b.n	8005344 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005328:	461a      	mov	r2, r3
 800532a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800532e:	6013      	str	r3, [r2, #0]
 8005330:	e008      	b.n	8005344 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	4413      	add	r3, r2
 800533a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533e:	461a      	mov	r2, r3
 8005340:	2300      	movs	r3, #0
 8005342:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4413      	add	r3, r2
 800534c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005350:	461a      	mov	r2, r3
 8005352:	2300      	movs	r3, #0
 8005354:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	015a      	lsls	r2, r3, #5
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	4413      	add	r3, r2
 800535e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005362:	461a      	mov	r2, r3
 8005364:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005368:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	3301      	adds	r3, #1
 800536e:	613b      	str	r3, [r7, #16]
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	429a      	cmp	r2, r3
 8005376:	d3b7      	bcc.n	80052e8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005386:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800538a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005398:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800539a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539c:	2b00      	cmp	r3, #0
 800539e:	d105      	bne.n	80053ac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	f043 0210 	orr.w	r2, r3, #16
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	699a      	ldr	r2, [r3, #24]
 80053b0:	4b0f      	ldr	r3, [pc, #60]	; (80053f0 <USB_DevInit+0x2c4>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80053b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d005      	beq.n	80053ca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	f043 0208 	orr.w	r2, r3, #8
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80053ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d107      	bne.n	80053e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053d8:	f043 0304 	orr.w	r3, r3, #4
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80053e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3718      	adds	r7, #24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053ec:	b004      	add	sp, #16
 80053ee:	4770      	bx	lr
 80053f0:	803c3800 	.word	0x803c3800

080053f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053fe:	2300      	movs	r3, #0
 8005400:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	3301      	adds	r3, #1
 8005406:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4a13      	ldr	r2, [pc, #76]	; (8005458 <USB_FlushTxFifo+0x64>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d901      	bls.n	8005414 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e01b      	b.n	800544c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	2b00      	cmp	r3, #0
 800541a:	daf2      	bge.n	8005402 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	019b      	lsls	r3, r3, #6
 8005424:	f043 0220 	orr.w	r2, r3, #32
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	3301      	adds	r3, #1
 8005430:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4a08      	ldr	r2, [pc, #32]	; (8005458 <USB_FlushTxFifo+0x64>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d901      	bls.n	800543e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e006      	b.n	800544c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	f003 0320 	and.w	r3, r3, #32
 8005446:	2b20      	cmp	r3, #32
 8005448:	d0f0      	beq.n	800542c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3714      	adds	r7, #20
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr
 8005458:	00030d40 	.word	0x00030d40

0800545c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	3301      	adds	r3, #1
 800546c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	4a11      	ldr	r2, [pc, #68]	; (80054b8 <USB_FlushRxFifo+0x5c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d901      	bls.n	800547a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e018      	b.n	80054ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	2b00      	cmp	r3, #0
 8005480:	daf2      	bge.n	8005468 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005482:	2300      	movs	r3, #0
 8005484:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2210      	movs	r2, #16
 800548a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	3301      	adds	r3, #1
 8005490:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	4a08      	ldr	r2, [pc, #32]	; (80054b8 <USB_FlushRxFifo+0x5c>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d901      	bls.n	800549e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e006      	b.n	80054ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	f003 0310 	and.w	r3, r3, #16
 80054a6:	2b10      	cmp	r3, #16
 80054a8:	d0f0      	beq.n	800548c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr
 80054b8:	00030d40 	.word	0x00030d40

080054bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	460b      	mov	r3, r1
 80054c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	78fb      	ldrb	r3, [r7, #3]
 80054d6:	68f9      	ldr	r1, [r7, #12]
 80054d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054dc:	4313      	orrs	r3, r2
 80054de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b087      	sub	sp, #28
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f003 0306 	and.w	r3, r3, #6
 8005506:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d102      	bne.n	8005514 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800550e:	2300      	movs	r3, #0
 8005510:	75fb      	strb	r3, [r7, #23]
 8005512:	e00a      	b.n	800552a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b02      	cmp	r3, #2
 8005518:	d002      	beq.n	8005520 <USB_GetDevSpeed+0x32>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2b06      	cmp	r3, #6
 800551e:	d102      	bne.n	8005526 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005520:	2302      	movs	r3, #2
 8005522:	75fb      	strb	r3, [r7, #23]
 8005524:	e001      	b.n	800552a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005526:	230f      	movs	r3, #15
 8005528:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800552a:	7dfb      	ldrb	r3, [r7, #23]
}
 800552c:	4618      	mov	r0, r3
 800552e:	371c      	adds	r7, #28
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	785b      	ldrb	r3, [r3, #1]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d13a      	bne.n	80055ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800555a:	69da      	ldr	r2, [r3, #28]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	f003 030f 	and.w	r3, r3, #15
 8005564:	2101      	movs	r1, #1
 8005566:	fa01 f303 	lsl.w	r3, r1, r3
 800556a:	b29b      	uxth	r3, r3
 800556c:	68f9      	ldr	r1, [r7, #12]
 800556e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005572:	4313      	orrs	r3, r2
 8005574:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	015a      	lsls	r2, r3, #5
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	4413      	add	r3, r2
 800557e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d155      	bne.n	8005638 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	791b      	ldrb	r3, [r3, #4]
 80055a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80055a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	059b      	lsls	r3, r3, #22
 80055ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80055b0:	4313      	orrs	r3, r2
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	0151      	lsls	r1, r2, #5
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	440a      	add	r2, r1
 80055ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055c6:	6013      	str	r3, [r2, #0]
 80055c8:	e036      	b.n	8005638 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d0:	69da      	ldr	r2, [r3, #28]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	f003 030f 	and.w	r3, r3, #15
 80055da:	2101      	movs	r1, #1
 80055dc:	fa01 f303 	lsl.w	r3, r1, r3
 80055e0:	041b      	lsls	r3, r3, #16
 80055e2:	68f9      	ldr	r1, [r7, #12]
 80055e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055e8:	4313      	orrs	r3, r2
 80055ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d11a      	bne.n	8005638 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	791b      	ldrb	r3, [r3, #4]
 800561c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800561e:	430b      	orrs	r3, r1
 8005620:	4313      	orrs	r3, r2
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	0151      	lsls	r1, r2, #5
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	440a      	add	r2, r1
 800562a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800562e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005636:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
	...

08005648 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	785b      	ldrb	r3, [r3, #1]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d161      	bne.n	8005728 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005676:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800567a:	d11f      	bne.n	80056bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4413      	add	r3, r2
 8005684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	0151      	lsls	r1, r2, #5
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	440a      	add	r2, r1
 8005692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005696:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800569a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	0151      	lsls	r1, r2, #5
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	440a      	add	r2, r1
 80056b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	f003 030f 	and.w	r3, r3, #15
 80056cc:	2101      	movs	r1, #1
 80056ce:	fa01 f303 	lsl.w	r3, r1, r3
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	43db      	mvns	r3, r3
 80056d6:	68f9      	ldr	r1, [r7, #12]
 80056d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056dc:	4013      	ands	r3, r2
 80056de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e6:	69da      	ldr	r2, [r3, #28]
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	f003 030f 	and.w	r3, r3, #15
 80056f0:	2101      	movs	r1, #1
 80056f2:	fa01 f303 	lsl.w	r3, r1, r3
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	43db      	mvns	r3, r3
 80056fa:	68f9      	ldr	r1, [r7, #12]
 80056fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005700:	4013      	ands	r3, r2
 8005702:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	4413      	add	r3, r2
 800570c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	0159      	lsls	r1, r3, #5
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	440b      	add	r3, r1
 800571a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571e:	4619      	mov	r1, r3
 8005720:	4b35      	ldr	r3, [pc, #212]	; (80057f8 <USB_DeactivateEndpoint+0x1b0>)
 8005722:	4013      	ands	r3, r2
 8005724:	600b      	str	r3, [r1, #0]
 8005726:	e060      	b.n	80057ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4413      	add	r3, r2
 8005730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800573a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800573e:	d11f      	bne.n	8005780 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	0151      	lsls	r1, r2, #5
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	440a      	add	r2, r1
 8005756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800575a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800575e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4413      	add	r3, r2
 8005768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	0151      	lsls	r1, r2, #5
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	440a      	add	r2, r1
 8005776:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800577a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800577e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005786:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	f003 030f 	and.w	r3, r3, #15
 8005790:	2101      	movs	r1, #1
 8005792:	fa01 f303 	lsl.w	r3, r1, r3
 8005796:	041b      	lsls	r3, r3, #16
 8005798:	43db      	mvns	r3, r3
 800579a:	68f9      	ldr	r1, [r7, #12]
 800579c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057a0:	4013      	ands	r3, r2
 80057a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057aa:	69da      	ldr	r2, [r3, #28]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	f003 030f 	and.w	r3, r3, #15
 80057b4:	2101      	movs	r1, #1
 80057b6:	fa01 f303 	lsl.w	r3, r1, r3
 80057ba:	041b      	lsls	r3, r3, #16
 80057bc:	43db      	mvns	r3, r3
 80057be:	68f9      	ldr	r1, [r7, #12]
 80057c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057c4:	4013      	ands	r3, r2
 80057c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	0159      	lsls	r1, r3, #5
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	440b      	add	r3, r1
 80057de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e2:	4619      	mov	r1, r3
 80057e4:	4b05      	ldr	r3, [pc, #20]	; (80057fc <USB_DeactivateEndpoint+0x1b4>)
 80057e6:	4013      	ands	r3, r2
 80057e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	ec337800 	.word	0xec337800
 80057fc:	eff37800 	.word	0xeff37800

08005800 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b08a      	sub	sp, #40	; 0x28
 8005804:	af02      	add	r7, sp, #8
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	4613      	mov	r3, r2
 800580c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	785b      	ldrb	r3, [r3, #1]
 800581c:	2b01      	cmp	r3, #1
 800581e:	f040 815c 	bne.w	8005ada <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d132      	bne.n	8005890 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	015a      	lsls	r2, r3, #5
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	4413      	add	r3, r2
 8005832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	0151      	lsls	r1, r2, #5
 800583c:	69fa      	ldr	r2, [r7, #28]
 800583e:	440a      	add	r2, r1
 8005840:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005844:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005848:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800584c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	4413      	add	r3, r2
 8005856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	0151      	lsls	r1, r2, #5
 8005860:	69fa      	ldr	r2, [r7, #28]
 8005862:	440a      	add	r2, r1
 8005864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005868:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800586c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	015a      	lsls	r2, r3, #5
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	4413      	add	r3, r2
 8005876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	0151      	lsls	r1, r2, #5
 8005880:	69fa      	ldr	r2, [r7, #28]
 8005882:	440a      	add	r2, r1
 8005884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005888:	0cdb      	lsrs	r3, r3, #19
 800588a:	04db      	lsls	r3, r3, #19
 800588c:	6113      	str	r3, [r2, #16]
 800588e:	e074      	b.n	800597a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	4413      	add	r3, r2
 8005898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	0151      	lsls	r1, r2, #5
 80058a2:	69fa      	ldr	r2, [r7, #28]
 80058a4:	440a      	add	r2, r1
 80058a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058aa:	0cdb      	lsrs	r3, r3, #19
 80058ac:	04db      	lsls	r3, r3, #19
 80058ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	0151      	lsls	r1, r2, #5
 80058c2:	69fa      	ldr	r2, [r7, #28]
 80058c4:	440a      	add	r2, r1
 80058c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	015a      	lsls	r2, r3, #5
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	6999      	ldr	r1, [r3, #24]
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	440b      	add	r3, r1
 80058ec:	1e59      	subs	r1, r3, #1
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80058f6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80058f8:	4b9d      	ldr	r3, [pc, #628]	; (8005b70 <USB_EPStartXfer+0x370>)
 80058fa:	400b      	ands	r3, r1
 80058fc:	69b9      	ldr	r1, [r7, #24]
 80058fe:	0148      	lsls	r0, r1, #5
 8005900:	69f9      	ldr	r1, [r7, #28]
 8005902:	4401      	add	r1, r0
 8005904:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005908:	4313      	orrs	r3, r2
 800590a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	4413      	add	r3, r2
 8005914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005918:	691a      	ldr	r2, [r3, #16]
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005922:	69b9      	ldr	r1, [r7, #24]
 8005924:	0148      	lsls	r0, r1, #5
 8005926:	69f9      	ldr	r1, [r7, #28]
 8005928:	4401      	add	r1, r0
 800592a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800592e:	4313      	orrs	r3, r2
 8005930:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	791b      	ldrb	r3, [r3, #4]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d11f      	bne.n	800597a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	0151      	lsls	r1, r2, #5
 800594c:	69fa      	ldr	r2, [r7, #28]
 800594e:	440a      	add	r2, r1
 8005950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005954:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005958:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	0151      	lsls	r1, r2, #5
 800596c:	69fa      	ldr	r2, [r7, #28]
 800596e:	440a      	add	r2, r1
 8005970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005974:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005978:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800597a:	79fb      	ldrb	r3, [r7, #7]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d14b      	bne.n	8005a18 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d009      	beq.n	800599c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	4413      	add	r3, r2
 8005990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005994:	461a      	mov	r2, r3
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	791b      	ldrb	r3, [r3, #4]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d128      	bne.n	80059f6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d110      	bne.n	80059d6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	0151      	lsls	r1, r2, #5
 80059c6:	69fa      	ldr	r2, [r7, #28]
 80059c8:	440a      	add	r2, r1
 80059ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059d2:	6013      	str	r3, [r2, #0]
 80059d4:	e00f      	b.n	80059f6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	0151      	lsls	r1, r2, #5
 80059e8:	69fa      	ldr	r2, [r7, #28]
 80059ea:	440a      	add	r2, r1
 80059ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059f4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	0151      	lsls	r1, r2, #5
 8005a08:	69fa      	ldr	r2, [r7, #28]
 8005a0a:	440a      	add	r2, r1
 8005a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a14:	6013      	str	r3, [r2, #0]
 8005a16:	e133      	b.n	8005c80 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	0151      	lsls	r1, r2, #5
 8005a2a:	69fa      	ldr	r2, [r7, #28]
 8005a2c:	440a      	add	r2, r1
 8005a2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a36:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	791b      	ldrb	r3, [r3, #4]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d015      	beq.n	8005a6c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f000 811b 	beq.w	8005c80 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	f003 030f 	and.w	r3, r3, #15
 8005a5a:	2101      	movs	r1, #1
 8005a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a60:	69f9      	ldr	r1, [r7, #28]
 8005a62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a66:	4313      	orrs	r3, r2
 8005a68:	634b      	str	r3, [r1, #52]	; 0x34
 8005a6a:	e109      	b.n	8005c80 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d110      	bne.n	8005a9e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	0151      	lsls	r1, r2, #5
 8005a8e:	69fa      	ldr	r2, [r7, #28]
 8005a90:	440a      	add	r2, r1
 8005a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a9a:	6013      	str	r3, [r2, #0]
 8005a9c:	e00f      	b.n	8005abe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	0151      	lsls	r1, r2, #5
 8005ab0:	69fa      	ldr	r2, [r7, #28]
 8005ab2:	440a      	add	r2, r1
 8005ab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005abc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	6919      	ldr	r1, [r3, #16]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	781a      	ldrb	r2, [r3, #0]
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	b298      	uxth	r0, r3
 8005acc:	79fb      	ldrb	r3, [r7, #7]
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f000 fade 	bl	8006094 <USB_WritePacket>
 8005ad8:	e0d2      	b.n	8005c80 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	015a      	lsls	r2, r3, #5
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	0151      	lsls	r1, r2, #5
 8005aec:	69fa      	ldr	r2, [r7, #28]
 8005aee:	440a      	add	r2, r1
 8005af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005af4:	0cdb      	lsrs	r3, r3, #19
 8005af6:	04db      	lsls	r3, r3, #19
 8005af8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	0151      	lsls	r1, r2, #5
 8005b0c:	69fa      	ldr	r2, [r7, #28]
 8005b0e:	440a      	add	r2, r1
 8005b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b1c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d126      	bne.n	8005b74 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b32:	691a      	ldr	r2, [r3, #16]
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b3c:	69b9      	ldr	r1, [r7, #24]
 8005b3e:	0148      	lsls	r0, r1, #5
 8005b40:	69f9      	ldr	r1, [r7, #28]
 8005b42:	4401      	add	r1, r0
 8005b44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	69ba      	ldr	r2, [r7, #24]
 8005b5c:	0151      	lsls	r1, r2, #5
 8005b5e:	69fa      	ldr	r2, [r7, #28]
 8005b60:	440a      	add	r2, r1
 8005b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b6a:	6113      	str	r3, [r2, #16]
 8005b6c:	e03a      	b.n	8005be4 <USB_EPStartXfer+0x3e4>
 8005b6e:	bf00      	nop
 8005b70:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	699a      	ldr	r2, [r3, #24]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	1e5a      	subs	r2, r3, #1
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b88:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	8afa      	ldrh	r2, [r7, #22]
 8005b90:	fb03 f202 	mul.w	r2, r3, r2
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba4:	691a      	ldr	r2, [r3, #16]
 8005ba6:	8afb      	ldrh	r3, [r7, #22]
 8005ba8:	04d9      	lsls	r1, r3, #19
 8005baa:	4b38      	ldr	r3, [pc, #224]	; (8005c8c <USB_EPStartXfer+0x48c>)
 8005bac:	400b      	ands	r3, r1
 8005bae:	69b9      	ldr	r1, [r7, #24]
 8005bb0:	0148      	lsls	r0, r1, #5
 8005bb2:	69f9      	ldr	r1, [r7, #28]
 8005bb4:	4401      	add	r1, r0
 8005bb6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	015a      	lsls	r2, r3, #5
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bca:	691a      	ldr	r2, [r3, #16]
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	69db      	ldr	r3, [r3, #28]
 8005bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bd4:	69b9      	ldr	r1, [r7, #24]
 8005bd6:	0148      	lsls	r0, r1, #5
 8005bd8:	69f9      	ldr	r1, [r7, #28]
 8005bda:	4401      	add	r1, r0
 8005bdc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005be0:	4313      	orrs	r3, r2
 8005be2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005be4:	79fb      	ldrb	r3, [r7, #7]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d10d      	bne.n	8005c06 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d009      	beq.n	8005c06 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	6919      	ldr	r1, [r3, #16]
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c02:	460a      	mov	r2, r1
 8005c04:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	791b      	ldrb	r3, [r3, #4]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d128      	bne.n	8005c60 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d110      	bne.n	8005c40 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	015a      	lsls	r2, r3, #5
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	4413      	add	r3, r2
 8005c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	0151      	lsls	r1, r2, #5
 8005c30:	69fa      	ldr	r2, [r7, #28]
 8005c32:	440a      	add	r2, r1
 8005c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c3c:	6013      	str	r3, [r2, #0]
 8005c3e:	e00f      	b.n	8005c60 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	0151      	lsls	r1, r2, #5
 8005c52:	69fa      	ldr	r2, [r7, #28]
 8005c54:	440a      	add	r2, r1
 8005c56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c5e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	69ba      	ldr	r2, [r7, #24]
 8005c70:	0151      	lsls	r1, r2, #5
 8005c72:	69fa      	ldr	r2, [r7, #28]
 8005c74:	440a      	add	r2, r1
 8005c76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3720      	adds	r7, #32
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	1ff80000 	.word	0x1ff80000

08005c90 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	785b      	ldrb	r3, [r3, #1]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	f040 80ce 	bne.w	8005e4e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d132      	bne.n	8005d20 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	0151      	lsls	r1, r2, #5
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	440a      	add	r2, r1
 8005cd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	0151      	lsls	r1, r2, #5
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	440a      	add	r2, r1
 8005cf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	0151      	lsls	r1, r2, #5
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	440a      	add	r2, r1
 8005d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d18:	0cdb      	lsrs	r3, r3, #19
 8005d1a:	04db      	lsls	r3, r3, #19
 8005d1c:	6113      	str	r3, [r2, #16]
 8005d1e:	e04e      	b.n	8005dbe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	0151      	lsls	r1, r2, #5
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	440a      	add	r2, r1
 8005d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d3a:	0cdb      	lsrs	r3, r3, #19
 8005d3c:	04db      	lsls	r3, r3, #19
 8005d3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	0151      	lsls	r1, r2, #5
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	440a      	add	r2, r1
 8005d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d62:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	699a      	ldr	r2, [r3, #24]
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d903      	bls.n	8005d78 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	68da      	ldr	r2, [r3, #12]
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	0151      	lsls	r1, r2, #5
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	440a      	add	r2, r1
 8005d8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	015a      	lsls	r2, r3, #5
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	4413      	add	r3, r2
 8005da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da4:	691a      	ldr	r2, [r3, #16]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dae:	6939      	ldr	r1, [r7, #16]
 8005db0:	0148      	lsls	r0, r1, #5
 8005db2:	6979      	ldr	r1, [r7, #20]
 8005db4:	4401      	add	r1, r0
 8005db6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005dbe:	79fb      	ldrb	r3, [r7, #7]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d11e      	bne.n	8005e02 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d009      	beq.n	8005de0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd8:	461a      	mov	r2, r3
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	015a      	lsls	r2, r3, #5
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	0151      	lsls	r1, r2, #5
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	440a      	add	r2, r1
 8005df6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dfa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005dfe:	6013      	str	r3, [r2, #0]
 8005e00:	e097      	b.n	8005f32 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	0151      	lsls	r1, r2, #5
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	440a      	add	r2, r1
 8005e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e20:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f000 8083 	beq.w	8005f32 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	f003 030f 	and.w	r3, r3, #15
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e42:	6979      	ldr	r1, [r7, #20]
 8005e44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	634b      	str	r3, [r1, #52]	; 0x34
 8005e4c:	e071      	b.n	8005f32 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	0151      	lsls	r1, r2, #5
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	440a      	add	r2, r1
 8005e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e68:	0cdb      	lsrs	r3, r3, #19
 8005e6a:	04db      	lsls	r3, r3, #19
 8005e6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	0151      	lsls	r1, r2, #5
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	440a      	add	r2, r1
 8005e84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e90:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	68da      	ldr	r2, [r3, #12]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	68da      	ldr	r2, [r3, #12]
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	0151      	lsls	r1, r2, #5
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	440a      	add	r2, r1
 8005ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ec4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ec8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed6:	691a      	ldr	r2, [r3, #16]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	69db      	ldr	r3, [r3, #28]
 8005edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ee0:	6939      	ldr	r1, [r7, #16]
 8005ee2:	0148      	lsls	r0, r1, #5
 8005ee4:	6979      	ldr	r1, [r7, #20]
 8005ee6:	4401      	add	r1, r0
 8005ee8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005eec:	4313      	orrs	r3, r2
 8005eee:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005ef0:	79fb      	ldrb	r3, [r7, #7]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d10d      	bne.n	8005f12 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d009      	beq.n	8005f12 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	6919      	ldr	r1, [r3, #16]
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	015a      	lsls	r2, r3, #5
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0e:	460a      	mov	r2, r1
 8005f10:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	0151      	lsls	r1, r2, #5
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	440a      	add	r2, r1
 8005f28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f2c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	371c      	adds	r7, #28
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b087      	sub	sp, #28
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	785b      	ldrb	r3, [r3, #1]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d14a      	bne.n	8005ff4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f76:	f040 8086 	bne.w	8006086 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	7812      	ldrb	r2, [r2, #0]
 8005f8e:	0151      	lsls	r1, r2, #5
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	440a      	add	r2, r1
 8005f94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f9c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	683a      	ldr	r2, [r7, #0]
 8005fb0:	7812      	ldrb	r2, [r2, #0]
 8005fb2:	0151      	lsls	r1, r2, #5
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	440a      	add	r2, r1
 8005fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fc0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f242 7210 	movw	r2, #10000	; 0x2710
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d902      	bls.n	8005fd8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	75fb      	strb	r3, [r7, #23]
          break;
 8005fd6:	e056      	b.n	8006086 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ff0:	d0e7      	beq.n	8005fc2 <USB_EPStopXfer+0x82>
 8005ff2:	e048      	b.n	8006086 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006008:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800600c:	d13b      	bne.n	8006086 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	4413      	add	r3, r2
 8006018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	7812      	ldrb	r2, [r2, #0]
 8006022:	0151      	lsls	r1, r2, #5
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	440a      	add	r2, r1
 8006028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800602c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006030:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	015a      	lsls	r2, r3, #5
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	4413      	add	r3, r2
 800603c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	7812      	ldrb	r2, [r2, #0]
 8006046:	0151      	lsls	r1, r2, #5
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	440a      	add	r2, r1
 800604c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006050:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006054:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	3301      	adds	r3, #1
 800605a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006062:	4293      	cmp	r3, r2
 8006064:	d902      	bls.n	800606c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	75fb      	strb	r3, [r7, #23]
          break;
 800606a:	e00c      	b.n	8006086 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	015a      	lsls	r2, r3, #5
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	4413      	add	r3, r2
 8006076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006080:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006084:	d0e7      	beq.n	8006056 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006086:	7dfb      	ldrb	r3, [r7, #23]
}
 8006088:	4618      	mov	r0, r3
 800608a:	371c      	adds	r7, #28
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006094:	b480      	push	{r7}
 8006096:	b089      	sub	sp, #36	; 0x24
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	4611      	mov	r1, r2
 80060a0:	461a      	mov	r2, r3
 80060a2:	460b      	mov	r3, r1
 80060a4:	71fb      	strb	r3, [r7, #7]
 80060a6:	4613      	mov	r3, r2
 80060a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80060b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d123      	bne.n	8006102 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80060ba:	88bb      	ldrh	r3, [r7, #4]
 80060bc:	3303      	adds	r3, #3
 80060be:	089b      	lsrs	r3, r3, #2
 80060c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80060c2:	2300      	movs	r3, #0
 80060c4:	61bb      	str	r3, [r7, #24]
 80060c6:	e018      	b.n	80060fa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80060c8:	79fb      	ldrb	r3, [r7, #7]
 80060ca:	031a      	lsls	r2, r3, #12
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060d4:	461a      	mov	r2, r3
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	3301      	adds	r3, #1
 80060e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	3301      	adds	r3, #1
 80060e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	3301      	adds	r3, #1
 80060ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	3301      	adds	r3, #1
 80060f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	3301      	adds	r3, #1
 80060f8:	61bb      	str	r3, [r7, #24]
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d3e2      	bcc.n	80060c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3724      	adds	r7, #36	; 0x24
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006110:	b480      	push	{r7}
 8006112:	b08b      	sub	sp, #44	; 0x2c
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	4613      	mov	r3, r2
 800611c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006126:	88fb      	ldrh	r3, [r7, #6]
 8006128:	089b      	lsrs	r3, r3, #2
 800612a:	b29b      	uxth	r3, r3
 800612c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800612e:	88fb      	ldrh	r3, [r7, #6]
 8006130:	f003 0303 	and.w	r3, r3, #3
 8006134:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006136:	2300      	movs	r3, #0
 8006138:	623b      	str	r3, [r7, #32]
 800613a:	e014      	b.n	8006166 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	601a      	str	r2, [r3, #0]
    pDest++;
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614a:	3301      	adds	r3, #1
 800614c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	3301      	adds	r3, #1
 8006152:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006156:	3301      	adds	r3, #1
 8006158:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	3301      	adds	r3, #1
 800615e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006160:	6a3b      	ldr	r3, [r7, #32]
 8006162:	3301      	adds	r3, #1
 8006164:	623b      	str	r3, [r7, #32]
 8006166:	6a3a      	ldr	r2, [r7, #32]
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	429a      	cmp	r2, r3
 800616c:	d3e6      	bcc.n	800613c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800616e:	8bfb      	ldrh	r3, [r7, #30]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d01e      	beq.n	80061b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006174:	2300      	movs	r3, #0
 8006176:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800617e:	461a      	mov	r2, r3
 8006180:	f107 0310 	add.w	r3, r7, #16
 8006184:	6812      	ldr	r2, [r2, #0]
 8006186:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	b2db      	uxtb	r3, r3
 800618e:	00db      	lsls	r3, r3, #3
 8006190:	fa22 f303 	lsr.w	r3, r2, r3
 8006194:	b2da      	uxtb	r2, r3
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	701a      	strb	r2, [r3, #0]
      i++;
 800619a:	6a3b      	ldr	r3, [r7, #32]
 800619c:	3301      	adds	r3, #1
 800619e:	623b      	str	r3, [r7, #32]
      pDest++;
 80061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a2:	3301      	adds	r3, #1
 80061a4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80061a6:	8bfb      	ldrh	r3, [r7, #30]
 80061a8:	3b01      	subs	r3, #1
 80061aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80061ac:	8bfb      	ldrh	r3, [r7, #30]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1ea      	bne.n	8006188 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	372c      	adds	r7, #44	; 0x2c
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	785b      	ldrb	r3, [r3, #1]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d12c      	bne.n	8006236 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	db12      	blt.n	8006214 <USB_EPSetStall+0x54>
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00f      	beq.n	8006214 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	015a      	lsls	r2, r3, #5
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	4413      	add	r3, r2
 80061fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	0151      	lsls	r1, r2, #5
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	440a      	add	r2, r1
 800620a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800620e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006212:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4413      	add	r3, r2
 800621c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	0151      	lsls	r1, r2, #5
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	440a      	add	r2, r1
 800622a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800622e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006232:	6013      	str	r3, [r2, #0]
 8006234:	e02b      	b.n	800628e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	015a      	lsls	r2, r3, #5
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	4413      	add	r3, r2
 800623e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	db12      	blt.n	800626e <USB_EPSetStall+0xae>
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00f      	beq.n	800626e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	4413      	add	r3, r2
 8006256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	0151      	lsls	r1, r2, #5
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	440a      	add	r2, r1
 8006264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006268:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800626c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4413      	add	r3, r2
 8006276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	0151      	lsls	r1, r2, #5
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	440a      	add	r2, r1
 8006284:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006288:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800628c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3714      	adds	r7, #20
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	785b      	ldrb	r3, [r3, #1]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d128      	bne.n	800630a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	0151      	lsls	r1, r2, #5
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	440a      	add	r2, r1
 80062ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062d6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	791b      	ldrb	r3, [r3, #4]
 80062dc:	2b03      	cmp	r3, #3
 80062de:	d003      	beq.n	80062e8 <USB_EPClearStall+0x4c>
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	791b      	ldrb	r3, [r3, #4]
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d138      	bne.n	800635a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	0151      	lsls	r1, r2, #5
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	440a      	add	r2, r1
 80062fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006306:	6013      	str	r3, [r2, #0]
 8006308:	e027      	b.n	800635a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	015a      	lsls	r2, r3, #5
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	4413      	add	r3, r2
 8006312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	0151      	lsls	r1, r2, #5
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	440a      	add	r2, r1
 8006320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006324:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006328:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	791b      	ldrb	r3, [r3, #4]
 800632e:	2b03      	cmp	r3, #3
 8006330:	d003      	beq.n	800633a <USB_EPClearStall+0x9e>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	791b      	ldrb	r3, [r3, #4]
 8006336:	2b02      	cmp	r3, #2
 8006338:	d10f      	bne.n	800635a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	0151      	lsls	r1, r2, #5
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	440a      	add	r2, r1
 8006350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006358:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	460b      	mov	r3, r1
 8006372:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006386:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800638a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	78fb      	ldrb	r3, [r7, #3]
 8006396:	011b      	lsls	r3, r3, #4
 8006398:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800639c:	68f9      	ldr	r1, [r7, #12]
 800639e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063a2:	4313      	orrs	r3, r2
 80063a4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3714      	adds	r7, #20
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063ce:	f023 0303 	bic.w	r3, r3, #3
 80063d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063e2:	f023 0302 	bic.w	r3, r3, #2
 80063e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b085      	sub	sp, #20
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006410:	f023 0303 	bic.w	r3, r3, #3
 8006414:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006424:	f043 0302 	orr.w	r3, r3, #2
 8006428:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3714      	adds	r7, #20
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	4013      	ands	r3, r2
 800644e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006450:	68fb      	ldr	r3, [r7, #12]
}
 8006452:	4618      	mov	r0, r3
 8006454:	3714      	adds	r7, #20
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800645e:	b480      	push	{r7}
 8006460:	b085      	sub	sp, #20
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800647a:	69db      	ldr	r3, [r3, #28]
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	4013      	ands	r3, r2
 8006480:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	0c1b      	lsrs	r3, r3, #16
}
 8006486:	4618      	mov	r0, r3
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006492:	b480      	push	{r7}
 8006494:	b085      	sub	sp, #20
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ae:	69db      	ldr	r3, [r3, #28]
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	4013      	ands	r3, r2
 80064b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	b29b      	uxth	r3, r3
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3714      	adds	r7, #20
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b085      	sub	sp, #20
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
 80064ce:	460b      	mov	r3, r1
 80064d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80064d6:	78fb      	ldrb	r3, [r7, #3]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	68ba      	ldr	r2, [r7, #8]
 80064f0:	4013      	ands	r3, r2
 80064f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80064f4:	68bb      	ldr	r3, [r7, #8]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3714      	adds	r7, #20
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006502:	b480      	push	{r7}
 8006504:	b087      	sub	sp, #28
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
 800650a:	460b      	mov	r3, r1
 800650c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006524:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006526:	78fb      	ldrb	r3, [r7, #3]
 8006528:	f003 030f 	and.w	r3, r3, #15
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	fa22 f303 	lsr.w	r3, r2, r3
 8006532:	01db      	lsls	r3, r3, #7
 8006534:	b2db      	uxtb	r3, r3
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	4313      	orrs	r3, r2
 800653a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800653c:	78fb      	ldrb	r3, [r7, #3]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	4413      	add	r3, r2
 8006544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	4013      	ands	r3, r2
 800654e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006550:	68bb      	ldr	r3, [r7, #8]
}
 8006552:	4618      	mov	r0, r3
 8006554:	371c      	adds	r7, #28
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800655e:	b480      	push	{r7}
 8006560:	b083      	sub	sp, #12
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	f003 0301 	and.w	r3, r3, #1
}
 800656e:	4618      	mov	r0, r3
 8006570:	370c      	adds	r7, #12
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800657a:	b480      	push	{r7}
 800657c:	b085      	sub	sp, #20
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006594:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006598:	f023 0307 	bic.w	r3, r3, #7
 800659c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3714      	adds	r7, #20
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b087      	sub	sp, #28
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	460b      	mov	r3, r1
 80065ca:	607a      	str	r2, [r7, #4]
 80065cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	333c      	adds	r3, #60	; 0x3c
 80065d6:	3304      	adds	r3, #4
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	4a26      	ldr	r2, [pc, #152]	; (8006678 <USB_EP0_OutStart+0xb8>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d90a      	bls.n	80065fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065f4:	d101      	bne.n	80065fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	e037      	b.n	800666a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006600:	461a      	mov	r2, r3
 8006602:	2300      	movs	r3, #0
 8006604:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006614:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006618:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006628:	f043 0318 	orr.w	r3, r3, #24
 800662c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800663c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006640:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006642:	7afb      	ldrb	r3, [r7, #11]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d10f      	bne.n	8006668 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800664e:	461a      	mov	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006662:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006666:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	371c      	adds	r7, #28
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	4f54300a 	.word	0x4f54300a

0800667c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006684:	2300      	movs	r3, #0
 8006686:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	3301      	adds	r3, #1
 800668c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	4a13      	ldr	r2, [pc, #76]	; (80066e0 <USB_CoreReset+0x64>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d901      	bls.n	800669a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e01b      	b.n	80066d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	daf2      	bge.n	8006688 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80066a2:	2300      	movs	r3, #0
 80066a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	f043 0201 	orr.w	r2, r3, #1
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	3301      	adds	r3, #1
 80066b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4a09      	ldr	r2, [pc, #36]	; (80066e0 <USB_CoreReset+0x64>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d901      	bls.n	80066c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e006      	b.n	80066d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d0f0      	beq.n	80066b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	00030d40 	.word	0x00030d40

080066e4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f103 0208 	add.w	r2, r3, #8
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f04f 32ff 	mov.w	r2, #4294967295
 80066fc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f103 0208 	add.w	r2, r3, #8
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f103 0208 	add.w	r2, r3, #8
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006732:	bf00      	nop
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800673e:	b480      	push	{r7}
 8006740:	b085      	sub	sp, #20
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
 8006746:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	689a      	ldr	r2, [r3, #8]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	683a      	ldr	r2, [r7, #0]
 8006762:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	1c5a      	adds	r2, r3, #1
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	601a      	str	r2, [r3, #0]
}
 800677a:	bf00      	nop
 800677c:	3714      	adds	r7, #20
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8006786:	b480      	push	{r7}
 8006788:	b085      	sub	sp, #20
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679c:	d103      	bne.n	80067a6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	60fb      	str	r3, [r7, #12]
 80067a4:	e00c      	b.n	80067c0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	3308      	adds	r3, #8
 80067aa:	60fb      	str	r3, [r7, #12]
 80067ac:	e002      	b.n	80067b4 <vListInsert+0x2e>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	60fb      	str	r3, [r7, #12]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d2f6      	bcs.n	80067ae <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	685a      	ldr	r2, [r3, #4]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	683a      	ldr	r2, [r7, #0]
 80067da:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	1c5a      	adds	r2, r3, #1
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	601a      	str	r2, [r3, #0]
}
 80067ec:	bf00      	nop
 80067ee:	3714      	adds	r7, #20
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	6892      	ldr	r2, [r2, #8]
 800680e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	6852      	ldr	r2, [r2, #4]
 8006818:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	429a      	cmp	r2, r3
 8006822:	d103      	bne.n	800682c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	689a      	ldr	r2, [r3, #8]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	1e5a      	subs	r2, r3, #1
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3714      	adds	r7, #20
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d10a      	bne.n	8006876 <xQueueGenericReset+0x2a>
        __asm volatile
 8006860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	60bb      	str	r3, [r7, #8]
    }
 8006872:	bf00      	nop
 8006874:	e7fe      	b.n	8006874 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8006876:	f001 ffd7 	bl	8008828 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006882:	68f9      	ldr	r1, [r7, #12]
 8006884:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006886:	fb01 f303 	mul.w	r3, r1, r3
 800688a:	441a      	add	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068a6:	3b01      	subs	r3, #1
 80068a8:	68f9      	ldr	r1, [r7, #12]
 80068aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80068ac:	fb01 f303 	mul.w	r3, r1, r3
 80068b0:	441a      	add	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	22ff      	movs	r2, #255	; 0xff
 80068ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	22ff      	movs	r2, #255	; 0xff
 80068c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d109      	bne.n	80068e0 <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00f      	beq.n	80068f4 <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	3310      	adds	r3, #16
 80068d8:	4618      	mov	r0, r3
 80068da:	f001 f8b3 	bl	8007a44 <xTaskRemoveFromEventList>
 80068de:	e009      	b.n	80068f4 <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	3310      	adds	r3, #16
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7ff fefd 	bl	80066e4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	3324      	adds	r3, #36	; 0x24
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7ff fef8 	bl	80066e4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80068f4:	f001 ffc8 	bl	8008888 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80068f8:	2301      	movs	r3, #1
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8006902:	b580      	push	{r7, lr}
 8006904:	b08c      	sub	sp, #48	; 0x30
 8006906:	af02      	add	r7, sp, #8
 8006908:	60f8      	str	r0, [r7, #12]
 800690a:	60b9      	str	r1, [r7, #8]
 800690c:	4613      	mov	r3, r2
 800690e:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10a      	bne.n	800692c <xQueueGenericCreate+0x2a>
        __asm volatile
 8006916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	61bb      	str	r3, [r7, #24]
    }
 8006928:	bf00      	nop
 800692a:	e7fe      	b.n	800692a <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	fb02 f303 	mul.w	r3, r2, r3
 8006934:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d006      	beq.n	800694a <xQueueGenericCreate+0x48>
 800693c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	fbb2 f3f3 	udiv	r3, r2, r3
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	429a      	cmp	r2, r3
 8006948:	d101      	bne.n	800694e <xQueueGenericCreate+0x4c>
 800694a:	2301      	movs	r3, #1
 800694c:	e000      	b.n	8006950 <xQueueGenericCreate+0x4e>
 800694e:	2300      	movs	r3, #0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10a      	bne.n	800696a <xQueueGenericCreate+0x68>
        __asm volatile
 8006954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	617b      	str	r3, [r7, #20]
    }
 8006966:	bf00      	nop
 8006968:	e7fe      	b.n	8006968 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8006970:	d90a      	bls.n	8006988 <xQueueGenericCreate+0x86>
        __asm volatile
 8006972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006976:	f383 8811 	msr	BASEPRI, r3
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	613b      	str	r3, [r7, #16]
    }
 8006984:	bf00      	nop
 8006986:	e7fe      	b.n	8006986 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	3350      	adds	r3, #80	; 0x50
 800698c:	4618      	mov	r0, r3
 800698e:	f002 f8bb 	bl	8008b08 <pvPortMalloc>
 8006992:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8006994:	6a3b      	ldr	r3, [r7, #32]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00d      	beq.n	80069b6 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800699a:	6a3b      	ldr	r3, [r7, #32]
 800699c:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	3350      	adds	r3, #80	; 0x50
 80069a2:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069a4:	79fa      	ldrb	r2, [r7, #7]
 80069a6:	6a3b      	ldr	r3, [r7, #32]
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	4613      	mov	r3, r2
 80069ac:	69fa      	ldr	r2, [r7, #28]
 80069ae:	68b9      	ldr	r1, [r7, #8]
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f000 f805 	bl	80069c0 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80069b6:	6a3b      	ldr	r3, [r7, #32]
    }
 80069b8:	4618      	mov	r0, r3
 80069ba:	3728      	adds	r7, #40	; 0x28
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
 80069cc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d103      	bne.n	80069dc <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	69ba      	ldr	r2, [r7, #24]
 80069d8:	601a      	str	r2, [r3, #0]
 80069da:	e002      	b.n	80069e2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80069ee:	2101      	movs	r1, #1
 80069f0:	69b8      	ldr	r0, [r7, #24]
 80069f2:	f7ff ff2b 	bl	800684c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	78fa      	ldrb	r2, [r7, #3]
 80069fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80069fe:	78fb      	ldrb	r3, [r7, #3]
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	68f9      	ldr	r1, [r7, #12]
 8006a04:	2073      	movs	r0, #115	; 0x73
 8006a06:	f005 fc37 	bl	800c278 <SEGGER_SYSVIEW_RecordU32x3>
}
 8006a0a:	bf00      	nop
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
	...

08006a14 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b090      	sub	sp, #64	; 0x40
 8006a18:	af02      	add	r7, sp, #8
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]
 8006a20:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006a22:	2300      	movs	r3, #0
 8006a24:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10a      	bne.n	8006a46 <xQueueGenericSend+0x32>
        __asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8006a42:	bf00      	nop
 8006a44:	e7fe      	b.n	8006a44 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d103      	bne.n	8006a54 <xQueueGenericSend+0x40>
 8006a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d101      	bne.n	8006a58 <xQueueGenericSend+0x44>
 8006a54:	2301      	movs	r3, #1
 8006a56:	e000      	b.n	8006a5a <xQueueGenericSend+0x46>
 8006a58:	2300      	movs	r3, #0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10a      	bne.n	8006a74 <xQueueGenericSend+0x60>
        __asm volatile
 8006a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a62:	f383 8811 	msr	BASEPRI, r3
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8006a70:	bf00      	nop
 8006a72:	e7fe      	b.n	8006a72 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d103      	bne.n	8006a82 <xQueueGenericSend+0x6e>
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d101      	bne.n	8006a86 <xQueueGenericSend+0x72>
 8006a82:	2301      	movs	r3, #1
 8006a84:	e000      	b.n	8006a88 <xQueueGenericSend+0x74>
 8006a86:	2300      	movs	r3, #0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10a      	bne.n	8006aa2 <xQueueGenericSend+0x8e>
        __asm volatile
 8006a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a90:	f383 8811 	msr	BASEPRI, r3
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	623b      	str	r3, [r7, #32]
    }
 8006a9e:	bf00      	nop
 8006aa0:	e7fe      	b.n	8006aa0 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006aa2:	f001 f969 	bl	8007d78 <xTaskGetSchedulerState>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d102      	bne.n	8006ab2 <xQueueGenericSend+0x9e>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d101      	bne.n	8006ab6 <xQueueGenericSend+0xa2>
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e000      	b.n	8006ab8 <xQueueGenericSend+0xa4>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10a      	bne.n	8006ad2 <xQueueGenericSend+0xbe>
        __asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	61fb      	str	r3, [r7, #28]
    }
 8006ace:	bf00      	nop
 8006ad0:	e7fe      	b.n	8006ad0 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006ad2:	f001 fea9 	bl	8008828 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d302      	bcc.n	8006ae8 <xQueueGenericSend+0xd4>
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d11f      	bne.n	8006b28 <xQueueGenericSend+0x114>
            {
                traceQUEUE_SEND( pxQueue );
 8006ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aea:	4618      	mov	r0, r3
 8006aec:	f006 f950 	bl	800cd90 <SEGGER_SYSVIEW_ShrinkId>
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	6879      	ldr	r1, [r7, #4]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	9300      	str	r3, [sp, #0]
 8006af8:	460b      	mov	r3, r1
 8006afa:	4601      	mov	r1, r0
 8006afc:	205a      	movs	r0, #90	; 0x5a
 8006afe:	f005 fc31 	bl	800c364 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	68b9      	ldr	r1, [r7, #8]
 8006b06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b08:	f000 fa56 	bl	8006fb8 <prvCopyDataToQueue>
 8006b0c:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d004      	beq.n	8006b20 <xQueueGenericSend+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b18:	3324      	adds	r3, #36	; 0x24
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 ff92 	bl	8007a44 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8006b20:	f001 feb2 	bl	8008888 <vPortExitCritical>
                return pdPASS;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e07d      	b.n	8006c24 <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d110      	bne.n	8006b50 <xQueueGenericSend+0x13c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006b2e:	f001 feab 	bl	8008888 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8006b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b34:	4618      	mov	r0, r3
 8006b36:	f006 f92b 	bl	800cd90 <SEGGER_SYSVIEW_ShrinkId>
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	6879      	ldr	r1, [r7, #4]
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	460b      	mov	r3, r1
 8006b44:	4601      	mov	r1, r0
 8006b46:	205a      	movs	r0, #90	; 0x5a
 8006b48:	f005 fc0c 	bl	800c364 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	e069      	b.n	8006c24 <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d106      	bne.n	8006b64 <xQueueGenericSend+0x150>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006b56:	f107 0314 	add.w	r3, r7, #20
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 ffd8 	bl	8007b10 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006b60:	2301      	movs	r3, #1
 8006b62:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006b64:	f001 fe90 	bl	8008888 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006b68:	f000 fd54 	bl	8007614 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006b6c:	f001 fe5c 	bl	8008828 <vPortEnterCritical>
 8006b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b76:	b25b      	sxtb	r3, r3
 8006b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7c:	d103      	bne.n	8006b86 <xQueueGenericSend+0x172>
 8006b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b8c:	b25b      	sxtb	r3, r3
 8006b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b92:	d103      	bne.n	8006b9c <xQueueGenericSend+0x188>
 8006b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b9c:	f001 fe74 	bl	8008888 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ba0:	1d3a      	adds	r2, r7, #4
 8006ba2:	f107 0314 	add.w	r3, r7, #20
 8006ba6:	4611      	mov	r1, r2
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f000 ffc7 	bl	8007b3c <xTaskCheckForTimeOut>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d124      	bne.n	8006bfe <xQueueGenericSend+0x1ea>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006bb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bb6:	f000 faf7 	bl	80071a8 <prvIsQueueFull>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d018      	beq.n	8006bf2 <xQueueGenericSend+0x1de>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc2:	3310      	adds	r3, #16
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	4611      	mov	r1, r2
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f000 fee9 	bl	80079a0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8006bce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bd0:	f000 fa82 	bl	80070d8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8006bd4:	f000 fd2c 	bl	8007630 <xTaskResumeAll>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f47f af79 	bne.w	8006ad2 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8006be0:	4b12      	ldr	r3, [pc, #72]	; (8006c2c <xQueueGenericSend+0x218>)
 8006be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006be6:	601a      	str	r2, [r3, #0]
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	e76f      	b.n	8006ad2 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8006bf2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bf4:	f000 fa70 	bl	80070d8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006bf8:	f000 fd1a 	bl	8007630 <xTaskResumeAll>
 8006bfc:	e769      	b.n	8006ad2 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8006bfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c00:	f000 fa6a 	bl	80070d8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006c04:	f000 fd14 	bl	8007630 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8006c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f006 f8c0 	bl	800cd90 <SEGGER_SYSVIEW_ShrinkId>
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	6879      	ldr	r1, [r7, #4]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	9300      	str	r3, [sp, #0]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	4601      	mov	r1, r0
 8006c1c:	205a      	movs	r0, #90	; 0x5a
 8006c1e:	f005 fba1 	bl	800c364 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8006c22:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3738      	adds	r7, #56	; 0x38
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	e000ed04 	.word	0xe000ed04

08006c30 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b090      	sub	sp, #64	; 0x40
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	607a      	str	r2, [r7, #4]
 8006c3c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8006c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10a      	bne.n	8006c5e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8006c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4c:	f383 8811 	msr	BASEPRI, r3
 8006c50:	f3bf 8f6f 	isb	sy
 8006c54:	f3bf 8f4f 	dsb	sy
 8006c58:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8006c5a:	bf00      	nop
 8006c5c:	e7fe      	b.n	8006c5c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d103      	bne.n	8006c6c <xQueueGenericSendFromISR+0x3c>
 8006c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d101      	bne.n	8006c70 <xQueueGenericSendFromISR+0x40>
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e000      	b.n	8006c72 <xQueueGenericSendFromISR+0x42>
 8006c70:	2300      	movs	r3, #0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10a      	bne.n	8006c8c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8006c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7a:	f383 8811 	msr	BASEPRI, r3
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f3bf 8f4f 	dsb	sy
 8006c86:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8006c88:	bf00      	nop
 8006c8a:	e7fe      	b.n	8006c8a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d103      	bne.n	8006c9a <xQueueGenericSendFromISR+0x6a>
 8006c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d101      	bne.n	8006c9e <xQueueGenericSendFromISR+0x6e>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e000      	b.n	8006ca0 <xQueueGenericSendFromISR+0x70>
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10a      	bne.n	8006cba <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8006ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca8:	f383 8811 	msr	BASEPRI, r3
 8006cac:	f3bf 8f6f 	isb	sy
 8006cb0:	f3bf 8f4f 	dsb	sy
 8006cb4:	623b      	str	r3, [r7, #32]
    }
 8006cb6:	bf00      	nop
 8006cb8:	e7fe      	b.n	8006cb8 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006cba:	f001 fe9f 	bl	80089fc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8006cbe:	f3ef 8211 	mrs	r2, BASEPRI
 8006cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc6:	f383 8811 	msr	BASEPRI, r3
 8006cca:	f3bf 8f6f 	isb	sy
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	61fa      	str	r2, [r7, #28]
 8006cd4:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8006cd6:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006cd8:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d302      	bcc.n	8006cec <xQueueGenericSendFromISR+0xbc>
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d148      	bne.n	8006d7e <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8006cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfa:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8006cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f006 f846 	bl	800cd90 <SEGGER_SYSVIEW_ShrinkId>
 8006d04:	4601      	mov	r1, r0
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	461a      	mov	r2, r3
 8006d0a:	2060      	movs	r0, #96	; 0x60
 8006d0c:	f005 fa5a 	bl	800c1c4 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d10:	683a      	ldr	r2, [r7, #0]
 8006d12:	68b9      	ldr	r1, [r7, #8]
 8006d14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d16:	f000 f94f 	bl	8006fb8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8006d1a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d22:	d112      	bne.n	8006d4a <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d025      	beq.n	8006d78 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2e:	3324      	adds	r3, #36	; 0x24
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 fe87 	bl	8007a44 <xTaskRemoveFromEventList>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d01d      	beq.n	8006d78 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d01a      	beq.n	8006d78 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2201      	movs	r2, #1
 8006d46:	601a      	str	r2, [r3, #0]
 8006d48:	e016      	b.n	8006d78 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8006d4a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006d4e:	2b7f      	cmp	r3, #127	; 0x7f
 8006d50:	d10a      	bne.n	8006d68 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8006d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d56:	f383 8811 	msr	BASEPRI, r3
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	617b      	str	r3, [r7, #20]
    }
 8006d64:	bf00      	nop
 8006d66:	e7fe      	b.n	8006d66 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	b25a      	sxtb	r2, r3
 8006d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8006d7c:	e00b      	b.n	8006d96 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8006d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d80:	4618      	mov	r0, r3
 8006d82:	f006 f805 	bl	800cd90 <SEGGER_SYSVIEW_ShrinkId>
 8006d86:	4601      	mov	r1, r0
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	2060      	movs	r0, #96	; 0x60
 8006d8e:	f005 fa19 	bl	800c1c4 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8006d92:	2300      	movs	r3, #0
 8006d94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d98:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8006da0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8006da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3740      	adds	r7, #64	; 0x40
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8006dac:	b590      	push	{r4, r7, lr}
 8006dae:	b08f      	sub	sp, #60	; 0x3c
 8006db0:	af02      	add	r7, sp, #8
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8006db8:	2300      	movs	r3, #0
 8006dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8006dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10a      	bne.n	8006ddc <xQueueReceive+0x30>
        __asm volatile
 8006dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	623b      	str	r3, [r7, #32]
    }
 8006dd8:	bf00      	nop
 8006dda:	e7fe      	b.n	8006dda <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d103      	bne.n	8006dea <xQueueReceive+0x3e>
 8006de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d101      	bne.n	8006dee <xQueueReceive+0x42>
 8006dea:	2301      	movs	r3, #1
 8006dec:	e000      	b.n	8006df0 <xQueueReceive+0x44>
 8006dee:	2300      	movs	r3, #0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10a      	bne.n	8006e0a <xQueueReceive+0x5e>
        __asm volatile
 8006df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df8:	f383 8811 	msr	BASEPRI, r3
 8006dfc:	f3bf 8f6f 	isb	sy
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	61fb      	str	r3, [r7, #28]
    }
 8006e06:	bf00      	nop
 8006e08:	e7fe      	b.n	8006e08 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e0a:	f000 ffb5 	bl	8007d78 <xTaskGetSchedulerState>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d102      	bne.n	8006e1a <xQueueReceive+0x6e>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <xQueueReceive+0x72>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e000      	b.n	8006e20 <xQueueReceive+0x74>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10a      	bne.n	8006e3a <xQueueReceive+0x8e>
        __asm volatile
 8006e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	61bb      	str	r3, [r7, #24]
    }
 8006e36:	bf00      	nop
 8006e38:	e7fe      	b.n	8006e38 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006e3a:	f001 fcf5 	bl	8008828 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e42:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d024      	beq.n	8006e94 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e4a:	68b9      	ldr	r1, [r7, #8]
 8006e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e4e:	f000 f91d 	bl	800708c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8006e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e54:	4618      	mov	r0, r3
 8006e56:	f005 ff9b 	bl	800cd90 <SEGGER_SYSVIEW_ShrinkId>
 8006e5a:	4604      	mov	r4, r0
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	f005 ff97 	bl	800cd90 <SEGGER_SYSVIEW_ShrinkId>
 8006e62:	4602      	mov	r2, r0
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2101      	movs	r1, #1
 8006e68:	9100      	str	r1, [sp, #0]
 8006e6a:	4621      	mov	r1, r4
 8006e6c:	205c      	movs	r0, #92	; 0x5c
 8006e6e:	f005 fa79 	bl	800c364 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	1e5a      	subs	r2, r3, #1
 8006e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e78:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d004      	beq.n	8006e8c <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e84:	3310      	adds	r3, #16
 8006e86:	4618      	mov	r0, r3
 8006e88:	f000 fddc 	bl	8007a44 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8006e8c:	f001 fcfc 	bl	8008888 <vPortExitCritical>
                return pdPASS;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e08a      	b.n	8006faa <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d113      	bne.n	8006ec2 <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006e9a:	f001 fcf5 	bl	8008888 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8006e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f005 ff75 	bl	800cd90 <SEGGER_SYSVIEW_ShrinkId>
 8006ea6:	4604      	mov	r4, r0
 8006ea8:	2000      	movs	r0, #0
 8006eaa:	f005 ff71 	bl	800cd90 <SEGGER_SYSVIEW_ShrinkId>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2101      	movs	r1, #1
 8006eb4:	9100      	str	r1, [sp, #0]
 8006eb6:	4621      	mov	r1, r4
 8006eb8:	205c      	movs	r0, #92	; 0x5c
 8006eba:	f005 fa53 	bl	800c364 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	e073      	b.n	8006faa <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d106      	bne.n	8006ed6 <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006ec8:	f107 0310 	add.w	r3, r7, #16
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f000 fe1f 	bl	8007b10 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006ed6:	f001 fcd7 	bl	8008888 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006eda:	f000 fb9b 	bl	8007614 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006ede:	f001 fca3 	bl	8008828 <vPortEnterCritical>
 8006ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ee8:	b25b      	sxtb	r3, r3
 8006eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eee:	d103      	bne.n	8006ef8 <xQueueReceive+0x14c>
 8006ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006efe:	b25b      	sxtb	r3, r3
 8006f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f04:	d103      	bne.n	8006f0e <xQueueReceive+0x162>
 8006f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f0e:	f001 fcbb 	bl	8008888 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f12:	1d3a      	adds	r2, r7, #4
 8006f14:	f107 0310 	add.w	r3, r7, #16
 8006f18:	4611      	mov	r1, r2
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 fe0e 	bl	8007b3c <xTaskCheckForTimeOut>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d124      	bne.n	8006f70 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f28:	f000 f928 	bl	800717c <prvIsQueueEmpty>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d018      	beq.n	8006f64 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f34:	3324      	adds	r3, #36	; 0x24
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	4611      	mov	r1, r2
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 fd30 	bl	80079a0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8006f40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f42:	f000 f8c9 	bl	80070d8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006f46:	f000 fb73 	bl	8007630 <xTaskResumeAll>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f47f af74 	bne.w	8006e3a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8006f52:	4b18      	ldr	r3, [pc, #96]	; (8006fb4 <xQueueReceive+0x208>)
 8006f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f58:	601a      	str	r2, [r3, #0]
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	e76a      	b.n	8006e3a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8006f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f66:	f000 f8b7 	bl	80070d8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006f6a:	f000 fb61 	bl	8007630 <xTaskResumeAll>
 8006f6e:	e764      	b.n	8006e3a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8006f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f72:	f000 f8b1 	bl	80070d8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006f76:	f000 fb5b 	bl	8007630 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f7c:	f000 f8fe 	bl	800717c <prvIsQueueEmpty>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f43f af59 	beq.w	8006e3a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8006f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f005 ff00 	bl	800cd90 <SEGGER_SYSVIEW_ShrinkId>
 8006f90:	4604      	mov	r4, r0
 8006f92:	2000      	movs	r0, #0
 8006f94:	f005 fefc 	bl	800cd90 <SEGGER_SYSVIEW_ShrinkId>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	9100      	str	r1, [sp, #0]
 8006fa0:	4621      	mov	r1, r4
 8006fa2:	205c      	movs	r0, #92	; 0x5c
 8006fa4:	f005 f9de 	bl	800c364 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8006fa8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3734      	adds	r7, #52	; 0x34
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd90      	pop	{r4, r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	e000ed04 	.word	0xe000ed04

08006fb8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fcc:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10d      	bne.n	8006ff2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d14d      	bne.n	800707a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 fee6 	bl	8007db4 <xTaskPriorityDisinherit>
 8006fe8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	609a      	str	r2, [r3, #8]
 8006ff0:	e043      	b.n	800707a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d119      	bne.n	800702c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6858      	ldr	r0, [r3, #4]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007000:	461a      	mov	r2, r3
 8007002:	68b9      	ldr	r1, [r7, #8]
 8007004:	f006 fd44 	bl	800da90 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007010:	441a      	add	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	685a      	ldr	r2, [r3, #4]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	429a      	cmp	r2, r3
 8007020:	d32b      	bcc.n	800707a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	605a      	str	r2, [r3, #4]
 800702a:	e026      	b.n	800707a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	68d8      	ldr	r0, [r3, #12]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007034:	461a      	mov	r2, r3
 8007036:	68b9      	ldr	r1, [r7, #8]
 8007038:	f006 fd2a 	bl	800da90 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	68da      	ldr	r2, [r3, #12]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007044:	425b      	negs	r3, r3
 8007046:	441a      	add	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	68da      	ldr	r2, [r3, #12]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	429a      	cmp	r2, r3
 8007056:	d207      	bcs.n	8007068 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007060:	425b      	negs	r3, r3
 8007062:	441a      	add	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b02      	cmp	r3, #2
 800706c:	d105      	bne.n	800707a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d002      	beq.n	800707a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	3b01      	subs	r3, #1
 8007078:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	1c5a      	adds	r2, r3, #1
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8007082:	697b      	ldr	r3, [r7, #20]
}
 8007084:	4618      	mov	r0, r3
 8007086:	3718      	adds	r7, #24
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709a:	2b00      	cmp	r3, #0
 800709c:	d018      	beq.n	80070d0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	441a      	add	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	68da      	ldr	r2, [r3, #12]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d303      	bcc.n	80070c0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	68d9      	ldr	r1, [r3, #12]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c8:	461a      	mov	r2, r3
 80070ca:	6838      	ldr	r0, [r7, #0]
 80070cc:	f006 fce0 	bl	800da90 <memcpy>
    }
}
 80070d0:	bf00      	nop
 80070d2:	3708      	adds	r7, #8
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80070e0:	f001 fba2 	bl	8008828 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070ea:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80070ec:	e011      	b.n	8007112 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d012      	beq.n	800711c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	3324      	adds	r3, #36	; 0x24
 80070fa:	4618      	mov	r0, r3
 80070fc:	f000 fca2 	bl	8007a44 <xTaskRemoveFromEventList>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8007106:	f000 fd7f 	bl	8007c08 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800710a:	7bfb      	ldrb	r3, [r7, #15]
 800710c:	3b01      	subs	r3, #1
 800710e:	b2db      	uxtb	r3, r3
 8007110:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007116:	2b00      	cmp	r3, #0
 8007118:	dce9      	bgt.n	80070ee <prvUnlockQueue+0x16>
 800711a:	e000      	b.n	800711e <prvUnlockQueue+0x46>
                        break;
 800711c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	22ff      	movs	r2, #255	; 0xff
 8007122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8007126:	f001 fbaf 	bl	8008888 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800712a:	f001 fb7d 	bl	8008828 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007134:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007136:	e011      	b.n	800715c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d012      	beq.n	8007166 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	3310      	adds	r3, #16
 8007144:	4618      	mov	r0, r3
 8007146:	f000 fc7d 	bl	8007a44 <xTaskRemoveFromEventList>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d001      	beq.n	8007154 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8007150:	f000 fd5a 	bl	8007c08 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8007154:	7bbb      	ldrb	r3, [r7, #14]
 8007156:	3b01      	subs	r3, #1
 8007158:	b2db      	uxtb	r3, r3
 800715a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800715c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007160:	2b00      	cmp	r3, #0
 8007162:	dce9      	bgt.n	8007138 <prvUnlockQueue+0x60>
 8007164:	e000      	b.n	8007168 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8007166:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	22ff      	movs	r2, #255	; 0xff
 800716c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8007170:	f001 fb8a 	bl	8008888 <vPortExitCritical>
}
 8007174:	bf00      	nop
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8007184:	f001 fb50 	bl	8008828 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718c:	2b00      	cmp	r3, #0
 800718e:	d102      	bne.n	8007196 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8007190:	2301      	movs	r3, #1
 8007192:	60fb      	str	r3, [r7, #12]
 8007194:	e001      	b.n	800719a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8007196:	2300      	movs	r3, #0
 8007198:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800719a:	f001 fb75 	bl	8008888 <vPortExitCritical>

    return xReturn;
 800719e:	68fb      	ldr	r3, [r7, #12]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80071b0:	f001 fb3a 	bl	8008828 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071bc:	429a      	cmp	r2, r3
 80071be:	d102      	bne.n	80071c6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80071c0:	2301      	movs	r3, #1
 80071c2:	60fb      	str	r3, [r7, #12]
 80071c4:	e001      	b.n	80071ca <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80071c6:	2300      	movs	r3, #0
 80071c8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80071ca:	f001 fb5d 	bl	8008888 <vPortExitCritical>

    return xReturn;
 80071ce:	68fb      	ldr	r3, [r7, #12]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071e2:	2300      	movs	r3, #0
 80071e4:	60fb      	str	r3, [r7, #12]
 80071e6:	e01e      	b.n	8007226 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80071e8:	4a13      	ldr	r2, [pc, #76]	; (8007238 <vQueueAddToRegistry+0x60>)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d115      	bne.n	8007220 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80071f4:	4910      	ldr	r1, [pc, #64]	; (8007238 <vQueueAddToRegistry+0x60>)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	683a      	ldr	r2, [r7, #0]
 80071fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80071fe:	4a0e      	ldr	r2, [pc, #56]	; (8007238 <vQueueAddToRegistry+0x60>)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	00db      	lsls	r3, r3, #3
 8007204:	4413      	add	r3, r2
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4618      	mov	r0, r3
 800720e:	f005 fdbf 	bl	800cd90 <SEGGER_SYSVIEW_ShrinkId>
 8007212:	4601      	mov	r1, r0
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	461a      	mov	r2, r3
 8007218:	2071      	movs	r0, #113	; 0x71
 800721a:	f004 ffd3 	bl	800c1c4 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800721e:	e006      	b.n	800722e <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	3301      	adds	r3, #1
 8007224:	60fb      	str	r3, [r7, #12]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2b07      	cmp	r3, #7
 800722a:	d9dd      	bls.n	80071e8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800722c:	bf00      	nop
 800722e:	bf00      	nop
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	20000360 	.word	0x20000360

0800723c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800723c:	b580      	push	{r7, lr}
 800723e:	b086      	sub	sp, #24
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800724c:	f001 faec 	bl	8008828 <vPortEnterCritical>
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007256:	b25b      	sxtb	r3, r3
 8007258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800725c:	d103      	bne.n	8007266 <vQueueWaitForMessageRestricted+0x2a>
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800726c:	b25b      	sxtb	r3, r3
 800726e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007272:	d103      	bne.n	800727c <vQueueWaitForMessageRestricted+0x40>
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800727c:	f001 fb04 	bl	8008888 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007284:	2b00      	cmp	r3, #0
 8007286:	d106      	bne.n	8007296 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	3324      	adds	r3, #36	; 0x24
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	68b9      	ldr	r1, [r7, #8]
 8007290:	4618      	mov	r0, r3
 8007292:	f000 fba9 	bl	80079e8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8007296:	6978      	ldr	r0, [r7, #20]
 8007298:	f7ff ff1e 	bl	80070d8 <prvUnlockQueue>
    }
 800729c:	bf00      	nop
 800729e:	3718      	adds	r7, #24
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b08c      	sub	sp, #48	; 0x30
 80072a8:	af04      	add	r7, sp, #16
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	603b      	str	r3, [r7, #0]
 80072b0:	4613      	mov	r3, r2
 80072b2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80072b4:	88fb      	ldrh	r3, [r7, #6]
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	4618      	mov	r0, r3
 80072ba:	f001 fc25 	bl	8008b08 <pvPortMalloc>
 80072be:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00e      	beq.n	80072e4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80072c6:	2058      	movs	r0, #88	; 0x58
 80072c8:	f001 fc1e 	bl	8008b08 <pvPortMalloc>
 80072cc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d003      	beq.n	80072dc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	631a      	str	r2, [r3, #48]	; 0x30
 80072da:	e005      	b.n	80072e8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80072dc:	6978      	ldr	r0, [r7, #20]
 80072de:	f001 fcf3 	bl	8008cc8 <vPortFree>
 80072e2:	e001      	b.n	80072e8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80072e4:	2300      	movs	r3, #0
 80072e6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d013      	beq.n	8007316 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80072ee:	88fa      	ldrh	r2, [r7, #6]
 80072f0:	2300      	movs	r3, #0
 80072f2:	9303      	str	r3, [sp, #12]
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	9302      	str	r3, [sp, #8]
 80072f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fa:	9301      	str	r3, [sp, #4]
 80072fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	68b9      	ldr	r1, [r7, #8]
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f000 f80e 	bl	8007326 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800730a:	69f8      	ldr	r0, [r7, #28]
 800730c:	f000 f8a2 	bl	8007454 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8007310:	2301      	movs	r3, #1
 8007312:	61bb      	str	r3, [r7, #24]
 8007314:	e002      	b.n	800731c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007316:	f04f 33ff 	mov.w	r3, #4294967295
 800731a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800731c:	69bb      	ldr	r3, [r7, #24]
    }
 800731e:	4618      	mov	r0, r3
 8007320:	3720      	adds	r7, #32
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b088      	sub	sp, #32
 800732a:	af00      	add	r7, sp, #0
 800732c:	60f8      	str	r0, [r7, #12]
 800732e:	60b9      	str	r1, [r7, #8]
 8007330:	607a      	str	r2, [r7, #4]
 8007332:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007336:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	461a      	mov	r2, r3
 800733e:	21a5      	movs	r1, #165	; 0xa5
 8007340:	f006 fbb4 	bl	800daac <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800734e:	3b01      	subs	r3, #1
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	4413      	add	r3, r2
 8007354:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	f023 0307 	bic.w	r3, r3, #7
 800735c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	f003 0307 	and.w	r3, r3, #7
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00a      	beq.n	800737e <prvInitialiseNewTask+0x58>
        __asm volatile
 8007368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736c:	f383 8811 	msr	BASEPRI, r3
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	617b      	str	r3, [r7, #20]
    }
 800737a:	bf00      	nop
 800737c:	e7fe      	b.n	800737c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d01f      	beq.n	80073c4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007384:	2300      	movs	r3, #0
 8007386:	61fb      	str	r3, [r7, #28]
 8007388:	e012      	b.n	80073b0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	4413      	add	r3, r2
 8007390:	7819      	ldrb	r1, [r3, #0]
 8007392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	4413      	add	r3, r2
 8007398:	3334      	adds	r3, #52	; 0x34
 800739a:	460a      	mov	r2, r1
 800739c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800739e:	68ba      	ldr	r2, [r7, #8]
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	4413      	add	r3, r2
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d006      	beq.n	80073b8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	3301      	adds	r3, #1
 80073ae:	61fb      	str	r3, [r7, #28]
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	2b09      	cmp	r3, #9
 80073b4:	d9e9      	bls.n	800738a <prvInitialiseNewTask+0x64>
 80073b6:	e000      	b.n	80073ba <prvInitialiseNewTask+0x94>
            {
                break;
 80073b8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80073ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80073c2:	e003      	b.n	80073cc <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80073c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80073cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ce:	2b04      	cmp	r3, #4
 80073d0:	d901      	bls.n	80073d6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80073d2:	2304      	movs	r3, #4
 80073d4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80073d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073da:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80073dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073e0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80073e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e4:	2200      	movs	r2, #0
 80073e6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80073e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ea:	3304      	adds	r3, #4
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7ff f999 	bl	8006724 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80073f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f4:	3318      	adds	r3, #24
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7ff f994 	bl	8006724 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80073fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007400:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007404:	f1c3 0205 	rsb	r2, r3, #5
 8007408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800740c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007410:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8007412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007414:	3350      	adds	r3, #80	; 0x50
 8007416:	2204      	movs	r2, #4
 8007418:	2100      	movs	r1, #0
 800741a:	4618      	mov	r0, r3
 800741c:	f006 fb46 	bl	800daac <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8007420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007422:	3354      	adds	r3, #84	; 0x54
 8007424:	2201      	movs	r2, #1
 8007426:	2100      	movs	r1, #0
 8007428:	4618      	mov	r0, r3
 800742a:	f006 fb3f 	bl	800daac <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	68f9      	ldr	r1, [r7, #12]
 8007432:	69b8      	ldr	r0, [r7, #24]
 8007434:	f001 f8c6 	bl	80085c4 <pxPortInitialiseStack>
 8007438:	4602      	mov	r2, r0
 800743a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800743e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007440:	2b00      	cmp	r3, #0
 8007442:	d002      	beq.n	800744a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007448:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800744a:	bf00      	nop
 800744c:	3720      	adds	r7, #32
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
	...

08007454 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8007454:	b5b0      	push	{r4, r5, r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af02      	add	r7, sp, #8
 800745a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800745c:	f001 f9e4 	bl	8008828 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8007460:	4b35      	ldr	r3, [pc, #212]	; (8007538 <prvAddNewTaskToReadyList+0xe4>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	3301      	adds	r3, #1
 8007466:	4a34      	ldr	r2, [pc, #208]	; (8007538 <prvAddNewTaskToReadyList+0xe4>)
 8007468:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800746a:	4b34      	ldr	r3, [pc, #208]	; (800753c <prvAddNewTaskToReadyList+0xe8>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d109      	bne.n	8007486 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8007472:	4a32      	ldr	r2, [pc, #200]	; (800753c <prvAddNewTaskToReadyList+0xe8>)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007478:	4b2f      	ldr	r3, [pc, #188]	; (8007538 <prvAddNewTaskToReadyList+0xe4>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d110      	bne.n	80074a2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8007480:	f000 fbe0 	bl	8007c44 <prvInitialiseTaskLists>
 8007484:	e00d      	b.n	80074a2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8007486:	4b2e      	ldr	r3, [pc, #184]	; (8007540 <prvAddNewTaskToReadyList+0xec>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d109      	bne.n	80074a2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800748e:	4b2b      	ldr	r3, [pc, #172]	; (800753c <prvAddNewTaskToReadyList+0xe8>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007498:	429a      	cmp	r2, r3
 800749a:	d802      	bhi.n	80074a2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800749c:	4a27      	ldr	r2, [pc, #156]	; (800753c <prvAddNewTaskToReadyList+0xe8>)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80074a2:	4b28      	ldr	r3, [pc, #160]	; (8007544 <prvAddNewTaskToReadyList+0xf0>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	3301      	adds	r3, #1
 80074a8:	4a26      	ldr	r2, [pc, #152]	; (8007544 <prvAddNewTaskToReadyList+0xf0>)
 80074aa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80074ac:	4b25      	ldr	r3, [pc, #148]	; (8007544 <prvAddNewTaskToReadyList+0xf0>)
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d016      	beq.n	80074e8 <prvAddNewTaskToReadyList+0x94>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4618      	mov	r0, r3
 80074be:	f005 fb41 	bl	800cb44 <SEGGER_SYSVIEW_OnTaskCreate>
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d2:	461d      	mov	r5, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	461c      	mov	r4, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074de:	1ae3      	subs	r3, r4, r3
 80074e0:	9300      	str	r3, [sp, #0]
 80074e2:	462b      	mov	r3, r5
 80074e4:	f003 fd40 	bl	800af68 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f005 fbae 	bl	800cc4c <SEGGER_SYSVIEW_OnTaskStartReady>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f4:	2201      	movs	r2, #1
 80074f6:	409a      	lsls	r2, r3
 80074f8:	4b13      	ldr	r3, [pc, #76]	; (8007548 <prvAddNewTaskToReadyList+0xf4>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	4a12      	ldr	r2, [pc, #72]	; (8007548 <prvAddNewTaskToReadyList+0xf4>)
 8007500:	6013      	str	r3, [r2, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007506:	4613      	mov	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4a0f      	ldr	r2, [pc, #60]	; (800754c <prvAddNewTaskToReadyList+0xf8>)
 8007510:	441a      	add	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	3304      	adds	r3, #4
 8007516:	4619      	mov	r1, r3
 8007518:	4610      	mov	r0, r2
 800751a:	f7ff f910 	bl	800673e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800751e:	f001 f9b3 	bl	8008888 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8007522:	4b07      	ldr	r3, [pc, #28]	; (8007540 <prvAddNewTaskToReadyList+0xec>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d001      	beq.n	800752e <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800752a:	4b04      	ldr	r3, [pc, #16]	; (800753c <prvAddNewTaskToReadyList+0xe8>)
 800752c:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800752e:	bf00      	nop
 8007530:	3708      	adds	r7, #8
 8007532:	46bd      	mov	sp, r7
 8007534:	bdb0      	pop	{r4, r5, r7, pc}
 8007536:	bf00      	nop
 8007538:	20000478 	.word	0x20000478
 800753c:	200003a0 	.word	0x200003a0
 8007540:	20000484 	.word	0x20000484
 8007544:	20000494 	.word	0x20000494
 8007548:	20000480 	.word	0x20000480
 800754c:	200003a4 	.word	0x200003a4

08007550 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8007556:	4b27      	ldr	r3, [pc, #156]	; (80075f4 <vTaskStartScheduler+0xa4>)
 8007558:	9301      	str	r3, [sp, #4]
 800755a:	2300      	movs	r3, #0
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	2300      	movs	r3, #0
 8007560:	2264      	movs	r2, #100	; 0x64
 8007562:	4925      	ldr	r1, [pc, #148]	; (80075f8 <vTaskStartScheduler+0xa8>)
 8007564:	4825      	ldr	r0, [pc, #148]	; (80075fc <vTaskStartScheduler+0xac>)
 8007566:	f7ff fe9d 	bl	80072a4 <xTaskCreate>
 800756a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2b01      	cmp	r3, #1
 8007570:	d102      	bne.n	8007578 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8007572:	f000 fd15 	bl	8007fa0 <xTimerCreateTimerTask>
 8007576:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d124      	bne.n	80075c8 <vTaskStartScheduler+0x78>
        __asm volatile
 800757e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	60bb      	str	r3, [r7, #8]
    }
 8007590:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8007592:	4b1b      	ldr	r3, [pc, #108]	; (8007600 <vTaskStartScheduler+0xb0>)
 8007594:	f04f 32ff 	mov.w	r2, #4294967295
 8007598:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800759a:	4b1a      	ldr	r3, [pc, #104]	; (8007604 <vTaskStartScheduler+0xb4>)
 800759c:	2201      	movs	r2, #1
 800759e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80075a0:	4b19      	ldr	r3, [pc, #100]	; (8007608 <vTaskStartScheduler+0xb8>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80075a6:	4b19      	ldr	r3, [pc, #100]	; (800760c <vTaskStartScheduler+0xbc>)
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	4b12      	ldr	r3, [pc, #72]	; (80075f4 <vTaskStartScheduler+0xa4>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d102      	bne.n	80075b8 <vTaskStartScheduler+0x68>
 80075b2:	f005 faab 	bl	800cb0c <SEGGER_SYSVIEW_OnIdle>
 80075b6:	e004      	b.n	80075c2 <vTaskStartScheduler+0x72>
 80075b8:	4b14      	ldr	r3, [pc, #80]	; (800760c <vTaskStartScheduler+0xbc>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4618      	mov	r0, r3
 80075be:	f005 fb03 	bl	800cbc8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80075c2:	f001 f88f 	bl	80086e4 <xPortStartScheduler>
 80075c6:	e00e      	b.n	80075e6 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ce:	d10a      	bne.n	80075e6 <vTaskStartScheduler+0x96>
        __asm volatile
 80075d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	607b      	str	r3, [r7, #4]
    }
 80075e2:	bf00      	nop
 80075e4:	e7fe      	b.n	80075e4 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80075e6:	4b0a      	ldr	r3, [pc, #40]	; (8007610 <vTaskStartScheduler+0xc0>)
 80075e8:	681b      	ldr	r3, [r3, #0]
}
 80075ea:	bf00      	nop
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	2000049c 	.word	0x2000049c
 80075f8:	0800e408 	.word	0x0800e408
 80075fc:	08007c21 	.word	0x08007c21
 8007600:	20000498 	.word	0x20000498
 8007604:	20000484 	.word	0x20000484
 8007608:	2000047c 	.word	0x2000047c
 800760c:	200003a0 	.word	0x200003a0
 8007610:	2000000c 	.word	0x2000000c

08007614 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007614:	b480      	push	{r7}
 8007616:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8007618:	4b04      	ldr	r3, [pc, #16]	; (800762c <vTaskSuspendAll+0x18>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3301      	adds	r3, #1
 800761e:	4a03      	ldr	r2, [pc, #12]	; (800762c <vTaskSuspendAll+0x18>)
 8007620:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8007622:	bf00      	nop
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr
 800762c:	200004a0 	.word	0x200004a0

08007630 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8007636:	2300      	movs	r3, #0
 8007638:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800763a:	2300      	movs	r3, #0
 800763c:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800763e:	4b3d      	ldr	r3, [pc, #244]	; (8007734 <xTaskResumeAll+0x104>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d10a      	bne.n	800765c <xTaskResumeAll+0x2c>
        __asm volatile
 8007646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764a:	f383 8811 	msr	BASEPRI, r3
 800764e:	f3bf 8f6f 	isb	sy
 8007652:	f3bf 8f4f 	dsb	sy
 8007656:	603b      	str	r3, [r7, #0]
    }
 8007658:	bf00      	nop
 800765a:	e7fe      	b.n	800765a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800765c:	f001 f8e4 	bl	8008828 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8007660:	4b34      	ldr	r3, [pc, #208]	; (8007734 <xTaskResumeAll+0x104>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	3b01      	subs	r3, #1
 8007666:	4a33      	ldr	r2, [pc, #204]	; (8007734 <xTaskResumeAll+0x104>)
 8007668:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800766a:	4b32      	ldr	r3, [pc, #200]	; (8007734 <xTaskResumeAll+0x104>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d159      	bne.n	8007726 <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007672:	4b31      	ldr	r3, [pc, #196]	; (8007738 <xTaskResumeAll+0x108>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d055      	beq.n	8007726 <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800767a:	e032      	b.n	80076e2 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800767c:	4b2f      	ldr	r3, [pc, #188]	; (800773c <xTaskResumeAll+0x10c>)
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	3318      	adds	r3, #24
 8007688:	4618      	mov	r0, r3
 800768a:	f7ff f8b5 	bl	80067f8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	3304      	adds	r3, #4
 8007692:	4618      	mov	r0, r3
 8007694:	f7ff f8b0 	bl	80067f8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	4618      	mov	r0, r3
 800769c:	f005 fad6 	bl	800cc4c <SEGGER_SYSVIEW_OnTaskStartReady>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a4:	2201      	movs	r2, #1
 80076a6:	409a      	lsls	r2, r3
 80076a8:	4b25      	ldr	r3, [pc, #148]	; (8007740 <xTaskResumeAll+0x110>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	4a24      	ldr	r2, [pc, #144]	; (8007740 <xTaskResumeAll+0x110>)
 80076b0:	6013      	str	r3, [r2, #0]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b6:	4613      	mov	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4413      	add	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4a21      	ldr	r2, [pc, #132]	; (8007744 <xTaskResumeAll+0x114>)
 80076c0:	441a      	add	r2, r3
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	3304      	adds	r3, #4
 80076c6:	4619      	mov	r1, r3
 80076c8:	4610      	mov	r0, r2
 80076ca:	f7ff f838 	bl	800673e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d2:	4b1d      	ldr	r3, [pc, #116]	; (8007748 <xTaskResumeAll+0x118>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d8:	429a      	cmp	r2, r3
 80076da:	d302      	bcc.n	80076e2 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80076dc:	4b1b      	ldr	r3, [pc, #108]	; (800774c <xTaskResumeAll+0x11c>)
 80076de:	2201      	movs	r2, #1
 80076e0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076e2:	4b16      	ldr	r3, [pc, #88]	; (800773c <xTaskResumeAll+0x10c>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1c8      	bne.n	800767c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d001      	beq.n	80076f4 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80076f0:	f000 fb26 	bl	8007d40 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80076f4:	4b16      	ldr	r3, [pc, #88]	; (8007750 <xTaskResumeAll+0x120>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d010      	beq.n	8007722 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8007700:	f000 f84a 	bl	8007798 <xTaskIncrementTick>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d002      	beq.n	8007710 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800770a:	4b10      	ldr	r3, [pc, #64]	; (800774c <xTaskResumeAll+0x11c>)
 800770c:	2201      	movs	r2, #1
 800770e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	3b01      	subs	r3, #1
 8007714:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1f1      	bne.n	8007700 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800771c:	4b0c      	ldr	r3, [pc, #48]	; (8007750 <xTaskResumeAll+0x120>)
 800771e:	2200      	movs	r2, #0
 8007720:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8007722:	4b0a      	ldr	r3, [pc, #40]	; (800774c <xTaskResumeAll+0x11c>)
 8007724:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8007726:	f001 f8af 	bl	8008888 <vPortExitCritical>

    return xAlreadyYielded;
 800772a:	687b      	ldr	r3, [r7, #4]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	200004a0 	.word	0x200004a0
 8007738:	20000478 	.word	0x20000478
 800773c:	20000438 	.word	0x20000438
 8007740:	20000480 	.word	0x20000480
 8007744:	200003a4 	.word	0x200003a4
 8007748:	200003a0 	.word	0x200003a0
 800774c:	2000048c 	.word	0x2000048c
 8007750:	20000488 	.word	0x20000488

08007754 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800775a:	4b05      	ldr	r3, [pc, #20]	; (8007770 <xTaskGetTickCount+0x1c>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8007760:	687b      	ldr	r3, [r7, #4]
}
 8007762:	4618      	mov	r0, r3
 8007764:	370c      	adds	r7, #12
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	2000047c 	.word	0x2000047c

08007774 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800777a:	f001 f93f 	bl	80089fc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800777e:	2300      	movs	r3, #0
 8007780:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8007782:	4b04      	ldr	r3, [pc, #16]	; (8007794 <xTaskGetTickCountFromISR+0x20>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8007788:	683b      	ldr	r3, [r7, #0]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3708      	adds	r7, #8
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	2000047c 	.word	0x2000047c

08007798 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800779e:	2300      	movs	r3, #0
 80077a0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077a2:	4b41      	ldr	r3, [pc, #260]	; (80078a8 <xTaskIncrementTick+0x110>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d173      	bne.n	8007892 <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80077aa:	4b40      	ldr	r3, [pc, #256]	; (80078ac <xTaskIncrementTick+0x114>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	3301      	adds	r3, #1
 80077b0:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80077b2:	4a3e      	ldr	r2, [pc, #248]	; (80078ac <xTaskIncrementTick+0x114>)
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d120      	bne.n	8007800 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80077be:	4b3c      	ldr	r3, [pc, #240]	; (80078b0 <xTaskIncrementTick+0x118>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00a      	beq.n	80077de <xTaskIncrementTick+0x46>
        __asm volatile
 80077c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077cc:	f383 8811 	msr	BASEPRI, r3
 80077d0:	f3bf 8f6f 	isb	sy
 80077d4:	f3bf 8f4f 	dsb	sy
 80077d8:	603b      	str	r3, [r7, #0]
    }
 80077da:	bf00      	nop
 80077dc:	e7fe      	b.n	80077dc <xTaskIncrementTick+0x44>
 80077de:	4b34      	ldr	r3, [pc, #208]	; (80078b0 <xTaskIncrementTick+0x118>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	4b33      	ldr	r3, [pc, #204]	; (80078b4 <xTaskIncrementTick+0x11c>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a31      	ldr	r2, [pc, #196]	; (80078b0 <xTaskIncrementTick+0x118>)
 80077ea:	6013      	str	r3, [r2, #0]
 80077ec:	4a31      	ldr	r2, [pc, #196]	; (80078b4 <xTaskIncrementTick+0x11c>)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6013      	str	r3, [r2, #0]
 80077f2:	4b31      	ldr	r3, [pc, #196]	; (80078b8 <xTaskIncrementTick+0x120>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3301      	adds	r3, #1
 80077f8:	4a2f      	ldr	r2, [pc, #188]	; (80078b8 <xTaskIncrementTick+0x120>)
 80077fa:	6013      	str	r3, [r2, #0]
 80077fc:	f000 faa0 	bl	8007d40 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8007800:	4b2e      	ldr	r3, [pc, #184]	; (80078bc <xTaskIncrementTick+0x124>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	429a      	cmp	r2, r3
 8007808:	d348      	bcc.n	800789c <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800780a:	4b29      	ldr	r3, [pc, #164]	; (80078b0 <xTaskIncrementTick+0x118>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d104      	bne.n	800781e <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007814:	4b29      	ldr	r3, [pc, #164]	; (80078bc <xTaskIncrementTick+0x124>)
 8007816:	f04f 32ff 	mov.w	r2, #4294967295
 800781a:	601a      	str	r2, [r3, #0]
                    break;
 800781c:	e03e      	b.n	800789c <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800781e:	4b24      	ldr	r3, [pc, #144]	; (80078b0 <xTaskIncrementTick+0x118>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	429a      	cmp	r2, r3
 8007834:	d203      	bcs.n	800783e <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8007836:	4a21      	ldr	r2, [pc, #132]	; (80078bc <xTaskIncrementTick+0x124>)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800783c:	e02e      	b.n	800789c <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	3304      	adds	r3, #4
 8007842:	4618      	mov	r0, r3
 8007844:	f7fe ffd8 	bl	80067f8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800784c:	2b00      	cmp	r3, #0
 800784e:	d004      	beq.n	800785a <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	3318      	adds	r3, #24
 8007854:	4618      	mov	r0, r3
 8007856:	f7fe ffcf 	bl	80067f8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	4618      	mov	r0, r3
 800785e:	f005 f9f5 	bl	800cc4c <SEGGER_SYSVIEW_OnTaskStartReady>
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007866:	2201      	movs	r2, #1
 8007868:	409a      	lsls	r2, r3
 800786a:	4b15      	ldr	r3, [pc, #84]	; (80078c0 <xTaskIncrementTick+0x128>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4313      	orrs	r3, r2
 8007870:	4a13      	ldr	r2, [pc, #76]	; (80078c0 <xTaskIncrementTick+0x128>)
 8007872:	6013      	str	r3, [r2, #0]
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007878:	4613      	mov	r3, r2
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	4413      	add	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4a10      	ldr	r2, [pc, #64]	; (80078c4 <xTaskIncrementTick+0x12c>)
 8007882:	441a      	add	r2, r3
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	3304      	adds	r3, #4
 8007888:	4619      	mov	r1, r3
 800788a:	4610      	mov	r0, r2
 800788c:	f7fe ff57 	bl	800673e <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007890:	e7bb      	b.n	800780a <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8007892:	4b0d      	ldr	r3, [pc, #52]	; (80078c8 <xTaskIncrementTick+0x130>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	3301      	adds	r3, #1
 8007898:	4a0b      	ldr	r2, [pc, #44]	; (80078c8 <xTaskIncrementTick+0x130>)
 800789a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800789c:	697b      	ldr	r3, [r7, #20]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3718      	adds	r7, #24
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	200004a0 	.word	0x200004a0
 80078ac:	2000047c 	.word	0x2000047c
 80078b0:	20000430 	.word	0x20000430
 80078b4:	20000434 	.word	0x20000434
 80078b8:	20000490 	.word	0x20000490
 80078bc:	20000498 	.word	0x20000498
 80078c0:	20000480 	.word	0x20000480
 80078c4:	200003a4 	.word	0x200003a4
 80078c8:	20000488 	.word	0x20000488

080078cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b086      	sub	sp, #24
 80078d0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80078d2:	4b2d      	ldr	r3, [pc, #180]	; (8007988 <vTaskSwitchContext+0xbc>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d003      	beq.n	80078e2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80078da:	4b2c      	ldr	r3, [pc, #176]	; (800798c <vTaskSwitchContext+0xc0>)
 80078dc:	2201      	movs	r2, #1
 80078de:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80078e0:	e04d      	b.n	800797e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80078e2:	4b2a      	ldr	r3, [pc, #168]	; (800798c <vTaskSwitchContext+0xc0>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078e8:	4b29      	ldr	r3, [pc, #164]	; (8007990 <vTaskSwitchContext+0xc4>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	fab3 f383 	clz	r3, r3
 80078f4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80078f6:	7afb      	ldrb	r3, [r7, #11]
 80078f8:	f1c3 031f 	rsb	r3, r3, #31
 80078fc:	617b      	str	r3, [r7, #20]
 80078fe:	4925      	ldr	r1, [pc, #148]	; (8007994 <vTaskSwitchContext+0xc8>)
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	4613      	mov	r3, r2
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	4413      	add	r3, r2
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	440b      	add	r3, r1
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d10a      	bne.n	8007928 <vTaskSwitchContext+0x5c>
        __asm volatile
 8007912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007916:	f383 8811 	msr	BASEPRI, r3
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	607b      	str	r3, [r7, #4]
    }
 8007924:	bf00      	nop
 8007926:	e7fe      	b.n	8007926 <vTaskSwitchContext+0x5a>
 8007928:	697a      	ldr	r2, [r7, #20]
 800792a:	4613      	mov	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4413      	add	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4a18      	ldr	r2, [pc, #96]	; (8007994 <vTaskSwitchContext+0xc8>)
 8007934:	4413      	add	r3, r2
 8007936:	613b      	str	r3, [r7, #16]
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	685a      	ldr	r2, [r3, #4]
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	605a      	str	r2, [r3, #4]
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	685a      	ldr	r2, [r3, #4]
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	3308      	adds	r3, #8
 800794a:	429a      	cmp	r2, r3
 800794c:	d104      	bne.n	8007958 <vTaskSwitchContext+0x8c>
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	685a      	ldr	r2, [r3, #4]
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	605a      	str	r2, [r3, #4]
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	4a0e      	ldr	r2, [pc, #56]	; (8007998 <vTaskSwitchContext+0xcc>)
 8007960:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8007962:	4b0d      	ldr	r3, [pc, #52]	; (8007998 <vTaskSwitchContext+0xcc>)
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	4b0d      	ldr	r3, [pc, #52]	; (800799c <vTaskSwitchContext+0xd0>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	429a      	cmp	r2, r3
 800796c:	d102      	bne.n	8007974 <vTaskSwitchContext+0xa8>
 800796e:	f005 f8cd 	bl	800cb0c <SEGGER_SYSVIEW_OnIdle>
}
 8007972:	e004      	b.n	800797e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8007974:	4b08      	ldr	r3, [pc, #32]	; (8007998 <vTaskSwitchContext+0xcc>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4618      	mov	r0, r3
 800797a:	f005 f925 	bl	800cbc8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800797e:	bf00      	nop
 8007980:	3718      	adds	r7, #24
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	200004a0 	.word	0x200004a0
 800798c:	2000048c 	.word	0x2000048c
 8007990:	20000480 	.word	0x20000480
 8007994:	200003a4 	.word	0x200003a4
 8007998:	200003a0 	.word	0x200003a0
 800799c:	2000049c 	.word	0x2000049c

080079a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d10a      	bne.n	80079c6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80079b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b4:	f383 8811 	msr	BASEPRI, r3
 80079b8:	f3bf 8f6f 	isb	sy
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	60fb      	str	r3, [r7, #12]
    }
 80079c2:	bf00      	nop
 80079c4:	e7fe      	b.n	80079c4 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079c6:	4b07      	ldr	r3, [pc, #28]	; (80079e4 <vTaskPlaceOnEventList+0x44>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	3318      	adds	r3, #24
 80079cc:	4619      	mov	r1, r3
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7fe fed9 	bl	8006786 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80079d4:	2101      	movs	r1, #1
 80079d6:	6838      	ldr	r0, [r7, #0]
 80079d8:	f000 fa70 	bl	8007ebc <prvAddCurrentTaskToDelayedList>
}
 80079dc:	bf00      	nop
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	200003a0 	.word	0x200003a0

080079e8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10a      	bne.n	8007a10 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80079fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fe:	f383 8811 	msr	BASEPRI, r3
 8007a02:	f3bf 8f6f 	isb	sy
 8007a06:	f3bf 8f4f 	dsb	sy
 8007a0a:	617b      	str	r3, [r7, #20]
    }
 8007a0c:	bf00      	nop
 8007a0e:	e7fe      	b.n	8007a0e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a10:	4b0b      	ldr	r3, [pc, #44]	; (8007a40 <vTaskPlaceOnEventListRestricted+0x58>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	3318      	adds	r3, #24
 8007a16:	4619      	mov	r1, r3
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f7fe fe90 	bl	800673e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d002      	beq.n	8007a2a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8007a24:	f04f 33ff 	mov.w	r3, #4294967295
 8007a28:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8007a2a:	2024      	movs	r0, #36	; 0x24
 8007a2c:	f004 fb70 	bl	800c110 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007a30:	6879      	ldr	r1, [r7, #4]
 8007a32:	68b8      	ldr	r0, [r7, #8]
 8007a34:	f000 fa42 	bl	8007ebc <prvAddCurrentTaskToDelayedList>
    }
 8007a38:	bf00      	nop
 8007a3a:	3718      	adds	r7, #24
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	200003a0 	.word	0x200003a0

08007a44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10a      	bne.n	8007a70 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8007a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5e:	f383 8811 	msr	BASEPRI, r3
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	60fb      	str	r3, [r7, #12]
    }
 8007a6c:	bf00      	nop
 8007a6e:	e7fe      	b.n	8007a6e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	3318      	adds	r3, #24
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fe febf 	bl	80067f8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a7a:	4b1f      	ldr	r3, [pc, #124]	; (8007af8 <xTaskRemoveFromEventList+0xb4>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d120      	bne.n	8007ac4 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	3304      	adds	r3, #4
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7fe feb6 	bl	80067f8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f005 f8dc 	bl	800cc4c <SEGGER_SYSVIEW_OnTaskStartReady>
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a98:	2201      	movs	r2, #1
 8007a9a:	409a      	lsls	r2, r3
 8007a9c:	4b17      	ldr	r3, [pc, #92]	; (8007afc <xTaskRemoveFromEventList+0xb8>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	4a16      	ldr	r2, [pc, #88]	; (8007afc <xTaskRemoveFromEventList+0xb8>)
 8007aa4:	6013      	str	r3, [r2, #0]
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aaa:	4613      	mov	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4413      	add	r3, r2
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	4a13      	ldr	r2, [pc, #76]	; (8007b00 <xTaskRemoveFromEventList+0xbc>)
 8007ab4:	441a      	add	r2, r3
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	3304      	adds	r3, #4
 8007aba:	4619      	mov	r1, r3
 8007abc:	4610      	mov	r0, r2
 8007abe:	f7fe fe3e 	bl	800673e <vListInsertEnd>
 8007ac2:	e005      	b.n	8007ad0 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	3318      	adds	r3, #24
 8007ac8:	4619      	mov	r1, r3
 8007aca:	480e      	ldr	r0, [pc, #56]	; (8007b04 <xTaskRemoveFromEventList+0xc0>)
 8007acc:	f7fe fe37 	bl	800673e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad4:	4b0c      	ldr	r3, [pc, #48]	; (8007b08 <xTaskRemoveFromEventList+0xc4>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d905      	bls.n	8007aea <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8007ae2:	4b0a      	ldr	r3, [pc, #40]	; (8007b0c <xTaskRemoveFromEventList+0xc8>)
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	601a      	str	r2, [r3, #0]
 8007ae8:	e001      	b.n	8007aee <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8007aea:	2300      	movs	r3, #0
 8007aec:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8007aee:	697b      	ldr	r3, [r7, #20]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3718      	adds	r7, #24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	200004a0 	.word	0x200004a0
 8007afc:	20000480 	.word	0x20000480
 8007b00:	200003a4 	.word	0x200003a4
 8007b04:	20000438 	.word	0x20000438
 8007b08:	200003a0 	.word	0x200003a0
 8007b0c:	2000048c 	.word	0x2000048c

08007b10 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007b18:	4b06      	ldr	r3, [pc, #24]	; (8007b34 <vTaskInternalSetTimeOutState+0x24>)
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8007b20:	4b05      	ldr	r3, [pc, #20]	; (8007b38 <vTaskInternalSetTimeOutState+0x28>)
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	605a      	str	r2, [r3, #4]
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr
 8007b34:	20000490 	.word	0x20000490
 8007b38:	2000047c 	.word	0x2000047c

08007b3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b088      	sub	sp, #32
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10a      	bne.n	8007b62 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8007b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b50:	f383 8811 	msr	BASEPRI, r3
 8007b54:	f3bf 8f6f 	isb	sy
 8007b58:	f3bf 8f4f 	dsb	sy
 8007b5c:	613b      	str	r3, [r7, #16]
    }
 8007b5e:	bf00      	nop
 8007b60:	e7fe      	b.n	8007b60 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d10a      	bne.n	8007b7e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8007b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6c:	f383 8811 	msr	BASEPRI, r3
 8007b70:	f3bf 8f6f 	isb	sy
 8007b74:	f3bf 8f4f 	dsb	sy
 8007b78:	60fb      	str	r3, [r7, #12]
    }
 8007b7a:	bf00      	nop
 8007b7c:	e7fe      	b.n	8007b7c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8007b7e:	f000 fe53 	bl	8008828 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8007b82:	4b1f      	ldr	r3, [pc, #124]	; (8007c00 <xTaskCheckForTimeOut+0xc4>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	69ba      	ldr	r2, [r7, #24]
 8007b8e:	1ad3      	subs	r3, r2, r3
 8007b90:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b9a:	d102      	bne.n	8007ba2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	61fb      	str	r3, [r7, #28]
 8007ba0:	e026      	b.n	8007bf0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	4b17      	ldr	r3, [pc, #92]	; (8007c04 <xTaskCheckForTimeOut+0xc8>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d00a      	beq.n	8007bc4 <xTaskCheckForTimeOut+0x88>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	69ba      	ldr	r2, [r7, #24]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d305      	bcc.n	8007bc4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	601a      	str	r2, [r3, #0]
 8007bc2:	e015      	b.n	8007bf0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d20b      	bcs.n	8007be6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	1ad2      	subs	r2, r2, r3
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f7ff ff98 	bl	8007b10 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8007be0:	2300      	movs	r3, #0
 8007be2:	61fb      	str	r3, [r7, #28]
 8007be4:	e004      	b.n	8007bf0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	2200      	movs	r2, #0
 8007bea:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8007bec:	2301      	movs	r3, #1
 8007bee:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8007bf0:	f000 fe4a 	bl	8008888 <vPortExitCritical>

    return xReturn;
 8007bf4:	69fb      	ldr	r3, [r7, #28]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3720      	adds	r7, #32
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	2000047c 	.word	0x2000047c
 8007c04:	20000490 	.word	0x20000490

08007c08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007c08:	b480      	push	{r7}
 8007c0a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8007c0c:	4b03      	ldr	r3, [pc, #12]	; (8007c1c <vTaskMissedYield+0x14>)
 8007c0e:	2201      	movs	r2, #1
 8007c10:	601a      	str	r2, [r3, #0]
}
 8007c12:	bf00      	nop
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr
 8007c1c:	2000048c 	.word	0x2000048c

08007c20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8007c28:	f000 f84c 	bl	8007cc4 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8007c2c:	4b04      	ldr	r3, [pc, #16]	; (8007c40 <prvIdleTask+0x20>)
 8007c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c32:	601a      	str	r2, [r3, #0]
 8007c34:	f3bf 8f4f 	dsb	sy
 8007c38:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8007c3c:	e7f4      	b.n	8007c28 <prvIdleTask+0x8>
 8007c3e:	bf00      	nop
 8007c40:	e000ed04 	.word	0xe000ed04

08007c44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	607b      	str	r3, [r7, #4]
 8007c4e:	e00c      	b.n	8007c6a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	4613      	mov	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	4413      	add	r3, r2
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	4a12      	ldr	r2, [pc, #72]	; (8007ca4 <prvInitialiseTaskLists+0x60>)
 8007c5c:	4413      	add	r3, r2
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7fe fd40 	bl	80066e4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	3301      	adds	r3, #1
 8007c68:	607b      	str	r3, [r7, #4]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2b04      	cmp	r3, #4
 8007c6e:	d9ef      	bls.n	8007c50 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8007c70:	480d      	ldr	r0, [pc, #52]	; (8007ca8 <prvInitialiseTaskLists+0x64>)
 8007c72:	f7fe fd37 	bl	80066e4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8007c76:	480d      	ldr	r0, [pc, #52]	; (8007cac <prvInitialiseTaskLists+0x68>)
 8007c78:	f7fe fd34 	bl	80066e4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8007c7c:	480c      	ldr	r0, [pc, #48]	; (8007cb0 <prvInitialiseTaskLists+0x6c>)
 8007c7e:	f7fe fd31 	bl	80066e4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8007c82:	480c      	ldr	r0, [pc, #48]	; (8007cb4 <prvInitialiseTaskLists+0x70>)
 8007c84:	f7fe fd2e 	bl	80066e4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8007c88:	480b      	ldr	r0, [pc, #44]	; (8007cb8 <prvInitialiseTaskLists+0x74>)
 8007c8a:	f7fe fd2b 	bl	80066e4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8007c8e:	4b0b      	ldr	r3, [pc, #44]	; (8007cbc <prvInitialiseTaskLists+0x78>)
 8007c90:	4a05      	ldr	r2, [pc, #20]	; (8007ca8 <prvInitialiseTaskLists+0x64>)
 8007c92:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c94:	4b0a      	ldr	r3, [pc, #40]	; (8007cc0 <prvInitialiseTaskLists+0x7c>)
 8007c96:	4a05      	ldr	r2, [pc, #20]	; (8007cac <prvInitialiseTaskLists+0x68>)
 8007c98:	601a      	str	r2, [r3, #0]
}
 8007c9a:	bf00      	nop
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	200003a4 	.word	0x200003a4
 8007ca8:	20000408 	.word	0x20000408
 8007cac:	2000041c 	.word	0x2000041c
 8007cb0:	20000438 	.word	0x20000438
 8007cb4:	2000044c 	.word	0x2000044c
 8007cb8:	20000464 	.word	0x20000464
 8007cbc:	20000430 	.word	0x20000430
 8007cc0:	20000434 	.word	0x20000434

08007cc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007cca:	e019      	b.n	8007d00 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8007ccc:	f000 fdac 	bl	8008828 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cd0:	4b10      	ldr	r3, [pc, #64]	; (8007d14 <prvCheckTasksWaitingTermination+0x50>)
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	3304      	adds	r3, #4
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7fe fd8b 	bl	80067f8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8007ce2:	4b0d      	ldr	r3, [pc, #52]	; (8007d18 <prvCheckTasksWaitingTermination+0x54>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	4a0b      	ldr	r2, [pc, #44]	; (8007d18 <prvCheckTasksWaitingTermination+0x54>)
 8007cea:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8007cec:	4b0b      	ldr	r3, [pc, #44]	; (8007d1c <prvCheckTasksWaitingTermination+0x58>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	4a0a      	ldr	r2, [pc, #40]	; (8007d1c <prvCheckTasksWaitingTermination+0x58>)
 8007cf4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8007cf6:	f000 fdc7 	bl	8008888 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f810 	bl	8007d20 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d00:	4b06      	ldr	r3, [pc, #24]	; (8007d1c <prvCheckTasksWaitingTermination+0x58>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d1e1      	bne.n	8007ccc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8007d08:	bf00      	nop
 8007d0a:	bf00      	nop
 8007d0c:	3708      	adds	r7, #8
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	2000044c 	.word	0x2000044c
 8007d18:	20000478 	.word	0x20000478
 8007d1c:	20000460 	.word	0x20000460

08007d20 <prvDeleteTCB>:


#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f000 ffcb 	bl	8008cc8 <vPortFree>
                vPortFree( pxTCB );
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 ffc8 	bl	8008cc8 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8007d38:	bf00      	nop
 8007d3a:	3708      	adds	r7, #8
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d40:	b480      	push	{r7}
 8007d42:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d44:	4b0a      	ldr	r3, [pc, #40]	; (8007d70 <prvResetNextTaskUnblockTime+0x30>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d104      	bne.n	8007d58 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8007d4e:	4b09      	ldr	r3, [pc, #36]	; (8007d74 <prvResetNextTaskUnblockTime+0x34>)
 8007d50:	f04f 32ff 	mov.w	r2, #4294967295
 8007d54:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8007d56:	e005      	b.n	8007d64 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007d58:	4b05      	ldr	r3, [pc, #20]	; (8007d70 <prvResetNextTaskUnblockTime+0x30>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a04      	ldr	r2, [pc, #16]	; (8007d74 <prvResetNextTaskUnblockTime+0x34>)
 8007d62:	6013      	str	r3, [r2, #0]
}
 8007d64:	bf00      	nop
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	20000430 	.word	0x20000430
 8007d74:	20000498 	.word	0x20000498

08007d78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8007d7e:	4b0b      	ldr	r3, [pc, #44]	; (8007dac <xTaskGetSchedulerState+0x34>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d102      	bne.n	8007d8c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8007d86:	2301      	movs	r3, #1
 8007d88:	607b      	str	r3, [r7, #4]
 8007d8a:	e008      	b.n	8007d9e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d8c:	4b08      	ldr	r3, [pc, #32]	; (8007db0 <xTaskGetSchedulerState+0x38>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d102      	bne.n	8007d9a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8007d94:	2302      	movs	r3, #2
 8007d96:	607b      	str	r3, [r7, #4]
 8007d98:	e001      	b.n	8007d9e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8007d9e:	687b      	ldr	r3, [r7, #4]
    }
 8007da0:	4618      	mov	r0, r3
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr
 8007dac:	20000484 	.word	0x20000484
 8007db0:	200004a0 	.word	0x200004a0

08007db4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d06c      	beq.n	8007ea4 <xTaskPriorityDisinherit+0xf0>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8007dca:	4b39      	ldr	r3, [pc, #228]	; (8007eb0 <xTaskPriorityDisinherit+0xfc>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d00a      	beq.n	8007dea <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8007dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd8:	f383 8811 	msr	BASEPRI, r3
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	60fb      	str	r3, [r7, #12]
    }
 8007de6:	bf00      	nop
 8007de8:	e7fe      	b.n	8007de8 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d10a      	bne.n	8007e08 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8007df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df6:	f383 8811 	msr	BASEPRI, r3
 8007dfa:	f3bf 8f6f 	isb	sy
 8007dfe:	f3bf 8f4f 	dsb	sy
 8007e02:	60bb      	str	r3, [r7, #8]
    }
 8007e04:	bf00      	nop
 8007e06:	e7fe      	b.n	8007e06 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e0c:	1e5a      	subs	r2, r3, #1
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d042      	beq.n	8007ea4 <xTaskPriorityDisinherit+0xf0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d13e      	bne.n	8007ea4 <xTaskPriorityDisinherit+0xf0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	3304      	adds	r3, #4
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7fe fce4 	bl	80067f8 <uxListRemove>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d10a      	bne.n	8007e4c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e40:	43da      	mvns	r2, r3
 8007e42:	4b1c      	ldr	r3, [pc, #112]	; (8007eb4 <xTaskPriorityDisinherit+0x100>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4013      	ands	r3, r2
 8007e48:	4a1a      	ldr	r2, [pc, #104]	; (8007eb4 <xTaskPriorityDisinherit+0x100>)
 8007e4a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4619      	mov	r1, r3
 8007e50:	204a      	movs	r0, #74	; 0x4a
 8007e52:	f004 f97b 	bl	800c14c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e62:	f1c3 0205 	rsb	r2, r3, #5
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f004 feed 	bl	800cc4c <SEGGER_SYSVIEW_OnTaskStartReady>
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e76:	2201      	movs	r2, #1
 8007e78:	409a      	lsls	r2, r3
 8007e7a:	4b0e      	ldr	r3, [pc, #56]	; (8007eb4 <xTaskPriorityDisinherit+0x100>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	4a0c      	ldr	r2, [pc, #48]	; (8007eb4 <xTaskPriorityDisinherit+0x100>)
 8007e82:	6013      	str	r3, [r2, #0]
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e88:	4613      	mov	r3, r2
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	4413      	add	r3, r2
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	4a09      	ldr	r2, [pc, #36]	; (8007eb8 <xTaskPriorityDisinherit+0x104>)
 8007e92:	441a      	add	r2, r3
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	3304      	adds	r3, #4
 8007e98:	4619      	mov	r1, r3
 8007e9a:	4610      	mov	r0, r2
 8007e9c:	f7fe fc4f 	bl	800673e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007ea4:	697b      	ldr	r3, [r7, #20]
    }
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3718      	adds	r7, #24
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	200003a0 	.word	0x200003a0
 8007eb4:	20000480 	.word	0x20000480
 8007eb8:	200003a4 	.word	0x200003a4

08007ebc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8007ec6:	4b2f      	ldr	r3, [pc, #188]	; (8007f84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ecc:	4b2e      	ldr	r3, [pc, #184]	; (8007f88 <prvAddCurrentTaskToDelayedList+0xcc>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	3304      	adds	r3, #4
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7fe fc90 	bl	80067f8 <uxListRemove>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d10b      	bne.n	8007ef6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007ede:	4b2a      	ldr	r3, [pc, #168]	; (8007f88 <prvAddCurrentTaskToDelayedList+0xcc>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eea:	43da      	mvns	r2, r3
 8007eec:	4b27      	ldr	r3, [pc, #156]	; (8007f8c <prvAddCurrentTaskToDelayedList+0xd0>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	4a26      	ldr	r2, [pc, #152]	; (8007f8c <prvAddCurrentTaskToDelayedList+0xd0>)
 8007ef4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efc:	d10a      	bne.n	8007f14 <prvAddCurrentTaskToDelayedList+0x58>
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d007      	beq.n	8007f14 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f04:	4b20      	ldr	r3, [pc, #128]	; (8007f88 <prvAddCurrentTaskToDelayedList+0xcc>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	3304      	adds	r3, #4
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	4820      	ldr	r0, [pc, #128]	; (8007f90 <prvAddCurrentTaskToDelayedList+0xd4>)
 8007f0e:	f7fe fc16 	bl	800673e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8007f12:	e032      	b.n	8007f7a <prvAddCurrentTaskToDelayedList+0xbe>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4413      	add	r3, r2
 8007f1a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f1c:	4b1a      	ldr	r3, [pc, #104]	; (8007f88 <prvAddCurrentTaskToDelayedList+0xcc>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68ba      	ldr	r2, [r7, #8]
 8007f22:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d20f      	bcs.n	8007f4c <prvAddCurrentTaskToDelayedList+0x90>
                    traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8007f2c:	4b16      	ldr	r3, [pc, #88]	; (8007f88 <prvAddCurrentTaskToDelayedList+0xcc>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2104      	movs	r1, #4
 8007f32:	4618      	mov	r0, r3
 8007f34:	f004 fecc 	bl	800ccd0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f38:	4b16      	ldr	r3, [pc, #88]	; (8007f94 <prvAddCurrentTaskToDelayedList+0xd8>)
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	4b12      	ldr	r3, [pc, #72]	; (8007f88 <prvAddCurrentTaskToDelayedList+0xcc>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	3304      	adds	r3, #4
 8007f42:	4619      	mov	r1, r3
 8007f44:	4610      	mov	r0, r2
 8007f46:	f7fe fc1e 	bl	8006786 <vListInsert>
}
 8007f4a:	e016      	b.n	8007f7a <prvAddCurrentTaskToDelayedList+0xbe>
                    traceMOVED_TASK_TO_DELAYED_LIST();
 8007f4c:	4b0e      	ldr	r3, [pc, #56]	; (8007f88 <prvAddCurrentTaskToDelayedList+0xcc>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2104      	movs	r1, #4
 8007f52:	4618      	mov	r0, r3
 8007f54:	f004 febc 	bl	800ccd0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f58:	4b0f      	ldr	r3, [pc, #60]	; (8007f98 <prvAddCurrentTaskToDelayedList+0xdc>)
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	4b0a      	ldr	r3, [pc, #40]	; (8007f88 <prvAddCurrentTaskToDelayedList+0xcc>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	3304      	adds	r3, #4
 8007f62:	4619      	mov	r1, r3
 8007f64:	4610      	mov	r0, r2
 8007f66:	f7fe fc0e 	bl	8006786 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8007f6a:	4b0c      	ldr	r3, [pc, #48]	; (8007f9c <prvAddCurrentTaskToDelayedList+0xe0>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d202      	bcs.n	8007f7a <prvAddCurrentTaskToDelayedList+0xbe>
                        xNextTaskUnblockTime = xTimeToWake;
 8007f74:	4a09      	ldr	r2, [pc, #36]	; (8007f9c <prvAddCurrentTaskToDelayedList+0xe0>)
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	6013      	str	r3, [r2, #0]
}
 8007f7a:	bf00      	nop
 8007f7c:	3710      	adds	r7, #16
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	2000047c 	.word	0x2000047c
 8007f88:	200003a0 	.word	0x200003a0
 8007f8c:	20000480 	.word	0x20000480
 8007f90:	20000464 	.word	0x20000464
 8007f94:	20000434 	.word	0x20000434
 8007f98:	20000430 	.word	0x20000430
 8007f9c:	20000498 	.word	0x20000498

08007fa0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8007faa:	f000 fad5 	bl	8008558 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8007fae:	4b11      	ldr	r3, [pc, #68]	; (8007ff4 <xTimerCreateTimerTask+0x54>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00a      	beq.n	8007fcc <xTimerCreateTimerTask+0x2c>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8007fb6:	4b10      	ldr	r3, [pc, #64]	; (8007ff8 <xTimerCreateTimerTask+0x58>)
 8007fb8:	9301      	str	r3, [sp, #4]
 8007fba:	2302      	movs	r3, #2
 8007fbc:	9300      	str	r3, [sp, #0]
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	22c8      	movs	r2, #200	; 0xc8
 8007fc2:	490e      	ldr	r1, [pc, #56]	; (8007ffc <xTimerCreateTimerTask+0x5c>)
 8007fc4:	480e      	ldr	r0, [pc, #56]	; (8008000 <xTimerCreateTimerTask+0x60>)
 8007fc6:	f7ff f96d 	bl	80072a4 <xTaskCreate>
 8007fca:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10a      	bne.n	8007fe8 <xTimerCreateTimerTask+0x48>
        __asm volatile
 8007fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd6:	f383 8811 	msr	BASEPRI, r3
 8007fda:	f3bf 8f6f 	isb	sy
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	603b      	str	r3, [r7, #0]
    }
 8007fe4:	bf00      	nop
 8007fe6:	e7fe      	b.n	8007fe6 <xTimerCreateTimerTask+0x46>
        return xReturn;
 8007fe8:	687b      	ldr	r3, [r7, #4]
    }
 8007fea:	4618      	mov	r0, r3
 8007fec:	3708      	adds	r7, #8
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	200004d4 	.word	0x200004d4
 8007ff8:	200004d8 	.word	0x200004d8
 8007ffc:	0800e410 	.word	0x0800e410
 8008000:	08008139 	.word	0x08008139

08008004 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8008004:	b580      	push	{r7, lr}
 8008006:	b08a      	sub	sp, #40	; 0x28
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]
 8008010:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8008012:	2300      	movs	r3, #0
 8008014:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d10a      	bne.n	8008032 <xTimerGenericCommand+0x2e>
        __asm volatile
 800801c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008020:	f383 8811 	msr	BASEPRI, r3
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	623b      	str	r3, [r7, #32]
    }
 800802e:	bf00      	nop
 8008030:	e7fe      	b.n	8008030 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8008032:	4b1a      	ldr	r3, [pc, #104]	; (800809c <xTimerGenericCommand+0x98>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d02a      	beq.n	8008090 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	2b05      	cmp	r3, #5
 800804a:	dc18      	bgt.n	800807e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800804c:	f7ff fe94 	bl	8007d78 <xTaskGetSchedulerState>
 8008050:	4603      	mov	r3, r0
 8008052:	2b02      	cmp	r3, #2
 8008054:	d109      	bne.n	800806a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008056:	4b11      	ldr	r3, [pc, #68]	; (800809c <xTimerGenericCommand+0x98>)
 8008058:	6818      	ldr	r0, [r3, #0]
 800805a:	f107 0114 	add.w	r1, r7, #20
 800805e:	2300      	movs	r3, #0
 8008060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008062:	f7fe fcd7 	bl	8006a14 <xQueueGenericSend>
 8008066:	6278      	str	r0, [r7, #36]	; 0x24
 8008068:	e012      	b.n	8008090 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800806a:	4b0c      	ldr	r3, [pc, #48]	; (800809c <xTimerGenericCommand+0x98>)
 800806c:	6818      	ldr	r0, [r3, #0]
 800806e:	f107 0114 	add.w	r1, r7, #20
 8008072:	2300      	movs	r3, #0
 8008074:	2200      	movs	r2, #0
 8008076:	f7fe fccd 	bl	8006a14 <xQueueGenericSend>
 800807a:	6278      	str	r0, [r7, #36]	; 0x24
 800807c:	e008      	b.n	8008090 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800807e:	4b07      	ldr	r3, [pc, #28]	; (800809c <xTimerGenericCommand+0x98>)
 8008080:	6818      	ldr	r0, [r3, #0]
 8008082:	f107 0114 	add.w	r1, r7, #20
 8008086:	2300      	movs	r3, #0
 8008088:	683a      	ldr	r2, [r7, #0]
 800808a:	f7fe fdd1 	bl	8006c30 <xQueueGenericSendFromISR>
 800808e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8008092:	4618      	mov	r0, r3
 8008094:	3728      	adds	r7, #40	; 0x28
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	200004d4 	.word	0x200004d4

080080a0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b088      	sub	sp, #32
 80080a4:	af02      	add	r7, sp, #8
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080aa:	4b22      	ldr	r3, [pc, #136]	; (8008134 <prvProcessExpiredTimer+0x94>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	3304      	adds	r3, #4
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7fe fb9d 	bl	80067f8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080c4:	f003 0304 	and.w	r3, r3, #4
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d022      	beq.n	8008112 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	699a      	ldr	r2, [r3, #24]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	18d1      	adds	r1, r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	683a      	ldr	r2, [r7, #0]
 80080d8:	6978      	ldr	r0, [r7, #20]
 80080da:	f000 f8d1 	bl	8008280 <prvInsertTimerInActiveList>
 80080de:	4603      	mov	r3, r0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d01f      	beq.n	8008124 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080e4:	2300      	movs	r3, #0
 80080e6:	9300      	str	r3, [sp, #0]
 80080e8:	2300      	movs	r3, #0
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	2100      	movs	r1, #0
 80080ee:	6978      	ldr	r0, [r7, #20]
 80080f0:	f7ff ff88 	bl	8008004 <xTimerGenericCommand>
 80080f4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d113      	bne.n	8008124 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80080fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008100:	f383 8811 	msr	BASEPRI, r3
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	60fb      	str	r3, [r7, #12]
    }
 800810e:	bf00      	nop
 8008110:	e7fe      	b.n	8008110 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008118:	f023 0301 	bic.w	r3, r3, #1
 800811c:	b2da      	uxtb	r2, r3
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	6a1b      	ldr	r3, [r3, #32]
 8008128:	6978      	ldr	r0, [r7, #20]
 800812a:	4798      	blx	r3
    }
 800812c:	bf00      	nop
 800812e:	3718      	adds	r7, #24
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	200004cc 	.word	0x200004cc

08008138 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008140:	f107 0308 	add.w	r3, r7, #8
 8008144:	4618      	mov	r0, r3
 8008146:	f000 f857 	bl	80081f8 <prvGetNextExpireTime>
 800814a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	4619      	mov	r1, r3
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f000 f803 	bl	800815c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8008156:	f000 f8d5 	bl	8008304 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800815a:	e7f1      	b.n	8008140 <prvTimerTask+0x8>

0800815c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8008166:	f7ff fa55 	bl	8007614 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800816a:	f107 0308 	add.w	r3, r7, #8
 800816e:	4618      	mov	r0, r3
 8008170:	f000 f866 	bl	8008240 <prvSampleTimeNow>
 8008174:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d130      	bne.n	80081de <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d10a      	bne.n	8008198 <prvProcessTimerOrBlockTask+0x3c>
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	429a      	cmp	r2, r3
 8008188:	d806      	bhi.n	8008198 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800818a:	f7ff fa51 	bl	8007630 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800818e:	68f9      	ldr	r1, [r7, #12]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f7ff ff85 	bl	80080a0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8008196:	e024      	b.n	80081e2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d008      	beq.n	80081b0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800819e:	4b13      	ldr	r3, [pc, #76]	; (80081ec <prvProcessTimerOrBlockTask+0x90>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d101      	bne.n	80081ac <prvProcessTimerOrBlockTask+0x50>
 80081a8:	2301      	movs	r3, #1
 80081aa:	e000      	b.n	80081ae <prvProcessTimerOrBlockTask+0x52>
 80081ac:	2300      	movs	r3, #0
 80081ae:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80081b0:	4b0f      	ldr	r3, [pc, #60]	; (80081f0 <prvProcessTimerOrBlockTask+0x94>)
 80081b2:	6818      	ldr	r0, [r3, #0]
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	683a      	ldr	r2, [r7, #0]
 80081bc:	4619      	mov	r1, r3
 80081be:	f7ff f83d 	bl	800723c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80081c2:	f7ff fa35 	bl	8007630 <xTaskResumeAll>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d10a      	bne.n	80081e2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80081cc:	4b09      	ldr	r3, [pc, #36]	; (80081f4 <prvProcessTimerOrBlockTask+0x98>)
 80081ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081d2:	601a      	str	r2, [r3, #0]
 80081d4:	f3bf 8f4f 	dsb	sy
 80081d8:	f3bf 8f6f 	isb	sy
    }
 80081dc:	e001      	b.n	80081e2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80081de:	f7ff fa27 	bl	8007630 <xTaskResumeAll>
    }
 80081e2:	bf00      	nop
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	200004d0 	.word	0x200004d0
 80081f0:	200004d4 	.word	0x200004d4
 80081f4:	e000ed04 	.word	0xe000ed04

080081f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008200:	4b0e      	ldr	r3, [pc, #56]	; (800823c <prvGetNextExpireTime+0x44>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d101      	bne.n	800820e <prvGetNextExpireTime+0x16>
 800820a:	2201      	movs	r2, #1
 800820c:	e000      	b.n	8008210 <prvGetNextExpireTime+0x18>
 800820e:	2200      	movs	r2, #0
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d105      	bne.n	8008228 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800821c:	4b07      	ldr	r3, [pc, #28]	; (800823c <prvGetNextExpireTime+0x44>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	60fb      	str	r3, [r7, #12]
 8008226:	e001      	b.n	800822c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8008228:	2300      	movs	r3, #0
 800822a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800822c:	68fb      	ldr	r3, [r7, #12]
    }
 800822e:	4618      	mov	r0, r3
 8008230:	3714      	adds	r7, #20
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr
 800823a:	bf00      	nop
 800823c:	200004cc 	.word	0x200004cc

08008240 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8008248:	f7ff fa84 	bl	8007754 <xTaskGetTickCount>
 800824c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800824e:	4b0b      	ldr	r3, [pc, #44]	; (800827c <prvSampleTimeNow+0x3c>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	429a      	cmp	r2, r3
 8008256:	d205      	bcs.n	8008264 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8008258:	f000 f91a 	bl	8008490 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	601a      	str	r2, [r3, #0]
 8008262:	e002      	b.n	800826a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800826a:	4a04      	ldr	r2, [pc, #16]	; (800827c <prvSampleTimeNow+0x3c>)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8008270:	68fb      	ldr	r3, [r7, #12]
    }
 8008272:	4618      	mov	r0, r3
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	200004dc 	.word	0x200004dc

08008280 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8008280:	b580      	push	{r7, lr}
 8008282:	b086      	sub	sp, #24
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	607a      	str	r2, [r7, #4]
 800828c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800828e:	2300      	movs	r3, #0
 8008290:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	68ba      	ldr	r2, [r7, #8]
 8008296:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	68fa      	ldr	r2, [r7, #12]
 800829c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d812      	bhi.n	80082cc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	1ad2      	subs	r2, r2, r3
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d302      	bcc.n	80082ba <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80082b4:	2301      	movs	r3, #1
 80082b6:	617b      	str	r3, [r7, #20]
 80082b8:	e01b      	b.n	80082f2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80082ba:	4b10      	ldr	r3, [pc, #64]	; (80082fc <prvInsertTimerInActiveList+0x7c>)
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	3304      	adds	r3, #4
 80082c2:	4619      	mov	r1, r3
 80082c4:	4610      	mov	r0, r2
 80082c6:	f7fe fa5e 	bl	8006786 <vListInsert>
 80082ca:	e012      	b.n	80082f2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d206      	bcs.n	80082e2 <prvInsertTimerInActiveList+0x62>
 80082d4:	68ba      	ldr	r2, [r7, #8]
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d302      	bcc.n	80082e2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80082dc:	2301      	movs	r3, #1
 80082de:	617b      	str	r3, [r7, #20]
 80082e0:	e007      	b.n	80082f2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80082e2:	4b07      	ldr	r3, [pc, #28]	; (8008300 <prvInsertTimerInActiveList+0x80>)
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	3304      	adds	r3, #4
 80082ea:	4619      	mov	r1, r3
 80082ec:	4610      	mov	r0, r2
 80082ee:	f7fe fa4a 	bl	8006786 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80082f2:	697b      	ldr	r3, [r7, #20]
    }
 80082f4:	4618      	mov	r0, r3
 80082f6:	3718      	adds	r7, #24
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	200004d0 	.word	0x200004d0
 8008300:	200004cc 	.word	0x200004cc

08008304 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8008304:	b580      	push	{r7, lr}
 8008306:	b08c      	sub	sp, #48	; 0x30
 8008308:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800830a:	e0ae      	b.n	800846a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	2b00      	cmp	r3, #0
 8008310:	f2c0 80aa 	blt.w	8008468 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831a:	695b      	ldr	r3, [r3, #20]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d004      	beq.n	800832a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008322:	3304      	adds	r3, #4
 8008324:	4618      	mov	r0, r3
 8008326:	f7fe fa67 	bl	80067f8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800832a:	1d3b      	adds	r3, r7, #4
 800832c:	4618      	mov	r0, r3
 800832e:	f7ff ff87 	bl	8008240 <prvSampleTimeNow>
 8008332:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	2b09      	cmp	r3, #9
 8008338:	f200 8097 	bhi.w	800846a <prvProcessReceivedCommands+0x166>
 800833c:	a201      	add	r2, pc, #4	; (adr r2, 8008344 <prvProcessReceivedCommands+0x40>)
 800833e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008342:	bf00      	nop
 8008344:	0800836d 	.word	0x0800836d
 8008348:	0800836d 	.word	0x0800836d
 800834c:	0800836d 	.word	0x0800836d
 8008350:	080083e1 	.word	0x080083e1
 8008354:	080083f5 	.word	0x080083f5
 8008358:	0800843f 	.word	0x0800843f
 800835c:	0800836d 	.word	0x0800836d
 8008360:	0800836d 	.word	0x0800836d
 8008364:	080083e1 	.word	0x080083e1
 8008368:	080083f5 	.word	0x080083f5
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800836c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008372:	f043 0301 	orr.w	r3, r3, #1
 8008376:	b2da      	uxtb	r2, r3
 8008378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008382:	699b      	ldr	r3, [r3, #24]
 8008384:	18d1      	adds	r1, r2, r3
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6a3a      	ldr	r2, [r7, #32]
 800838a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800838c:	f7ff ff78 	bl	8008280 <prvInsertTimerInActiveList>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d069      	beq.n	800846a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008398:	6a1b      	ldr	r3, [r3, #32]
 800839a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800839c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800839e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083a4:	f003 0304 	and.w	r3, r3, #4
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d05e      	beq.n	800846a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b0:	699b      	ldr	r3, [r3, #24]
 80083b2:	441a      	add	r2, r3
 80083b4:	2300      	movs	r3, #0
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	2300      	movs	r3, #0
 80083ba:	2100      	movs	r1, #0
 80083bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083be:	f7ff fe21 	bl	8008004 <xTimerGenericCommand>
 80083c2:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d14f      	bne.n	800846a <prvProcessReceivedCommands+0x166>
        __asm volatile
 80083ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ce:	f383 8811 	msr	BASEPRI, r3
 80083d2:	f3bf 8f6f 	isb	sy
 80083d6:	f3bf 8f4f 	dsb	sy
 80083da:	61bb      	str	r3, [r7, #24]
    }
 80083dc:	bf00      	nop
 80083de:	e7fe      	b.n	80083de <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083e6:	f023 0301 	bic.w	r3, r3, #1
 80083ea:	b2da      	uxtb	r2, r3
 80083ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80083f2:	e03a      	b.n	800846a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80083f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083fa:	f043 0301 	orr.w	r3, r3, #1
 80083fe:	b2da      	uxtb	r2, r3
 8008400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008402:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800840c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840e:	699b      	ldr	r3, [r3, #24]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d10a      	bne.n	800842a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8008414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008418:	f383 8811 	msr	BASEPRI, r3
 800841c:	f3bf 8f6f 	isb	sy
 8008420:	f3bf 8f4f 	dsb	sy
 8008424:	617b      	str	r3, [r7, #20]
    }
 8008426:	bf00      	nop
 8008428:	e7fe      	b.n	8008428 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800842a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842c:	699a      	ldr	r2, [r3, #24]
 800842e:	6a3b      	ldr	r3, [r7, #32]
 8008430:	18d1      	adds	r1, r2, r3
 8008432:	6a3b      	ldr	r3, [r7, #32]
 8008434:	6a3a      	ldr	r2, [r7, #32]
 8008436:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008438:	f7ff ff22 	bl	8008280 <prvInsertTimerInActiveList>
                        break;
 800843c:	e015      	b.n	800846a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800843e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008440:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008444:	f003 0302 	and.w	r3, r3, #2
 8008448:	2b00      	cmp	r3, #0
 800844a:	d103      	bne.n	8008454 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800844c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800844e:	f000 fc3b 	bl	8008cc8 <vPortFree>
 8008452:	e00a      	b.n	800846a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008456:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800845a:	f023 0301 	bic.w	r3, r3, #1
 800845e:	b2da      	uxtb	r2, r3
 8008460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008462:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8008466:	e000      	b.n	800846a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8008468:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800846a:	4b08      	ldr	r3, [pc, #32]	; (800848c <prvProcessReceivedCommands+0x188>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f107 0108 	add.w	r1, r7, #8
 8008472:	2200      	movs	r2, #0
 8008474:	4618      	mov	r0, r3
 8008476:	f7fe fc99 	bl	8006dac <xQueueReceive>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	f47f af45 	bne.w	800830c <prvProcessReceivedCommands+0x8>
        }
    }
 8008482:	bf00      	nop
 8008484:	bf00      	nop
 8008486:	3728      	adds	r7, #40	; 0x28
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	200004d4 	.word	0x200004d4

08008490 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8008490:	b580      	push	{r7, lr}
 8008492:	b088      	sub	sp, #32
 8008494:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008496:	e048      	b.n	800852a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008498:	4b2d      	ldr	r3, [pc, #180]	; (8008550 <prvSwitchTimerLists+0xc0>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084a2:	4b2b      	ldr	r3, [pc, #172]	; (8008550 <prvSwitchTimerLists+0xc0>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	3304      	adds	r3, #4
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7fe f9a1 	bl	80067f8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6a1b      	ldr	r3, [r3, #32]
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084c4:	f003 0304 	and.w	r3, r3, #4
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d02e      	beq.n	800852a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	699b      	ldr	r3, [r3, #24]
 80084d0:	693a      	ldr	r2, [r7, #16]
 80084d2:	4413      	add	r3, r2
 80084d4:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80084d6:	68ba      	ldr	r2, [r7, #8]
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d90e      	bls.n	80084fc <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	68ba      	ldr	r2, [r7, #8]
 80084e2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084ea:	4b19      	ldr	r3, [pc, #100]	; (8008550 <prvSwitchTimerLists+0xc0>)
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	3304      	adds	r3, #4
 80084f2:	4619      	mov	r1, r3
 80084f4:	4610      	mov	r0, r2
 80084f6:	f7fe f946 	bl	8006786 <vListInsert>
 80084fa:	e016      	b.n	800852a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80084fc:	2300      	movs	r3, #0
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	2300      	movs	r3, #0
 8008502:	693a      	ldr	r2, [r7, #16]
 8008504:	2100      	movs	r1, #0
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f7ff fd7c 	bl	8008004 <xTimerGenericCommand>
 800850c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d10a      	bne.n	800852a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8008514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008518:	f383 8811 	msr	BASEPRI, r3
 800851c:	f3bf 8f6f 	isb	sy
 8008520:	f3bf 8f4f 	dsb	sy
 8008524:	603b      	str	r3, [r7, #0]
    }
 8008526:	bf00      	nop
 8008528:	e7fe      	b.n	8008528 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800852a:	4b09      	ldr	r3, [pc, #36]	; (8008550 <prvSwitchTimerLists+0xc0>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1b1      	bne.n	8008498 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8008534:	4b06      	ldr	r3, [pc, #24]	; (8008550 <prvSwitchTimerLists+0xc0>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800853a:	4b06      	ldr	r3, [pc, #24]	; (8008554 <prvSwitchTimerLists+0xc4>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a04      	ldr	r2, [pc, #16]	; (8008550 <prvSwitchTimerLists+0xc0>)
 8008540:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8008542:	4a04      	ldr	r2, [pc, #16]	; (8008554 <prvSwitchTimerLists+0xc4>)
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	6013      	str	r3, [r2, #0]
    }
 8008548:	bf00      	nop
 800854a:	3718      	adds	r7, #24
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	200004cc 	.word	0x200004cc
 8008554:	200004d0 	.word	0x200004d0

08008558 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8008558:	b580      	push	{r7, lr}
 800855a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800855c:	f000 f964 	bl	8008828 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8008560:	4b12      	ldr	r3, [pc, #72]	; (80085ac <prvCheckForValidListAndQueue+0x54>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d11d      	bne.n	80085a4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8008568:	4811      	ldr	r0, [pc, #68]	; (80085b0 <prvCheckForValidListAndQueue+0x58>)
 800856a:	f7fe f8bb 	bl	80066e4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800856e:	4811      	ldr	r0, [pc, #68]	; (80085b4 <prvCheckForValidListAndQueue+0x5c>)
 8008570:	f7fe f8b8 	bl	80066e4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8008574:	4b10      	ldr	r3, [pc, #64]	; (80085b8 <prvCheckForValidListAndQueue+0x60>)
 8008576:	4a0e      	ldr	r2, [pc, #56]	; (80085b0 <prvCheckForValidListAndQueue+0x58>)
 8008578:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800857a:	4b10      	ldr	r3, [pc, #64]	; (80085bc <prvCheckForValidListAndQueue+0x64>)
 800857c:	4a0d      	ldr	r2, [pc, #52]	; (80085b4 <prvCheckForValidListAndQueue+0x5c>)
 800857e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8008580:	2200      	movs	r2, #0
 8008582:	210c      	movs	r1, #12
 8008584:	200a      	movs	r0, #10
 8008586:	f7fe f9bc 	bl	8006902 <xQueueGenericCreate>
 800858a:	4603      	mov	r3, r0
 800858c:	4a07      	ldr	r2, [pc, #28]	; (80085ac <prvCheckForValidListAndQueue+0x54>)
 800858e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8008590:	4b06      	ldr	r3, [pc, #24]	; (80085ac <prvCheckForValidListAndQueue+0x54>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d005      	beq.n	80085a4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008598:	4b04      	ldr	r3, [pc, #16]	; (80085ac <prvCheckForValidListAndQueue+0x54>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4908      	ldr	r1, [pc, #32]	; (80085c0 <prvCheckForValidListAndQueue+0x68>)
 800859e:	4618      	mov	r0, r3
 80085a0:	f7fe fe1a 	bl	80071d8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80085a4:	f000 f970 	bl	8008888 <vPortExitCritical>
    }
 80085a8:	bf00      	nop
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	200004d4 	.word	0x200004d4
 80085b0:	200004a4 	.word	0x200004a4
 80085b4:	200004b8 	.word	0x200004b8
 80085b8:	200004cc 	.word	0x200004cc
 80085bc:	200004d0 	.word	0x200004d0
 80085c0:	0800e418 	.word	0x0800e418

080085c4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	3b04      	subs	r3, #4
 80085d4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80085dc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	3b04      	subs	r3, #4
 80085e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	f023 0201 	bic.w	r2, r3, #1
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	3b04      	subs	r3, #4
 80085f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80085f4:	4a0c      	ldr	r2, [pc, #48]	; (8008628 <pxPortInitialiseStack+0x64>)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	3b14      	subs	r3, #20
 80085fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	3b04      	subs	r3, #4
 800860a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f06f 0202 	mvn.w	r2, #2
 8008612:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	3b20      	subs	r3, #32
 8008618:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800861a:	68fb      	ldr	r3, [r7, #12]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3714      	adds	r7, #20
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr
 8008628:	0800862d 	.word	0x0800862d

0800862c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800862c:	b480      	push	{r7}
 800862e:	b085      	sub	sp, #20
 8008630:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8008632:	2300      	movs	r3, #0
 8008634:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8008636:	4b12      	ldr	r3, [pc, #72]	; (8008680 <prvTaskExitError+0x54>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800863e:	d00a      	beq.n	8008656 <prvTaskExitError+0x2a>
        __asm volatile
 8008640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008644:	f383 8811 	msr	BASEPRI, r3
 8008648:	f3bf 8f6f 	isb	sy
 800864c:	f3bf 8f4f 	dsb	sy
 8008650:	60fb      	str	r3, [r7, #12]
    }
 8008652:	bf00      	nop
 8008654:	e7fe      	b.n	8008654 <prvTaskExitError+0x28>
        __asm volatile
 8008656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865a:	f383 8811 	msr	BASEPRI, r3
 800865e:	f3bf 8f6f 	isb	sy
 8008662:	f3bf 8f4f 	dsb	sy
 8008666:	60bb      	str	r3, [r7, #8]
    }
 8008668:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800866a:	bf00      	nop
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d0fc      	beq.n	800866c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8008672:	bf00      	nop
 8008674:	bf00      	nop
 8008676:	3714      	adds	r7, #20
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr
 8008680:	20000010 	.word	0x20000010
	...

08008690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008690:	4b07      	ldr	r3, [pc, #28]	; (80086b0 <pxCurrentTCBConst2>)
 8008692:	6819      	ldr	r1, [r3, #0]
 8008694:	6808      	ldr	r0, [r1, #0]
 8008696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800869a:	f380 8809 	msr	PSP, r0
 800869e:	f3bf 8f6f 	isb	sy
 80086a2:	f04f 0000 	mov.w	r0, #0
 80086a6:	f380 8811 	msr	BASEPRI, r0
 80086aa:	4770      	bx	lr
 80086ac:	f3af 8000 	nop.w

080086b0 <pxCurrentTCBConst2>:
 80086b0:	200003a0 	.word	0x200003a0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80086b4:	bf00      	nop
 80086b6:	bf00      	nop

080086b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80086b8:	4808      	ldr	r0, [pc, #32]	; (80086dc <prvPortStartFirstTask+0x24>)
 80086ba:	6800      	ldr	r0, [r0, #0]
 80086bc:	6800      	ldr	r0, [r0, #0]
 80086be:	f380 8808 	msr	MSP, r0
 80086c2:	f04f 0000 	mov.w	r0, #0
 80086c6:	f380 8814 	msr	CONTROL, r0
 80086ca:	b662      	cpsie	i
 80086cc:	b661      	cpsie	f
 80086ce:	f3bf 8f4f 	dsb	sy
 80086d2:	f3bf 8f6f 	isb	sy
 80086d6:	df00      	svc	0
 80086d8:	bf00      	nop
 80086da:	0000      	.short	0x0000
 80086dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80086e0:	bf00      	nop
 80086e2:	bf00      	nop

080086e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b086      	sub	sp, #24
 80086e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80086ea:	4b46      	ldr	r3, [pc, #280]	; (8008804 <xPortStartScheduler+0x120>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a46      	ldr	r2, [pc, #280]	; (8008808 <xPortStartScheduler+0x124>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d10a      	bne.n	800870a <xPortStartScheduler+0x26>
        __asm volatile
 80086f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f8:	f383 8811 	msr	BASEPRI, r3
 80086fc:	f3bf 8f6f 	isb	sy
 8008700:	f3bf 8f4f 	dsb	sy
 8008704:	613b      	str	r3, [r7, #16]
    }
 8008706:	bf00      	nop
 8008708:	e7fe      	b.n	8008708 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800870a:	4b3e      	ldr	r3, [pc, #248]	; (8008804 <xPortStartScheduler+0x120>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a3f      	ldr	r2, [pc, #252]	; (800880c <xPortStartScheduler+0x128>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d10a      	bne.n	800872a <xPortStartScheduler+0x46>
        __asm volatile
 8008714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008718:	f383 8811 	msr	BASEPRI, r3
 800871c:	f3bf 8f6f 	isb	sy
 8008720:	f3bf 8f4f 	dsb	sy
 8008724:	60fb      	str	r3, [r7, #12]
    }
 8008726:	bf00      	nop
 8008728:	e7fe      	b.n	8008728 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800872a:	4b39      	ldr	r3, [pc, #228]	; (8008810 <xPortStartScheduler+0x12c>)
 800872c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	b2db      	uxtb	r3, r3
 8008734:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	22ff      	movs	r2, #255	; 0xff
 800873a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	b2db      	uxtb	r3, r3
 8008742:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008744:	78fb      	ldrb	r3, [r7, #3]
 8008746:	b2db      	uxtb	r3, r3
 8008748:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800874c:	b2da      	uxtb	r2, r3
 800874e:	4b31      	ldr	r3, [pc, #196]	; (8008814 <xPortStartScheduler+0x130>)
 8008750:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008752:	4b31      	ldr	r3, [pc, #196]	; (8008818 <xPortStartScheduler+0x134>)
 8008754:	2207      	movs	r2, #7
 8008756:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008758:	e009      	b.n	800876e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800875a:	4b2f      	ldr	r3, [pc, #188]	; (8008818 <xPortStartScheduler+0x134>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3b01      	subs	r3, #1
 8008760:	4a2d      	ldr	r2, [pc, #180]	; (8008818 <xPortStartScheduler+0x134>)
 8008762:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008764:	78fb      	ldrb	r3, [r7, #3]
 8008766:	b2db      	uxtb	r3, r3
 8008768:	005b      	lsls	r3, r3, #1
 800876a:	b2db      	uxtb	r3, r3
 800876c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800876e:	78fb      	ldrb	r3, [r7, #3]
 8008770:	b2db      	uxtb	r3, r3
 8008772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008776:	2b80      	cmp	r3, #128	; 0x80
 8008778:	d0ef      	beq.n	800875a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800877a:	4b27      	ldr	r3, [pc, #156]	; (8008818 <xPortStartScheduler+0x134>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f1c3 0307 	rsb	r3, r3, #7
 8008782:	2b04      	cmp	r3, #4
 8008784:	d00a      	beq.n	800879c <xPortStartScheduler+0xb8>
        __asm volatile
 8008786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878a:	f383 8811 	msr	BASEPRI, r3
 800878e:	f3bf 8f6f 	isb	sy
 8008792:	f3bf 8f4f 	dsb	sy
 8008796:	60bb      	str	r3, [r7, #8]
    }
 8008798:	bf00      	nop
 800879a:	e7fe      	b.n	800879a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800879c:	4b1e      	ldr	r3, [pc, #120]	; (8008818 <xPortStartScheduler+0x134>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	021b      	lsls	r3, r3, #8
 80087a2:	4a1d      	ldr	r2, [pc, #116]	; (8008818 <xPortStartScheduler+0x134>)
 80087a4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80087a6:	4b1c      	ldr	r3, [pc, #112]	; (8008818 <xPortStartScheduler+0x134>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80087ae:	4a1a      	ldr	r2, [pc, #104]	; (8008818 <xPortStartScheduler+0x134>)
 80087b0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	b2da      	uxtb	r2, r3
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80087ba:	4b18      	ldr	r3, [pc, #96]	; (800881c <xPortStartScheduler+0x138>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a17      	ldr	r2, [pc, #92]	; (800881c <xPortStartScheduler+0x138>)
 80087c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80087c4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80087c6:	4b15      	ldr	r3, [pc, #84]	; (800881c <xPortStartScheduler+0x138>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a14      	ldr	r2, [pc, #80]	; (800881c <xPortStartScheduler+0x138>)
 80087cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80087d0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80087d2:	f000 f8e3 	bl	800899c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80087d6:	4b12      	ldr	r3, [pc, #72]	; (8008820 <xPortStartScheduler+0x13c>)
 80087d8:	2200      	movs	r2, #0
 80087da:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80087dc:	f000 f902 	bl	80089e4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80087e0:	4b10      	ldr	r3, [pc, #64]	; (8008824 <xPortStartScheduler+0x140>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a0f      	ldr	r2, [pc, #60]	; (8008824 <xPortStartScheduler+0x140>)
 80087e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80087ea:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80087ec:	f7ff ff64 	bl	80086b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80087f0:	f7ff f86c 	bl	80078cc <vTaskSwitchContext>
    prvTaskExitError();
 80087f4:	f7ff ff1a 	bl	800862c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3718      	adds	r7, #24
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	e000ed00 	.word	0xe000ed00
 8008808:	410fc271 	.word	0x410fc271
 800880c:	410fc270 	.word	0x410fc270
 8008810:	e000e400 	.word	0xe000e400
 8008814:	200004e0 	.word	0x200004e0
 8008818:	200004e4 	.word	0x200004e4
 800881c:	e000ed20 	.word	0xe000ed20
 8008820:	20000010 	.word	0x20000010
 8008824:	e000ef34 	.word	0xe000ef34

08008828 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
        __asm volatile
 800882e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008832:	f383 8811 	msr	BASEPRI, r3
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	607b      	str	r3, [r7, #4]
    }
 8008840:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8008842:	4b0f      	ldr	r3, [pc, #60]	; (8008880 <vPortEnterCritical+0x58>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	3301      	adds	r3, #1
 8008848:	4a0d      	ldr	r2, [pc, #52]	; (8008880 <vPortEnterCritical+0x58>)
 800884a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800884c:	4b0c      	ldr	r3, [pc, #48]	; (8008880 <vPortEnterCritical+0x58>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d10f      	bne.n	8008874 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008854:	4b0b      	ldr	r3, [pc, #44]	; (8008884 <vPortEnterCritical+0x5c>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	b2db      	uxtb	r3, r3
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00a      	beq.n	8008874 <vPortEnterCritical+0x4c>
        __asm volatile
 800885e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008862:	f383 8811 	msr	BASEPRI, r3
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	603b      	str	r3, [r7, #0]
    }
 8008870:	bf00      	nop
 8008872:	e7fe      	b.n	8008872 <vPortEnterCritical+0x4a>
    }
}
 8008874:	bf00      	nop
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr
 8008880:	20000010 	.word	0x20000010
 8008884:	e000ed04 	.word	0xe000ed04

08008888 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800888e:	4b12      	ldr	r3, [pc, #72]	; (80088d8 <vPortExitCritical+0x50>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d10a      	bne.n	80088ac <vPortExitCritical+0x24>
        __asm volatile
 8008896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889a:	f383 8811 	msr	BASEPRI, r3
 800889e:	f3bf 8f6f 	isb	sy
 80088a2:	f3bf 8f4f 	dsb	sy
 80088a6:	607b      	str	r3, [r7, #4]
    }
 80088a8:	bf00      	nop
 80088aa:	e7fe      	b.n	80088aa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80088ac:	4b0a      	ldr	r3, [pc, #40]	; (80088d8 <vPortExitCritical+0x50>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	3b01      	subs	r3, #1
 80088b2:	4a09      	ldr	r2, [pc, #36]	; (80088d8 <vPortExitCritical+0x50>)
 80088b4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80088b6:	4b08      	ldr	r3, [pc, #32]	; (80088d8 <vPortExitCritical+0x50>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d105      	bne.n	80088ca <vPortExitCritical+0x42>
 80088be:	2300      	movs	r3, #0
 80088c0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	f383 8811 	msr	BASEPRI, r3
    }
 80088c8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80088ca:	bf00      	nop
 80088cc:	370c      	adds	r7, #12
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop
 80088d8:	20000010 	.word	0x20000010
 80088dc:	00000000 	.word	0x00000000

080088e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80088e0:	f3ef 8009 	mrs	r0, PSP
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	4b15      	ldr	r3, [pc, #84]	; (8008940 <pxCurrentTCBConst>)
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	f01e 0f10 	tst.w	lr, #16
 80088f0:	bf08      	it	eq
 80088f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80088f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088fa:	6010      	str	r0, [r2, #0]
 80088fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008900:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008904:	f380 8811 	msr	BASEPRI, r0
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	f3bf 8f6f 	isb	sy
 8008910:	f7fe ffdc 	bl	80078cc <vTaskSwitchContext>
 8008914:	f04f 0000 	mov.w	r0, #0
 8008918:	f380 8811 	msr	BASEPRI, r0
 800891c:	bc09      	pop	{r0, r3}
 800891e:	6819      	ldr	r1, [r3, #0]
 8008920:	6808      	ldr	r0, [r1, #0]
 8008922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008926:	f01e 0f10 	tst.w	lr, #16
 800892a:	bf08      	it	eq
 800892c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008930:	f380 8809 	msr	PSP, r0
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	f3af 8000 	nop.w

08008940 <pxCurrentTCBConst>:
 8008940:	200003a0 	.word	0x200003a0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008944:	bf00      	nop
 8008946:	bf00      	nop

08008948 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
        __asm volatile
 800894e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008952:	f383 8811 	msr	BASEPRI, r3
 8008956:	f3bf 8f6f 	isb	sy
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	607b      	str	r3, [r7, #4]
    }
 8008960:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8008962:	f004 f859 	bl	800ca18 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008966:	f7fe ff17 	bl	8007798 <xTaskIncrementTick>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d006      	beq.n	800897e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8008970:	f004 f8b0 	bl	800cad4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008974:	4b08      	ldr	r3, [pc, #32]	; (8008998 <SysTick_Handler+0x50>)
 8008976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800897a:	601a      	str	r2, [r3, #0]
 800897c:	e001      	b.n	8008982 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800897e:	f004 f88d 	bl	800ca9c <SEGGER_SYSVIEW_RecordExitISR>
 8008982:	2300      	movs	r3, #0
 8008984:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	f383 8811 	msr	BASEPRI, r3
    }
 800898c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800898e:	bf00      	nop
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	e000ed04 	.word	0xe000ed04

0800899c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800899c:	b480      	push	{r7}
 800899e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80089a0:	4b0b      	ldr	r3, [pc, #44]	; (80089d0 <vPortSetupTimerInterrupt+0x34>)
 80089a2:	2200      	movs	r2, #0
 80089a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80089a6:	4b0b      	ldr	r3, [pc, #44]	; (80089d4 <vPortSetupTimerInterrupt+0x38>)
 80089a8:	2200      	movs	r2, #0
 80089aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80089ac:	4b0a      	ldr	r3, [pc, #40]	; (80089d8 <vPortSetupTimerInterrupt+0x3c>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a0a      	ldr	r2, [pc, #40]	; (80089dc <vPortSetupTimerInterrupt+0x40>)
 80089b2:	fba2 2303 	umull	r2, r3, r2, r3
 80089b6:	099b      	lsrs	r3, r3, #6
 80089b8:	4a09      	ldr	r2, [pc, #36]	; (80089e0 <vPortSetupTimerInterrupt+0x44>)
 80089ba:	3b01      	subs	r3, #1
 80089bc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80089be:	4b04      	ldr	r3, [pc, #16]	; (80089d0 <vPortSetupTimerInterrupt+0x34>)
 80089c0:	2207      	movs	r2, #7
 80089c2:	601a      	str	r2, [r3, #0]
}
 80089c4:	bf00      	nop
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	e000e010 	.word	0xe000e010
 80089d4:	e000e018 	.word	0xe000e018
 80089d8:	20000000 	.word	0x20000000
 80089dc:	10624dd3 	.word	0x10624dd3
 80089e0:	e000e014 	.word	0xe000e014

080089e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80089e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80089f4 <vPortEnableVFP+0x10>
 80089e8:	6801      	ldr	r1, [r0, #0]
 80089ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80089ee:	6001      	str	r1, [r0, #0]
 80089f0:	4770      	bx	lr
 80089f2:	0000      	.short	0x0000
 80089f4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80089f8:	bf00      	nop
 80089fa:	bf00      	nop

080089fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80089fc:	b480      	push	{r7}
 80089fe:	b085      	sub	sp, #20
 8008a00:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8008a02:	f3ef 8305 	mrs	r3, IPSR
 8008a06:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2b0f      	cmp	r3, #15
 8008a0c:	d914      	bls.n	8008a38 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008a0e:	4a17      	ldr	r2, [pc, #92]	; (8008a6c <vPortValidateInterruptPriority+0x70>)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	4413      	add	r3, r2
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008a18:	4b15      	ldr	r3, [pc, #84]	; (8008a70 <vPortValidateInterruptPriority+0x74>)
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	7afa      	ldrb	r2, [r7, #11]
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d20a      	bcs.n	8008a38 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8008a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a26:	f383 8811 	msr	BASEPRI, r3
 8008a2a:	f3bf 8f6f 	isb	sy
 8008a2e:	f3bf 8f4f 	dsb	sy
 8008a32:	607b      	str	r3, [r7, #4]
    }
 8008a34:	bf00      	nop
 8008a36:	e7fe      	b.n	8008a36 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008a38:	4b0e      	ldr	r3, [pc, #56]	; (8008a74 <vPortValidateInterruptPriority+0x78>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008a40:	4b0d      	ldr	r3, [pc, #52]	; (8008a78 <vPortValidateInterruptPriority+0x7c>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d90a      	bls.n	8008a5e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8008a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4c:	f383 8811 	msr	BASEPRI, r3
 8008a50:	f3bf 8f6f 	isb	sy
 8008a54:	f3bf 8f4f 	dsb	sy
 8008a58:	603b      	str	r3, [r7, #0]
    }
 8008a5a:	bf00      	nop
 8008a5c:	e7fe      	b.n	8008a5c <vPortValidateInterruptPriority+0x60>
    }
 8008a5e:	bf00      	nop
 8008a60:	3714      	adds	r7, #20
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	e000e3f0 	.word	0xe000e3f0
 8008a70:	200004e0 	.word	0x200004e0
 8008a74:	e000ed0c 	.word	0xe000ed0c
 8008a78:	200004e4 	.word	0x200004e4

08008a7c <vSetVarulMaxPRIGROUPValue>:

    void vSetVarulMaxPRIGROUPValue( void )
    {
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a82:	4b1f      	ldr	r3, [pc, #124]	; (8008b00 <vSetVarulMaxPRIGROUPValue+0x84>)
 8008a84:	60fb      	str	r3, [r7, #12]
        volatile uint8_t ucMaxPriorityValue;
        /* Determine the number of priority bits available.  First write to all
        possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	22ff      	movs	r2, #255	; 0xff
 8008a8a:	701a      	strb	r2, [r3, #0]
        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	71fb      	strb	r3, [r7, #7]
        /* Calculate the maximum acceptable priority group value for the number
        of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a94:	4b1b      	ldr	r3, [pc, #108]	; (8008b04 <vSetVarulMaxPRIGROUPValue+0x88>)
 8008a96:	2207      	movs	r2, #7
 8008a98:	601a      	str	r2, [r3, #0]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a9a:	e009      	b.n	8008ab0 <vSetVarulMaxPRIGROUPValue+0x34>
        {
            ulMaxPRIGROUPValue--;
 8008a9c:	4b19      	ldr	r3, [pc, #100]	; (8008b04 <vSetVarulMaxPRIGROUPValue+0x88>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	4a18      	ldr	r2, [pc, #96]	; (8008b04 <vSetVarulMaxPRIGROUPValue+0x88>)
 8008aa4:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008aa6:	79fb      	ldrb	r3, [r7, #7]
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	005b      	lsls	r3, r3, #1
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ab0:	79fb      	ldrb	r3, [r7, #7]
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ab8:	2b80      	cmp	r3, #128	; 0x80
 8008aba:	d0ef      	beq.n	8008a9c <vSetVarulMaxPRIGROUPValue+0x20>
    #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
            priority bits matches the number of priority bits actually queried
            from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008abc:	4b11      	ldr	r3, [pc, #68]	; (8008b04 <vSetVarulMaxPRIGROUPValue+0x88>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f1c3 0307 	rsb	r3, r3, #7
 8008ac4:	2b04      	cmp	r3, #4
 8008ac6:	d00a      	beq.n	8008ade <vSetVarulMaxPRIGROUPValue+0x62>
        __asm volatile
 8008ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008acc:	f383 8811 	msr	BASEPRI, r3
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	60bb      	str	r3, [r7, #8]
    }
 8008ada:	bf00      	nop
 8008adc:	e7fe      	b.n	8008adc <vSetVarulMaxPRIGROUPValue+0x60>
        }
    #endif
        /* Shift the priority group value back to its position within the AIRCR
        register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ade:	4b09      	ldr	r3, [pc, #36]	; (8008b04 <vSetVarulMaxPRIGROUPValue+0x88>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	021b      	lsls	r3, r3, #8
 8008ae4:	4a07      	ldr	r2, [pc, #28]	; (8008b04 <vSetVarulMaxPRIGROUPValue+0x88>)
 8008ae6:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ae8:	4b06      	ldr	r3, [pc, #24]	; (8008b04 <vSetVarulMaxPRIGROUPValue+0x88>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008af0:	4a04      	ldr	r2, [pc, #16]	; (8008b04 <vSetVarulMaxPRIGROUPValue+0x88>)
 8008af2:	6013      	str	r3, [r2, #0]
    }
 8008af4:	bf00      	nop
 8008af6:	3714      	adds	r7, #20
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr
 8008b00:	e000e400 	.word	0xe000e400
 8008b04:	200004e4 	.word	0x200004e4

08008b08 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b08a      	sub	sp, #40	; 0x28
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8008b10:	2300      	movs	r3, #0
 8008b12:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8008b14:	f7fe fd7e 	bl	8007614 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8008b18:	4b65      	ldr	r3, [pc, #404]	; (8008cb0 <pvPortMalloc+0x1a8>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d101      	bne.n	8008b24 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8008b20:	f000 f934 	bl	8008d8c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b24:	4b63      	ldr	r3, [pc, #396]	; (8008cb4 <pvPortMalloc+0x1ac>)
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4013      	ands	r3, r2
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f040 80a7 	bne.w	8008c80 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d02d      	beq.n	8008b94 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8008b38:	2208      	movs	r2, #8
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d227      	bcs.n	8008b94 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8008b44:	2208      	movs	r2, #8
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4413      	add	r3, r2
 8008b4a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f003 0307 	and.w	r3, r3, #7
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d021      	beq.n	8008b9a <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f023 0307 	bic.w	r3, r3, #7
 8008b5c:	3308      	adds	r3, #8
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d214      	bcs.n	8008b8e <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f023 0307 	bic.w	r3, r3, #7
 8008b6a:	3308      	adds	r3, #8
 8008b6c:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f003 0307 	and.w	r3, r3, #7
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d010      	beq.n	8008b9a <pvPortMalloc+0x92>
        __asm volatile
 8008b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	617b      	str	r3, [r7, #20]
    }
 8008b8a:	bf00      	nop
 8008b8c:	e7fe      	b.n	8008b8c <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b92:	e002      	b.n	8008b9a <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8008b94:	2300      	movs	r3, #0
 8008b96:	607b      	str	r3, [r7, #4]
 8008b98:	e000      	b.n	8008b9c <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b9a:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d06e      	beq.n	8008c80 <pvPortMalloc+0x178>
 8008ba2:	4b45      	ldr	r3, [pc, #276]	; (8008cb8 <pvPortMalloc+0x1b0>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d869      	bhi.n	8008c80 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8008bac:	4b43      	ldr	r3, [pc, #268]	; (8008cbc <pvPortMalloc+0x1b4>)
 8008bae:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8008bb0:	4b42      	ldr	r3, [pc, #264]	; (8008cbc <pvPortMalloc+0x1b4>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bb6:	e004      	b.n	8008bc2 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bba:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8008bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d903      	bls.n	8008bd4 <pvPortMalloc+0xcc>
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d1f1      	bne.n	8008bb8 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008bd4:	4b36      	ldr	r3, [pc, #216]	; (8008cb0 <pvPortMalloc+0x1a8>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d050      	beq.n	8008c80 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008bde:	6a3b      	ldr	r3, [r7, #32]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2208      	movs	r2, #8
 8008be4:	4413      	add	r3, r2
 8008be6:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	6a3b      	ldr	r3, [r7, #32]
 8008bee:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf2:	685a      	ldr	r2, [r3, #4]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	1ad2      	subs	r2, r2, r3
 8008bf8:	2308      	movs	r3, #8
 8008bfa:	005b      	lsls	r3, r3, #1
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d91f      	bls.n	8008c40 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4413      	add	r3, r2
 8008c06:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	f003 0307 	and.w	r3, r3, #7
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d00a      	beq.n	8008c28 <pvPortMalloc+0x120>
        __asm volatile
 8008c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c16:	f383 8811 	msr	BASEPRI, r3
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	613b      	str	r3, [r7, #16]
    }
 8008c24:	bf00      	nop
 8008c26:	e7fe      	b.n	8008c26 <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	1ad2      	subs	r2, r2, r3
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008c3a:	69b8      	ldr	r0, [r7, #24]
 8008c3c:	f000 f908 	bl	8008e50 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c40:	4b1d      	ldr	r3, [pc, #116]	; (8008cb8 <pvPortMalloc+0x1b0>)
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	1ad3      	subs	r3, r2, r3
 8008c4a:	4a1b      	ldr	r2, [pc, #108]	; (8008cb8 <pvPortMalloc+0x1b0>)
 8008c4c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c4e:	4b1a      	ldr	r3, [pc, #104]	; (8008cb8 <pvPortMalloc+0x1b0>)
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	4b1b      	ldr	r3, [pc, #108]	; (8008cc0 <pvPortMalloc+0x1b8>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d203      	bcs.n	8008c62 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c5a:	4b17      	ldr	r3, [pc, #92]	; (8008cb8 <pvPortMalloc+0x1b0>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a18      	ldr	r2, [pc, #96]	; (8008cc0 <pvPortMalloc+0x1b8>)
 8008c60:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c64:	685a      	ldr	r2, [r3, #4]
 8008c66:	4b13      	ldr	r3, [pc, #76]	; (8008cb4 <pvPortMalloc+0x1ac>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	431a      	orrs	r2, r3
 8008c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8008c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c72:	2200      	movs	r2, #0
 8008c74:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008c76:	4b13      	ldr	r3, [pc, #76]	; (8008cc4 <pvPortMalloc+0x1bc>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	4a11      	ldr	r2, [pc, #68]	; (8008cc4 <pvPortMalloc+0x1bc>)
 8008c7e:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8008c80:	f7fe fcd6 	bl	8007630 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	f003 0307 	and.w	r3, r3, #7
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00a      	beq.n	8008ca4 <pvPortMalloc+0x19c>
        __asm volatile
 8008c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c92:	f383 8811 	msr	BASEPRI, r3
 8008c96:	f3bf 8f6f 	isb	sy
 8008c9a:	f3bf 8f4f 	dsb	sy
 8008c9e:	60fb      	str	r3, [r7, #12]
    }
 8008ca0:	bf00      	nop
 8008ca2:	e7fe      	b.n	8008ca2 <pvPortMalloc+0x19a>
    return pvReturn;
 8008ca4:	69fb      	ldr	r3, [r7, #28]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3728      	adds	r7, #40	; 0x28
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	200084f0 	.word	0x200084f0
 8008cb4:	20008504 	.word	0x20008504
 8008cb8:	200084f4 	.word	0x200084f4
 8008cbc:	200084e8 	.word	0x200084e8
 8008cc0:	200084f8 	.word	0x200084f8
 8008cc4:	200084fc 	.word	0x200084fc

08008cc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d04d      	beq.n	8008d76 <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008cda:	2308      	movs	r3, #8
 8008cdc:	425b      	negs	r3, r3
 8008cde:	697a      	ldr	r2, [r7, #20]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	685a      	ldr	r2, [r3, #4]
 8008cec:	4b24      	ldr	r3, [pc, #144]	; (8008d80 <vPortFree+0xb8>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d10a      	bne.n	8008d0c <vPortFree+0x44>
        __asm volatile
 8008cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfa:	f383 8811 	msr	BASEPRI, r3
 8008cfe:	f3bf 8f6f 	isb	sy
 8008d02:	f3bf 8f4f 	dsb	sy
 8008d06:	60fb      	str	r3, [r7, #12]
    }
 8008d08:	bf00      	nop
 8008d0a:	e7fe      	b.n	8008d0a <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00a      	beq.n	8008d2a <vPortFree+0x62>
        __asm volatile
 8008d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d18:	f383 8811 	msr	BASEPRI, r3
 8008d1c:	f3bf 8f6f 	isb	sy
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	60bb      	str	r3, [r7, #8]
    }
 8008d26:	bf00      	nop
 8008d28:	e7fe      	b.n	8008d28 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	685a      	ldr	r2, [r3, #4]
 8008d2e:	4b14      	ldr	r3, [pc, #80]	; (8008d80 <vPortFree+0xb8>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4013      	ands	r3, r2
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d01e      	beq.n	8008d76 <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d11a      	bne.n	8008d76 <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	685a      	ldr	r2, [r3, #4]
 8008d44:	4b0e      	ldr	r3, [pc, #56]	; (8008d80 <vPortFree+0xb8>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	43db      	mvns	r3, r3
 8008d4a:	401a      	ands	r2, r3
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8008d50:	f7fe fc60 	bl	8007614 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	685a      	ldr	r2, [r3, #4]
 8008d58:	4b0a      	ldr	r3, [pc, #40]	; (8008d84 <vPortFree+0xbc>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	4a09      	ldr	r2, [pc, #36]	; (8008d84 <vPortFree+0xbc>)
 8008d60:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d62:	6938      	ldr	r0, [r7, #16]
 8008d64:	f000 f874 	bl	8008e50 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8008d68:	4b07      	ldr	r3, [pc, #28]	; (8008d88 <vPortFree+0xc0>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	4a06      	ldr	r2, [pc, #24]	; (8008d88 <vPortFree+0xc0>)
 8008d70:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008d72:	f7fe fc5d 	bl	8007630 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008d76:	bf00      	nop
 8008d78:	3718      	adds	r7, #24
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	20008504 	.word	0x20008504
 8008d84:	200084f4 	.word	0x200084f4
 8008d88:	20008500 	.word	0x20008500

08008d8c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d96:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8008d98:	4b27      	ldr	r3, [pc, #156]	; (8008e38 <prvHeapInit+0xac>)
 8008d9a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f003 0307 	and.w	r3, r3, #7
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00c      	beq.n	8008dc0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	3307      	adds	r3, #7
 8008daa:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f023 0307 	bic.w	r3, r3, #7
 8008db2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008db4:	68ba      	ldr	r2, [r7, #8]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	1ad3      	subs	r3, r2, r3
 8008dba:	4a1f      	ldr	r2, [pc, #124]	; (8008e38 <prvHeapInit+0xac>)
 8008dbc:	4413      	add	r3, r2
 8008dbe:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008dc4:	4a1d      	ldr	r2, [pc, #116]	; (8008e3c <prvHeapInit+0xb0>)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8008dca:	4b1c      	ldr	r3, [pc, #112]	; (8008e3c <prvHeapInit+0xb0>)
 8008dcc:	2200      	movs	r2, #0
 8008dce:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	68ba      	ldr	r2, [r7, #8]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008dd8:	2208      	movs	r2, #8
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	1a9b      	subs	r3, r3, r2
 8008dde:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f023 0307 	bic.w	r3, r3, #7
 8008de6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	4a15      	ldr	r2, [pc, #84]	; (8008e40 <prvHeapInit+0xb4>)
 8008dec:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8008dee:	4b14      	ldr	r3, [pc, #80]	; (8008e40 <prvHeapInit+0xb4>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	2200      	movs	r2, #0
 8008df4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8008df6:	4b12      	ldr	r3, [pc, #72]	; (8008e40 <prvHeapInit+0xb4>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	68fa      	ldr	r2, [r7, #12]
 8008e06:	1ad2      	subs	r2, r2, r3
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008e0c:	4b0c      	ldr	r3, [pc, #48]	; (8008e40 <prvHeapInit+0xb4>)
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	4a0a      	ldr	r2, [pc, #40]	; (8008e44 <prvHeapInit+0xb8>)
 8008e1a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	4a09      	ldr	r2, [pc, #36]	; (8008e48 <prvHeapInit+0xbc>)
 8008e22:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008e24:	4b09      	ldr	r3, [pc, #36]	; (8008e4c <prvHeapInit+0xc0>)
 8008e26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008e2a:	601a      	str	r2, [r3, #0]
}
 8008e2c:	bf00      	nop
 8008e2e:	3714      	adds	r7, #20
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr
 8008e38:	200004e8 	.word	0x200004e8
 8008e3c:	200084e8 	.word	0x200084e8
 8008e40:	200084f0 	.word	0x200084f0
 8008e44:	200084f8 	.word	0x200084f8
 8008e48:	200084f4 	.word	0x200084f4
 8008e4c:	20008504 	.word	0x20008504

08008e50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e58:	4b28      	ldr	r3, [pc, #160]	; (8008efc <prvInsertBlockIntoFreeList+0xac>)
 8008e5a:	60fb      	str	r3, [r7, #12]
 8008e5c:	e002      	b.n	8008e64 <prvInsertBlockIntoFreeList+0x14>
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	60fb      	str	r3, [r7, #12]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d8f7      	bhi.n	8008e5e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	4413      	add	r3, r2
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d108      	bne.n	8008e92 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	685a      	ldr	r2, [r3, #4]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	441a      	add	r2, r3
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	441a      	add	r2, r3
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d118      	bne.n	8008ed8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	4b15      	ldr	r3, [pc, #84]	; (8008f00 <prvInsertBlockIntoFreeList+0xb0>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d00d      	beq.n	8008ece <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	685a      	ldr	r2, [r3, #4]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	441a      	add	r2, r3
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	601a      	str	r2, [r3, #0]
 8008ecc:	e008      	b.n	8008ee0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ece:	4b0c      	ldr	r3, [pc, #48]	; (8008f00 <prvInsertBlockIntoFreeList+0xb0>)
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	601a      	str	r2, [r3, #0]
 8008ed6:	e003      	b.n	8008ee0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8008ee0:	68fa      	ldr	r2, [r7, #12]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d002      	beq.n	8008eee <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008eee:	bf00      	nop
 8008ef0:	3714      	adds	r7, #20
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	200084e8 	.word	0x200084e8
 8008f00:	200084f0 	.word	0x200084f0

08008f04 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008f10:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008f14:	f004 fd3e 	bl	800d994 <USBD_static_malloc>
 8008f18:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d109      	bne.n	8008f34 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	32b0      	adds	r2, #176	; 0xb0
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008f30:	2302      	movs	r3, #2
 8008f32:	e0d4      	b.n	80090de <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008f34:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008f38:	2100      	movs	r1, #0
 8008f3a:	68f8      	ldr	r0, [r7, #12]
 8008f3c:	f004 fdb6 	bl	800daac <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	32b0      	adds	r2, #176	; 0xb0
 8008f4a:	68f9      	ldr	r1, [r7, #12]
 8008f4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	32b0      	adds	r2, #176	; 0xb0
 8008f5a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	7c1b      	ldrb	r3, [r3, #16]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d138      	bne.n	8008fde <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008f6c:	4b5e      	ldr	r3, [pc, #376]	; (80090e8 <USBD_CDC_Init+0x1e4>)
 8008f6e:	7819      	ldrb	r1, [r3, #0]
 8008f70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f74:	2202      	movs	r2, #2
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f004 fbe9 	bl	800d74e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008f7c:	4b5a      	ldr	r3, [pc, #360]	; (80090e8 <USBD_CDC_Init+0x1e4>)
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	f003 020f 	and.w	r2, r3, #15
 8008f84:	6879      	ldr	r1, [r7, #4]
 8008f86:	4613      	mov	r3, r2
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	4413      	add	r3, r2
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	440b      	add	r3, r1
 8008f90:	3324      	adds	r3, #36	; 0x24
 8008f92:	2201      	movs	r2, #1
 8008f94:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008f96:	4b55      	ldr	r3, [pc, #340]	; (80090ec <USBD_CDC_Init+0x1e8>)
 8008f98:	7819      	ldrb	r1, [r3, #0]
 8008f9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f9e:	2202      	movs	r2, #2
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f004 fbd4 	bl	800d74e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008fa6:	4b51      	ldr	r3, [pc, #324]	; (80090ec <USBD_CDC_Init+0x1e8>)
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	f003 020f 	and.w	r2, r3, #15
 8008fae:	6879      	ldr	r1, [r7, #4]
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	4413      	add	r3, r2
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	440b      	add	r3, r1
 8008fba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008fc2:	4b4b      	ldr	r3, [pc, #300]	; (80090f0 <USBD_CDC_Init+0x1ec>)
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	f003 020f 	and.w	r2, r3, #15
 8008fca:	6879      	ldr	r1, [r7, #4]
 8008fcc:	4613      	mov	r3, r2
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	4413      	add	r3, r2
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	440b      	add	r3, r1
 8008fd6:	3326      	adds	r3, #38	; 0x26
 8008fd8:	2210      	movs	r2, #16
 8008fda:	801a      	strh	r2, [r3, #0]
 8008fdc:	e035      	b.n	800904a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008fde:	4b42      	ldr	r3, [pc, #264]	; (80090e8 <USBD_CDC_Init+0x1e4>)
 8008fe0:	7819      	ldrb	r1, [r3, #0]
 8008fe2:	2340      	movs	r3, #64	; 0x40
 8008fe4:	2202      	movs	r2, #2
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f004 fbb1 	bl	800d74e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008fec:	4b3e      	ldr	r3, [pc, #248]	; (80090e8 <USBD_CDC_Init+0x1e4>)
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	f003 020f 	and.w	r2, r3, #15
 8008ff4:	6879      	ldr	r1, [r7, #4]
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	4413      	add	r3, r2
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	440b      	add	r3, r1
 8009000:	3324      	adds	r3, #36	; 0x24
 8009002:	2201      	movs	r2, #1
 8009004:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009006:	4b39      	ldr	r3, [pc, #228]	; (80090ec <USBD_CDC_Init+0x1e8>)
 8009008:	7819      	ldrb	r1, [r3, #0]
 800900a:	2340      	movs	r3, #64	; 0x40
 800900c:	2202      	movs	r2, #2
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f004 fb9d 	bl	800d74e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009014:	4b35      	ldr	r3, [pc, #212]	; (80090ec <USBD_CDC_Init+0x1e8>)
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	f003 020f 	and.w	r2, r3, #15
 800901c:	6879      	ldr	r1, [r7, #4]
 800901e:	4613      	mov	r3, r2
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	4413      	add	r3, r2
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	440b      	add	r3, r1
 8009028:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800902c:	2201      	movs	r2, #1
 800902e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009030:	4b2f      	ldr	r3, [pc, #188]	; (80090f0 <USBD_CDC_Init+0x1ec>)
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	f003 020f 	and.w	r2, r3, #15
 8009038:	6879      	ldr	r1, [r7, #4]
 800903a:	4613      	mov	r3, r2
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	4413      	add	r3, r2
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	440b      	add	r3, r1
 8009044:	3326      	adds	r3, #38	; 0x26
 8009046:	2210      	movs	r2, #16
 8009048:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800904a:	4b29      	ldr	r3, [pc, #164]	; (80090f0 <USBD_CDC_Init+0x1ec>)
 800904c:	7819      	ldrb	r1, [r3, #0]
 800904e:	2308      	movs	r3, #8
 8009050:	2203      	movs	r2, #3
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f004 fb7b 	bl	800d74e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009058:	4b25      	ldr	r3, [pc, #148]	; (80090f0 <USBD_CDC_Init+0x1ec>)
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	f003 020f 	and.w	r2, r3, #15
 8009060:	6879      	ldr	r1, [r7, #4]
 8009062:	4613      	mov	r3, r2
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	4413      	add	r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	440b      	add	r3, r1
 800906c:	3324      	adds	r3, #36	; 0x24
 800906e:	2201      	movs	r2, #1
 8009070:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2200      	movs	r2, #0
 8009076:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	33b0      	adds	r3, #176	; 0xb0
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	4413      	add	r3, r2
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2200      	movs	r2, #0
 8009092:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2200      	movs	r2, #0
 800909a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d101      	bne.n	80090ac <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80090a8:	2302      	movs	r3, #2
 80090aa:	e018      	b.n	80090de <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	7c1b      	ldrb	r3, [r3, #16]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d10a      	bne.n	80090ca <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80090b4:	4b0d      	ldr	r3, [pc, #52]	; (80090ec <USBD_CDC_Init+0x1e8>)
 80090b6:	7819      	ldrb	r1, [r3, #0]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80090be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f004 fc32 	bl	800d92c <USBD_LL_PrepareReceive>
 80090c8:	e008      	b.n	80090dc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80090ca:	4b08      	ldr	r3, [pc, #32]	; (80090ec <USBD_CDC_Init+0x1e8>)
 80090cc:	7819      	ldrb	r1, [r3, #0]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80090d4:	2340      	movs	r3, #64	; 0x40
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f004 fc28 	bl	800d92c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	2000009b 	.word	0x2000009b
 80090ec:	2000009c 	.word	0x2000009c
 80090f0:	2000009d 	.word	0x2000009d

080090f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	460b      	mov	r3, r1
 80090fe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009100:	4b3a      	ldr	r3, [pc, #232]	; (80091ec <USBD_CDC_DeInit+0xf8>)
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	4619      	mov	r1, r3
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f004 fb47 	bl	800d79a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800910c:	4b37      	ldr	r3, [pc, #220]	; (80091ec <USBD_CDC_DeInit+0xf8>)
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	f003 020f 	and.w	r2, r3, #15
 8009114:	6879      	ldr	r1, [r7, #4]
 8009116:	4613      	mov	r3, r2
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	4413      	add	r3, r2
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	440b      	add	r3, r1
 8009120:	3324      	adds	r3, #36	; 0x24
 8009122:	2200      	movs	r2, #0
 8009124:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009126:	4b32      	ldr	r3, [pc, #200]	; (80091f0 <USBD_CDC_DeInit+0xfc>)
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	4619      	mov	r1, r3
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f004 fb34 	bl	800d79a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009132:	4b2f      	ldr	r3, [pc, #188]	; (80091f0 <USBD_CDC_DeInit+0xfc>)
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	f003 020f 	and.w	r2, r3, #15
 800913a:	6879      	ldr	r1, [r7, #4]
 800913c:	4613      	mov	r3, r2
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	4413      	add	r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	440b      	add	r3, r1
 8009146:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800914a:	2200      	movs	r2, #0
 800914c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800914e:	4b29      	ldr	r3, [pc, #164]	; (80091f4 <USBD_CDC_DeInit+0x100>)
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	4619      	mov	r1, r3
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f004 fb20 	bl	800d79a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800915a:	4b26      	ldr	r3, [pc, #152]	; (80091f4 <USBD_CDC_DeInit+0x100>)
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	f003 020f 	and.w	r2, r3, #15
 8009162:	6879      	ldr	r1, [r7, #4]
 8009164:	4613      	mov	r3, r2
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	4413      	add	r3, r2
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	440b      	add	r3, r1
 800916e:	3324      	adds	r3, #36	; 0x24
 8009170:	2200      	movs	r2, #0
 8009172:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009174:	4b1f      	ldr	r3, [pc, #124]	; (80091f4 <USBD_CDC_DeInit+0x100>)
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	f003 020f 	and.w	r2, r3, #15
 800917c:	6879      	ldr	r1, [r7, #4]
 800917e:	4613      	mov	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	4413      	add	r3, r2
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	440b      	add	r3, r1
 8009188:	3326      	adds	r3, #38	; 0x26
 800918a:	2200      	movs	r2, #0
 800918c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	32b0      	adds	r2, #176	; 0xb0
 8009198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d01f      	beq.n	80091e0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	33b0      	adds	r3, #176	; 0xb0
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	4413      	add	r3, r2
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	32b0      	adds	r2, #176	; 0xb0
 80091be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091c2:	4618      	mov	r0, r3
 80091c4:	f004 fbf4 	bl	800d9b0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	32b0      	adds	r2, #176	; 0xb0
 80091d2:	2100      	movs	r1, #0
 80091d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	2000009b 	.word	0x2000009b
 80091f0:	2000009c 	.word	0x2000009c
 80091f4:	2000009d 	.word	0x2000009d

080091f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b086      	sub	sp, #24
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	32b0      	adds	r2, #176	; 0xb0
 800920c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009210:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009212:	2300      	movs	r3, #0
 8009214:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009216:	2300      	movs	r3, #0
 8009218:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800921a:	2300      	movs	r3, #0
 800921c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d101      	bne.n	8009228 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009224:	2303      	movs	r3, #3
 8009226:	e0bf      	b.n	80093a8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009230:	2b00      	cmp	r3, #0
 8009232:	d050      	beq.n	80092d6 <USBD_CDC_Setup+0xde>
 8009234:	2b20      	cmp	r3, #32
 8009236:	f040 80af 	bne.w	8009398 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	88db      	ldrh	r3, [r3, #6]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d03a      	beq.n	80092b8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	b25b      	sxtb	r3, r3
 8009248:	2b00      	cmp	r3, #0
 800924a:	da1b      	bge.n	8009284 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	33b0      	adds	r3, #176	; 0xb0
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	4413      	add	r3, r2
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	683a      	ldr	r2, [r7, #0]
 8009260:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009262:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009264:	683a      	ldr	r2, [r7, #0]
 8009266:	88d2      	ldrh	r2, [r2, #6]
 8009268:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	88db      	ldrh	r3, [r3, #6]
 800926e:	2b07      	cmp	r3, #7
 8009270:	bf28      	it	cs
 8009272:	2307      	movcs	r3, #7
 8009274:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	89fa      	ldrh	r2, [r7, #14]
 800927a:	4619      	mov	r1, r3
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f001 fd43 	bl	800ad08 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009282:	e090      	b.n	80093a6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	785a      	ldrb	r2, [r3, #1]
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	88db      	ldrh	r3, [r3, #6]
 8009292:	2b3f      	cmp	r3, #63	; 0x3f
 8009294:	d803      	bhi.n	800929e <USBD_CDC_Setup+0xa6>
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	88db      	ldrh	r3, [r3, #6]
 800929a:	b2da      	uxtb	r2, r3
 800929c:	e000      	b.n	80092a0 <USBD_CDC_Setup+0xa8>
 800929e:	2240      	movs	r2, #64	; 0x40
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80092a6:	6939      	ldr	r1, [r7, #16]
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80092ae:	461a      	mov	r2, r3
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f001 fd55 	bl	800ad60 <USBD_CtlPrepareRx>
      break;
 80092b6:	e076      	b.n	80093a6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	33b0      	adds	r3, #176	; 0xb0
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	4413      	add	r3, r2
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	683a      	ldr	r2, [r7, #0]
 80092cc:	7850      	ldrb	r0, [r2, #1]
 80092ce:	2200      	movs	r2, #0
 80092d0:	6839      	ldr	r1, [r7, #0]
 80092d2:	4798      	blx	r3
      break;
 80092d4:	e067      	b.n	80093a6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	785b      	ldrb	r3, [r3, #1]
 80092da:	2b0b      	cmp	r3, #11
 80092dc:	d851      	bhi.n	8009382 <USBD_CDC_Setup+0x18a>
 80092de:	a201      	add	r2, pc, #4	; (adr r2, 80092e4 <USBD_CDC_Setup+0xec>)
 80092e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e4:	08009315 	.word	0x08009315
 80092e8:	08009391 	.word	0x08009391
 80092ec:	08009383 	.word	0x08009383
 80092f0:	08009383 	.word	0x08009383
 80092f4:	08009383 	.word	0x08009383
 80092f8:	08009383 	.word	0x08009383
 80092fc:	08009383 	.word	0x08009383
 8009300:	08009383 	.word	0x08009383
 8009304:	08009383 	.word	0x08009383
 8009308:	08009383 	.word	0x08009383
 800930c:	0800933f 	.word	0x0800933f
 8009310:	08009369 	.word	0x08009369
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800931a:	b2db      	uxtb	r3, r3
 800931c:	2b03      	cmp	r3, #3
 800931e:	d107      	bne.n	8009330 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009320:	f107 030a 	add.w	r3, r7, #10
 8009324:	2202      	movs	r2, #2
 8009326:	4619      	mov	r1, r3
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f001 fced 	bl	800ad08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800932e:	e032      	b.n	8009396 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009330:	6839      	ldr	r1, [r7, #0]
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f001 fc77 	bl	800ac26 <USBD_CtlError>
            ret = USBD_FAIL;
 8009338:	2303      	movs	r3, #3
 800933a:	75fb      	strb	r3, [r7, #23]
          break;
 800933c:	e02b      	b.n	8009396 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009344:	b2db      	uxtb	r3, r3
 8009346:	2b03      	cmp	r3, #3
 8009348:	d107      	bne.n	800935a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800934a:	f107 030d 	add.w	r3, r7, #13
 800934e:	2201      	movs	r2, #1
 8009350:	4619      	mov	r1, r3
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f001 fcd8 	bl	800ad08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009358:	e01d      	b.n	8009396 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800935a:	6839      	ldr	r1, [r7, #0]
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f001 fc62 	bl	800ac26 <USBD_CtlError>
            ret = USBD_FAIL;
 8009362:	2303      	movs	r3, #3
 8009364:	75fb      	strb	r3, [r7, #23]
          break;
 8009366:	e016      	b.n	8009396 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800936e:	b2db      	uxtb	r3, r3
 8009370:	2b03      	cmp	r3, #3
 8009372:	d00f      	beq.n	8009394 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009374:	6839      	ldr	r1, [r7, #0]
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f001 fc55 	bl	800ac26 <USBD_CtlError>
            ret = USBD_FAIL;
 800937c:	2303      	movs	r3, #3
 800937e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009380:	e008      	b.n	8009394 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009382:	6839      	ldr	r1, [r7, #0]
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f001 fc4e 	bl	800ac26 <USBD_CtlError>
          ret = USBD_FAIL;
 800938a:	2303      	movs	r3, #3
 800938c:	75fb      	strb	r3, [r7, #23]
          break;
 800938e:	e002      	b.n	8009396 <USBD_CDC_Setup+0x19e>
          break;
 8009390:	bf00      	nop
 8009392:	e008      	b.n	80093a6 <USBD_CDC_Setup+0x1ae>
          break;
 8009394:	bf00      	nop
      }
      break;
 8009396:	e006      	b.n	80093a6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009398:	6839      	ldr	r1, [r7, #0]
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f001 fc43 	bl	800ac26 <USBD_CtlError>
      ret = USBD_FAIL;
 80093a0:	2303      	movs	r3, #3
 80093a2:	75fb      	strb	r3, [r7, #23]
      break;
 80093a4:	bf00      	nop
  }

  return (uint8_t)ret;
 80093a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3718      	adds	r7, #24
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	460b      	mov	r3, r1
 80093ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80093c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	32b0      	adds	r2, #176	; 0xb0
 80093ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d101      	bne.n	80093da <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80093d6:	2303      	movs	r3, #3
 80093d8:	e065      	b.n	80094a6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	32b0      	adds	r2, #176	; 0xb0
 80093e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093e8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80093ea:	78fb      	ldrb	r3, [r7, #3]
 80093ec:	f003 020f 	and.w	r2, r3, #15
 80093f0:	6879      	ldr	r1, [r7, #4]
 80093f2:	4613      	mov	r3, r2
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	4413      	add	r3, r2
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	440b      	add	r3, r1
 80093fc:	3318      	adds	r3, #24
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d02f      	beq.n	8009464 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009404:	78fb      	ldrb	r3, [r7, #3]
 8009406:	f003 020f 	and.w	r2, r3, #15
 800940a:	6879      	ldr	r1, [r7, #4]
 800940c:	4613      	mov	r3, r2
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	4413      	add	r3, r2
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	440b      	add	r3, r1
 8009416:	3318      	adds	r3, #24
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	78fb      	ldrb	r3, [r7, #3]
 800941c:	f003 010f 	and.w	r1, r3, #15
 8009420:	68f8      	ldr	r0, [r7, #12]
 8009422:	460b      	mov	r3, r1
 8009424:	00db      	lsls	r3, r3, #3
 8009426:	440b      	add	r3, r1
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	4403      	add	r3, r0
 800942c:	3348      	adds	r3, #72	; 0x48
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	fbb2 f1f3 	udiv	r1, r2, r3
 8009434:	fb01 f303 	mul.w	r3, r1, r3
 8009438:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800943a:	2b00      	cmp	r3, #0
 800943c:	d112      	bne.n	8009464 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800943e:	78fb      	ldrb	r3, [r7, #3]
 8009440:	f003 020f 	and.w	r2, r3, #15
 8009444:	6879      	ldr	r1, [r7, #4]
 8009446:	4613      	mov	r3, r2
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	4413      	add	r3, r2
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	440b      	add	r3, r1
 8009450:	3318      	adds	r3, #24
 8009452:	2200      	movs	r2, #0
 8009454:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009456:	78f9      	ldrb	r1, [r7, #3]
 8009458:	2300      	movs	r3, #0
 800945a:	2200      	movs	r2, #0
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f004 fa44 	bl	800d8ea <USBD_LL_Transmit>
 8009462:	e01f      	b.n	80094a4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	2200      	movs	r2, #0
 8009468:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	33b0      	adds	r3, #176	; 0xb0
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	4413      	add	r3, r2
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d010      	beq.n	80094a4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	33b0      	adds	r3, #176	; 0xb0
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	4413      	add	r3, r2
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	691b      	ldr	r3, [r3, #16]
 8009494:	68ba      	ldr	r2, [r7, #8]
 8009496:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800949a:	68ba      	ldr	r2, [r7, #8]
 800949c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80094a0:	78fa      	ldrb	r2, [r7, #3]
 80094a2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b084      	sub	sp, #16
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
 80094b6:	460b      	mov	r3, r1
 80094b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	32b0      	adds	r2, #176	; 0xb0
 80094c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	32b0      	adds	r2, #176	; 0xb0
 80094d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d101      	bne.n	80094e0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80094dc:	2303      	movs	r3, #3
 80094de:	e01a      	b.n	8009516 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80094e0:	78fb      	ldrb	r3, [r7, #3]
 80094e2:	4619      	mov	r1, r3
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f004 fa42 	bl	800d96e <USBD_LL_GetRxDataSize>
 80094ea:	4602      	mov	r2, r0
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	33b0      	adds	r3, #176	; 0xb0
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	4413      	add	r3, r2
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	68fa      	ldr	r2, [r7, #12]
 8009506:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009510:	4611      	mov	r1, r2
 8009512:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b084      	sub	sp, #16
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	32b0      	adds	r2, #176	; 0xb0
 8009530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009534:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d101      	bne.n	8009540 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800953c:	2303      	movs	r3, #3
 800953e:	e025      	b.n	800958c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	33b0      	adds	r3, #176	; 0xb0
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	4413      	add	r3, r2
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d01a      	beq.n	800958a <USBD_CDC_EP0_RxReady+0x6c>
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800955a:	2bff      	cmp	r3, #255	; 0xff
 800955c:	d015      	beq.n	800958a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	33b0      	adds	r3, #176	; 0xb0
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	4413      	add	r3, r2
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	68fa      	ldr	r2, [r7, #12]
 8009572:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009576:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800957e:	b292      	uxth	r2, r2
 8009580:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	22ff      	movs	r2, #255	; 0xff
 8009586:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3710      	adds	r7, #16
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b086      	sub	sp, #24
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800959c:	2182      	movs	r1, #130	; 0x82
 800959e:	4818      	ldr	r0, [pc, #96]	; (8009600 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80095a0:	f000 fd09 	bl	8009fb6 <USBD_GetEpDesc>
 80095a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80095a6:	2101      	movs	r1, #1
 80095a8:	4815      	ldr	r0, [pc, #84]	; (8009600 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80095aa:	f000 fd04 	bl	8009fb6 <USBD_GetEpDesc>
 80095ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80095b0:	2181      	movs	r1, #129	; 0x81
 80095b2:	4813      	ldr	r0, [pc, #76]	; (8009600 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80095b4:	f000 fcff 	bl	8009fb6 <USBD_GetEpDesc>
 80095b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d002      	beq.n	80095c6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	2210      	movs	r2, #16
 80095c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d006      	beq.n	80095da <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095d4:	711a      	strb	r2, [r3, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d006      	beq.n	80095ee <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095e8:	711a      	strb	r2, [r3, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2243      	movs	r2, #67	; 0x43
 80095f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80095f4:	4b02      	ldr	r3, [pc, #8]	; (8009600 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3718      	adds	r7, #24
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	20000058 	.word	0x20000058

08009604 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800960c:	2182      	movs	r1, #130	; 0x82
 800960e:	4818      	ldr	r0, [pc, #96]	; (8009670 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009610:	f000 fcd1 	bl	8009fb6 <USBD_GetEpDesc>
 8009614:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009616:	2101      	movs	r1, #1
 8009618:	4815      	ldr	r0, [pc, #84]	; (8009670 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800961a:	f000 fccc 	bl	8009fb6 <USBD_GetEpDesc>
 800961e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009620:	2181      	movs	r1, #129	; 0x81
 8009622:	4813      	ldr	r0, [pc, #76]	; (8009670 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009624:	f000 fcc7 	bl	8009fb6 <USBD_GetEpDesc>
 8009628:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d002      	beq.n	8009636 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	2210      	movs	r2, #16
 8009634:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d006      	beq.n	800964a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	2200      	movs	r2, #0
 8009640:	711a      	strb	r2, [r3, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	f042 0202 	orr.w	r2, r2, #2
 8009648:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d006      	beq.n	800965e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2200      	movs	r2, #0
 8009654:	711a      	strb	r2, [r3, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	f042 0202 	orr.w	r2, r2, #2
 800965c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2243      	movs	r2, #67	; 0x43
 8009662:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009664:	4b02      	ldr	r3, [pc, #8]	; (8009670 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009666:	4618      	mov	r0, r3
 8009668:	3718      	adds	r7, #24
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	20000058 	.word	0x20000058

08009674 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b086      	sub	sp, #24
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800967c:	2182      	movs	r1, #130	; 0x82
 800967e:	4818      	ldr	r0, [pc, #96]	; (80096e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009680:	f000 fc99 	bl	8009fb6 <USBD_GetEpDesc>
 8009684:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009686:	2101      	movs	r1, #1
 8009688:	4815      	ldr	r0, [pc, #84]	; (80096e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800968a:	f000 fc94 	bl	8009fb6 <USBD_GetEpDesc>
 800968e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009690:	2181      	movs	r1, #129	; 0x81
 8009692:	4813      	ldr	r0, [pc, #76]	; (80096e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009694:	f000 fc8f 	bl	8009fb6 <USBD_GetEpDesc>
 8009698:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d002      	beq.n	80096a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	2210      	movs	r2, #16
 80096a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d006      	beq.n	80096ba <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096b4:	711a      	strb	r2, [r3, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d006      	beq.n	80096ce <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2200      	movs	r2, #0
 80096c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096c8:	711a      	strb	r2, [r3, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2243      	movs	r2, #67	; 0x43
 80096d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80096d4:	4b02      	ldr	r3, [pc, #8]	; (80096e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3718      	adds	r7, #24
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	20000058 	.word	0x20000058

080096e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	220a      	movs	r2, #10
 80096f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80096f2:	4b03      	ldr	r3, [pc, #12]	; (8009700 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr
 8009700:	20000014 	.word	0x20000014

08009704 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d101      	bne.n	8009718 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009714:	2303      	movs	r3, #3
 8009716:	e009      	b.n	800972c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	33b0      	adds	r3, #176	; 0xb0
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	4413      	add	r3, r2
 8009726:	683a      	ldr	r2, [r7, #0]
 8009728:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009738:	b480      	push	{r7}
 800973a:	b087      	sub	sp, #28
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	32b0      	adds	r2, #176	; 0xb0
 800974e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009752:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d101      	bne.n	800975e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800975a:	2303      	movs	r3, #3
 800975c:	e008      	b.n	8009770 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	371c      	adds	r7, #28
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	32b0      	adds	r2, #176	; 0xb0
 8009790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009794:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d101      	bne.n	80097a0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800979c:	2303      	movs	r3, #3
 800979e:	e004      	b.n	80097aa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	683a      	ldr	r2, [r7, #0]
 80097a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3714      	adds	r7, #20
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
	...

080097b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	32b0      	adds	r2, #176	; 0xb0
 80097ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ce:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	32b0      	adds	r2, #176	; 0xb0
 80097da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d101      	bne.n	80097e6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80097e2:	2303      	movs	r3, #3
 80097e4:	e018      	b.n	8009818 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	7c1b      	ldrb	r3, [r3, #16]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d10a      	bne.n	8009804 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80097ee:	4b0c      	ldr	r3, [pc, #48]	; (8009820 <USBD_CDC_ReceivePacket+0x68>)
 80097f0:	7819      	ldrb	r1, [r3, #0]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80097f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f004 f895 	bl	800d92c <USBD_LL_PrepareReceive>
 8009802:	e008      	b.n	8009816 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009804:	4b06      	ldr	r3, [pc, #24]	; (8009820 <USBD_CDC_ReceivePacket+0x68>)
 8009806:	7819      	ldrb	r1, [r3, #0]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800980e:	2340      	movs	r3, #64	; 0x40
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f004 f88b 	bl	800d92c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009816:	2300      	movs	r3, #0
}
 8009818:	4618      	mov	r0, r3
 800981a:	3710      	adds	r7, #16
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}
 8009820:	2000009c 	.word	0x2000009c

08009824 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b086      	sub	sp, #24
 8009828:	af00      	add	r7, sp, #0
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	4613      	mov	r3, r2
 8009830:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d101      	bne.n	800983c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009838:	2303      	movs	r3, #3
 800983a:	e01f      	b.n	800987c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2200      	movs	r2, #0
 8009840:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2200      	movs	r2, #0
 8009848:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2200      	movs	r2, #0
 8009850:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d003      	beq.n	8009862 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	68ba      	ldr	r2, [r7, #8]
 800985e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2201      	movs	r2, #1
 8009866:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	79fa      	ldrb	r2, [r7, #7]
 800986e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009870:	68f8      	ldr	r0, [r7, #12]
 8009872:	f003 ff05 	bl	800d680 <USBD_LL_Init>
 8009876:	4603      	mov	r3, r0
 8009878:	75fb      	strb	r3, [r7, #23]

  return ret;
 800987a:	7dfb      	ldrb	r3, [r7, #23]
}
 800987c:	4618      	mov	r0, r3
 800987e:	3718      	adds	r7, #24
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800988e:	2300      	movs	r3, #0
 8009890:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d101      	bne.n	800989c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009898:	2303      	movs	r3, #3
 800989a:	e025      	b.n	80098e8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	683a      	ldr	r2, [r7, #0]
 80098a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	32ae      	adds	r2, #174	; 0xae
 80098ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d00f      	beq.n	80098d8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	32ae      	adds	r2, #174	; 0xae
 80098c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c8:	f107 020e 	add.w	r2, r7, #14
 80098cc:	4610      	mov	r0, r2
 80098ce:	4798      	blx	r3
 80098d0:	4602      	mov	r2, r0
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80098de:	1c5a      	adds	r2, r3, #1
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80098e6:	2300      	movs	r3, #0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f003 ff0d 	bl	800d718 <USBD_LL_Start>
 80098fe:	4603      	mov	r3, r0
}
 8009900:	4618      	mov	r0, r3
 8009902:	3708      	adds	r7, #8
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009910:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009912:	4618      	mov	r0, r3
 8009914:	370c      	adds	r7, #12
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr

0800991e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b084      	sub	sp, #16
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
 8009926:	460b      	mov	r3, r1
 8009928:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800992a:	2300      	movs	r3, #0
 800992c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009934:	2b00      	cmp	r3, #0
 8009936:	d009      	beq.n	800994c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	78fa      	ldrb	r2, [r7, #3]
 8009942:	4611      	mov	r1, r2
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	4798      	blx	r3
 8009948:	4603      	mov	r3, r0
 800994a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800994c:	7bfb      	ldrb	r3, [r7, #15]
}
 800994e:	4618      	mov	r0, r3
 8009950:	3710      	adds	r7, #16
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b084      	sub	sp, #16
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
 800995e:	460b      	mov	r3, r1
 8009960:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009962:	2300      	movs	r3, #0
 8009964:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	78fa      	ldrb	r2, [r7, #3]
 8009970:	4611      	mov	r1, r2
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	4798      	blx	r3
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d001      	beq.n	8009980 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800997c:	2303      	movs	r3, #3
 800997e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009980:	7bfb      	ldrb	r3, [r7, #15]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b084      	sub	sp, #16
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
 8009992:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800999a:	6839      	ldr	r1, [r7, #0]
 800999c:	4618      	mov	r0, r3
 800999e:	f001 f908 	bl	800abb2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2201      	movs	r2, #1
 80099a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80099b0:	461a      	mov	r2, r3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80099be:	f003 031f 	and.w	r3, r3, #31
 80099c2:	2b02      	cmp	r3, #2
 80099c4:	d01a      	beq.n	80099fc <USBD_LL_SetupStage+0x72>
 80099c6:	2b02      	cmp	r3, #2
 80099c8:	d822      	bhi.n	8009a10 <USBD_LL_SetupStage+0x86>
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d002      	beq.n	80099d4 <USBD_LL_SetupStage+0x4a>
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d00a      	beq.n	80099e8 <USBD_LL_SetupStage+0x5e>
 80099d2:	e01d      	b.n	8009a10 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80099da:	4619      	mov	r1, r3
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 fb5f 	bl	800a0a0 <USBD_StdDevReq>
 80099e2:	4603      	mov	r3, r0
 80099e4:	73fb      	strb	r3, [r7, #15]
      break;
 80099e6:	e020      	b.n	8009a2a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80099ee:	4619      	mov	r1, r3
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 fbc7 	bl	800a184 <USBD_StdItfReq>
 80099f6:	4603      	mov	r3, r0
 80099f8:	73fb      	strb	r3, [r7, #15]
      break;
 80099fa:	e016      	b.n	8009a2a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009a02:	4619      	mov	r1, r3
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 fc29 	bl	800a25c <USBD_StdEPReq>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	73fb      	strb	r3, [r7, #15]
      break;
 8009a0e:	e00c      	b.n	8009a2a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009a16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f003 feda 	bl	800d7d8 <USBD_LL_StallEP>
 8009a24:	4603      	mov	r3, r0
 8009a26:	73fb      	strb	r3, [r7, #15]
      break;
 8009a28:	bf00      	nop
  }

  return ret;
 8009a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3710      	adds	r7, #16
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b086      	sub	sp, #24
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	607a      	str	r2, [r7, #4]
 8009a40:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a42:	2300      	movs	r3, #0
 8009a44:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009a46:	7afb      	ldrb	r3, [r7, #11]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d16e      	bne.n	8009b2a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009a52:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a5a:	2b03      	cmp	r3, #3
 8009a5c:	f040 8098 	bne.w	8009b90 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	689a      	ldr	r2, [r3, #8]
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d913      	bls.n	8009a94 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	689a      	ldr	r2, [r3, #8]
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	1ad2      	subs	r2, r2, r3
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	68da      	ldr	r2, [r3, #12]
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	4293      	cmp	r3, r2
 8009a84:	bf28      	it	cs
 8009a86:	4613      	movcs	r3, r2
 8009a88:	461a      	mov	r2, r3
 8009a8a:	6879      	ldr	r1, [r7, #4]
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f001 f984 	bl	800ad9a <USBD_CtlContinueRx>
 8009a92:	e07d      	b.n	8009b90 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009a9a:	f003 031f 	and.w	r3, r3, #31
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d014      	beq.n	8009acc <USBD_LL_DataOutStage+0x98>
 8009aa2:	2b02      	cmp	r3, #2
 8009aa4:	d81d      	bhi.n	8009ae2 <USBD_LL_DataOutStage+0xae>
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d002      	beq.n	8009ab0 <USBD_LL_DataOutStage+0x7c>
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d003      	beq.n	8009ab6 <USBD_LL_DataOutStage+0x82>
 8009aae:	e018      	b.n	8009ae2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	75bb      	strb	r3, [r7, #22]
            break;
 8009ab4:	e018      	b.n	8009ae8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	4619      	mov	r1, r3
 8009ac0:	68f8      	ldr	r0, [r7, #12]
 8009ac2:	f000 fa5e 	bl	8009f82 <USBD_CoreFindIF>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	75bb      	strb	r3, [r7, #22]
            break;
 8009aca:	e00d      	b.n	8009ae8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	68f8      	ldr	r0, [r7, #12]
 8009ad8:	f000 fa60 	bl	8009f9c <USBD_CoreFindEP>
 8009adc:	4603      	mov	r3, r0
 8009ade:	75bb      	strb	r3, [r7, #22]
            break;
 8009ae0:	e002      	b.n	8009ae8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	75bb      	strb	r3, [r7, #22]
            break;
 8009ae6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009ae8:	7dbb      	ldrb	r3, [r7, #22]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d119      	bne.n	8009b22 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	2b03      	cmp	r3, #3
 8009af8:	d113      	bne.n	8009b22 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009afa:	7dba      	ldrb	r2, [r7, #22]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	32ae      	adds	r2, #174	; 0xae
 8009b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b04:	691b      	ldr	r3, [r3, #16]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d00b      	beq.n	8009b22 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009b0a:	7dba      	ldrb	r2, [r7, #22]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009b12:	7dba      	ldrb	r2, [r7, #22]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	32ae      	adds	r2, #174	; 0xae
 8009b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b1c:	691b      	ldr	r3, [r3, #16]
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009b22:	68f8      	ldr	r0, [r7, #12]
 8009b24:	f001 f94a 	bl	800adbc <USBD_CtlSendStatus>
 8009b28:	e032      	b.n	8009b90 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009b2a:	7afb      	ldrb	r3, [r7, #11]
 8009b2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	4619      	mov	r1, r3
 8009b34:	68f8      	ldr	r0, [r7, #12]
 8009b36:	f000 fa31 	bl	8009f9c <USBD_CoreFindEP>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b3e:	7dbb      	ldrb	r3, [r7, #22]
 8009b40:	2bff      	cmp	r3, #255	; 0xff
 8009b42:	d025      	beq.n	8009b90 <USBD_LL_DataOutStage+0x15c>
 8009b44:	7dbb      	ldrb	r3, [r7, #22]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d122      	bne.n	8009b90 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	2b03      	cmp	r3, #3
 8009b54:	d117      	bne.n	8009b86 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009b56:	7dba      	ldrb	r2, [r7, #22]
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	32ae      	adds	r2, #174	; 0xae
 8009b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b60:	699b      	ldr	r3, [r3, #24]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00f      	beq.n	8009b86 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009b66:	7dba      	ldrb	r2, [r7, #22]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009b6e:	7dba      	ldrb	r2, [r7, #22]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	32ae      	adds	r2, #174	; 0xae
 8009b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b78:	699b      	ldr	r3, [r3, #24]
 8009b7a:	7afa      	ldrb	r2, [r7, #11]
 8009b7c:	4611      	mov	r1, r2
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	4798      	blx	r3
 8009b82:	4603      	mov	r3, r0
 8009b84:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009b86:	7dfb      	ldrb	r3, [r7, #23]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d001      	beq.n	8009b90 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009b8c:	7dfb      	ldrb	r3, [r7, #23]
 8009b8e:	e000      	b.n	8009b92 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009b90:	2300      	movs	r3, #0
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3718      	adds	r7, #24
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}

08009b9a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b086      	sub	sp, #24
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	60f8      	str	r0, [r7, #12]
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	607a      	str	r2, [r7, #4]
 8009ba6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009ba8:	7afb      	ldrb	r3, [r7, #11]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d16f      	bne.n	8009c8e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	3314      	adds	r3, #20
 8009bb2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009bba:	2b02      	cmp	r3, #2
 8009bbc:	d15a      	bne.n	8009c74 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	689a      	ldr	r2, [r3, #8]
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d914      	bls.n	8009bf4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	689a      	ldr	r2, [r3, #8]
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	1ad2      	subs	r2, r2, r3
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	461a      	mov	r2, r3
 8009bde:	6879      	ldr	r1, [r7, #4]
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f001 f8ac 	bl	800ad3e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009be6:	2300      	movs	r3, #0
 8009be8:	2200      	movs	r2, #0
 8009bea:	2100      	movs	r1, #0
 8009bec:	68f8      	ldr	r0, [r7, #12]
 8009bee:	f003 fe9d 	bl	800d92c <USBD_LL_PrepareReceive>
 8009bf2:	e03f      	b.n	8009c74 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	68da      	ldr	r2, [r3, #12]
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d11c      	bne.n	8009c3a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	685a      	ldr	r2, [r3, #4]
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d316      	bcc.n	8009c3a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	685a      	ldr	r2, [r3, #4]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d20f      	bcs.n	8009c3a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f001 f88d 	bl	800ad3e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2200      	movs	r2, #0
 8009c28:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	2200      	movs	r2, #0
 8009c30:	2100      	movs	r1, #0
 8009c32:	68f8      	ldr	r0, [r7, #12]
 8009c34:	f003 fe7a 	bl	800d92c <USBD_LL_PrepareReceive>
 8009c38:	e01c      	b.n	8009c74 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	2b03      	cmp	r3, #3
 8009c44:	d10f      	bne.n	8009c66 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c4c:	68db      	ldr	r3, [r3, #12]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d009      	beq.n	8009c66 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2200      	movs	r2, #0
 8009c56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c66:	2180      	movs	r1, #128	; 0x80
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f003 fdb5 	bl	800d7d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009c6e:	68f8      	ldr	r0, [r7, #12]
 8009c70:	f001 f8b7 	bl	800ade2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d03a      	beq.n	8009cf4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f7ff fe42 	bl	8009908 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009c8c:	e032      	b.n	8009cf4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009c8e:	7afb      	ldrb	r3, [r7, #11]
 8009c90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	4619      	mov	r1, r3
 8009c98:	68f8      	ldr	r0, [r7, #12]
 8009c9a:	f000 f97f 	bl	8009f9c <USBD_CoreFindEP>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ca2:	7dfb      	ldrb	r3, [r7, #23]
 8009ca4:	2bff      	cmp	r3, #255	; 0xff
 8009ca6:	d025      	beq.n	8009cf4 <USBD_LL_DataInStage+0x15a>
 8009ca8:	7dfb      	ldrb	r3, [r7, #23]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d122      	bne.n	8009cf4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	2b03      	cmp	r3, #3
 8009cb8:	d11c      	bne.n	8009cf4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009cba:	7dfa      	ldrb	r2, [r7, #23]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	32ae      	adds	r2, #174	; 0xae
 8009cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cc4:	695b      	ldr	r3, [r3, #20]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d014      	beq.n	8009cf4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009cca:	7dfa      	ldrb	r2, [r7, #23]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009cd2:	7dfa      	ldrb	r2, [r7, #23]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	32ae      	adds	r2, #174	; 0xae
 8009cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cdc:	695b      	ldr	r3, [r3, #20]
 8009cde:	7afa      	ldrb	r2, [r7, #11]
 8009ce0:	4611      	mov	r1, r2
 8009ce2:	68f8      	ldr	r0, [r7, #12]
 8009ce4:	4798      	blx	r3
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009cea:	7dbb      	ldrb	r3, [r7, #22]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d001      	beq.n	8009cf4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009cf0:	7dbb      	ldrb	r3, [r7, #22]
 8009cf2:	e000      	b.n	8009cf6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3718      	adds	r7, #24
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b084      	sub	sp, #16
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d06:	2300      	movs	r3, #0
 8009d08:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2200      	movs	r2, #0
 8009d24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d014      	beq.n	8009d64 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d00e      	beq.n	8009d64 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	6852      	ldr	r2, [r2, #4]
 8009d52:	b2d2      	uxtb	r2, r2
 8009d54:	4611      	mov	r1, r2
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	4798      	blx	r3
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d001      	beq.n	8009d64 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009d60:	2303      	movs	r3, #3
 8009d62:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d64:	2340      	movs	r3, #64	; 0x40
 8009d66:	2200      	movs	r2, #0
 8009d68:	2100      	movs	r1, #0
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f003 fcef 	bl	800d74e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2201      	movs	r2, #1
 8009d74:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2240      	movs	r2, #64	; 0x40
 8009d7c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d80:	2340      	movs	r3, #64	; 0x40
 8009d82:	2200      	movs	r2, #0
 8009d84:	2180      	movs	r1, #128	; 0x80
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f003 fce1 	bl	800d74e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2240      	movs	r2, #64	; 0x40
 8009d96:	621a      	str	r2, [r3, #32]

  return ret;
 8009d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3710      	adds	r7, #16
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}

08009da2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009da2:	b480      	push	{r7}
 8009da4:	b083      	sub	sp, #12
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
 8009daa:	460b      	mov	r3, r1
 8009dac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	78fa      	ldrb	r2, [r7, #3]
 8009db2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	370c      	adds	r7, #12
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr

08009dc2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009dc2:	b480      	push	{r7}
 8009dc4:	b083      	sub	sp, #12
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dd0:	b2da      	uxtb	r2, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2204      	movs	r2, #4
 8009ddc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009de0:	2300      	movs	r3, #0
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	370c      	adds	r7, #12
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr

08009dee <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009dee:	b480      	push	{r7}
 8009df0:	b083      	sub	sp, #12
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	2b04      	cmp	r3, #4
 8009e00:	d106      	bne.n	8009e10 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009e08:	b2da      	uxtb	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	370c      	adds	r7, #12
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr

08009e1e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b082      	sub	sp, #8
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	2b03      	cmp	r3, #3
 8009e30:	d110      	bne.n	8009e54 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d00b      	beq.n	8009e54 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e42:	69db      	ldr	r3, [r3, #28]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d005      	beq.n	8009e54 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e4e:	69db      	ldr	r3, [r3, #28]
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009e54:	2300      	movs	r3, #0
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3708      	adds	r7, #8
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b082      	sub	sp, #8
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
 8009e66:	460b      	mov	r3, r1
 8009e68:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	32ae      	adds	r2, #174	; 0xae
 8009e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d101      	bne.n	8009e80 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009e7c:	2303      	movs	r3, #3
 8009e7e:	e01c      	b.n	8009eba <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	2b03      	cmp	r3, #3
 8009e8a:	d115      	bne.n	8009eb8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	32ae      	adds	r2, #174	; 0xae
 8009e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e9a:	6a1b      	ldr	r3, [r3, #32]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d00b      	beq.n	8009eb8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	32ae      	adds	r2, #174	; 0xae
 8009eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eae:	6a1b      	ldr	r3, [r3, #32]
 8009eb0:	78fa      	ldrb	r2, [r7, #3]
 8009eb2:	4611      	mov	r1, r2
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009eb8:	2300      	movs	r3, #0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3708      	adds	r7, #8
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b082      	sub	sp, #8
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
 8009eca:	460b      	mov	r3, r1
 8009ecc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	32ae      	adds	r2, #174	; 0xae
 8009ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d101      	bne.n	8009ee4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009ee0:	2303      	movs	r3, #3
 8009ee2:	e01c      	b.n	8009f1e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	2b03      	cmp	r3, #3
 8009eee:	d115      	bne.n	8009f1c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	32ae      	adds	r2, #174	; 0xae
 8009efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d00b      	beq.n	8009f1c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	32ae      	adds	r2, #174	; 0xae
 8009f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f14:	78fa      	ldrb	r2, [r7, #3]
 8009f16:	4611      	mov	r1, r2
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009f1c:	2300      	movs	r3, #0
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3708      	adds	r7, #8
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}

08009f26 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009f26:	b480      	push	{r7}
 8009f28:	b083      	sub	sp, #12
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	370c      	adds	r7, #12
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009f44:	2300      	movs	r3, #0
 8009f46:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d00e      	beq.n	8009f78 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	6852      	ldr	r2, [r2, #4]
 8009f66:	b2d2      	uxtb	r2, r2
 8009f68:	4611      	mov	r1, r2
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	4798      	blx	r3
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d001      	beq.n	8009f78 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009f74:	2303      	movs	r3, #3
 8009f76:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3710      	adds	r7, #16
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009f82:	b480      	push	{r7}
 8009f84:	b083      	sub	sp, #12
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009f8e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009fa8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	370c      	adds	r7, #12
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr

08009fb6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009fb6:	b580      	push	{r7, lr}
 8009fb8:	b086      	sub	sp, #24
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	885b      	ldrh	r3, [r3, #2]
 8009fd2:	b29a      	uxth	r2, r3
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d920      	bls.n	800a020 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009fe6:	e013      	b.n	800a010 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009fe8:	f107 030a 	add.w	r3, r7, #10
 8009fec:	4619      	mov	r1, r3
 8009fee:	6978      	ldr	r0, [r7, #20]
 8009ff0:	f000 f81b 	bl	800a02a <USBD_GetNextDesc>
 8009ff4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	785b      	ldrb	r3, [r3, #1]
 8009ffa:	2b05      	cmp	r3, #5
 8009ffc:	d108      	bne.n	800a010 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	789b      	ldrb	r3, [r3, #2]
 800a006:	78fa      	ldrb	r2, [r7, #3]
 800a008:	429a      	cmp	r2, r3
 800a00a:	d008      	beq.n	800a01e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a00c:	2300      	movs	r3, #0
 800a00e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	885b      	ldrh	r3, [r3, #2]
 800a014:	b29a      	uxth	r2, r3
 800a016:	897b      	ldrh	r3, [r7, #10]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d8e5      	bhi.n	8009fe8 <USBD_GetEpDesc+0x32>
 800a01c:	e000      	b.n	800a020 <USBD_GetEpDesc+0x6a>
          break;
 800a01e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a020:	693b      	ldr	r3, [r7, #16]
}
 800a022:	4618      	mov	r0, r3
 800a024:	3718      	adds	r7, #24
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a02a:	b480      	push	{r7}
 800a02c:	b085      	sub	sp, #20
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
 800a032:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	881a      	ldrh	r2, [r3, #0]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	b29b      	uxth	r3, r3
 800a042:	4413      	add	r3, r2
 800a044:	b29a      	uxth	r2, r3
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	461a      	mov	r2, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	4413      	add	r3, r2
 800a054:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a056:	68fb      	ldr	r3, [r7, #12]
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3714      	adds	r7, #20
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a064:	b480      	push	{r7}
 800a066:	b087      	sub	sp, #28
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	3301      	adds	r3, #1
 800a07a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a082:	8a3b      	ldrh	r3, [r7, #16]
 800a084:	021b      	lsls	r3, r3, #8
 800a086:	b21a      	sxth	r2, r3
 800a088:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a08c:	4313      	orrs	r3, r2
 800a08e:	b21b      	sxth	r3, r3
 800a090:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a092:	89fb      	ldrh	r3, [r7, #14]
}
 800a094:	4618      	mov	r0, r3
 800a096:	371c      	adds	r7, #28
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr

0800a0a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a0b6:	2b40      	cmp	r3, #64	; 0x40
 800a0b8:	d005      	beq.n	800a0c6 <USBD_StdDevReq+0x26>
 800a0ba:	2b40      	cmp	r3, #64	; 0x40
 800a0bc:	d857      	bhi.n	800a16e <USBD_StdDevReq+0xce>
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00f      	beq.n	800a0e2 <USBD_StdDevReq+0x42>
 800a0c2:	2b20      	cmp	r3, #32
 800a0c4:	d153      	bne.n	800a16e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	32ae      	adds	r2, #174	; 0xae
 800a0d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	6839      	ldr	r1, [r7, #0]
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	4798      	blx	r3
 800a0dc:	4603      	mov	r3, r0
 800a0de:	73fb      	strb	r3, [r7, #15]
      break;
 800a0e0:	e04a      	b.n	800a178 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	785b      	ldrb	r3, [r3, #1]
 800a0e6:	2b09      	cmp	r3, #9
 800a0e8:	d83b      	bhi.n	800a162 <USBD_StdDevReq+0xc2>
 800a0ea:	a201      	add	r2, pc, #4	; (adr r2, 800a0f0 <USBD_StdDevReq+0x50>)
 800a0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f0:	0800a145 	.word	0x0800a145
 800a0f4:	0800a159 	.word	0x0800a159
 800a0f8:	0800a163 	.word	0x0800a163
 800a0fc:	0800a14f 	.word	0x0800a14f
 800a100:	0800a163 	.word	0x0800a163
 800a104:	0800a123 	.word	0x0800a123
 800a108:	0800a119 	.word	0x0800a119
 800a10c:	0800a163 	.word	0x0800a163
 800a110:	0800a13b 	.word	0x0800a13b
 800a114:	0800a12d 	.word	0x0800a12d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a118:	6839      	ldr	r1, [r7, #0]
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 fa3c 	bl	800a598 <USBD_GetDescriptor>
          break;
 800a120:	e024      	b.n	800a16c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a122:	6839      	ldr	r1, [r7, #0]
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 fba1 	bl	800a86c <USBD_SetAddress>
          break;
 800a12a:	e01f      	b.n	800a16c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a12c:	6839      	ldr	r1, [r7, #0]
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fbe0 	bl	800a8f4 <USBD_SetConfig>
 800a134:	4603      	mov	r3, r0
 800a136:	73fb      	strb	r3, [r7, #15]
          break;
 800a138:	e018      	b.n	800a16c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a13a:	6839      	ldr	r1, [r7, #0]
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 fc83 	bl	800aa48 <USBD_GetConfig>
          break;
 800a142:	e013      	b.n	800a16c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a144:	6839      	ldr	r1, [r7, #0]
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 fcb4 	bl	800aab4 <USBD_GetStatus>
          break;
 800a14c:	e00e      	b.n	800a16c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a14e:	6839      	ldr	r1, [r7, #0]
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 fce3 	bl	800ab1c <USBD_SetFeature>
          break;
 800a156:	e009      	b.n	800a16c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a158:	6839      	ldr	r1, [r7, #0]
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 fd07 	bl	800ab6e <USBD_ClrFeature>
          break;
 800a160:	e004      	b.n	800a16c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a162:	6839      	ldr	r1, [r7, #0]
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 fd5e 	bl	800ac26 <USBD_CtlError>
          break;
 800a16a:	bf00      	nop
      }
      break;
 800a16c:	e004      	b.n	800a178 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a16e:	6839      	ldr	r1, [r7, #0]
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 fd58 	bl	800ac26 <USBD_CtlError>
      break;
 800a176:	bf00      	nop
  }

  return ret;
 800a178:	7bfb      	ldrb	r3, [r7, #15]
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3710      	adds	r7, #16
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop

0800a184 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a18e:	2300      	movs	r3, #0
 800a190:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a19a:	2b40      	cmp	r3, #64	; 0x40
 800a19c:	d005      	beq.n	800a1aa <USBD_StdItfReq+0x26>
 800a19e:	2b40      	cmp	r3, #64	; 0x40
 800a1a0:	d852      	bhi.n	800a248 <USBD_StdItfReq+0xc4>
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d001      	beq.n	800a1aa <USBD_StdItfReq+0x26>
 800a1a6:	2b20      	cmp	r3, #32
 800a1a8:	d14e      	bne.n	800a248 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	3b01      	subs	r3, #1
 800a1b4:	2b02      	cmp	r3, #2
 800a1b6:	d840      	bhi.n	800a23a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	889b      	ldrh	r3, [r3, #4]
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d836      	bhi.n	800a230 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	889b      	ldrh	r3, [r3, #4]
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f7ff fed9 	bl	8009f82 <USBD_CoreFindIF>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a1d4:	7bbb      	ldrb	r3, [r7, #14]
 800a1d6:	2bff      	cmp	r3, #255	; 0xff
 800a1d8:	d01d      	beq.n	800a216 <USBD_StdItfReq+0x92>
 800a1da:	7bbb      	ldrb	r3, [r7, #14]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d11a      	bne.n	800a216 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a1e0:	7bba      	ldrb	r2, [r7, #14]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	32ae      	adds	r2, #174	; 0xae
 800a1e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1ea:	689b      	ldr	r3, [r3, #8]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d00f      	beq.n	800a210 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a1f0:	7bba      	ldrb	r2, [r7, #14]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a1f8:	7bba      	ldrb	r2, [r7, #14]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	32ae      	adds	r2, #174	; 0xae
 800a1fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a202:	689b      	ldr	r3, [r3, #8]
 800a204:	6839      	ldr	r1, [r7, #0]
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	4798      	blx	r3
 800a20a:	4603      	mov	r3, r0
 800a20c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a20e:	e004      	b.n	800a21a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a210:	2303      	movs	r3, #3
 800a212:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a214:	e001      	b.n	800a21a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a216:	2303      	movs	r3, #3
 800a218:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	88db      	ldrh	r3, [r3, #6]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d110      	bne.n	800a244 <USBD_StdItfReq+0xc0>
 800a222:	7bfb      	ldrb	r3, [r7, #15]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d10d      	bne.n	800a244 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f000 fdc7 	bl	800adbc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a22e:	e009      	b.n	800a244 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a230:	6839      	ldr	r1, [r7, #0]
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 fcf7 	bl	800ac26 <USBD_CtlError>
          break;
 800a238:	e004      	b.n	800a244 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a23a:	6839      	ldr	r1, [r7, #0]
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f000 fcf2 	bl	800ac26 <USBD_CtlError>
          break;
 800a242:	e000      	b.n	800a246 <USBD_StdItfReq+0xc2>
          break;
 800a244:	bf00      	nop
      }
      break;
 800a246:	e004      	b.n	800a252 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a248:	6839      	ldr	r1, [r7, #0]
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 fceb 	bl	800ac26 <USBD_CtlError>
      break;
 800a250:	bf00      	nop
  }

  return ret;
 800a252:	7bfb      	ldrb	r3, [r7, #15]
}
 800a254:	4618      	mov	r0, r3
 800a256:	3710      	adds	r7, #16
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a266:	2300      	movs	r3, #0
 800a268:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	889b      	ldrh	r3, [r3, #4]
 800a26e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a278:	2b40      	cmp	r3, #64	; 0x40
 800a27a:	d007      	beq.n	800a28c <USBD_StdEPReq+0x30>
 800a27c:	2b40      	cmp	r3, #64	; 0x40
 800a27e:	f200 817f 	bhi.w	800a580 <USBD_StdEPReq+0x324>
 800a282:	2b00      	cmp	r3, #0
 800a284:	d02a      	beq.n	800a2dc <USBD_StdEPReq+0x80>
 800a286:	2b20      	cmp	r3, #32
 800a288:	f040 817a 	bne.w	800a580 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a28c:	7bbb      	ldrb	r3, [r7, #14]
 800a28e:	4619      	mov	r1, r3
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f7ff fe83 	bl	8009f9c <USBD_CoreFindEP>
 800a296:	4603      	mov	r3, r0
 800a298:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a29a:	7b7b      	ldrb	r3, [r7, #13]
 800a29c:	2bff      	cmp	r3, #255	; 0xff
 800a29e:	f000 8174 	beq.w	800a58a <USBD_StdEPReq+0x32e>
 800a2a2:	7b7b      	ldrb	r3, [r7, #13]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	f040 8170 	bne.w	800a58a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a2aa:	7b7a      	ldrb	r2, [r7, #13]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a2b2:	7b7a      	ldrb	r2, [r7, #13]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	32ae      	adds	r2, #174	; 0xae
 800a2b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	f000 8163 	beq.w	800a58a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a2c4:	7b7a      	ldrb	r2, [r7, #13]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	32ae      	adds	r2, #174	; 0xae
 800a2ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	6839      	ldr	r1, [r7, #0]
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	4798      	blx	r3
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a2da:	e156      	b.n	800a58a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	785b      	ldrb	r3, [r3, #1]
 800a2e0:	2b03      	cmp	r3, #3
 800a2e2:	d008      	beq.n	800a2f6 <USBD_StdEPReq+0x9a>
 800a2e4:	2b03      	cmp	r3, #3
 800a2e6:	f300 8145 	bgt.w	800a574 <USBD_StdEPReq+0x318>
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	f000 809b 	beq.w	800a426 <USBD_StdEPReq+0x1ca>
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d03c      	beq.n	800a36e <USBD_StdEPReq+0x112>
 800a2f4:	e13e      	b.n	800a574 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	2b02      	cmp	r3, #2
 800a300:	d002      	beq.n	800a308 <USBD_StdEPReq+0xac>
 800a302:	2b03      	cmp	r3, #3
 800a304:	d016      	beq.n	800a334 <USBD_StdEPReq+0xd8>
 800a306:	e02c      	b.n	800a362 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a308:	7bbb      	ldrb	r3, [r7, #14]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00d      	beq.n	800a32a <USBD_StdEPReq+0xce>
 800a30e:	7bbb      	ldrb	r3, [r7, #14]
 800a310:	2b80      	cmp	r3, #128	; 0x80
 800a312:	d00a      	beq.n	800a32a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a314:	7bbb      	ldrb	r3, [r7, #14]
 800a316:	4619      	mov	r1, r3
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f003 fa5d 	bl	800d7d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a31e:	2180      	movs	r1, #128	; 0x80
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f003 fa59 	bl	800d7d8 <USBD_LL_StallEP>
 800a326:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a328:	e020      	b.n	800a36c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a32a:	6839      	ldr	r1, [r7, #0]
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 fc7a 	bl	800ac26 <USBD_CtlError>
              break;
 800a332:	e01b      	b.n	800a36c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	885b      	ldrh	r3, [r3, #2]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d10e      	bne.n	800a35a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a33c:	7bbb      	ldrb	r3, [r7, #14]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d00b      	beq.n	800a35a <USBD_StdEPReq+0xfe>
 800a342:	7bbb      	ldrb	r3, [r7, #14]
 800a344:	2b80      	cmp	r3, #128	; 0x80
 800a346:	d008      	beq.n	800a35a <USBD_StdEPReq+0xfe>
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	88db      	ldrh	r3, [r3, #6]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d104      	bne.n	800a35a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a350:	7bbb      	ldrb	r3, [r7, #14]
 800a352:	4619      	mov	r1, r3
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f003 fa3f 	bl	800d7d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 fd2e 	bl	800adbc <USBD_CtlSendStatus>

              break;
 800a360:	e004      	b.n	800a36c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a362:	6839      	ldr	r1, [r7, #0]
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f000 fc5e 	bl	800ac26 <USBD_CtlError>
              break;
 800a36a:	bf00      	nop
          }
          break;
 800a36c:	e107      	b.n	800a57e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a374:	b2db      	uxtb	r3, r3
 800a376:	2b02      	cmp	r3, #2
 800a378:	d002      	beq.n	800a380 <USBD_StdEPReq+0x124>
 800a37a:	2b03      	cmp	r3, #3
 800a37c:	d016      	beq.n	800a3ac <USBD_StdEPReq+0x150>
 800a37e:	e04b      	b.n	800a418 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a380:	7bbb      	ldrb	r3, [r7, #14]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d00d      	beq.n	800a3a2 <USBD_StdEPReq+0x146>
 800a386:	7bbb      	ldrb	r3, [r7, #14]
 800a388:	2b80      	cmp	r3, #128	; 0x80
 800a38a:	d00a      	beq.n	800a3a2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a38c:	7bbb      	ldrb	r3, [r7, #14]
 800a38e:	4619      	mov	r1, r3
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f003 fa21 	bl	800d7d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a396:	2180      	movs	r1, #128	; 0x80
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f003 fa1d 	bl	800d7d8 <USBD_LL_StallEP>
 800a39e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a3a0:	e040      	b.n	800a424 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a3a2:	6839      	ldr	r1, [r7, #0]
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 fc3e 	bl	800ac26 <USBD_CtlError>
              break;
 800a3aa:	e03b      	b.n	800a424 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	885b      	ldrh	r3, [r3, #2]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d136      	bne.n	800a422 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a3b4:	7bbb      	ldrb	r3, [r7, #14]
 800a3b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d004      	beq.n	800a3c8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a3be:	7bbb      	ldrb	r3, [r7, #14]
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f003 fa27 	bl	800d816 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f000 fcf7 	bl	800adbc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a3ce:	7bbb      	ldrb	r3, [r7, #14]
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f7ff fde2 	bl	8009f9c <USBD_CoreFindEP>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a3dc:	7b7b      	ldrb	r3, [r7, #13]
 800a3de:	2bff      	cmp	r3, #255	; 0xff
 800a3e0:	d01f      	beq.n	800a422 <USBD_StdEPReq+0x1c6>
 800a3e2:	7b7b      	ldrb	r3, [r7, #13]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d11c      	bne.n	800a422 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a3e8:	7b7a      	ldrb	r2, [r7, #13]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a3f0:	7b7a      	ldrb	r2, [r7, #13]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	32ae      	adds	r2, #174	; 0xae
 800a3f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d010      	beq.n	800a422 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a400:	7b7a      	ldrb	r2, [r7, #13]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	32ae      	adds	r2, #174	; 0xae
 800a406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a40a:	689b      	ldr	r3, [r3, #8]
 800a40c:	6839      	ldr	r1, [r7, #0]
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	4798      	blx	r3
 800a412:	4603      	mov	r3, r0
 800a414:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a416:	e004      	b.n	800a422 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a418:	6839      	ldr	r1, [r7, #0]
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 fc03 	bl	800ac26 <USBD_CtlError>
              break;
 800a420:	e000      	b.n	800a424 <USBD_StdEPReq+0x1c8>
              break;
 800a422:	bf00      	nop
          }
          break;
 800a424:	e0ab      	b.n	800a57e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	2b02      	cmp	r3, #2
 800a430:	d002      	beq.n	800a438 <USBD_StdEPReq+0x1dc>
 800a432:	2b03      	cmp	r3, #3
 800a434:	d032      	beq.n	800a49c <USBD_StdEPReq+0x240>
 800a436:	e097      	b.n	800a568 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a438:	7bbb      	ldrb	r3, [r7, #14]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d007      	beq.n	800a44e <USBD_StdEPReq+0x1f2>
 800a43e:	7bbb      	ldrb	r3, [r7, #14]
 800a440:	2b80      	cmp	r3, #128	; 0x80
 800a442:	d004      	beq.n	800a44e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a444:	6839      	ldr	r1, [r7, #0]
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 fbed 	bl	800ac26 <USBD_CtlError>
                break;
 800a44c:	e091      	b.n	800a572 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a44e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a452:	2b00      	cmp	r3, #0
 800a454:	da0b      	bge.n	800a46e <USBD_StdEPReq+0x212>
 800a456:	7bbb      	ldrb	r3, [r7, #14]
 800a458:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a45c:	4613      	mov	r3, r2
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	4413      	add	r3, r2
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	3310      	adds	r3, #16
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	4413      	add	r3, r2
 800a46a:	3304      	adds	r3, #4
 800a46c:	e00b      	b.n	800a486 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a46e:	7bbb      	ldrb	r3, [r7, #14]
 800a470:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a474:	4613      	mov	r3, r2
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	4413      	add	r3, r2
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a480:	687a      	ldr	r2, [r7, #4]
 800a482:	4413      	add	r3, r2
 800a484:	3304      	adds	r3, #4
 800a486:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	2200      	movs	r2, #0
 800a48c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	2202      	movs	r2, #2
 800a492:	4619      	mov	r1, r3
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 fc37 	bl	800ad08 <USBD_CtlSendData>
              break;
 800a49a:	e06a      	b.n	800a572 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a49c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	da11      	bge.n	800a4c8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a4a4:	7bbb      	ldrb	r3, [r7, #14]
 800a4a6:	f003 020f 	and.w	r2, r3, #15
 800a4aa:	6879      	ldr	r1, [r7, #4]
 800a4ac:	4613      	mov	r3, r2
 800a4ae:	009b      	lsls	r3, r3, #2
 800a4b0:	4413      	add	r3, r2
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	440b      	add	r3, r1
 800a4b6:	3324      	adds	r3, #36	; 0x24
 800a4b8:	881b      	ldrh	r3, [r3, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d117      	bne.n	800a4ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a4be:	6839      	ldr	r1, [r7, #0]
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 fbb0 	bl	800ac26 <USBD_CtlError>
                  break;
 800a4c6:	e054      	b.n	800a572 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a4c8:	7bbb      	ldrb	r3, [r7, #14]
 800a4ca:	f003 020f 	and.w	r2, r3, #15
 800a4ce:	6879      	ldr	r1, [r7, #4]
 800a4d0:	4613      	mov	r3, r2
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	4413      	add	r3, r2
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	440b      	add	r3, r1
 800a4da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a4de:	881b      	ldrh	r3, [r3, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d104      	bne.n	800a4ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a4e4:	6839      	ldr	r1, [r7, #0]
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 fb9d 	bl	800ac26 <USBD_CtlError>
                  break;
 800a4ec:	e041      	b.n	800a572 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	da0b      	bge.n	800a50e <USBD_StdEPReq+0x2b2>
 800a4f6:	7bbb      	ldrb	r3, [r7, #14]
 800a4f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a4fc:	4613      	mov	r3, r2
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	4413      	add	r3, r2
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	3310      	adds	r3, #16
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	4413      	add	r3, r2
 800a50a:	3304      	adds	r3, #4
 800a50c:	e00b      	b.n	800a526 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a50e:	7bbb      	ldrb	r3, [r7, #14]
 800a510:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a514:	4613      	mov	r3, r2
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	4413      	add	r3, r2
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	4413      	add	r3, r2
 800a524:	3304      	adds	r3, #4
 800a526:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a528:	7bbb      	ldrb	r3, [r7, #14]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d002      	beq.n	800a534 <USBD_StdEPReq+0x2d8>
 800a52e:	7bbb      	ldrb	r3, [r7, #14]
 800a530:	2b80      	cmp	r3, #128	; 0x80
 800a532:	d103      	bne.n	800a53c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	2200      	movs	r2, #0
 800a538:	601a      	str	r2, [r3, #0]
 800a53a:	e00e      	b.n	800a55a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a53c:	7bbb      	ldrb	r3, [r7, #14]
 800a53e:	4619      	mov	r1, r3
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f003 f987 	bl	800d854 <USBD_LL_IsStallEP>
 800a546:	4603      	mov	r3, r0
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d003      	beq.n	800a554 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	2201      	movs	r2, #1
 800a550:	601a      	str	r2, [r3, #0]
 800a552:	e002      	b.n	800a55a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	2200      	movs	r2, #0
 800a558:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	2202      	movs	r2, #2
 800a55e:	4619      	mov	r1, r3
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 fbd1 	bl	800ad08 <USBD_CtlSendData>
              break;
 800a566:	e004      	b.n	800a572 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a568:	6839      	ldr	r1, [r7, #0]
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 fb5b 	bl	800ac26 <USBD_CtlError>
              break;
 800a570:	bf00      	nop
          }
          break;
 800a572:	e004      	b.n	800a57e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a574:	6839      	ldr	r1, [r7, #0]
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 fb55 	bl	800ac26 <USBD_CtlError>
          break;
 800a57c:	bf00      	nop
      }
      break;
 800a57e:	e005      	b.n	800a58c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a580:	6839      	ldr	r1, [r7, #0]
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 fb4f 	bl	800ac26 <USBD_CtlError>
      break;
 800a588:	e000      	b.n	800a58c <USBD_StdEPReq+0x330>
      break;
 800a58a:	bf00      	nop
  }

  return ret;
 800a58c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
	...

0800a598 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	885b      	ldrh	r3, [r3, #2]
 800a5b2:	0a1b      	lsrs	r3, r3, #8
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	3b01      	subs	r3, #1
 800a5b8:	2b06      	cmp	r3, #6
 800a5ba:	f200 8128 	bhi.w	800a80e <USBD_GetDescriptor+0x276>
 800a5be:	a201      	add	r2, pc, #4	; (adr r2, 800a5c4 <USBD_GetDescriptor+0x2c>)
 800a5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5c4:	0800a5e1 	.word	0x0800a5e1
 800a5c8:	0800a5f9 	.word	0x0800a5f9
 800a5cc:	0800a639 	.word	0x0800a639
 800a5d0:	0800a80f 	.word	0x0800a80f
 800a5d4:	0800a80f 	.word	0x0800a80f
 800a5d8:	0800a7af 	.word	0x0800a7af
 800a5dc:	0800a7db 	.word	0x0800a7db
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	687a      	ldr	r2, [r7, #4]
 800a5ea:	7c12      	ldrb	r2, [r2, #16]
 800a5ec:	f107 0108 	add.w	r1, r7, #8
 800a5f0:	4610      	mov	r0, r2
 800a5f2:	4798      	blx	r3
 800a5f4:	60f8      	str	r0, [r7, #12]
      break;
 800a5f6:	e112      	b.n	800a81e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	7c1b      	ldrb	r3, [r3, #16]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d10d      	bne.n	800a61c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a608:	f107 0208 	add.w	r2, r7, #8
 800a60c:	4610      	mov	r0, r2
 800a60e:	4798      	blx	r3
 800a610:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	3301      	adds	r3, #1
 800a616:	2202      	movs	r2, #2
 800a618:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a61a:	e100      	b.n	800a81e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a624:	f107 0208 	add.w	r2, r7, #8
 800a628:	4610      	mov	r0, r2
 800a62a:	4798      	blx	r3
 800a62c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	3301      	adds	r3, #1
 800a632:	2202      	movs	r2, #2
 800a634:	701a      	strb	r2, [r3, #0]
      break;
 800a636:	e0f2      	b.n	800a81e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	885b      	ldrh	r3, [r3, #2]
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	2b05      	cmp	r3, #5
 800a640:	f200 80ac 	bhi.w	800a79c <USBD_GetDescriptor+0x204>
 800a644:	a201      	add	r2, pc, #4	; (adr r2, 800a64c <USBD_GetDescriptor+0xb4>)
 800a646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a64a:	bf00      	nop
 800a64c:	0800a665 	.word	0x0800a665
 800a650:	0800a699 	.word	0x0800a699
 800a654:	0800a6cd 	.word	0x0800a6cd
 800a658:	0800a701 	.word	0x0800a701
 800a65c:	0800a735 	.word	0x0800a735
 800a660:	0800a769 	.word	0x0800a769
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d00b      	beq.n	800a688 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	7c12      	ldrb	r2, [r2, #16]
 800a67c:	f107 0108 	add.w	r1, r7, #8
 800a680:	4610      	mov	r0, r2
 800a682:	4798      	blx	r3
 800a684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a686:	e091      	b.n	800a7ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a688:	6839      	ldr	r1, [r7, #0]
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 facb 	bl	800ac26 <USBD_CtlError>
            err++;
 800a690:	7afb      	ldrb	r3, [r7, #11]
 800a692:	3301      	adds	r3, #1
 800a694:	72fb      	strb	r3, [r7, #11]
          break;
 800a696:	e089      	b.n	800a7ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a69e:	689b      	ldr	r3, [r3, #8]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d00b      	beq.n	800a6bc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6aa:	689b      	ldr	r3, [r3, #8]
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	7c12      	ldrb	r2, [r2, #16]
 800a6b0:	f107 0108 	add.w	r1, r7, #8
 800a6b4:	4610      	mov	r0, r2
 800a6b6:	4798      	blx	r3
 800a6b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6ba:	e077      	b.n	800a7ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a6bc:	6839      	ldr	r1, [r7, #0]
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f000 fab1 	bl	800ac26 <USBD_CtlError>
            err++;
 800a6c4:	7afb      	ldrb	r3, [r7, #11]
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	72fb      	strb	r3, [r7, #11]
          break;
 800a6ca:	e06f      	b.n	800a7ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6d2:	68db      	ldr	r3, [r3, #12]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d00b      	beq.n	800a6f0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	7c12      	ldrb	r2, [r2, #16]
 800a6e4:	f107 0108 	add.w	r1, r7, #8
 800a6e8:	4610      	mov	r0, r2
 800a6ea:	4798      	blx	r3
 800a6ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6ee:	e05d      	b.n	800a7ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a6f0:	6839      	ldr	r1, [r7, #0]
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 fa97 	bl	800ac26 <USBD_CtlError>
            err++;
 800a6f8:	7afb      	ldrb	r3, [r7, #11]
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	72fb      	strb	r3, [r7, #11]
          break;
 800a6fe:	e055      	b.n	800a7ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a706:	691b      	ldr	r3, [r3, #16]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d00b      	beq.n	800a724 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a712:	691b      	ldr	r3, [r3, #16]
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	7c12      	ldrb	r2, [r2, #16]
 800a718:	f107 0108 	add.w	r1, r7, #8
 800a71c:	4610      	mov	r0, r2
 800a71e:	4798      	blx	r3
 800a720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a722:	e043      	b.n	800a7ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a724:	6839      	ldr	r1, [r7, #0]
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 fa7d 	bl	800ac26 <USBD_CtlError>
            err++;
 800a72c:	7afb      	ldrb	r3, [r7, #11]
 800a72e:	3301      	adds	r3, #1
 800a730:	72fb      	strb	r3, [r7, #11]
          break;
 800a732:	e03b      	b.n	800a7ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a73a:	695b      	ldr	r3, [r3, #20]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d00b      	beq.n	800a758 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a746:	695b      	ldr	r3, [r3, #20]
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	7c12      	ldrb	r2, [r2, #16]
 800a74c:	f107 0108 	add.w	r1, r7, #8
 800a750:	4610      	mov	r0, r2
 800a752:	4798      	blx	r3
 800a754:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a756:	e029      	b.n	800a7ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a758:	6839      	ldr	r1, [r7, #0]
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 fa63 	bl	800ac26 <USBD_CtlError>
            err++;
 800a760:	7afb      	ldrb	r3, [r7, #11]
 800a762:	3301      	adds	r3, #1
 800a764:	72fb      	strb	r3, [r7, #11]
          break;
 800a766:	e021      	b.n	800a7ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a76e:	699b      	ldr	r3, [r3, #24]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d00b      	beq.n	800a78c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a77a:	699b      	ldr	r3, [r3, #24]
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	7c12      	ldrb	r2, [r2, #16]
 800a780:	f107 0108 	add.w	r1, r7, #8
 800a784:	4610      	mov	r0, r2
 800a786:	4798      	blx	r3
 800a788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a78a:	e00f      	b.n	800a7ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a78c:	6839      	ldr	r1, [r7, #0]
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 fa49 	bl	800ac26 <USBD_CtlError>
            err++;
 800a794:	7afb      	ldrb	r3, [r7, #11]
 800a796:	3301      	adds	r3, #1
 800a798:	72fb      	strb	r3, [r7, #11]
          break;
 800a79a:	e007      	b.n	800a7ac <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a79c:	6839      	ldr	r1, [r7, #0]
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 fa41 	bl	800ac26 <USBD_CtlError>
          err++;
 800a7a4:	7afb      	ldrb	r3, [r7, #11]
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a7aa:	bf00      	nop
      }
      break;
 800a7ac:	e037      	b.n	800a81e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	7c1b      	ldrb	r3, [r3, #16]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d109      	bne.n	800a7ca <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7be:	f107 0208 	add.w	r2, r7, #8
 800a7c2:	4610      	mov	r0, r2
 800a7c4:	4798      	blx	r3
 800a7c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a7c8:	e029      	b.n	800a81e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a7ca:	6839      	ldr	r1, [r7, #0]
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 fa2a 	bl	800ac26 <USBD_CtlError>
        err++;
 800a7d2:	7afb      	ldrb	r3, [r7, #11]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	72fb      	strb	r3, [r7, #11]
      break;
 800a7d8:	e021      	b.n	800a81e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	7c1b      	ldrb	r3, [r3, #16]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d10d      	bne.n	800a7fe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ea:	f107 0208 	add.w	r2, r7, #8
 800a7ee:	4610      	mov	r0, r2
 800a7f0:	4798      	blx	r3
 800a7f2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	2207      	movs	r2, #7
 800a7fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a7fc:	e00f      	b.n	800a81e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a7fe:	6839      	ldr	r1, [r7, #0]
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 fa10 	bl	800ac26 <USBD_CtlError>
        err++;
 800a806:	7afb      	ldrb	r3, [r7, #11]
 800a808:	3301      	adds	r3, #1
 800a80a:	72fb      	strb	r3, [r7, #11]
      break;
 800a80c:	e007      	b.n	800a81e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a80e:	6839      	ldr	r1, [r7, #0]
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f000 fa08 	bl	800ac26 <USBD_CtlError>
      err++;
 800a816:	7afb      	ldrb	r3, [r7, #11]
 800a818:	3301      	adds	r3, #1
 800a81a:	72fb      	strb	r3, [r7, #11]
      break;
 800a81c:	bf00      	nop
  }

  if (err != 0U)
 800a81e:	7afb      	ldrb	r3, [r7, #11]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d11e      	bne.n	800a862 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	88db      	ldrh	r3, [r3, #6]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d016      	beq.n	800a85a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a82c:	893b      	ldrh	r3, [r7, #8]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d00e      	beq.n	800a850 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	88da      	ldrh	r2, [r3, #6]
 800a836:	893b      	ldrh	r3, [r7, #8]
 800a838:	4293      	cmp	r3, r2
 800a83a:	bf28      	it	cs
 800a83c:	4613      	movcs	r3, r2
 800a83e:	b29b      	uxth	r3, r3
 800a840:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a842:	893b      	ldrh	r3, [r7, #8]
 800a844:	461a      	mov	r2, r3
 800a846:	68f9      	ldr	r1, [r7, #12]
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 fa5d 	bl	800ad08 <USBD_CtlSendData>
 800a84e:	e009      	b.n	800a864 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a850:	6839      	ldr	r1, [r7, #0]
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 f9e7 	bl	800ac26 <USBD_CtlError>
 800a858:	e004      	b.n	800a864 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 faae 	bl	800adbc <USBD_CtlSendStatus>
 800a860:	e000      	b.n	800a864 <USBD_GetDescriptor+0x2cc>
    return;
 800a862:	bf00      	nop
  }
}
 800a864:	3710      	adds	r7, #16
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop

0800a86c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	889b      	ldrh	r3, [r3, #4]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d131      	bne.n	800a8e2 <USBD_SetAddress+0x76>
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	88db      	ldrh	r3, [r3, #6]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d12d      	bne.n	800a8e2 <USBD_SetAddress+0x76>
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	885b      	ldrh	r3, [r3, #2]
 800a88a:	2b7f      	cmp	r3, #127	; 0x7f
 800a88c:	d829      	bhi.n	800a8e2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	885b      	ldrh	r3, [r3, #2]
 800a892:	b2db      	uxtb	r3, r3
 800a894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a898:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	2b03      	cmp	r3, #3
 800a8a4:	d104      	bne.n	800a8b0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a8a6:	6839      	ldr	r1, [r7, #0]
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 f9bc 	bl	800ac26 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8ae:	e01d      	b.n	800a8ec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	7bfa      	ldrb	r2, [r7, #15]
 800a8b4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a8b8:	7bfb      	ldrb	r3, [r7, #15]
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f002 fff5 	bl	800d8ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 fa7a 	bl	800adbc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a8c8:	7bfb      	ldrb	r3, [r7, #15]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d004      	beq.n	800a8d8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2202      	movs	r2, #2
 800a8d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8d6:	e009      	b.n	800a8ec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2201      	movs	r2, #1
 800a8dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8e0:	e004      	b.n	800a8ec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a8e2:	6839      	ldr	r1, [r7, #0]
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 f99e 	bl	800ac26 <USBD_CtlError>
  }
}
 800a8ea:	bf00      	nop
 800a8ec:	bf00      	nop
 800a8ee:	3710      	adds	r7, #16
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8fe:	2300      	movs	r3, #0
 800a900:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	885b      	ldrh	r3, [r3, #2]
 800a906:	b2da      	uxtb	r2, r3
 800a908:	4b4e      	ldr	r3, [pc, #312]	; (800aa44 <USBD_SetConfig+0x150>)
 800a90a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a90c:	4b4d      	ldr	r3, [pc, #308]	; (800aa44 <USBD_SetConfig+0x150>)
 800a90e:	781b      	ldrb	r3, [r3, #0]
 800a910:	2b01      	cmp	r3, #1
 800a912:	d905      	bls.n	800a920 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a914:	6839      	ldr	r1, [r7, #0]
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 f985 	bl	800ac26 <USBD_CtlError>
    return USBD_FAIL;
 800a91c:	2303      	movs	r3, #3
 800a91e:	e08c      	b.n	800aa3a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a926:	b2db      	uxtb	r3, r3
 800a928:	2b02      	cmp	r3, #2
 800a92a:	d002      	beq.n	800a932 <USBD_SetConfig+0x3e>
 800a92c:	2b03      	cmp	r3, #3
 800a92e:	d029      	beq.n	800a984 <USBD_SetConfig+0x90>
 800a930:	e075      	b.n	800aa1e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a932:	4b44      	ldr	r3, [pc, #272]	; (800aa44 <USBD_SetConfig+0x150>)
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d020      	beq.n	800a97c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a93a:	4b42      	ldr	r3, [pc, #264]	; (800aa44 <USBD_SetConfig+0x150>)
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	461a      	mov	r2, r3
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a944:	4b3f      	ldr	r3, [pc, #252]	; (800aa44 <USBD_SetConfig+0x150>)
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	4619      	mov	r1, r3
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f7fe ffe7 	bl	800991e <USBD_SetClassConfig>
 800a950:	4603      	mov	r3, r0
 800a952:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a954:	7bfb      	ldrb	r3, [r7, #15]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d008      	beq.n	800a96c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a95a:	6839      	ldr	r1, [r7, #0]
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 f962 	bl	800ac26 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2202      	movs	r2, #2
 800a966:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a96a:	e065      	b.n	800aa38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f000 fa25 	bl	800adbc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2203      	movs	r2, #3
 800a976:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a97a:	e05d      	b.n	800aa38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 fa1d 	bl	800adbc <USBD_CtlSendStatus>
      break;
 800a982:	e059      	b.n	800aa38 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a984:	4b2f      	ldr	r3, [pc, #188]	; (800aa44 <USBD_SetConfig+0x150>)
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d112      	bne.n	800a9b2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2202      	movs	r2, #2
 800a990:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a994:	4b2b      	ldr	r3, [pc, #172]	; (800aa44 <USBD_SetConfig+0x150>)
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	461a      	mov	r2, r3
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a99e:	4b29      	ldr	r3, [pc, #164]	; (800aa44 <USBD_SetConfig+0x150>)
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f7fe ffd6 	bl	8009956 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 fa06 	bl	800adbc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a9b0:	e042      	b.n	800aa38 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a9b2:	4b24      	ldr	r3, [pc, #144]	; (800aa44 <USBD_SetConfig+0x150>)
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d02a      	beq.n	800aa16 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	b2db      	uxtb	r3, r3
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f7fe ffc4 	bl	8009956 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a9ce:	4b1d      	ldr	r3, [pc, #116]	; (800aa44 <USBD_SetConfig+0x150>)
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a9d8:	4b1a      	ldr	r3, [pc, #104]	; (800aa44 <USBD_SetConfig+0x150>)
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	4619      	mov	r1, r3
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f7fe ff9d 	bl	800991e <USBD_SetClassConfig>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a9e8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d00f      	beq.n	800aa0e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a9ee:	6839      	ldr	r1, [r7, #0]
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f000 f918 	bl	800ac26 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f7fe ffa9 	bl	8009956 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2202      	movs	r2, #2
 800aa08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aa0c:	e014      	b.n	800aa38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 f9d4 	bl	800adbc <USBD_CtlSendStatus>
      break;
 800aa14:	e010      	b.n	800aa38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 f9d0 	bl	800adbc <USBD_CtlSendStatus>
      break;
 800aa1c:	e00c      	b.n	800aa38 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800aa1e:	6839      	ldr	r1, [r7, #0]
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 f900 	bl	800ac26 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aa26:	4b07      	ldr	r3, [pc, #28]	; (800aa44 <USBD_SetConfig+0x150>)
 800aa28:	781b      	ldrb	r3, [r3, #0]
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f7fe ff92 	bl	8009956 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800aa32:	2303      	movs	r3, #3
 800aa34:	73fb      	strb	r3, [r7, #15]
      break;
 800aa36:	bf00      	nop
  }

  return ret;
 800aa38:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3710      	adds	r7, #16
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	20008508 	.word	0x20008508

0800aa48 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	88db      	ldrh	r3, [r3, #6]
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d004      	beq.n	800aa64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aa5a:	6839      	ldr	r1, [r7, #0]
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f000 f8e2 	bl	800ac26 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aa62:	e023      	b.n	800aaac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	2b02      	cmp	r3, #2
 800aa6e:	dc02      	bgt.n	800aa76 <USBD_GetConfig+0x2e>
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	dc03      	bgt.n	800aa7c <USBD_GetConfig+0x34>
 800aa74:	e015      	b.n	800aaa2 <USBD_GetConfig+0x5a>
 800aa76:	2b03      	cmp	r3, #3
 800aa78:	d00b      	beq.n	800aa92 <USBD_GetConfig+0x4a>
 800aa7a:	e012      	b.n	800aaa2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	3308      	adds	r3, #8
 800aa86:	2201      	movs	r2, #1
 800aa88:	4619      	mov	r1, r3
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 f93c 	bl	800ad08 <USBD_CtlSendData>
        break;
 800aa90:	e00c      	b.n	800aaac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	3304      	adds	r3, #4
 800aa96:	2201      	movs	r2, #1
 800aa98:	4619      	mov	r1, r3
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 f934 	bl	800ad08 <USBD_CtlSendData>
        break;
 800aaa0:	e004      	b.n	800aaac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800aaa2:	6839      	ldr	r1, [r7, #0]
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f000 f8be 	bl	800ac26 <USBD_CtlError>
        break;
 800aaaa:	bf00      	nop
}
 800aaac:	bf00      	nop
 800aaae:	3708      	adds	r7, #8
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b082      	sub	sp, #8
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	3b01      	subs	r3, #1
 800aac8:	2b02      	cmp	r3, #2
 800aaca:	d81e      	bhi.n	800ab0a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	88db      	ldrh	r3, [r3, #6]
 800aad0:	2b02      	cmp	r3, #2
 800aad2:	d004      	beq.n	800aade <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800aad4:	6839      	ldr	r1, [r7, #0]
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f000 f8a5 	bl	800ac26 <USBD_CtlError>
        break;
 800aadc:	e01a      	b.n	800ab14 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2201      	movs	r2, #1
 800aae2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d005      	beq.n	800aafa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	f043 0202 	orr.w	r2, r3, #2
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	330c      	adds	r3, #12
 800aafe:	2202      	movs	r2, #2
 800ab00:	4619      	mov	r1, r3
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 f900 	bl	800ad08 <USBD_CtlSendData>
      break;
 800ab08:	e004      	b.n	800ab14 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ab0a:	6839      	ldr	r1, [r7, #0]
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 f88a 	bl	800ac26 <USBD_CtlError>
      break;
 800ab12:	bf00      	nop
  }
}
 800ab14:	bf00      	nop
 800ab16:	3708      	adds	r7, #8
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	885b      	ldrh	r3, [r3, #2]
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d107      	bne.n	800ab3e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2201      	movs	r2, #1
 800ab32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 f940 	bl	800adbc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ab3c:	e013      	b.n	800ab66 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	885b      	ldrh	r3, [r3, #2]
 800ab42:	2b02      	cmp	r3, #2
 800ab44:	d10b      	bne.n	800ab5e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	889b      	ldrh	r3, [r3, #4]
 800ab4a:	0a1b      	lsrs	r3, r3, #8
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	b2da      	uxtb	r2, r3
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 f930 	bl	800adbc <USBD_CtlSendStatus>
}
 800ab5c:	e003      	b.n	800ab66 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ab5e:	6839      	ldr	r1, [r7, #0]
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 f860 	bl	800ac26 <USBD_CtlError>
}
 800ab66:	bf00      	nop
 800ab68:	3708      	adds	r7, #8
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}

0800ab6e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab6e:	b580      	push	{r7, lr}
 800ab70:	b082      	sub	sp, #8
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	6078      	str	r0, [r7, #4]
 800ab76:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	3b01      	subs	r3, #1
 800ab82:	2b02      	cmp	r3, #2
 800ab84:	d80b      	bhi.n	800ab9e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	885b      	ldrh	r3, [r3, #2]
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d10c      	bne.n	800aba8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2200      	movs	r2, #0
 800ab92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 f910 	bl	800adbc <USBD_CtlSendStatus>
      }
      break;
 800ab9c:	e004      	b.n	800aba8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ab9e:	6839      	ldr	r1, [r7, #0]
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 f840 	bl	800ac26 <USBD_CtlError>
      break;
 800aba6:	e000      	b.n	800abaa <USBD_ClrFeature+0x3c>
      break;
 800aba8:	bf00      	nop
  }
}
 800abaa:	bf00      	nop
 800abac:	3708      	adds	r7, #8
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}

0800abb2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800abb2:	b580      	push	{r7, lr}
 800abb4:	b084      	sub	sp, #16
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
 800abba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	781a      	ldrb	r2, [r3, #0]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	3301      	adds	r3, #1
 800abcc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	781a      	ldrb	r2, [r3, #0]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	3301      	adds	r3, #1
 800abda:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	f7ff fa41 	bl	800a064 <SWAPBYTE>
 800abe2:	4603      	mov	r3, r0
 800abe4:	461a      	mov	r2, r3
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	3301      	adds	r3, #1
 800abee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	3301      	adds	r3, #1
 800abf4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800abf6:	68f8      	ldr	r0, [r7, #12]
 800abf8:	f7ff fa34 	bl	800a064 <SWAPBYTE>
 800abfc:	4603      	mov	r3, r0
 800abfe:	461a      	mov	r2, r3
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	3301      	adds	r3, #1
 800ac08:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ac10:	68f8      	ldr	r0, [r7, #12]
 800ac12:	f7ff fa27 	bl	800a064 <SWAPBYTE>
 800ac16:	4603      	mov	r3, r0
 800ac18:	461a      	mov	r2, r3
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	80da      	strh	r2, [r3, #6]
}
 800ac1e:	bf00      	nop
 800ac20:	3710      	adds	r7, #16
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}

0800ac26 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac26:	b580      	push	{r7, lr}
 800ac28:	b082      	sub	sp, #8
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
 800ac2e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac30:	2180      	movs	r1, #128	; 0x80
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f002 fdd0 	bl	800d7d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ac38:	2100      	movs	r1, #0
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f002 fdcc 	bl	800d7d8 <USBD_LL_StallEP>
}
 800ac40:	bf00      	nop
 800ac42:	3708      	adds	r7, #8
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b086      	sub	sp, #24
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ac54:	2300      	movs	r3, #0
 800ac56:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d036      	beq.n	800accc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ac62:	6938      	ldr	r0, [r7, #16]
 800ac64:	f000 f836 	bl	800acd4 <USBD_GetLen>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	005b      	lsls	r3, r3, #1
 800ac70:	b29a      	uxth	r2, r3
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ac76:	7dfb      	ldrb	r3, [r7, #23]
 800ac78:	68ba      	ldr	r2, [r7, #8]
 800ac7a:	4413      	add	r3, r2
 800ac7c:	687a      	ldr	r2, [r7, #4]
 800ac7e:	7812      	ldrb	r2, [r2, #0]
 800ac80:	701a      	strb	r2, [r3, #0]
  idx++;
 800ac82:	7dfb      	ldrb	r3, [r7, #23]
 800ac84:	3301      	adds	r3, #1
 800ac86:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ac88:	7dfb      	ldrb	r3, [r7, #23]
 800ac8a:	68ba      	ldr	r2, [r7, #8]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	2203      	movs	r2, #3
 800ac90:	701a      	strb	r2, [r3, #0]
  idx++;
 800ac92:	7dfb      	ldrb	r3, [r7, #23]
 800ac94:	3301      	adds	r3, #1
 800ac96:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ac98:	e013      	b.n	800acc2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ac9a:	7dfb      	ldrb	r3, [r7, #23]
 800ac9c:	68ba      	ldr	r2, [r7, #8]
 800ac9e:	4413      	add	r3, r2
 800aca0:	693a      	ldr	r2, [r7, #16]
 800aca2:	7812      	ldrb	r2, [r2, #0]
 800aca4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	3301      	adds	r3, #1
 800acaa:	613b      	str	r3, [r7, #16]
    idx++;
 800acac:	7dfb      	ldrb	r3, [r7, #23]
 800acae:	3301      	adds	r3, #1
 800acb0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800acb2:	7dfb      	ldrb	r3, [r7, #23]
 800acb4:	68ba      	ldr	r2, [r7, #8]
 800acb6:	4413      	add	r3, r2
 800acb8:	2200      	movs	r2, #0
 800acba:	701a      	strb	r2, [r3, #0]
    idx++;
 800acbc:	7dfb      	ldrb	r3, [r7, #23]
 800acbe:	3301      	adds	r3, #1
 800acc0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d1e7      	bne.n	800ac9a <USBD_GetString+0x52>
 800acca:	e000      	b.n	800acce <USBD_GetString+0x86>
    return;
 800accc:	bf00      	nop
  }
}
 800acce:	3718      	adds	r7, #24
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b085      	sub	sp, #20
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800acdc:	2300      	movs	r3, #0
 800acde:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ace4:	e005      	b.n	800acf2 <USBD_GetLen+0x1e>
  {
    len++;
 800ace6:	7bfb      	ldrb	r3, [r7, #15]
 800ace8:	3301      	adds	r3, #1
 800acea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	3301      	adds	r3, #1
 800acf0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d1f5      	bne.n	800ace6 <USBD_GetLen+0x12>
  }

  return len;
 800acfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3714      	adds	r7, #20
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	60f8      	str	r0, [r7, #12]
 800ad10:	60b9      	str	r1, [r7, #8]
 800ad12:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2202      	movs	r2, #2
 800ad18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	68ba      	ldr	r2, [r7, #8]
 800ad2c:	2100      	movs	r1, #0
 800ad2e:	68f8      	ldr	r0, [r7, #12]
 800ad30:	f002 fddb 	bl	800d8ea <USBD_LL_Transmit>

  return USBD_OK;
 800ad34:	2300      	movs	r3, #0
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3710      	adds	r7, #16
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b084      	sub	sp, #16
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	60f8      	str	r0, [r7, #12]
 800ad46:	60b9      	str	r1, [r7, #8]
 800ad48:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	68ba      	ldr	r2, [r7, #8]
 800ad4e:	2100      	movs	r1, #0
 800ad50:	68f8      	ldr	r0, [r7, #12]
 800ad52:	f002 fdca 	bl	800d8ea <USBD_LL_Transmit>

  return USBD_OK;
 800ad56:	2300      	movs	r3, #0
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3710      	adds	r7, #16
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2203      	movs	r2, #3
 800ad70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	687a      	ldr	r2, [r7, #4]
 800ad78:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	68ba      	ldr	r2, [r7, #8]
 800ad88:	2100      	movs	r1, #0
 800ad8a:	68f8      	ldr	r0, [r7, #12]
 800ad8c:	f002 fdce 	bl	800d92c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ad90:	2300      	movs	r3, #0
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3710      	adds	r7, #16
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ad9a:	b580      	push	{r7, lr}
 800ad9c:	b084      	sub	sp, #16
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	60f8      	str	r0, [r7, #12]
 800ada2:	60b9      	str	r1, [r7, #8]
 800ada4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	68ba      	ldr	r2, [r7, #8]
 800adaa:	2100      	movs	r1, #0
 800adac:	68f8      	ldr	r0, [r7, #12]
 800adae:	f002 fdbd 	bl	800d92c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800adb2:	2300      	movs	r3, #0
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3710      	adds	r7, #16
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2204      	movs	r2, #4
 800adc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800adcc:	2300      	movs	r3, #0
 800adce:	2200      	movs	r2, #0
 800add0:	2100      	movs	r1, #0
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f002 fd89 	bl	800d8ea <USBD_LL_Transmit>

  return USBD_OK;
 800add8:	2300      	movs	r3, #0
}
 800adda:	4618      	mov	r0, r3
 800addc:	3708      	adds	r7, #8
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b082      	sub	sp, #8
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2205      	movs	r2, #5
 800adee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800adf2:	2300      	movs	r3, #0
 800adf4:	2200      	movs	r2, #0
 800adf6:	2100      	movs	r1, #0
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f002 fd97 	bl	800d92c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800adfe:	2300      	movs	r3, #0
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3708      	adds	r7, #8
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800ae0c:	4803      	ldr	r0, [pc, #12]	; (800ae1c <_cbSendSystemDesc+0x14>)
 800ae0e:	f001 fdad 	bl	800c96c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800ae12:	4803      	ldr	r0, [pc, #12]	; (800ae20 <_cbSendSystemDesc+0x18>)
 800ae14:	f001 fdaa 	bl	800c96c <SEGGER_SYSVIEW_SendSysDesc>
}
 800ae18:	bf00      	nop
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	0800e420 	.word	0x0800e420
 800ae20:	0800e464 	.word	0x0800e464

0800ae24 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800ae24:	b580      	push	{r7, lr}
 800ae26:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800ae28:	4b06      	ldr	r3, [pc, #24]	; (800ae44 <SEGGER_SYSVIEW_Conf+0x20>)
 800ae2a:	6818      	ldr	r0, [r3, #0]
 800ae2c:	4b05      	ldr	r3, [pc, #20]	; (800ae44 <SEGGER_SYSVIEW_Conf+0x20>)
 800ae2e:	6819      	ldr	r1, [r3, #0]
 800ae30:	4b05      	ldr	r3, [pc, #20]	; (800ae48 <SEGGER_SYSVIEW_Conf+0x24>)
 800ae32:	4a06      	ldr	r2, [pc, #24]	; (800ae4c <SEGGER_SYSVIEW_Conf+0x28>)
 800ae34:	f001 f918 	bl	800c068 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800ae38:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800ae3c:	f001 f958 	bl	800c0f0 <SEGGER_SYSVIEW_SetRAMBase>
}
 800ae40:	bf00      	nop
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	20000000 	.word	0x20000000
 800ae48:	0800ae09 	.word	0x0800ae09
 800ae4c:	0800e540 	.word	0x0800e540

0800ae50 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800ae50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae52:	b085      	sub	sp, #20
 800ae54:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800ae56:	2300      	movs	r3, #0
 800ae58:	607b      	str	r3, [r7, #4]
 800ae5a:	e033      	b.n	800aec4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800ae5c:	491e      	ldr	r1, [pc, #120]	; (800aed8 <_cbSendTaskList+0x88>)
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	4613      	mov	r3, r2
 800ae62:	009b      	lsls	r3, r3, #2
 800ae64:	4413      	add	r3, r2
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	440b      	add	r3, r1
 800ae6a:	6818      	ldr	r0, [r3, #0]
 800ae6c:	491a      	ldr	r1, [pc, #104]	; (800aed8 <_cbSendTaskList+0x88>)
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	4613      	mov	r3, r2
 800ae72:	009b      	lsls	r3, r3, #2
 800ae74:	4413      	add	r3, r2
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	440b      	add	r3, r1
 800ae7a:	3304      	adds	r3, #4
 800ae7c:	6819      	ldr	r1, [r3, #0]
 800ae7e:	4c16      	ldr	r4, [pc, #88]	; (800aed8 <_cbSendTaskList+0x88>)
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	4613      	mov	r3, r2
 800ae84:	009b      	lsls	r3, r3, #2
 800ae86:	4413      	add	r3, r2
 800ae88:	009b      	lsls	r3, r3, #2
 800ae8a:	4423      	add	r3, r4
 800ae8c:	3308      	adds	r3, #8
 800ae8e:	681c      	ldr	r4, [r3, #0]
 800ae90:	4d11      	ldr	r5, [pc, #68]	; (800aed8 <_cbSendTaskList+0x88>)
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	4613      	mov	r3, r2
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	4413      	add	r3, r2
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	442b      	add	r3, r5
 800ae9e:	330c      	adds	r3, #12
 800aea0:	681d      	ldr	r5, [r3, #0]
 800aea2:	4e0d      	ldr	r6, [pc, #52]	; (800aed8 <_cbSendTaskList+0x88>)
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	4613      	mov	r3, r2
 800aea8:	009b      	lsls	r3, r3, #2
 800aeaa:	4413      	add	r3, r2
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	4433      	add	r3, r6
 800aeb0:	3310      	adds	r3, #16
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	9300      	str	r3, [sp, #0]
 800aeb6:	462b      	mov	r3, r5
 800aeb8:	4622      	mov	r2, r4
 800aeba:	f000 f8bd 	bl	800b038 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	3301      	adds	r3, #1
 800aec2:	607b      	str	r3, [r7, #4]
 800aec4:	4b05      	ldr	r3, [pc, #20]	; (800aedc <_cbSendTaskList+0x8c>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d3c6      	bcc.n	800ae5c <_cbSendTaskList+0xc>
  }
}
 800aece:	bf00      	nop
 800aed0:	bf00      	nop
 800aed2:	370c      	adds	r7, #12
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aed8:	2000850c 	.word	0x2000850c
 800aedc:	200085ac 	.word	0x200085ac

0800aee0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800aee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aee4:	b082      	sub	sp, #8
 800aee6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800aee8:	f7fc fc44 	bl	8007774 <xTaskGetTickCountFromISR>
 800aeec:	4603      	mov	r3, r0
 800aeee:	2200      	movs	r2, #0
 800aef0:	469a      	mov	sl, r3
 800aef2:	4693      	mov	fp, r2
 800aef4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800aef8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aefc:	4602      	mov	r2, r0
 800aefe:	460b      	mov	r3, r1
 800af00:	f04f 0a00 	mov.w	sl, #0
 800af04:	f04f 0b00 	mov.w	fp, #0
 800af08:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800af0c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800af10:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800af14:	4652      	mov	r2, sl
 800af16:	465b      	mov	r3, fp
 800af18:	1a14      	subs	r4, r2, r0
 800af1a:	eb63 0501 	sbc.w	r5, r3, r1
 800af1e:	f04f 0200 	mov.w	r2, #0
 800af22:	f04f 0300 	mov.w	r3, #0
 800af26:	00ab      	lsls	r3, r5, #2
 800af28:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800af2c:	00a2      	lsls	r2, r4, #2
 800af2e:	4614      	mov	r4, r2
 800af30:	461d      	mov	r5, r3
 800af32:	eb14 0800 	adds.w	r8, r4, r0
 800af36:	eb45 0901 	adc.w	r9, r5, r1
 800af3a:	f04f 0200 	mov.w	r2, #0
 800af3e:	f04f 0300 	mov.w	r3, #0
 800af42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800af46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800af4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800af4e:	4690      	mov	r8, r2
 800af50:	4699      	mov	r9, r3
 800af52:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800af56:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800af5a:	4610      	mov	r0, r2
 800af5c:	4619      	mov	r1, r3
 800af5e:	3708      	adds	r7, #8
 800af60:	46bd      	mov	sp, r7
 800af62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800af68 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800af68:	b580      	push	{r7, lr}
 800af6a:	b086      	sub	sp, #24
 800af6c:	af02      	add	r7, sp, #8
 800af6e:	60f8      	str	r0, [r7, #12]
 800af70:	60b9      	str	r1, [r7, #8]
 800af72:	607a      	str	r2, [r7, #4]
 800af74:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800af76:	2205      	movs	r2, #5
 800af78:	492b      	ldr	r1, [pc, #172]	; (800b028 <SYSVIEW_AddTask+0xc0>)
 800af7a:	68b8      	ldr	r0, [r7, #8]
 800af7c:	f002 fd78 	bl	800da70 <memcmp>
 800af80:	4603      	mov	r3, r0
 800af82:	2b00      	cmp	r3, #0
 800af84:	d04b      	beq.n	800b01e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800af86:	4b29      	ldr	r3, [pc, #164]	; (800b02c <SYSVIEW_AddTask+0xc4>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	2b07      	cmp	r3, #7
 800af8c:	d903      	bls.n	800af96 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800af8e:	4828      	ldr	r0, [pc, #160]	; (800b030 <SYSVIEW_AddTask+0xc8>)
 800af90:	f001 fffe 	bl	800cf90 <SEGGER_SYSVIEW_Warn>
    return;
 800af94:	e044      	b.n	800b020 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800af96:	4b25      	ldr	r3, [pc, #148]	; (800b02c <SYSVIEW_AddTask+0xc4>)
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	4926      	ldr	r1, [pc, #152]	; (800b034 <SYSVIEW_AddTask+0xcc>)
 800af9c:	4613      	mov	r3, r2
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	4413      	add	r3, r2
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	440b      	add	r3, r1
 800afa6:	68fa      	ldr	r2, [r7, #12]
 800afa8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800afaa:	4b20      	ldr	r3, [pc, #128]	; (800b02c <SYSVIEW_AddTask+0xc4>)
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	4921      	ldr	r1, [pc, #132]	; (800b034 <SYSVIEW_AddTask+0xcc>)
 800afb0:	4613      	mov	r3, r2
 800afb2:	009b      	lsls	r3, r3, #2
 800afb4:	4413      	add	r3, r2
 800afb6:	009b      	lsls	r3, r3, #2
 800afb8:	440b      	add	r3, r1
 800afba:	3304      	adds	r3, #4
 800afbc:	68ba      	ldr	r2, [r7, #8]
 800afbe:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800afc0:	4b1a      	ldr	r3, [pc, #104]	; (800b02c <SYSVIEW_AddTask+0xc4>)
 800afc2:	681a      	ldr	r2, [r3, #0]
 800afc4:	491b      	ldr	r1, [pc, #108]	; (800b034 <SYSVIEW_AddTask+0xcc>)
 800afc6:	4613      	mov	r3, r2
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	4413      	add	r3, r2
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	440b      	add	r3, r1
 800afd0:	3308      	adds	r3, #8
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800afd6:	4b15      	ldr	r3, [pc, #84]	; (800b02c <SYSVIEW_AddTask+0xc4>)
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	4916      	ldr	r1, [pc, #88]	; (800b034 <SYSVIEW_AddTask+0xcc>)
 800afdc:	4613      	mov	r3, r2
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	4413      	add	r3, r2
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	440b      	add	r3, r1
 800afe6:	330c      	adds	r3, #12
 800afe8:	683a      	ldr	r2, [r7, #0]
 800afea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800afec:	4b0f      	ldr	r3, [pc, #60]	; (800b02c <SYSVIEW_AddTask+0xc4>)
 800afee:	681a      	ldr	r2, [r3, #0]
 800aff0:	4910      	ldr	r1, [pc, #64]	; (800b034 <SYSVIEW_AddTask+0xcc>)
 800aff2:	4613      	mov	r3, r2
 800aff4:	009b      	lsls	r3, r3, #2
 800aff6:	4413      	add	r3, r2
 800aff8:	009b      	lsls	r3, r3, #2
 800affa:	440b      	add	r3, r1
 800affc:	3310      	adds	r3, #16
 800affe:	69ba      	ldr	r2, [r7, #24]
 800b000:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800b002:	4b0a      	ldr	r3, [pc, #40]	; (800b02c <SYSVIEW_AddTask+0xc4>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	3301      	adds	r3, #1
 800b008:	4a08      	ldr	r2, [pc, #32]	; (800b02c <SYSVIEW_AddTask+0xc4>)
 800b00a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800b00c:	69bb      	ldr	r3, [r7, #24]
 800b00e:	9300      	str	r3, [sp, #0]
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	68b9      	ldr	r1, [r7, #8]
 800b016:	68f8      	ldr	r0, [r7, #12]
 800b018:	f000 f80e 	bl	800b038 <SYSVIEW_SendTaskInfo>
 800b01c:	e000      	b.n	800b020 <SYSVIEW_AddTask+0xb8>
    return;
 800b01e:	bf00      	nop

}
 800b020:	3710      	adds	r7, #16
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
 800b026:	bf00      	nop
 800b028:	0800e474 	.word	0x0800e474
 800b02c:	200085ac 	.word	0x200085ac
 800b030:	0800e47c 	.word	0x0800e47c
 800b034:	2000850c 	.word	0x2000850c

0800b038 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800b038:	b580      	push	{r7, lr}
 800b03a:	b08a      	sub	sp, #40	; 0x28
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	607a      	str	r2, [r7, #4]
 800b044:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800b046:	f107 0314 	add.w	r3, r7, #20
 800b04a:	2214      	movs	r2, #20
 800b04c:	2100      	movs	r1, #0
 800b04e:	4618      	mov	r0, r3
 800b050:	f002 fd2c 	bl	800daac <memset>
  TaskInfo.TaskID     = TaskID;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800b064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b066:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800b068:	f107 0314 	add.w	r3, r7, #20
 800b06c:	4618      	mov	r0, r3
 800b06e:	f001 fb85 	bl	800c77c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800b072:	bf00      	nop
 800b074:	3728      	adds	r7, #40	; 0x28
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
	...

0800b07c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b082      	sub	sp, #8
 800b080:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800b082:	4b26      	ldr	r3, [pc, #152]	; (800b11c <_DoInit+0xa0>)
 800b084:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800b086:	22a8      	movs	r2, #168	; 0xa8
 800b088:	2100      	movs	r1, #0
 800b08a:	6838      	ldr	r0, [r7, #0]
 800b08c:	f002 fd0e 	bl	800daac <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	2203      	movs	r2, #3
 800b094:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	2203      	movs	r2, #3
 800b09a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	4a20      	ldr	r2, [pc, #128]	; (800b120 <_DoInit+0xa4>)
 800b0a0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	4a1f      	ldr	r2, [pc, #124]	; (800b124 <_DoInit+0xa8>)
 800b0a6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b0ae:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	4a16      	ldr	r2, [pc, #88]	; (800b120 <_DoInit+0xa4>)
 800b0c6:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	4a17      	ldr	r2, [pc, #92]	; (800b128 <_DoInit+0xac>)
 800b0cc:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	2210      	movs	r2, #16
 800b0d2:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800b0e6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	607b      	str	r3, [r7, #4]
 800b0ee:	e00c      	b.n	800b10a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f1c3 030f 	rsb	r3, r3, #15
 800b0f6:	4a0d      	ldr	r2, [pc, #52]	; (800b12c <_DoInit+0xb0>)
 800b0f8:	5cd1      	ldrb	r1, [r2, r3]
 800b0fa:	683a      	ldr	r2, [r7, #0]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	4413      	add	r3, r2
 800b100:	460a      	mov	r2, r1
 800b102:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	3301      	adds	r3, #1
 800b108:	607b      	str	r3, [r7, #4]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2b0f      	cmp	r3, #15
 800b10e:	d9ef      	bls.n	800b0f0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800b110:	f3bf 8f5f 	dmb	sy
}
 800b114:	bf00      	nop
 800b116:	3708      	adds	r7, #8
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}
 800b11c:	200085b0 	.word	0x200085b0
 800b120:	0800e4cc 	.word	0x0800e4cc
 800b124:	20008658 	.word	0x20008658
 800b128:	20008a58 	.word	0x20008a58
 800b12c:	0800e548 	.word	0x0800e548

0800b130 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800b130:	b580      	push	{r7, lr}
 800b132:	b08c      	sub	sp, #48	; 0x30
 800b134:	af00      	add	r7, sp, #0
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	60b9      	str	r1, [r7, #8]
 800b13a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800b13c:	4b3e      	ldr	r3, [pc, #248]	; (800b238 <SEGGER_RTT_ReadNoLock+0x108>)
 800b13e:	623b      	str	r3, [r7, #32]
 800b140:	6a3b      	ldr	r3, [r7, #32]
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	b2db      	uxtb	r3, r3
 800b146:	2b00      	cmp	r3, #0
 800b148:	d101      	bne.n	800b14e <SEGGER_RTT_ReadNoLock+0x1e>
 800b14a:	f7ff ff97 	bl	800b07c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800b14e:	68fa      	ldr	r2, [r7, #12]
 800b150:	4613      	mov	r3, r2
 800b152:	005b      	lsls	r3, r3, #1
 800b154:	4413      	add	r3, r2
 800b156:	00db      	lsls	r3, r3, #3
 800b158:	3360      	adds	r3, #96	; 0x60
 800b15a:	4a37      	ldr	r2, [pc, #220]	; (800b238 <SEGGER_RTT_ReadNoLock+0x108>)
 800b15c:	4413      	add	r3, r2
 800b15e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800b164:	69fb      	ldr	r3, [r7, #28]
 800b166:	691b      	ldr	r3, [r3, #16]
 800b168:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800b16a:	69fb      	ldr	r3, [r7, #28]
 800b16c:	68db      	ldr	r3, [r3, #12]
 800b16e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800b170:	2300      	movs	r3, #0
 800b172:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800b174:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b176:	69bb      	ldr	r3, [r7, #24]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d92b      	bls.n	800b1d4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800b17c:	69fb      	ldr	r3, [r7, #28]
 800b17e:	689a      	ldr	r2, [r3, #8]
 800b180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b182:	1ad3      	subs	r3, r2, r3
 800b184:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800b186:	697a      	ldr	r2, [r7, #20]
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	4293      	cmp	r3, r2
 800b18c:	bf28      	it	cs
 800b18e:	4613      	movcs	r3, r2
 800b190:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800b192:	69fb      	ldr	r3, [r7, #28]
 800b194:	685a      	ldr	r2, [r3, #4]
 800b196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b198:	4413      	add	r3, r2
 800b19a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800b19c:	697a      	ldr	r2, [r7, #20]
 800b19e:	6939      	ldr	r1, [r7, #16]
 800b1a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1a2:	f002 fc75 	bl	800da90 <memcpy>
    NumBytesRead += NumBytesRem;
 800b1a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	4413      	add	r3, r2
 800b1ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800b1ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	4413      	add	r3, r2
 800b1b4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800b1b6:	687a      	ldr	r2, [r7, #4]
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	1ad3      	subs	r3, r2, r3
 800b1bc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800b1be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	4413      	add	r3, r2
 800b1c4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800b1c6:	69fb      	ldr	r3, [r7, #28]
 800b1c8:	689b      	ldr	r3, [r3, #8]
 800b1ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	d101      	bne.n	800b1d4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800b1d4:	69ba      	ldr	r2, [r7, #24]
 800b1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d8:	1ad3      	subs	r3, r2, r3
 800b1da:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800b1dc:	697a      	ldr	r2, [r7, #20]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	bf28      	it	cs
 800b1e4:	4613      	movcs	r3, r2
 800b1e6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d019      	beq.n	800b222 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800b1ee:	69fb      	ldr	r3, [r7, #28]
 800b1f0:	685a      	ldr	r2, [r3, #4]
 800b1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f4:	4413      	add	r3, r2
 800b1f6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800b1f8:	697a      	ldr	r2, [r7, #20]
 800b1fa:	6939      	ldr	r1, [r7, #16]
 800b1fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1fe:	f002 fc47 	bl	800da90 <memcpy>
    NumBytesRead += NumBytesRem;
 800b202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	4413      	add	r3, r2
 800b208:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800b20a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	4413      	add	r3, r2
 800b210:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800b212:	687a      	ldr	r2, [r7, #4]
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	1ad3      	subs	r3, r2, r3
 800b218:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800b21a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	4413      	add	r3, r2
 800b220:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800b222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b224:	2b00      	cmp	r3, #0
 800b226:	d002      	beq.n	800b22e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b22c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800b22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b230:	4618      	mov	r0, r3
 800b232:	3730      	adds	r7, #48	; 0x30
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}
 800b238:	200085b0 	.word	0x200085b0

0800b23c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b088      	sub	sp, #32
 800b240:	af00      	add	r7, sp, #0
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	607a      	str	r2, [r7, #4]
 800b248:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800b24a:	4b3d      	ldr	r3, [pc, #244]	; (800b340 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800b24c:	61bb      	str	r3, [r7, #24]
 800b24e:	69bb      	ldr	r3, [r7, #24]
 800b250:	781b      	ldrb	r3, [r3, #0]
 800b252:	b2db      	uxtb	r3, r3
 800b254:	2b00      	cmp	r3, #0
 800b256:	d101      	bne.n	800b25c <SEGGER_RTT_AllocUpBuffer+0x20>
 800b258:	f7ff ff10 	bl	800b07c <_DoInit>
  SEGGER_RTT_LOCK();
 800b25c:	f3ef 8311 	mrs	r3, BASEPRI
 800b260:	f04f 0120 	mov.w	r1, #32
 800b264:	f381 8811 	msr	BASEPRI, r1
 800b268:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800b26a:	4b35      	ldr	r3, [pc, #212]	; (800b340 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800b26c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800b26e:	2300      	movs	r3, #0
 800b270:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800b272:	6939      	ldr	r1, [r7, #16]
 800b274:	69fb      	ldr	r3, [r7, #28]
 800b276:	1c5a      	adds	r2, r3, #1
 800b278:	4613      	mov	r3, r2
 800b27a:	005b      	lsls	r3, r3, #1
 800b27c:	4413      	add	r3, r2
 800b27e:	00db      	lsls	r3, r3, #3
 800b280:	440b      	add	r3, r1
 800b282:	3304      	adds	r3, #4
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d008      	beq.n	800b29c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800b28a:	69fb      	ldr	r3, [r7, #28]
 800b28c:	3301      	adds	r3, #1
 800b28e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	691b      	ldr	r3, [r3, #16]
 800b294:	69fa      	ldr	r2, [r7, #28]
 800b296:	429a      	cmp	r2, r3
 800b298:	dbeb      	blt.n	800b272 <SEGGER_RTT_AllocUpBuffer+0x36>
 800b29a:	e000      	b.n	800b29e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800b29c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	691b      	ldr	r3, [r3, #16]
 800b2a2:	69fa      	ldr	r2, [r7, #28]
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	da3f      	bge.n	800b328 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800b2a8:	6939      	ldr	r1, [r7, #16]
 800b2aa:	69fb      	ldr	r3, [r7, #28]
 800b2ac:	1c5a      	adds	r2, r3, #1
 800b2ae:	4613      	mov	r3, r2
 800b2b0:	005b      	lsls	r3, r3, #1
 800b2b2:	4413      	add	r3, r2
 800b2b4:	00db      	lsls	r3, r3, #3
 800b2b6:	440b      	add	r3, r1
 800b2b8:	68fa      	ldr	r2, [r7, #12]
 800b2ba:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800b2bc:	6939      	ldr	r1, [r7, #16]
 800b2be:	69fb      	ldr	r3, [r7, #28]
 800b2c0:	1c5a      	adds	r2, r3, #1
 800b2c2:	4613      	mov	r3, r2
 800b2c4:	005b      	lsls	r3, r3, #1
 800b2c6:	4413      	add	r3, r2
 800b2c8:	00db      	lsls	r3, r3, #3
 800b2ca:	440b      	add	r3, r1
 800b2cc:	3304      	adds	r3, #4
 800b2ce:	68ba      	ldr	r2, [r7, #8]
 800b2d0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800b2d2:	6939      	ldr	r1, [r7, #16]
 800b2d4:	69fa      	ldr	r2, [r7, #28]
 800b2d6:	4613      	mov	r3, r2
 800b2d8:	005b      	lsls	r3, r3, #1
 800b2da:	4413      	add	r3, r2
 800b2dc:	00db      	lsls	r3, r3, #3
 800b2de:	440b      	add	r3, r1
 800b2e0:	3320      	adds	r3, #32
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800b2e6:	6939      	ldr	r1, [r7, #16]
 800b2e8:	69fa      	ldr	r2, [r7, #28]
 800b2ea:	4613      	mov	r3, r2
 800b2ec:	005b      	lsls	r3, r3, #1
 800b2ee:	4413      	add	r3, r2
 800b2f0:	00db      	lsls	r3, r3, #3
 800b2f2:	440b      	add	r3, r1
 800b2f4:	3328      	adds	r3, #40	; 0x28
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800b2fa:	6939      	ldr	r1, [r7, #16]
 800b2fc:	69fa      	ldr	r2, [r7, #28]
 800b2fe:	4613      	mov	r3, r2
 800b300:	005b      	lsls	r3, r3, #1
 800b302:	4413      	add	r3, r2
 800b304:	00db      	lsls	r3, r3, #3
 800b306:	440b      	add	r3, r1
 800b308:	3324      	adds	r3, #36	; 0x24
 800b30a:	2200      	movs	r2, #0
 800b30c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800b30e:	6939      	ldr	r1, [r7, #16]
 800b310:	69fa      	ldr	r2, [r7, #28]
 800b312:	4613      	mov	r3, r2
 800b314:	005b      	lsls	r3, r3, #1
 800b316:	4413      	add	r3, r2
 800b318:	00db      	lsls	r3, r3, #3
 800b31a:	440b      	add	r3, r1
 800b31c:	332c      	adds	r3, #44	; 0x2c
 800b31e:	683a      	ldr	r2, [r7, #0]
 800b320:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800b322:	f3bf 8f5f 	dmb	sy
 800b326:	e002      	b.n	800b32e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800b328:	f04f 33ff 	mov.w	r3, #4294967295
 800b32c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800b334:	69fb      	ldr	r3, [r7, #28]
}
 800b336:	4618      	mov	r0, r3
 800b338:	3720      	adds	r7, #32
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop
 800b340:	200085b0 	.word	0x200085b0

0800b344 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800b344:	b580      	push	{r7, lr}
 800b346:	b08a      	sub	sp, #40	; 0x28
 800b348:	af00      	add	r7, sp, #0
 800b34a:	60f8      	str	r0, [r7, #12]
 800b34c:	60b9      	str	r1, [r7, #8]
 800b34e:	607a      	str	r2, [r7, #4]
 800b350:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800b352:	4b21      	ldr	r3, [pc, #132]	; (800b3d8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800b354:	623b      	str	r3, [r7, #32]
 800b356:	6a3b      	ldr	r3, [r7, #32]
 800b358:	781b      	ldrb	r3, [r3, #0]
 800b35a:	b2db      	uxtb	r3, r3
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d101      	bne.n	800b364 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800b360:	f7ff fe8c 	bl	800b07c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800b364:	4b1c      	ldr	r3, [pc, #112]	; (800b3d8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800b366:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2b02      	cmp	r3, #2
 800b36c:	d82c      	bhi.n	800b3c8 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800b36e:	f3ef 8311 	mrs	r3, BASEPRI
 800b372:	f04f 0120 	mov.w	r1, #32
 800b376:	f381 8811 	msr	BASEPRI, r1
 800b37a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800b37c:	68fa      	ldr	r2, [r7, #12]
 800b37e:	4613      	mov	r3, r2
 800b380:	005b      	lsls	r3, r3, #1
 800b382:	4413      	add	r3, r2
 800b384:	00db      	lsls	r3, r3, #3
 800b386:	3360      	adds	r3, #96	; 0x60
 800b388:	69fa      	ldr	r2, [r7, #28]
 800b38a:	4413      	add	r3, r2
 800b38c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d00e      	beq.n	800b3b2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	68ba      	ldr	r2, [r7, #8]
 800b398:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	683a      	ldr	r2, [r7, #0]
 800b3a4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3b6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800b3b8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800b3bc:	69bb      	ldr	r3, [r7, #24]
 800b3be:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	627b      	str	r3, [r7, #36]	; 0x24
 800b3c6:	e002      	b.n	800b3ce <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800b3c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b3cc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800b3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3728      	adds	r7, #40	; 0x28
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}
 800b3d8:	200085b0 	.word	0x200085b0

0800b3dc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800b3dc:	b480      	push	{r7}
 800b3de:	b087      	sub	sp, #28
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	60b9      	str	r1, [r7, #8]
 800b3e6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d00f      	beq.n	800b412 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800b3f2:	e002      	b.n	800b3fa <_EncodeStr+0x1e>
      Len++;
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800b3fa:	68ba      	ldr	r2, [r7, #8]
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	4413      	add	r3, r2
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d1f6      	bne.n	800b3f4 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800b406:	693a      	ldr	r2, [r7, #16]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d901      	bls.n	800b412 <_EncodeStr+0x36>
      Len = Limit;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	2bfe      	cmp	r3, #254	; 0xfe
 800b416:	d806      	bhi.n	800b426 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	1c5a      	adds	r2, r3, #1
 800b41c:	60fa      	str	r2, [r7, #12]
 800b41e:	693a      	ldr	r2, [r7, #16]
 800b420:	b2d2      	uxtb	r2, r2
 800b422:	701a      	strb	r2, [r3, #0]
 800b424:	e011      	b.n	800b44a <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	1c5a      	adds	r2, r3, #1
 800b42a:	60fa      	str	r2, [r7, #12]
 800b42c:	22ff      	movs	r2, #255	; 0xff
 800b42e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	1c5a      	adds	r2, r3, #1
 800b434:	60fa      	str	r2, [r7, #12]
 800b436:	693a      	ldr	r2, [r7, #16]
 800b438:	b2d2      	uxtb	r2, r2
 800b43a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	0a19      	lsrs	r1, r3, #8
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	1c5a      	adds	r2, r3, #1
 800b444:	60fa      	str	r2, [r7, #12]
 800b446:	b2ca      	uxtb	r2, r1
 800b448:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800b44a:	2300      	movs	r3, #0
 800b44c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800b44e:	e00a      	b.n	800b466 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800b450:	68ba      	ldr	r2, [r7, #8]
 800b452:	1c53      	adds	r3, r2, #1
 800b454:	60bb      	str	r3, [r7, #8]
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	1c59      	adds	r1, r3, #1
 800b45a:	60f9      	str	r1, [r7, #12]
 800b45c:	7812      	ldrb	r2, [r2, #0]
 800b45e:	701a      	strb	r2, [r3, #0]
    n++;
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	3301      	adds	r3, #1
 800b464:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800b466:	697a      	ldr	r2, [r7, #20]
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d3f0      	bcc.n	800b450 <_EncodeStr+0x74>
  }
  return pPayload;
 800b46e:	68fb      	ldr	r3, [r7, #12]
}
 800b470:	4618      	mov	r0, r3
 800b472:	371c      	adds	r7, #28
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr

0800b47c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800b47c:	b480      	push	{r7}
 800b47e:	b083      	sub	sp, #12
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	3307      	adds	r3, #7
}
 800b488:	4618      	mov	r0, r3
 800b48a:	370c      	adds	r7, #12
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800b494:	b580      	push	{r7, lr}
 800b496:	b082      	sub	sp, #8
 800b498:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800b49a:	4b35      	ldr	r3, [pc, #212]	; (800b570 <_HandleIncomingPacket+0xdc>)
 800b49c:	7e1b      	ldrb	r3, [r3, #24]
 800b49e:	4618      	mov	r0, r3
 800b4a0:	1cfb      	adds	r3, r7, #3
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	f7ff fe43 	bl	800b130 <SEGGER_RTT_ReadNoLock>
 800b4aa:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d052      	beq.n	800b558 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800b4b2:	78fb      	ldrb	r3, [r7, #3]
 800b4b4:	2b80      	cmp	r3, #128	; 0x80
 800b4b6:	d031      	beq.n	800b51c <_HandleIncomingPacket+0x88>
 800b4b8:	2b80      	cmp	r3, #128	; 0x80
 800b4ba:	dc40      	bgt.n	800b53e <_HandleIncomingPacket+0xaa>
 800b4bc:	2b07      	cmp	r3, #7
 800b4be:	dc15      	bgt.n	800b4ec <_HandleIncomingPacket+0x58>
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	dd3c      	ble.n	800b53e <_HandleIncomingPacket+0xaa>
 800b4c4:	3b01      	subs	r3, #1
 800b4c6:	2b06      	cmp	r3, #6
 800b4c8:	d839      	bhi.n	800b53e <_HandleIncomingPacket+0xaa>
 800b4ca:	a201      	add	r2, pc, #4	; (adr r2, 800b4d0 <_HandleIncomingPacket+0x3c>)
 800b4cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d0:	0800b4f3 	.word	0x0800b4f3
 800b4d4:	0800b4f9 	.word	0x0800b4f9
 800b4d8:	0800b4ff 	.word	0x0800b4ff
 800b4dc:	0800b505 	.word	0x0800b505
 800b4e0:	0800b50b 	.word	0x0800b50b
 800b4e4:	0800b511 	.word	0x0800b511
 800b4e8:	0800b517 	.word	0x0800b517
 800b4ec:	2b7f      	cmp	r3, #127	; 0x7f
 800b4ee:	d035      	beq.n	800b55c <_HandleIncomingPacket+0xc8>
 800b4f0:	e025      	b.n	800b53e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800b4f2:	f000 ffc9 	bl	800c488 <SEGGER_SYSVIEW_Start>
      break;
 800b4f6:	e036      	b.n	800b566 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800b4f8:	f001 f880 	bl	800c5fc <SEGGER_SYSVIEW_Stop>
      break;
 800b4fc:	e033      	b.n	800b566 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800b4fe:	f001 fa59 	bl	800c9b4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800b502:	e030      	b.n	800b566 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800b504:	f001 fa1e 	bl	800c944 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800b508:	e02d      	b.n	800b566 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800b50a:	f001 f89d 	bl	800c648 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800b50e:	e02a      	b.n	800b566 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800b510:	f001 fcec 	bl	800ceec <SEGGER_SYSVIEW_SendNumModules>
      break;
 800b514:	e027      	b.n	800b566 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800b516:	f001 fccb 	bl	800ceb0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800b51a:	e024      	b.n	800b566 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800b51c:	4b14      	ldr	r3, [pc, #80]	; (800b570 <_HandleIncomingPacket+0xdc>)
 800b51e:	7e1b      	ldrb	r3, [r3, #24]
 800b520:	4618      	mov	r0, r3
 800b522:	1cfb      	adds	r3, r7, #3
 800b524:	2201      	movs	r2, #1
 800b526:	4619      	mov	r1, r3
 800b528:	f7ff fe02 	bl	800b130 <SEGGER_RTT_ReadNoLock>
 800b52c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d015      	beq.n	800b560 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800b534:	78fb      	ldrb	r3, [r7, #3]
 800b536:	4618      	mov	r0, r3
 800b538:	f001 fc3a 	bl	800cdb0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800b53c:	e010      	b.n	800b560 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800b53e:	78fb      	ldrb	r3, [r7, #3]
 800b540:	b25b      	sxtb	r3, r3
 800b542:	2b00      	cmp	r3, #0
 800b544:	da0e      	bge.n	800b564 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800b546:	4b0a      	ldr	r3, [pc, #40]	; (800b570 <_HandleIncomingPacket+0xdc>)
 800b548:	7e1b      	ldrb	r3, [r3, #24]
 800b54a:	4618      	mov	r0, r3
 800b54c:	1cfb      	adds	r3, r7, #3
 800b54e:	2201      	movs	r2, #1
 800b550:	4619      	mov	r1, r3
 800b552:	f7ff fded 	bl	800b130 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800b556:	e005      	b.n	800b564 <_HandleIncomingPacket+0xd0>
    }
  }
 800b558:	bf00      	nop
 800b55a:	e004      	b.n	800b566 <_HandleIncomingPacket+0xd2>
      break;
 800b55c:	bf00      	nop
 800b55e:	e002      	b.n	800b566 <_HandleIncomingPacket+0xd2>
      break;
 800b560:	bf00      	nop
 800b562:	e000      	b.n	800b566 <_HandleIncomingPacket+0xd2>
      break;
 800b564:	bf00      	nop
}
 800b566:	bf00      	nop
 800b568:	3708      	adds	r7, #8
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}
 800b56e:	bf00      	nop
 800b570:	20009a70 	.word	0x20009a70

0800b574 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800b574:	b580      	push	{r7, lr}
 800b576:	b08c      	sub	sp, #48	; 0x30
 800b578:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800b57a:	2301      	movs	r3, #1
 800b57c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800b57e:	1d3b      	adds	r3, r7, #4
 800b580:	3301      	adds	r3, #1
 800b582:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800b584:	69fb      	ldr	r3, [r7, #28]
 800b586:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b588:	4b31      	ldr	r3, [pc, #196]	; (800b650 <_TrySendOverflowPacket+0xdc>)
 800b58a:	695b      	ldr	r3, [r3, #20]
 800b58c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b58e:	e00b      	b.n	800b5a8 <_TrySendOverflowPacket+0x34>
 800b590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b592:	b2da      	uxtb	r2, r3
 800b594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b596:	1c59      	adds	r1, r3, #1
 800b598:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b59a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b59e:	b2d2      	uxtb	r2, r2
 800b5a0:	701a      	strb	r2, [r3, #0]
 800b5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a4:	09db      	lsrs	r3, r3, #7
 800b5a6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5aa:	2b7f      	cmp	r3, #127	; 0x7f
 800b5ac:	d8f0      	bhi.n	800b590 <_TrySendOverflowPacket+0x1c>
 800b5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b0:	1c5a      	adds	r2, r3, #1
 800b5b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b5b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5b6:	b2d2      	uxtb	r2, r2
 800b5b8:	701a      	strb	r2, [r3, #0]
 800b5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5bc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800b5be:	4b25      	ldr	r3, [pc, #148]	; (800b654 <_TrySendOverflowPacket+0xe0>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800b5c4:	4b22      	ldr	r3, [pc, #136]	; (800b650 <_TrySendOverflowPacket+0xdc>)
 800b5c6:	68db      	ldr	r3, [r3, #12]
 800b5c8:	69ba      	ldr	r2, [r7, #24]
 800b5ca:	1ad3      	subs	r3, r2, r3
 800b5cc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800b5ce:	69fb      	ldr	r3, [r7, #28]
 800b5d0:	627b      	str	r3, [r7, #36]	; 0x24
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	623b      	str	r3, [r7, #32]
 800b5d6:	e00b      	b.n	800b5f0 <_TrySendOverflowPacket+0x7c>
 800b5d8:	6a3b      	ldr	r3, [r7, #32]
 800b5da:	b2da      	uxtb	r2, r3
 800b5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5de:	1c59      	adds	r1, r3, #1
 800b5e0:	6279      	str	r1, [r7, #36]	; 0x24
 800b5e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b5e6:	b2d2      	uxtb	r2, r2
 800b5e8:	701a      	strb	r2, [r3, #0]
 800b5ea:	6a3b      	ldr	r3, [r7, #32]
 800b5ec:	09db      	lsrs	r3, r3, #7
 800b5ee:	623b      	str	r3, [r7, #32]
 800b5f0:	6a3b      	ldr	r3, [r7, #32]
 800b5f2:	2b7f      	cmp	r3, #127	; 0x7f
 800b5f4:	d8f0      	bhi.n	800b5d8 <_TrySendOverflowPacket+0x64>
 800b5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f8:	1c5a      	adds	r2, r3, #1
 800b5fa:	627a      	str	r2, [r7, #36]	; 0x24
 800b5fc:	6a3a      	ldr	r2, [r7, #32]
 800b5fe:	b2d2      	uxtb	r2, r2
 800b600:	701a      	strb	r2, [r3, #0]
 800b602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b604:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800b606:	4b12      	ldr	r3, [pc, #72]	; (800b650 <_TrySendOverflowPacket+0xdc>)
 800b608:	785b      	ldrb	r3, [r3, #1]
 800b60a:	4618      	mov	r0, r3
 800b60c:	1d3b      	adds	r3, r7, #4
 800b60e:	69fa      	ldr	r2, [r7, #28]
 800b610:	1ad3      	subs	r3, r2, r3
 800b612:	461a      	mov	r2, r3
 800b614:	1d3b      	adds	r3, r7, #4
 800b616:	4619      	mov	r1, r3
 800b618:	f7f4 fde2 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800b61c:	4603      	mov	r3, r0
 800b61e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d009      	beq.n	800b63a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800b626:	4a0a      	ldr	r2, [pc, #40]	; (800b650 <_TrySendOverflowPacket+0xdc>)
 800b628:	69bb      	ldr	r3, [r7, #24]
 800b62a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800b62c:	4b08      	ldr	r3, [pc, #32]	; (800b650 <_TrySendOverflowPacket+0xdc>)
 800b62e:	781b      	ldrb	r3, [r3, #0]
 800b630:	3b01      	subs	r3, #1
 800b632:	b2da      	uxtb	r2, r3
 800b634:	4b06      	ldr	r3, [pc, #24]	; (800b650 <_TrySendOverflowPacket+0xdc>)
 800b636:	701a      	strb	r2, [r3, #0]
 800b638:	e004      	b.n	800b644 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800b63a:	4b05      	ldr	r3, [pc, #20]	; (800b650 <_TrySendOverflowPacket+0xdc>)
 800b63c:	695b      	ldr	r3, [r3, #20]
 800b63e:	3301      	adds	r3, #1
 800b640:	4a03      	ldr	r2, [pc, #12]	; (800b650 <_TrySendOverflowPacket+0xdc>)
 800b642:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800b644:	693b      	ldr	r3, [r7, #16]
}
 800b646:	4618      	mov	r0, r3
 800b648:	3730      	adds	r7, #48	; 0x30
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	20009a70 	.word	0x20009a70
 800b654:	e0001004 	.word	0xe0001004

0800b658 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800b658:	b580      	push	{r7, lr}
 800b65a:	b08a      	sub	sp, #40	; 0x28
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	60b9      	str	r1, [r7, #8]
 800b662:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800b664:	4b98      	ldr	r3, [pc, #608]	; (800b8c8 <_SendPacket+0x270>)
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d010      	beq.n	800b68e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800b66c:	4b96      	ldr	r3, [pc, #600]	; (800b8c8 <_SendPacket+0x270>)
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	2b00      	cmp	r3, #0
 800b672:	f000 812d 	beq.w	800b8d0 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800b676:	4b94      	ldr	r3, [pc, #592]	; (800b8c8 <_SendPacket+0x270>)
 800b678:	781b      	ldrb	r3, [r3, #0]
 800b67a:	2b02      	cmp	r3, #2
 800b67c:	d109      	bne.n	800b692 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800b67e:	f7ff ff79 	bl	800b574 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800b682:	4b91      	ldr	r3, [pc, #580]	; (800b8c8 <_SendPacket+0x270>)
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	2b01      	cmp	r3, #1
 800b688:	f040 8124 	bne.w	800b8d4 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 800b68c:	e001      	b.n	800b692 <_SendPacket+0x3a>
    goto Send;
 800b68e:	bf00      	nop
 800b690:	e000      	b.n	800b694 <_SendPacket+0x3c>
Send:
 800b692:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2b1f      	cmp	r3, #31
 800b698:	d809      	bhi.n	800b6ae <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800b69a:	4b8b      	ldr	r3, [pc, #556]	; (800b8c8 <_SendPacket+0x270>)
 800b69c:	69da      	ldr	r2, [r3, #28]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	fa22 f303 	lsr.w	r3, r2, r3
 800b6a4:	f003 0301 	and.w	r3, r3, #1
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	f040 8115 	bne.w	800b8d8 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2b17      	cmp	r3, #23
 800b6b2:	d807      	bhi.n	800b6c4 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	3b01      	subs	r3, #1
 800b6b8:	60fb      	str	r3, [r7, #12]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	b2da      	uxtb	r2, r3
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	701a      	strb	r2, [r3, #0]
 800b6c2:	e0c4      	b.n	800b84e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800b6c4:	68ba      	ldr	r2, [r7, #8]
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	1ad3      	subs	r3, r2, r3
 800b6ca:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800b6cc:	69fb      	ldr	r3, [r7, #28]
 800b6ce:	2b7f      	cmp	r3, #127	; 0x7f
 800b6d0:	d912      	bls.n	800b6f8 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800b6d2:	69fb      	ldr	r3, [r7, #28]
 800b6d4:	09da      	lsrs	r2, r3, #7
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	3b01      	subs	r3, #1
 800b6da:	60fb      	str	r3, [r7, #12]
 800b6dc:	b2d2      	uxtb	r2, r2
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800b6e2:	69fb      	ldr	r3, [r7, #28]
 800b6e4:	b2db      	uxtb	r3, r3
 800b6e6:	68fa      	ldr	r2, [r7, #12]
 800b6e8:	3a01      	subs	r2, #1
 800b6ea:	60fa      	str	r2, [r7, #12]
 800b6ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b6f0:	b2da      	uxtb	r2, r3
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	701a      	strb	r2, [r3, #0]
 800b6f6:	e006      	b.n	800b706 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	3b01      	subs	r3, #1
 800b6fc:	60fb      	str	r3, [r7, #12]
 800b6fe:	69fb      	ldr	r3, [r7, #28]
 800b700:	b2da      	uxtb	r2, r3
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2b7e      	cmp	r3, #126	; 0x7e
 800b70a:	d807      	bhi.n	800b71c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	3b01      	subs	r3, #1
 800b710:	60fb      	str	r3, [r7, #12]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	b2da      	uxtb	r2, r3
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	701a      	strb	r2, [r3, #0]
 800b71a:	e098      	b.n	800b84e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b722:	d212      	bcs.n	800b74a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	09da      	lsrs	r2, r3, #7
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	3b01      	subs	r3, #1
 800b72c:	60fb      	str	r3, [r7, #12]
 800b72e:	b2d2      	uxtb	r2, r2
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	b2db      	uxtb	r3, r3
 800b738:	68fa      	ldr	r2, [r7, #12]
 800b73a:	3a01      	subs	r2, #1
 800b73c:	60fa      	str	r2, [r7, #12]
 800b73e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b742:	b2da      	uxtb	r2, r3
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	701a      	strb	r2, [r3, #0]
 800b748:	e081      	b.n	800b84e <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b750:	d21d      	bcs.n	800b78e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	0b9a      	lsrs	r2, r3, #14
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	3b01      	subs	r3, #1
 800b75a:	60fb      	str	r3, [r7, #12]
 800b75c:	b2d2      	uxtb	r2, r2
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	09db      	lsrs	r3, r3, #7
 800b766:	b2db      	uxtb	r3, r3
 800b768:	68fa      	ldr	r2, [r7, #12]
 800b76a:	3a01      	subs	r2, #1
 800b76c:	60fa      	str	r2, [r7, #12]
 800b76e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b772:	b2da      	uxtb	r2, r3
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	68fa      	ldr	r2, [r7, #12]
 800b77e:	3a01      	subs	r2, #1
 800b780:	60fa      	str	r2, [r7, #12]
 800b782:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b786:	b2da      	uxtb	r2, r3
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	701a      	strb	r2, [r3, #0]
 800b78c:	e05f      	b.n	800b84e <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b794:	d228      	bcs.n	800b7e8 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	0d5a      	lsrs	r2, r3, #21
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	3b01      	subs	r3, #1
 800b79e:	60fb      	str	r3, [r7, #12]
 800b7a0:	b2d2      	uxtb	r2, r2
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	0b9b      	lsrs	r3, r3, #14
 800b7aa:	b2db      	uxtb	r3, r3
 800b7ac:	68fa      	ldr	r2, [r7, #12]
 800b7ae:	3a01      	subs	r2, #1
 800b7b0:	60fa      	str	r2, [r7, #12]
 800b7b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b7b6:	b2da      	uxtb	r2, r3
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	09db      	lsrs	r3, r3, #7
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	68fa      	ldr	r2, [r7, #12]
 800b7c4:	3a01      	subs	r2, #1
 800b7c6:	60fa      	str	r2, [r7, #12]
 800b7c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b7cc:	b2da      	uxtb	r2, r3
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	68fa      	ldr	r2, [r7, #12]
 800b7d8:	3a01      	subs	r2, #1
 800b7da:	60fa      	str	r2, [r7, #12]
 800b7dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b7e0:	b2da      	uxtb	r2, r3
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	701a      	strb	r2, [r3, #0]
 800b7e6:	e032      	b.n	800b84e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	0f1a      	lsrs	r2, r3, #28
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	3b01      	subs	r3, #1
 800b7f0:	60fb      	str	r3, [r7, #12]
 800b7f2:	b2d2      	uxtb	r2, r2
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	0d5b      	lsrs	r3, r3, #21
 800b7fc:	b2db      	uxtb	r3, r3
 800b7fe:	68fa      	ldr	r2, [r7, #12]
 800b800:	3a01      	subs	r2, #1
 800b802:	60fa      	str	r2, [r7, #12]
 800b804:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b808:	b2da      	uxtb	r2, r3
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	0b9b      	lsrs	r3, r3, #14
 800b812:	b2db      	uxtb	r3, r3
 800b814:	68fa      	ldr	r2, [r7, #12]
 800b816:	3a01      	subs	r2, #1
 800b818:	60fa      	str	r2, [r7, #12]
 800b81a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b81e:	b2da      	uxtb	r2, r3
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	09db      	lsrs	r3, r3, #7
 800b828:	b2db      	uxtb	r3, r3
 800b82a:	68fa      	ldr	r2, [r7, #12]
 800b82c:	3a01      	subs	r2, #1
 800b82e:	60fa      	str	r2, [r7, #12]
 800b830:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b834:	b2da      	uxtb	r2, r3
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	b2db      	uxtb	r3, r3
 800b83e:	68fa      	ldr	r2, [r7, #12]
 800b840:	3a01      	subs	r2, #1
 800b842:	60fa      	str	r2, [r7, #12]
 800b844:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b848:	b2da      	uxtb	r2, r3
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800b84e:	4b1f      	ldr	r3, [pc, #124]	; (800b8cc <_SendPacket+0x274>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800b854:	4b1c      	ldr	r3, [pc, #112]	; (800b8c8 <_SendPacket+0x270>)
 800b856:	68db      	ldr	r3, [r3, #12]
 800b858:	69ba      	ldr	r2, [r7, #24]
 800b85a:	1ad3      	subs	r3, r2, r3
 800b85c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	627b      	str	r3, [r7, #36]	; 0x24
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	623b      	str	r3, [r7, #32]
 800b866:	e00b      	b.n	800b880 <_SendPacket+0x228>
 800b868:	6a3b      	ldr	r3, [r7, #32]
 800b86a:	b2da      	uxtb	r2, r3
 800b86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86e:	1c59      	adds	r1, r3, #1
 800b870:	6279      	str	r1, [r7, #36]	; 0x24
 800b872:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b876:	b2d2      	uxtb	r2, r2
 800b878:	701a      	strb	r2, [r3, #0]
 800b87a:	6a3b      	ldr	r3, [r7, #32]
 800b87c:	09db      	lsrs	r3, r3, #7
 800b87e:	623b      	str	r3, [r7, #32]
 800b880:	6a3b      	ldr	r3, [r7, #32]
 800b882:	2b7f      	cmp	r3, #127	; 0x7f
 800b884:	d8f0      	bhi.n	800b868 <_SendPacket+0x210>
 800b886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b888:	1c5a      	adds	r2, r3, #1
 800b88a:	627a      	str	r2, [r7, #36]	; 0x24
 800b88c:	6a3a      	ldr	r2, [r7, #32]
 800b88e:	b2d2      	uxtb	r2, r2
 800b890:	701a      	strb	r2, [r3, #0]
 800b892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b894:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800b896:	4b0c      	ldr	r3, [pc, #48]	; (800b8c8 <_SendPacket+0x270>)
 800b898:	785b      	ldrb	r3, [r3, #1]
 800b89a:	4618      	mov	r0, r3
 800b89c:	68ba      	ldr	r2, [r7, #8]
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	1ad3      	subs	r3, r2, r3
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	68f9      	ldr	r1, [r7, #12]
 800b8a6:	f7f4 fc9b 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800b8aa:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d003      	beq.n	800b8ba <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800b8b2:	4a05      	ldr	r2, [pc, #20]	; (800b8c8 <_SendPacket+0x270>)
 800b8b4:	69bb      	ldr	r3, [r7, #24]
 800b8b6:	60d3      	str	r3, [r2, #12]
 800b8b8:	e00f      	b.n	800b8da <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800b8ba:	4b03      	ldr	r3, [pc, #12]	; (800b8c8 <_SendPacket+0x270>)
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	3301      	adds	r3, #1
 800b8c0:	b2da      	uxtb	r2, r3
 800b8c2:	4b01      	ldr	r3, [pc, #4]	; (800b8c8 <_SendPacket+0x270>)
 800b8c4:	701a      	strb	r2, [r3, #0]
 800b8c6:	e008      	b.n	800b8da <_SendPacket+0x282>
 800b8c8:	20009a70 	.word	0x20009a70
 800b8cc:	e0001004 	.word	0xe0001004
    goto SendDone;
 800b8d0:	bf00      	nop
 800b8d2:	e002      	b.n	800b8da <_SendPacket+0x282>
      goto SendDone;
 800b8d4:	bf00      	nop
 800b8d6:	e000      	b.n	800b8da <_SendPacket+0x282>
      goto SendDone;
 800b8d8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800b8da:	4b14      	ldr	r3, [pc, #80]	; (800b92c <_SendPacket+0x2d4>)
 800b8dc:	7e1b      	ldrb	r3, [r3, #24]
 800b8de:	4619      	mov	r1, r3
 800b8e0:	4a13      	ldr	r2, [pc, #76]	; (800b930 <_SendPacket+0x2d8>)
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	005b      	lsls	r3, r3, #1
 800b8e6:	440b      	add	r3, r1
 800b8e8:	00db      	lsls	r3, r3, #3
 800b8ea:	4413      	add	r3, r2
 800b8ec:	336c      	adds	r3, #108	; 0x6c
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	4b0e      	ldr	r3, [pc, #56]	; (800b92c <_SendPacket+0x2d4>)
 800b8f2:	7e1b      	ldrb	r3, [r3, #24]
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	490e      	ldr	r1, [pc, #56]	; (800b930 <_SendPacket+0x2d8>)
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	005b      	lsls	r3, r3, #1
 800b8fc:	4403      	add	r3, r0
 800b8fe:	00db      	lsls	r3, r3, #3
 800b900:	440b      	add	r3, r1
 800b902:	3370      	adds	r3, #112	; 0x70
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	429a      	cmp	r2, r3
 800b908:	d00b      	beq.n	800b922 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800b90a:	4b08      	ldr	r3, [pc, #32]	; (800b92c <_SendPacket+0x2d4>)
 800b90c:	789b      	ldrb	r3, [r3, #2]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d107      	bne.n	800b922 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800b912:	4b06      	ldr	r3, [pc, #24]	; (800b92c <_SendPacket+0x2d4>)
 800b914:	2201      	movs	r2, #1
 800b916:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800b918:	f7ff fdbc 	bl	800b494 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800b91c:	4b03      	ldr	r3, [pc, #12]	; (800b92c <_SendPacket+0x2d4>)
 800b91e:	2200      	movs	r2, #0
 800b920:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800b922:	bf00      	nop
 800b924:	3728      	adds	r7, #40	; 0x28
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	20009a70 	.word	0x20009a70
 800b930:	200085b0 	.word	0x200085b0

0800b934 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 800b934:	b580      	push	{r7, lr}
 800b936:	b08a      	sub	sp, #40	; 0x28
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	460b      	mov	r3, r1
 800b93e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	691b      	ldr	r3, [r3, #16]
 800b944:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	3301      	adds	r3, #1
 800b94a:	2b80      	cmp	r3, #128	; 0x80
 800b94c:	d80a      	bhi.n	800b964 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	1c59      	adds	r1, r3, #1
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	6051      	str	r1, [r2, #4]
 800b958:	78fa      	ldrb	r2, [r7, #3]
 800b95a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	1c5a      	adds	r2, r3, #1
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	691b      	ldr	r3, [r3, #16]
 800b968:	2b80      	cmp	r3, #128	; 0x80
 800b96a:	d15a      	bne.n	800ba22 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	691a      	ldr	r2, [r3, #16]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	689b      	ldr	r3, [r3, #8]
 800b974:	b2d2      	uxtb	r2, r2
 800b976:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	68db      	ldr	r3, [r3, #12]
 800b982:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	627b      	str	r3, [r7, #36]	; 0x24
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	623b      	str	r3, [r7, #32]
 800b98c:	e00b      	b.n	800b9a6 <_StoreChar+0x72>
 800b98e:	6a3b      	ldr	r3, [r7, #32]
 800b990:	b2da      	uxtb	r2, r3
 800b992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b994:	1c59      	adds	r1, r3, #1
 800b996:	6279      	str	r1, [r7, #36]	; 0x24
 800b998:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b99c:	b2d2      	uxtb	r2, r2
 800b99e:	701a      	strb	r2, [r3, #0]
 800b9a0:	6a3b      	ldr	r3, [r7, #32]
 800b9a2:	09db      	lsrs	r3, r3, #7
 800b9a4:	623b      	str	r3, [r7, #32]
 800b9a6:	6a3b      	ldr	r3, [r7, #32]
 800b9a8:	2b7f      	cmp	r3, #127	; 0x7f
 800b9aa:	d8f0      	bhi.n	800b98e <_StoreChar+0x5a>
 800b9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ae:	1c5a      	adds	r2, r3, #1
 800b9b0:	627a      	str	r2, [r7, #36]	; 0x24
 800b9b2:	6a3a      	ldr	r2, [r7, #32]
 800b9b4:	b2d2      	uxtb	r2, r2
 800b9b6:	701a      	strb	r2, [r3, #0]
 800b9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ba:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	61fb      	str	r3, [r7, #28]
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	61bb      	str	r3, [r7, #24]
 800b9c4:	e00b      	b.n	800b9de <_StoreChar+0xaa>
 800b9c6:	69bb      	ldr	r3, [r7, #24]
 800b9c8:	b2da      	uxtb	r2, r3
 800b9ca:	69fb      	ldr	r3, [r7, #28]
 800b9cc:	1c59      	adds	r1, r3, #1
 800b9ce:	61f9      	str	r1, [r7, #28]
 800b9d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b9d4:	b2d2      	uxtb	r2, r2
 800b9d6:	701a      	strb	r2, [r3, #0]
 800b9d8:	69bb      	ldr	r3, [r7, #24]
 800b9da:	09db      	lsrs	r3, r3, #7
 800b9dc:	61bb      	str	r3, [r7, #24]
 800b9de:	69bb      	ldr	r3, [r7, #24]
 800b9e0:	2b7f      	cmp	r3, #127	; 0x7f
 800b9e2:	d8f0      	bhi.n	800b9c6 <_StoreChar+0x92>
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	1c5a      	adds	r2, r3, #1
 800b9e8:	61fa      	str	r2, [r7, #28]
 800b9ea:	69ba      	ldr	r2, [r7, #24]
 800b9ec:	b2d2      	uxtb	r2, r2
 800b9ee:	701a      	strb	r2, [r3, #0]
 800b9f0:	69fb      	ldr	r3, [r7, #28]
 800b9f2:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	689b      	ldr	r3, [r3, #8]
 800b9f8:	221a      	movs	r2, #26
 800b9fa:	6939      	ldr	r1, [r7, #16]
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f7ff fe2b 	bl	800b658 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7ff fd38 	bl	800b47c <_PreparePacket>
 800ba0c:	4602      	mov	r2, r0
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	689b      	ldr	r3, [r3, #8]
 800ba16:	1c5a      	adds	r2, r3, #1
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	611a      	str	r2, [r3, #16]
  }
}
 800ba22:	bf00      	nop
 800ba24:	3728      	adds	r7, #40	; 0x28
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
	...

0800ba2c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b08a      	sub	sp, #40	; 0x28
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	60f8      	str	r0, [r7, #12]
 800ba34:	60b9      	str	r1, [r7, #8]
 800ba36:	607a      	str	r2, [r7, #4]
 800ba38:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800ba3e:	2301      	movs	r3, #1
 800ba40:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800ba42:	2301      	movs	r3, #1
 800ba44:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800ba46:	e007      	b.n	800ba58 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800ba48:	6a3a      	ldr	r2, [r7, #32]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba50:	623b      	str	r3, [r7, #32]
    Width++;
 800ba52:	69fb      	ldr	r3, [r7, #28]
 800ba54:	3301      	adds	r3, #1
 800ba56:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800ba58:	6a3a      	ldr	r2, [r7, #32]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d2f3      	bcs.n	800ba48 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800ba60:	683a      	ldr	r2, [r7, #0]
 800ba62:	69fb      	ldr	r3, [r7, #28]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d901      	bls.n	800ba6c <_PrintUnsigned+0x40>
    Width = NumDigits;
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800ba6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba6e:	f003 0301 	and.w	r3, r3, #1
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d11f      	bne.n	800bab6 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800ba76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d01c      	beq.n	800bab6 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800ba7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba7e:	f003 0302 	and.w	r3, r3, #2
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d005      	beq.n	800ba92 <_PrintUnsigned+0x66>
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d102      	bne.n	800ba92 <_PrintUnsigned+0x66>
        c = '0';
 800ba8c:	2330      	movs	r3, #48	; 0x30
 800ba8e:	76fb      	strb	r3, [r7, #27]
 800ba90:	e001      	b.n	800ba96 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800ba92:	2320      	movs	r3, #32
 800ba94:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800ba96:	e007      	b.n	800baa8 <_PrintUnsigned+0x7c>
        FieldWidth--;
 800ba98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9a:	3b01      	subs	r3, #1
 800ba9c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800ba9e:	7efb      	ldrb	r3, [r7, #27]
 800baa0:	4619      	mov	r1, r3
 800baa2:	68f8      	ldr	r0, [r7, #12]
 800baa4:	f7ff ff46 	bl	800b934 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800baa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d003      	beq.n	800bab6 <_PrintUnsigned+0x8a>
 800baae:	69fa      	ldr	r2, [r7, #28]
 800bab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d3f0      	bcc.n	800ba98 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d903      	bls.n	800bac4 <_PrintUnsigned+0x98>
      NumDigits--;
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	3b01      	subs	r3, #1
 800bac0:	603b      	str	r3, [r7, #0]
 800bac2:	e009      	b.n	800bad8 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 800bac4:	68ba      	ldr	r2, [r7, #8]
 800bac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bacc:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800bace:	697a      	ldr	r2, [r7, #20]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d200      	bcs.n	800bad8 <_PrintUnsigned+0xac>
        break;
 800bad6:	e005      	b.n	800bae4 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 800bad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bada:	687a      	ldr	r2, [r7, #4]
 800badc:	fb02 f303 	mul.w	r3, r2, r3
 800bae0:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800bae2:	e7e8      	b.n	800bab6 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800bae4:	68ba      	ldr	r2, [r7, #8]
 800bae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae8:	fbb2 f3f3 	udiv	r3, r2, r3
 800baec:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baf2:	fb02 f303 	mul.w	r3, r2, r3
 800baf6:	68ba      	ldr	r2, [r7, #8]
 800baf8:	1ad3      	subs	r3, r2, r3
 800bafa:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800bafc:	4a15      	ldr	r2, [pc, #84]	; (800bb54 <_PrintUnsigned+0x128>)
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	4413      	add	r3, r2
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	4619      	mov	r1, r3
 800bb06:	68f8      	ldr	r0, [r7, #12]
 800bb08:	f7ff ff14 	bl	800b934 <_StoreChar>
    Digit /= Base;
 800bb0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb14:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 800bb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d1e3      	bne.n	800bae4 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800bb1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb1e:	f003 0301 	and.w	r3, r3, #1
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d011      	beq.n	800bb4a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800bb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d00e      	beq.n	800bb4a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800bb2c:	e006      	b.n	800bb3c <_PrintUnsigned+0x110>
        FieldWidth--;
 800bb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb30:	3b01      	subs	r3, #1
 800bb32:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 800bb34:	2120      	movs	r1, #32
 800bb36:	68f8      	ldr	r0, [r7, #12]
 800bb38:	f7ff fefc 	bl	800b934 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800bb3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d003      	beq.n	800bb4a <_PrintUnsigned+0x11e>
 800bb42:	69fa      	ldr	r2, [r7, #28]
 800bb44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d3f1      	bcc.n	800bb2e <_PrintUnsigned+0x102>
      }
    }
  }
}
 800bb4a:	bf00      	nop
 800bb4c:	3728      	adds	r7, #40	; 0x28
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	0800e568 	.word	0x0800e568

0800bb58 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b088      	sub	sp, #32
 800bb5c:	af02      	add	r7, sp, #8
 800bb5e:	60f8      	str	r0, [r7, #12]
 800bb60:	60b9      	str	r1, [r7, #8]
 800bb62:	607a      	str	r2, [r7, #4]
 800bb64:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	bfb8      	it	lt
 800bb6c:	425b      	neglt	r3, r3
 800bb6e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800bb70:	2301      	movs	r3, #1
 800bb72:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800bb74:	e007      	b.n	800bb86 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	693a      	ldr	r2, [r7, #16]
 800bb7a:	fb92 f3f3 	sdiv	r3, r2, r3
 800bb7e:	613b      	str	r3, [r7, #16]
    Width++;
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	3301      	adds	r3, #1
 800bb84:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	693a      	ldr	r2, [r7, #16]
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	daf3      	bge.n	800bb76 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800bb8e:	683a      	ldr	r2, [r7, #0]
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d901      	bls.n	800bb9a <_PrintInt+0x42>
    Width = NumDigits;
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800bb9a:	6a3b      	ldr	r3, [r7, #32]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d00a      	beq.n	800bbb6 <_PrintInt+0x5e>
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	db04      	blt.n	800bbb0 <_PrintInt+0x58>
 800bba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba8:	f003 0304 	and.w	r3, r3, #4
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d002      	beq.n	800bbb6 <_PrintInt+0x5e>
    FieldWidth--;
 800bbb0:	6a3b      	ldr	r3, [r7, #32]
 800bbb2:	3b01      	subs	r3, #1
 800bbb4:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800bbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb8:	f003 0302 	and.w	r3, r3, #2
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d002      	beq.n	800bbc6 <_PrintInt+0x6e>
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d016      	beq.n	800bbf4 <_PrintInt+0x9c>
 800bbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc8:	f003 0301 	and.w	r3, r3, #1
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d111      	bne.n	800bbf4 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 800bbd0:	6a3b      	ldr	r3, [r7, #32]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d00e      	beq.n	800bbf4 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800bbd6:	e006      	b.n	800bbe6 <_PrintInt+0x8e>
        FieldWidth--;
 800bbd8:	6a3b      	ldr	r3, [r7, #32]
 800bbda:	3b01      	subs	r3, #1
 800bbdc:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800bbde:	2120      	movs	r1, #32
 800bbe0:	68f8      	ldr	r0, [r7, #12]
 800bbe2:	f7ff fea7 	bl	800b934 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800bbe6:	6a3b      	ldr	r3, [r7, #32]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d003      	beq.n	800bbf4 <_PrintInt+0x9c>
 800bbec:	697a      	ldr	r2, [r7, #20]
 800bbee:	6a3b      	ldr	r3, [r7, #32]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d3f1      	bcc.n	800bbd8 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	da07      	bge.n	800bc0a <_PrintInt+0xb2>
    v = -v;
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	425b      	negs	r3, r3
 800bbfe:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 800bc00:	212d      	movs	r1, #45	; 0x2d
 800bc02:	68f8      	ldr	r0, [r7, #12]
 800bc04:	f7ff fe96 	bl	800b934 <_StoreChar>
 800bc08:	e008      	b.n	800bc1c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800bc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0c:	f003 0304 	and.w	r3, r3, #4
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d003      	beq.n	800bc1c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 800bc14:	212b      	movs	r1, #43	; 0x2b
 800bc16:	68f8      	ldr	r0, [r7, #12]
 800bc18:	f7ff fe8c 	bl	800b934 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800bc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc1e:	f003 0302 	and.w	r3, r3, #2
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d019      	beq.n	800bc5a <_PrintInt+0x102>
 800bc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc28:	f003 0301 	and.w	r3, r3, #1
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d114      	bne.n	800bc5a <_PrintInt+0x102>
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d111      	bne.n	800bc5a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800bc36:	6a3b      	ldr	r3, [r7, #32]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d00e      	beq.n	800bc5a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800bc3c:	e006      	b.n	800bc4c <_PrintInt+0xf4>
        FieldWidth--;
 800bc3e:	6a3b      	ldr	r3, [r7, #32]
 800bc40:	3b01      	subs	r3, #1
 800bc42:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 800bc44:	2130      	movs	r1, #48	; 0x30
 800bc46:	68f8      	ldr	r0, [r7, #12]
 800bc48:	f7ff fe74 	bl	800b934 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800bc4c:	6a3b      	ldr	r3, [r7, #32]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d003      	beq.n	800bc5a <_PrintInt+0x102>
 800bc52:	697a      	ldr	r2, [r7, #20]
 800bc54:	6a3b      	ldr	r3, [r7, #32]
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d3f1      	bcc.n	800bc3e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800bc5a:	68b9      	ldr	r1, [r7, #8]
 800bc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc5e:	9301      	str	r3, [sp, #4]
 800bc60:	6a3b      	ldr	r3, [r7, #32]
 800bc62:	9300      	str	r3, [sp, #0]
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	687a      	ldr	r2, [r7, #4]
 800bc68:	68f8      	ldr	r0, [r7, #12]
 800bc6a:	f7ff fedf 	bl	800ba2c <_PrintUnsigned>
}
 800bc6e:	bf00      	nop
 800bc70:	3718      	adds	r7, #24
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
	...

0800bc78 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b098      	sub	sp, #96	; 0x60
 800bc7c:	af02      	add	r7, sp, #8
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	60b9      	str	r1, [r7, #8]
 800bc82:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800bc84:	f3ef 8311 	mrs	r3, BASEPRI
 800bc88:	f04f 0120 	mov.w	r1, #32
 800bc8c:	f381 8811 	msr	BASEPRI, r1
 800bc90:	633b      	str	r3, [r7, #48]	; 0x30
 800bc92:	48b7      	ldr	r0, [pc, #732]	; (800bf70 <_VPrintTarget+0x2f8>)
 800bc94:	f7ff fbf2 	bl	800b47c <_PreparePacket>
 800bc98:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800bc9a:	4bb5      	ldr	r3, [pc, #724]	; (800bf70 <_VPrintTarget+0x2f8>)
 800bc9c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800bca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca4:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800bca6:	69fb      	ldr	r3, [r7, #28]
 800bca8:	3301      	adds	r3, #1
 800bcaa:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	3301      	adds	r3, #1
 800bcbc:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800bcbe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	f000 8183 	beq.w	800bfce <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 800bcc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bccc:	2b25      	cmp	r3, #37	; 0x25
 800bcce:	f040 8170 	bne.w	800bfb2 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800bce2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bce6:	3b23      	subs	r3, #35	; 0x23
 800bce8:	2b0d      	cmp	r3, #13
 800bcea:	d83f      	bhi.n	800bd6c <_VPrintTarget+0xf4>
 800bcec:	a201      	add	r2, pc, #4	; (adr r2, 800bcf4 <_VPrintTarget+0x7c>)
 800bcee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf2:	bf00      	nop
 800bcf4:	0800bd5d 	.word	0x0800bd5d
 800bcf8:	0800bd6d 	.word	0x0800bd6d
 800bcfc:	0800bd6d 	.word	0x0800bd6d
 800bd00:	0800bd6d 	.word	0x0800bd6d
 800bd04:	0800bd6d 	.word	0x0800bd6d
 800bd08:	0800bd6d 	.word	0x0800bd6d
 800bd0c:	0800bd6d 	.word	0x0800bd6d
 800bd10:	0800bd6d 	.word	0x0800bd6d
 800bd14:	0800bd4d 	.word	0x0800bd4d
 800bd18:	0800bd6d 	.word	0x0800bd6d
 800bd1c:	0800bd2d 	.word	0x0800bd2d
 800bd20:	0800bd6d 	.word	0x0800bd6d
 800bd24:	0800bd6d 	.word	0x0800bd6d
 800bd28:	0800bd3d 	.word	0x0800bd3d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800bd2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd2e:	f043 0301 	orr.w	r3, r3, #1
 800bd32:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	3301      	adds	r3, #1
 800bd38:	60fb      	str	r3, [r7, #12]
 800bd3a:	e01a      	b.n	800bd72 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800bd3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd3e:	f043 0302 	orr.w	r3, r3, #2
 800bd42:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	3301      	adds	r3, #1
 800bd48:	60fb      	str	r3, [r7, #12]
 800bd4a:	e012      	b.n	800bd72 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800bd4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd4e:	f043 0304 	orr.w	r3, r3, #4
 800bd52:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	3301      	adds	r3, #1
 800bd58:	60fb      	str	r3, [r7, #12]
 800bd5a:	e00a      	b.n	800bd72 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800bd5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd5e:	f043 0308 	orr.w	r3, r3, #8
 800bd62:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	3301      	adds	r3, #1
 800bd68:	60fb      	str	r3, [r7, #12]
 800bd6a:	e002      	b.n	800bd72 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	653b      	str	r3, [r7, #80]	; 0x50
 800bd70:	bf00      	nop
        }
      } while (v);
 800bd72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d1b0      	bne.n	800bcda <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	781b      	ldrb	r3, [r3, #0]
 800bd80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 800bd84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bd88:	2b2f      	cmp	r3, #47	; 0x2f
 800bd8a:	d912      	bls.n	800bdb2 <_VPrintTarget+0x13a>
 800bd8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bd90:	2b39      	cmp	r3, #57	; 0x39
 800bd92:	d80e      	bhi.n	800bdb2 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	3301      	adds	r3, #1
 800bd98:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800bd9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd9c:	4613      	mov	r3, r2
 800bd9e:	009b      	lsls	r3, r3, #2
 800bda0:	4413      	add	r3, r2
 800bda2:	005b      	lsls	r3, r3, #1
 800bda4:	461a      	mov	r2, r3
 800bda6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bdaa:	4413      	add	r3, r2
 800bdac:	3b30      	subs	r3, #48	; 0x30
 800bdae:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 800bdb0:	e7e4      	b.n	800bd7c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800bdbe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bdc2:	2b2e      	cmp	r3, #46	; 0x2e
 800bdc4:	d11d      	bne.n	800be02 <_VPrintTarget+0x18a>
        sFormat++;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	3301      	adds	r3, #1
 800bdca:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 800bdd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bdd8:	2b2f      	cmp	r3, #47	; 0x2f
 800bdda:	d912      	bls.n	800be02 <_VPrintTarget+0x18a>
 800bddc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bde0:	2b39      	cmp	r3, #57	; 0x39
 800bde2:	d80e      	bhi.n	800be02 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	3301      	adds	r3, #1
 800bde8:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800bdea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bdec:	4613      	mov	r3, r2
 800bdee:	009b      	lsls	r3, r3, #2
 800bdf0:	4413      	add	r3, r2
 800bdf2:	005b      	lsls	r3, r3, #1
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bdfa:	4413      	add	r3, r2
 800bdfc:	3b30      	subs	r3, #48	; 0x30
 800bdfe:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 800be00:	e7e4      	b.n	800bdcc <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800be0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be0e:	2b6c      	cmp	r3, #108	; 0x6c
 800be10:	d003      	beq.n	800be1a <_VPrintTarget+0x1a2>
 800be12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be16:	2b68      	cmp	r3, #104	; 0x68
 800be18:	d107      	bne.n	800be2a <_VPrintTarget+0x1b2>
          c = *sFormat;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	781b      	ldrb	r3, [r3, #0]
 800be1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	3301      	adds	r3, #1
 800be26:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 800be28:	e7ef      	b.n	800be0a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800be2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be2e:	2b25      	cmp	r3, #37	; 0x25
 800be30:	f000 80b3 	beq.w	800bf9a <_VPrintTarget+0x322>
 800be34:	2b25      	cmp	r3, #37	; 0x25
 800be36:	f2c0 80b7 	blt.w	800bfa8 <_VPrintTarget+0x330>
 800be3a:	2b78      	cmp	r3, #120	; 0x78
 800be3c:	f300 80b4 	bgt.w	800bfa8 <_VPrintTarget+0x330>
 800be40:	2b58      	cmp	r3, #88	; 0x58
 800be42:	f2c0 80b1 	blt.w	800bfa8 <_VPrintTarget+0x330>
 800be46:	3b58      	subs	r3, #88	; 0x58
 800be48:	2b20      	cmp	r3, #32
 800be4a:	f200 80ad 	bhi.w	800bfa8 <_VPrintTarget+0x330>
 800be4e:	a201      	add	r2, pc, #4	; (adr r2, 800be54 <_VPrintTarget+0x1dc>)
 800be50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be54:	0800bf4b 	.word	0x0800bf4b
 800be58:	0800bfa9 	.word	0x0800bfa9
 800be5c:	0800bfa9 	.word	0x0800bfa9
 800be60:	0800bfa9 	.word	0x0800bfa9
 800be64:	0800bfa9 	.word	0x0800bfa9
 800be68:	0800bfa9 	.word	0x0800bfa9
 800be6c:	0800bfa9 	.word	0x0800bfa9
 800be70:	0800bfa9 	.word	0x0800bfa9
 800be74:	0800bfa9 	.word	0x0800bfa9
 800be78:	0800bfa9 	.word	0x0800bfa9
 800be7c:	0800bfa9 	.word	0x0800bfa9
 800be80:	0800bed9 	.word	0x0800bed9
 800be84:	0800beff 	.word	0x0800beff
 800be88:	0800bfa9 	.word	0x0800bfa9
 800be8c:	0800bfa9 	.word	0x0800bfa9
 800be90:	0800bfa9 	.word	0x0800bfa9
 800be94:	0800bfa9 	.word	0x0800bfa9
 800be98:	0800bfa9 	.word	0x0800bfa9
 800be9c:	0800bfa9 	.word	0x0800bfa9
 800bea0:	0800bfa9 	.word	0x0800bfa9
 800bea4:	0800bfa9 	.word	0x0800bfa9
 800bea8:	0800bfa9 	.word	0x0800bfa9
 800beac:	0800bfa9 	.word	0x0800bfa9
 800beb0:	0800bfa9 	.word	0x0800bfa9
 800beb4:	0800bf75 	.word	0x0800bf75
 800beb8:	0800bfa9 	.word	0x0800bfa9
 800bebc:	0800bfa9 	.word	0x0800bfa9
 800bec0:	0800bfa9 	.word	0x0800bfa9
 800bec4:	0800bfa9 	.word	0x0800bfa9
 800bec8:	0800bf25 	.word	0x0800bf25
 800becc:	0800bfa9 	.word	0x0800bfa9
 800bed0:	0800bfa9 	.word	0x0800bfa9
 800bed4:	0800bf4b 	.word	0x0800bf4b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	1d19      	adds	r1, r3, #4
 800bede:	687a      	ldr	r2, [r7, #4]
 800bee0:	6011      	str	r1, [r2, #0]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800bee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bee8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 800beec:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800bef0:	f107 0314 	add.w	r3, r7, #20
 800bef4:	4611      	mov	r1, r2
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7ff fd1c 	bl	800b934 <_StoreChar>
        break;
 800befc:	e055      	b.n	800bfaa <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	1d19      	adds	r1, r3, #4
 800bf04:	687a      	ldr	r2, [r7, #4]
 800bf06:	6011      	str	r1, [r2, #0]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800bf0c:	f107 0014 	add.w	r0, r7, #20
 800bf10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf12:	9301      	str	r3, [sp, #4]
 800bf14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf16:	9300      	str	r3, [sp, #0]
 800bf18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf1a:	220a      	movs	r2, #10
 800bf1c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bf1e:	f7ff fe1b 	bl	800bb58 <_PrintInt>
        break;
 800bf22:	e042      	b.n	800bfaa <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	1d19      	adds	r1, r3, #4
 800bf2a:	687a      	ldr	r2, [r7, #4]
 800bf2c:	6011      	str	r1, [r2, #0]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800bf32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bf34:	f107 0014 	add.w	r0, r7, #20
 800bf38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf3a:	9301      	str	r3, [sp, #4]
 800bf3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf3e:	9300      	str	r3, [sp, #0]
 800bf40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf42:	220a      	movs	r2, #10
 800bf44:	f7ff fd72 	bl	800ba2c <_PrintUnsigned>
        break;
 800bf48:	e02f      	b.n	800bfaa <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	1d19      	adds	r1, r3, #4
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	6011      	str	r1, [r2, #0]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800bf58:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bf5a:	f107 0014 	add.w	r0, r7, #20
 800bf5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf60:	9301      	str	r3, [sp, #4]
 800bf62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf64:	9300      	str	r3, [sp, #0]
 800bf66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf68:	2210      	movs	r2, #16
 800bf6a:	f7ff fd5f 	bl	800ba2c <_PrintUnsigned>
        break;
 800bf6e:	e01c      	b.n	800bfaa <_VPrintTarget+0x332>
 800bf70:	20009aa0 	.word	0x20009aa0
      case 'p':
        v = va_arg(*pParamList, int);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	1d19      	adds	r1, r3, #4
 800bf7a:	687a      	ldr	r2, [r7, #4]
 800bf7c:	6011      	str	r1, [r2, #0]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800bf82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bf84:	f107 0014 	add.w	r0, r7, #20
 800bf88:	2300      	movs	r3, #0
 800bf8a:	9301      	str	r3, [sp, #4]
 800bf8c:	2308      	movs	r3, #8
 800bf8e:	9300      	str	r3, [sp, #0]
 800bf90:	2308      	movs	r3, #8
 800bf92:	2210      	movs	r2, #16
 800bf94:	f7ff fd4a 	bl	800ba2c <_PrintUnsigned>
        break;
 800bf98:	e007      	b.n	800bfaa <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800bf9a:	f107 0314 	add.w	r3, r7, #20
 800bf9e:	2125      	movs	r1, #37	; 0x25
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7ff fcc7 	bl	800b934 <_StoreChar>
        break;
 800bfa6:	e000      	b.n	800bfaa <_VPrintTarget+0x332>
      default:
        break;
 800bfa8:	bf00      	nop
      }
      sFormat++;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	3301      	adds	r3, #1
 800bfae:	60fb      	str	r3, [r7, #12]
 800bfb0:	e007      	b.n	800bfc2 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800bfb2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bfb6:	f107 0314 	add.w	r3, r7, #20
 800bfba:	4611      	mov	r1, r2
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f7ff fcb9 	bl	800b934 <_StoreChar>
    }
  } while (*sFormat);
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	781b      	ldrb	r3, [r3, #0]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	f47f ae72 	bne.w	800bcb0 <_VPrintTarget+0x38>
 800bfcc:	e000      	b.n	800bfd0 <_VPrintTarget+0x358>
      break;
 800bfce:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800bfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d041      	beq.n	800c05a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 800bfd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfd8:	69fb      	ldr	r3, [r7, #28]
 800bfda:	b2d2      	uxtb	r2, r2
 800bfdc:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800bfde:	69bb      	ldr	r3, [r7, #24]
 800bfe0:	643b      	str	r3, [r7, #64]	; 0x40
 800bfe2:	6a3b      	ldr	r3, [r7, #32]
 800bfe4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfe6:	e00b      	b.n	800c000 <_VPrintTarget+0x388>
 800bfe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfea:	b2da      	uxtb	r2, r3
 800bfec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfee:	1c59      	adds	r1, r3, #1
 800bff0:	6439      	str	r1, [r7, #64]	; 0x40
 800bff2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bff6:	b2d2      	uxtb	r2, r2
 800bff8:	701a      	strb	r2, [r3, #0]
 800bffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bffc:	09db      	lsrs	r3, r3, #7
 800bffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c002:	2b7f      	cmp	r3, #127	; 0x7f
 800c004:	d8f0      	bhi.n	800bfe8 <_VPrintTarget+0x370>
 800c006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c008:	1c5a      	adds	r2, r3, #1
 800c00a:	643a      	str	r2, [r7, #64]	; 0x40
 800c00c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c00e:	b2d2      	uxtb	r2, r2
 800c010:	701a      	strb	r2, [r3, #0]
 800c012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c014:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800c016:	69bb      	ldr	r3, [r7, #24]
 800c018:	63bb      	str	r3, [r7, #56]	; 0x38
 800c01a:	2300      	movs	r3, #0
 800c01c:	637b      	str	r3, [r7, #52]	; 0x34
 800c01e:	e00b      	b.n	800c038 <_VPrintTarget+0x3c0>
 800c020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c022:	b2da      	uxtb	r2, r3
 800c024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c026:	1c59      	adds	r1, r3, #1
 800c028:	63b9      	str	r1, [r7, #56]	; 0x38
 800c02a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c02e:	b2d2      	uxtb	r2, r2
 800c030:	701a      	strb	r2, [r3, #0]
 800c032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c034:	09db      	lsrs	r3, r3, #7
 800c036:	637b      	str	r3, [r7, #52]	; 0x34
 800c038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c03a:	2b7f      	cmp	r3, #127	; 0x7f
 800c03c:	d8f0      	bhi.n	800c020 <_VPrintTarget+0x3a8>
 800c03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c040:	1c5a      	adds	r2, r3, #1
 800c042:	63ba      	str	r2, [r7, #56]	; 0x38
 800c044:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c046:	b2d2      	uxtb	r2, r2
 800c048:	701a      	strb	r2, [r3, #0]
 800c04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c04c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800c04e:	69fb      	ldr	r3, [r7, #28]
 800c050:	69b9      	ldr	r1, [r7, #24]
 800c052:	221a      	movs	r2, #26
 800c054:	4618      	mov	r0, r3
 800c056:	f7ff faff 	bl	800b658 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800c05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 800c060:	bf00      	nop
 800c062:	3758      	adds	r7, #88	; 0x58
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}

0800c068 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800c068:	b580      	push	{r7, lr}
 800c06a:	b086      	sub	sp, #24
 800c06c:	af02      	add	r7, sp, #8
 800c06e:	60f8      	str	r0, [r7, #12]
 800c070:	60b9      	str	r1, [r7, #8]
 800c072:	607a      	str	r2, [r7, #4]
 800c074:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800c076:	2300      	movs	r3, #0
 800c078:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c07c:	4917      	ldr	r1, [pc, #92]	; (800c0dc <SEGGER_SYSVIEW_Init+0x74>)
 800c07e:	4818      	ldr	r0, [pc, #96]	; (800c0e0 <SEGGER_SYSVIEW_Init+0x78>)
 800c080:	f7ff f8dc 	bl	800b23c <SEGGER_RTT_AllocUpBuffer>
 800c084:	4603      	mov	r3, r0
 800c086:	b2da      	uxtb	r2, r3
 800c088:	4b16      	ldr	r3, [pc, #88]	; (800c0e4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c08a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800c08c:	4b15      	ldr	r3, [pc, #84]	; (800c0e4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c08e:	785a      	ldrb	r2, [r3, #1]
 800c090:	4b14      	ldr	r3, [pc, #80]	; (800c0e4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c092:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800c094:	4b13      	ldr	r3, [pc, #76]	; (800c0e4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c096:	7e1b      	ldrb	r3, [r3, #24]
 800c098:	4618      	mov	r0, r3
 800c09a:	2300      	movs	r3, #0
 800c09c:	9300      	str	r3, [sp, #0]
 800c09e:	2308      	movs	r3, #8
 800c0a0:	4a11      	ldr	r2, [pc, #68]	; (800c0e8 <SEGGER_SYSVIEW_Init+0x80>)
 800c0a2:	490f      	ldr	r1, [pc, #60]	; (800c0e0 <SEGGER_SYSVIEW_Init+0x78>)
 800c0a4:	f7ff f94e 	bl	800b344 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800c0a8:	4b0e      	ldr	r3, [pc, #56]	; (800c0e4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c0ae:	4b0f      	ldr	r3, [pc, #60]	; (800c0ec <SEGGER_SYSVIEW_Init+0x84>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	4a0c      	ldr	r2, [pc, #48]	; (800c0e4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c0b4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800c0b6:	4a0b      	ldr	r2, [pc, #44]	; (800c0e4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800c0bc:	4a09      	ldr	r2, [pc, #36]	; (800c0e4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800c0c2:	4a08      	ldr	r2, [pc, #32]	; (800c0e4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800c0c8:	4a06      	ldr	r2, [pc, #24]	; (800c0e4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800c0ce:	4b05      	ldr	r3, [pc, #20]	; (800c0e4 <SEGGER_SYSVIEW_Init+0x7c>)
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800c0d4:	bf00      	nop
 800c0d6:	3710      	adds	r7, #16
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}
 800c0dc:	20008a68 	.word	0x20008a68
 800c0e0:	0800e4d8 	.word	0x0800e4d8
 800c0e4:	20009a70 	.word	0x20009a70
 800c0e8:	20009a68 	.word	0x20009a68
 800c0ec:	e0001004 	.word	0xe0001004

0800c0f0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800c0f0:	b480      	push	{r7}
 800c0f2:	b083      	sub	sp, #12
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800c0f8:	4a04      	ldr	r2, [pc, #16]	; (800c10c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6113      	str	r3, [r2, #16]
}
 800c0fe:	bf00      	nop
 800c100:	370c      	adds	r7, #12
 800c102:	46bd      	mov	sp, r7
 800c104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c108:	4770      	bx	lr
 800c10a:	bf00      	nop
 800c10c:	20009a70 	.word	0x20009a70

0800c110 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800c110:	b580      	push	{r7, lr}
 800c112:	b084      	sub	sp, #16
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c118:	f3ef 8311 	mrs	r3, BASEPRI
 800c11c:	f04f 0120 	mov.w	r1, #32
 800c120:	f381 8811 	msr	BASEPRI, r1
 800c124:	60fb      	str	r3, [r7, #12]
 800c126:	4808      	ldr	r0, [pc, #32]	; (800c148 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800c128:	f7ff f9a8 	bl	800b47c <_PreparePacket>
 800c12c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800c12e:	687a      	ldr	r2, [r7, #4]
 800c130:	68b9      	ldr	r1, [r7, #8]
 800c132:	68b8      	ldr	r0, [r7, #8]
 800c134:	f7ff fa90 	bl	800b658 <_SendPacket>
  RECORD_END();
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	f383 8811 	msr	BASEPRI, r3
}
 800c13e:	bf00      	nop
 800c140:	3710      	adds	r7, #16
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}
 800c146:	bf00      	nop
 800c148:	20009aa0 	.word	0x20009aa0

0800c14c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b088      	sub	sp, #32
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c156:	f3ef 8311 	mrs	r3, BASEPRI
 800c15a:	f04f 0120 	mov.w	r1, #32
 800c15e:	f381 8811 	msr	BASEPRI, r1
 800c162:	617b      	str	r3, [r7, #20]
 800c164:	4816      	ldr	r0, [pc, #88]	; (800c1c0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800c166:	f7ff f989 	bl	800b47c <_PreparePacket>
 800c16a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	61fb      	str	r3, [r7, #28]
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	61bb      	str	r3, [r7, #24]
 800c178:	e00b      	b.n	800c192 <SEGGER_SYSVIEW_RecordU32+0x46>
 800c17a:	69bb      	ldr	r3, [r7, #24]
 800c17c:	b2da      	uxtb	r2, r3
 800c17e:	69fb      	ldr	r3, [r7, #28]
 800c180:	1c59      	adds	r1, r3, #1
 800c182:	61f9      	str	r1, [r7, #28]
 800c184:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c188:	b2d2      	uxtb	r2, r2
 800c18a:	701a      	strb	r2, [r3, #0]
 800c18c:	69bb      	ldr	r3, [r7, #24]
 800c18e:	09db      	lsrs	r3, r3, #7
 800c190:	61bb      	str	r3, [r7, #24]
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	2b7f      	cmp	r3, #127	; 0x7f
 800c196:	d8f0      	bhi.n	800c17a <SEGGER_SYSVIEW_RecordU32+0x2e>
 800c198:	69fb      	ldr	r3, [r7, #28]
 800c19a:	1c5a      	adds	r2, r3, #1
 800c19c:	61fa      	str	r2, [r7, #28]
 800c19e:	69ba      	ldr	r2, [r7, #24]
 800c1a0:	b2d2      	uxtb	r2, r2
 800c1a2:	701a      	strb	r2, [r3, #0]
 800c1a4:	69fb      	ldr	r3, [r7, #28]
 800c1a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c1a8:	687a      	ldr	r2, [r7, #4]
 800c1aa:	68f9      	ldr	r1, [r7, #12]
 800c1ac:	6938      	ldr	r0, [r7, #16]
 800c1ae:	f7ff fa53 	bl	800b658 <_SendPacket>
  RECORD_END();
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	f383 8811 	msr	BASEPRI, r3
}
 800c1b8:	bf00      	nop
 800c1ba:	3720      	adds	r7, #32
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}
 800c1c0:	20009aa0 	.word	0x20009aa0

0800c1c4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b08c      	sub	sp, #48	; 0x30
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800c1d0:	f3ef 8311 	mrs	r3, BASEPRI
 800c1d4:	f04f 0120 	mov.w	r1, #32
 800c1d8:	f381 8811 	msr	BASEPRI, r1
 800c1dc:	61fb      	str	r3, [r7, #28]
 800c1de:	4825      	ldr	r0, [pc, #148]	; (800c274 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800c1e0:	f7ff f94c 	bl	800b47c <_PreparePacket>
 800c1e4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c1e6:	69bb      	ldr	r3, [r7, #24]
 800c1e8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c1f2:	e00b      	b.n	800c20c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800c1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f6:	b2da      	uxtb	r2, r3
 800c1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1fa:	1c59      	adds	r1, r3, #1
 800c1fc:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c1fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c202:	b2d2      	uxtb	r2, r2
 800c204:	701a      	strb	r2, [r3, #0]
 800c206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c208:	09db      	lsrs	r3, r3, #7
 800c20a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c20e:	2b7f      	cmp	r3, #127	; 0x7f
 800c210:	d8f0      	bhi.n	800c1f4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800c212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c214:	1c5a      	adds	r2, r3, #1
 800c216:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c218:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c21a:	b2d2      	uxtb	r2, r2
 800c21c:	701a      	strb	r2, [r3, #0]
 800c21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c220:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	627b      	str	r3, [r7, #36]	; 0x24
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	623b      	str	r3, [r7, #32]
 800c22a:	e00b      	b.n	800c244 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800c22c:	6a3b      	ldr	r3, [r7, #32]
 800c22e:	b2da      	uxtb	r2, r3
 800c230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c232:	1c59      	adds	r1, r3, #1
 800c234:	6279      	str	r1, [r7, #36]	; 0x24
 800c236:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c23a:	b2d2      	uxtb	r2, r2
 800c23c:	701a      	strb	r2, [r3, #0]
 800c23e:	6a3b      	ldr	r3, [r7, #32]
 800c240:	09db      	lsrs	r3, r3, #7
 800c242:	623b      	str	r3, [r7, #32]
 800c244:	6a3b      	ldr	r3, [r7, #32]
 800c246:	2b7f      	cmp	r3, #127	; 0x7f
 800c248:	d8f0      	bhi.n	800c22c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800c24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24c:	1c5a      	adds	r2, r3, #1
 800c24e:	627a      	str	r2, [r7, #36]	; 0x24
 800c250:	6a3a      	ldr	r2, [r7, #32]
 800c252:	b2d2      	uxtb	r2, r2
 800c254:	701a      	strb	r2, [r3, #0]
 800c256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c258:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c25a:	68fa      	ldr	r2, [r7, #12]
 800c25c:	6979      	ldr	r1, [r7, #20]
 800c25e:	69b8      	ldr	r0, [r7, #24]
 800c260:	f7ff f9fa 	bl	800b658 <_SendPacket>
  RECORD_END();
 800c264:	69fb      	ldr	r3, [r7, #28]
 800c266:	f383 8811 	msr	BASEPRI, r3
}
 800c26a:	bf00      	nop
 800c26c:	3730      	adds	r7, #48	; 0x30
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}
 800c272:	bf00      	nop
 800c274:	20009aa0 	.word	0x20009aa0

0800c278 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800c278:	b580      	push	{r7, lr}
 800c27a:	b08e      	sub	sp, #56	; 0x38
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	60f8      	str	r0, [r7, #12]
 800c280:	60b9      	str	r1, [r7, #8]
 800c282:	607a      	str	r2, [r7, #4]
 800c284:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800c286:	f3ef 8311 	mrs	r3, BASEPRI
 800c28a:	f04f 0120 	mov.w	r1, #32
 800c28e:	f381 8811 	msr	BASEPRI, r1
 800c292:	61fb      	str	r3, [r7, #28]
 800c294:	4832      	ldr	r0, [pc, #200]	; (800c360 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800c296:	f7ff f8f1 	bl	800b47c <_PreparePacket>
 800c29a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c29c:	69bb      	ldr	r3, [r7, #24]
 800c29e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	637b      	str	r3, [r7, #52]	; 0x34
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	633b      	str	r3, [r7, #48]	; 0x30
 800c2a8:	e00b      	b.n	800c2c2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800c2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ac:	b2da      	uxtb	r2, r3
 800c2ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2b0:	1c59      	adds	r1, r3, #1
 800c2b2:	6379      	str	r1, [r7, #52]	; 0x34
 800c2b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c2b8:	b2d2      	uxtb	r2, r2
 800c2ba:	701a      	strb	r2, [r3, #0]
 800c2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2be:	09db      	lsrs	r3, r3, #7
 800c2c0:	633b      	str	r3, [r7, #48]	; 0x30
 800c2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c4:	2b7f      	cmp	r3, #127	; 0x7f
 800c2c6:	d8f0      	bhi.n	800c2aa <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800c2c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2ca:	1c5a      	adds	r2, r3, #1
 800c2cc:	637a      	str	r2, [r7, #52]	; 0x34
 800c2ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2d0:	b2d2      	uxtb	r2, r2
 800c2d2:	701a      	strb	r2, [r3, #0]
 800c2d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	62bb      	str	r3, [r7, #40]	; 0x28
 800c2e0:	e00b      	b.n	800c2fa <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800c2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e4:	b2da      	uxtb	r2, r3
 800c2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e8:	1c59      	adds	r1, r3, #1
 800c2ea:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c2ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c2f0:	b2d2      	uxtb	r2, r2
 800c2f2:	701a      	strb	r2, [r3, #0]
 800c2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f6:	09db      	lsrs	r3, r3, #7
 800c2f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2fc:	2b7f      	cmp	r3, #127	; 0x7f
 800c2fe:	d8f0      	bhi.n	800c2e2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800c300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c302:	1c5a      	adds	r2, r3, #1
 800c304:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c308:	b2d2      	uxtb	r2, r2
 800c30a:	701a      	strb	r2, [r3, #0]
 800c30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c30e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	627b      	str	r3, [r7, #36]	; 0x24
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	623b      	str	r3, [r7, #32]
 800c318:	e00b      	b.n	800c332 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800c31a:	6a3b      	ldr	r3, [r7, #32]
 800c31c:	b2da      	uxtb	r2, r3
 800c31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c320:	1c59      	adds	r1, r3, #1
 800c322:	6279      	str	r1, [r7, #36]	; 0x24
 800c324:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c328:	b2d2      	uxtb	r2, r2
 800c32a:	701a      	strb	r2, [r3, #0]
 800c32c:	6a3b      	ldr	r3, [r7, #32]
 800c32e:	09db      	lsrs	r3, r3, #7
 800c330:	623b      	str	r3, [r7, #32]
 800c332:	6a3b      	ldr	r3, [r7, #32]
 800c334:	2b7f      	cmp	r3, #127	; 0x7f
 800c336:	d8f0      	bhi.n	800c31a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800c338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c33a:	1c5a      	adds	r2, r3, #1
 800c33c:	627a      	str	r2, [r7, #36]	; 0x24
 800c33e:	6a3a      	ldr	r2, [r7, #32]
 800c340:	b2d2      	uxtb	r2, r2
 800c342:	701a      	strb	r2, [r3, #0]
 800c344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c346:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c348:	68fa      	ldr	r2, [r7, #12]
 800c34a:	6979      	ldr	r1, [r7, #20]
 800c34c:	69b8      	ldr	r0, [r7, #24]
 800c34e:	f7ff f983 	bl	800b658 <_SendPacket>
  RECORD_END();
 800c352:	69fb      	ldr	r3, [r7, #28]
 800c354:	f383 8811 	msr	BASEPRI, r3
}
 800c358:	bf00      	nop
 800c35a:	3738      	adds	r7, #56	; 0x38
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	20009aa0 	.word	0x20009aa0

0800c364 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800c364:	b580      	push	{r7, lr}
 800c366:	b090      	sub	sp, #64	; 0x40
 800c368:	af00      	add	r7, sp, #0
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	60b9      	str	r1, [r7, #8]
 800c36e:	607a      	str	r2, [r7, #4]
 800c370:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c372:	f3ef 8311 	mrs	r3, BASEPRI
 800c376:	f04f 0120 	mov.w	r1, #32
 800c37a:	f381 8811 	msr	BASEPRI, r1
 800c37e:	61fb      	str	r3, [r7, #28]
 800c380:	4840      	ldr	r0, [pc, #256]	; (800c484 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800c382:	f7ff f87b 	bl	800b47c <_PreparePacket>
 800c386:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c388:	69bb      	ldr	r3, [r7, #24]
 800c38a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	63bb      	str	r3, [r7, #56]	; 0x38
 800c394:	e00b      	b.n	800c3ae <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800c396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c398:	b2da      	uxtb	r2, r3
 800c39a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c39c:	1c59      	adds	r1, r3, #1
 800c39e:	63f9      	str	r1, [r7, #60]	; 0x3c
 800c3a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c3a4:	b2d2      	uxtb	r2, r2
 800c3a6:	701a      	strb	r2, [r3, #0]
 800c3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3aa:	09db      	lsrs	r3, r3, #7
 800c3ac:	63bb      	str	r3, [r7, #56]	; 0x38
 800c3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b0:	2b7f      	cmp	r3, #127	; 0x7f
 800c3b2:	d8f0      	bhi.n	800c396 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800c3b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3b6:	1c5a      	adds	r2, r3, #1
 800c3b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c3ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c3bc:	b2d2      	uxtb	r2, r2
 800c3be:	701a      	strb	r2, [r3, #0]
 800c3c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3c2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	637b      	str	r3, [r7, #52]	; 0x34
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	633b      	str	r3, [r7, #48]	; 0x30
 800c3cc:	e00b      	b.n	800c3e6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800c3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d0:	b2da      	uxtb	r2, r3
 800c3d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3d4:	1c59      	adds	r1, r3, #1
 800c3d6:	6379      	str	r1, [r7, #52]	; 0x34
 800c3d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c3dc:	b2d2      	uxtb	r2, r2
 800c3de:	701a      	strb	r2, [r3, #0]
 800c3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e2:	09db      	lsrs	r3, r3, #7
 800c3e4:	633b      	str	r3, [r7, #48]	; 0x30
 800c3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e8:	2b7f      	cmp	r3, #127	; 0x7f
 800c3ea:	d8f0      	bhi.n	800c3ce <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800c3ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ee:	1c5a      	adds	r2, r3, #1
 800c3f0:	637a      	str	r2, [r7, #52]	; 0x34
 800c3f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3f4:	b2d2      	uxtb	r2, r2
 800c3f6:	701a      	strb	r2, [r3, #0]
 800c3f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	62bb      	str	r3, [r7, #40]	; 0x28
 800c404:	e00b      	b.n	800c41e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800c406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c408:	b2da      	uxtb	r2, r3
 800c40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c40c:	1c59      	adds	r1, r3, #1
 800c40e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c410:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c414:	b2d2      	uxtb	r2, r2
 800c416:	701a      	strb	r2, [r3, #0]
 800c418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41a:	09db      	lsrs	r3, r3, #7
 800c41c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c420:	2b7f      	cmp	r3, #127	; 0x7f
 800c422:	d8f0      	bhi.n	800c406 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800c424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c426:	1c5a      	adds	r2, r3, #1
 800c428:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c42a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c42c:	b2d2      	uxtb	r2, r2
 800c42e:	701a      	strb	r2, [r3, #0]
 800c430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c432:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	627b      	str	r3, [r7, #36]	; 0x24
 800c438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c43a:	623b      	str	r3, [r7, #32]
 800c43c:	e00b      	b.n	800c456 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800c43e:	6a3b      	ldr	r3, [r7, #32]
 800c440:	b2da      	uxtb	r2, r3
 800c442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c444:	1c59      	adds	r1, r3, #1
 800c446:	6279      	str	r1, [r7, #36]	; 0x24
 800c448:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c44c:	b2d2      	uxtb	r2, r2
 800c44e:	701a      	strb	r2, [r3, #0]
 800c450:	6a3b      	ldr	r3, [r7, #32]
 800c452:	09db      	lsrs	r3, r3, #7
 800c454:	623b      	str	r3, [r7, #32]
 800c456:	6a3b      	ldr	r3, [r7, #32]
 800c458:	2b7f      	cmp	r3, #127	; 0x7f
 800c45a:	d8f0      	bhi.n	800c43e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800c45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45e:	1c5a      	adds	r2, r3, #1
 800c460:	627a      	str	r2, [r7, #36]	; 0x24
 800c462:	6a3a      	ldr	r2, [r7, #32]
 800c464:	b2d2      	uxtb	r2, r2
 800c466:	701a      	strb	r2, [r3, #0]
 800c468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c46c:	68fa      	ldr	r2, [r7, #12]
 800c46e:	6979      	ldr	r1, [r7, #20]
 800c470:	69b8      	ldr	r0, [r7, #24]
 800c472:	f7ff f8f1 	bl	800b658 <_SendPacket>
  RECORD_END();
 800c476:	69fb      	ldr	r3, [r7, #28]
 800c478:	f383 8811 	msr	BASEPRI, r3
}
 800c47c:	bf00      	nop
 800c47e:	3740      	adds	r7, #64	; 0x40
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}
 800c484:	20009aa0 	.word	0x20009aa0

0800c488 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800c488:	b580      	push	{r7, lr}
 800c48a:	b08c      	sub	sp, #48	; 0x30
 800c48c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800c48e:	4b58      	ldr	r3, [pc, #352]	; (800c5f0 <SEGGER_SYSVIEW_Start+0x168>)
 800c490:	2201      	movs	r2, #1
 800c492:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800c494:	f3ef 8311 	mrs	r3, BASEPRI
 800c498:	f04f 0120 	mov.w	r1, #32
 800c49c:	f381 8811 	msr	BASEPRI, r1
 800c4a0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800c4a2:	4b53      	ldr	r3, [pc, #332]	; (800c5f0 <SEGGER_SYSVIEW_Start+0x168>)
 800c4a4:	785b      	ldrb	r3, [r3, #1]
 800c4a6:	220a      	movs	r2, #10
 800c4a8:	4952      	ldr	r1, [pc, #328]	; (800c5f4 <SEGGER_SYSVIEW_Start+0x16c>)
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7f3 fe98 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800c4b6:	200a      	movs	r0, #10
 800c4b8:	f7ff fe2a 	bl	800c110 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c4bc:	f3ef 8311 	mrs	r3, BASEPRI
 800c4c0:	f04f 0120 	mov.w	r1, #32
 800c4c4:	f381 8811 	msr	BASEPRI, r1
 800c4c8:	60bb      	str	r3, [r7, #8]
 800c4ca:	484b      	ldr	r0, [pc, #300]	; (800c5f8 <SEGGER_SYSVIEW_Start+0x170>)
 800c4cc:	f7fe ffd6 	bl	800b47c <_PreparePacket>
 800c4d0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4da:	4b45      	ldr	r3, [pc, #276]	; (800c5f0 <SEGGER_SYSVIEW_Start+0x168>)
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	62bb      	str	r3, [r7, #40]	; 0x28
 800c4e0:	e00b      	b.n	800c4fa <SEGGER_SYSVIEW_Start+0x72>
 800c4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e4:	b2da      	uxtb	r2, r3
 800c4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e8:	1c59      	adds	r1, r3, #1
 800c4ea:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c4ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c4f0:	b2d2      	uxtb	r2, r2
 800c4f2:	701a      	strb	r2, [r3, #0]
 800c4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f6:	09db      	lsrs	r3, r3, #7
 800c4f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4fc:	2b7f      	cmp	r3, #127	; 0x7f
 800c4fe:	d8f0      	bhi.n	800c4e2 <SEGGER_SYSVIEW_Start+0x5a>
 800c500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c502:	1c5a      	adds	r2, r3, #1
 800c504:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c506:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c508:	b2d2      	uxtb	r2, r2
 800c50a:	701a      	strb	r2, [r3, #0]
 800c50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c50e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	627b      	str	r3, [r7, #36]	; 0x24
 800c514:	4b36      	ldr	r3, [pc, #216]	; (800c5f0 <SEGGER_SYSVIEW_Start+0x168>)
 800c516:	689b      	ldr	r3, [r3, #8]
 800c518:	623b      	str	r3, [r7, #32]
 800c51a:	e00b      	b.n	800c534 <SEGGER_SYSVIEW_Start+0xac>
 800c51c:	6a3b      	ldr	r3, [r7, #32]
 800c51e:	b2da      	uxtb	r2, r3
 800c520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c522:	1c59      	adds	r1, r3, #1
 800c524:	6279      	str	r1, [r7, #36]	; 0x24
 800c526:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c52a:	b2d2      	uxtb	r2, r2
 800c52c:	701a      	strb	r2, [r3, #0]
 800c52e:	6a3b      	ldr	r3, [r7, #32]
 800c530:	09db      	lsrs	r3, r3, #7
 800c532:	623b      	str	r3, [r7, #32]
 800c534:	6a3b      	ldr	r3, [r7, #32]
 800c536:	2b7f      	cmp	r3, #127	; 0x7f
 800c538:	d8f0      	bhi.n	800c51c <SEGGER_SYSVIEW_Start+0x94>
 800c53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53c:	1c5a      	adds	r2, r3, #1
 800c53e:	627a      	str	r2, [r7, #36]	; 0x24
 800c540:	6a3a      	ldr	r2, [r7, #32]
 800c542:	b2d2      	uxtb	r2, r2
 800c544:	701a      	strb	r2, [r3, #0]
 800c546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c548:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	61fb      	str	r3, [r7, #28]
 800c54e:	4b28      	ldr	r3, [pc, #160]	; (800c5f0 <SEGGER_SYSVIEW_Start+0x168>)
 800c550:	691b      	ldr	r3, [r3, #16]
 800c552:	61bb      	str	r3, [r7, #24]
 800c554:	e00b      	b.n	800c56e <SEGGER_SYSVIEW_Start+0xe6>
 800c556:	69bb      	ldr	r3, [r7, #24]
 800c558:	b2da      	uxtb	r2, r3
 800c55a:	69fb      	ldr	r3, [r7, #28]
 800c55c:	1c59      	adds	r1, r3, #1
 800c55e:	61f9      	str	r1, [r7, #28]
 800c560:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c564:	b2d2      	uxtb	r2, r2
 800c566:	701a      	strb	r2, [r3, #0]
 800c568:	69bb      	ldr	r3, [r7, #24]
 800c56a:	09db      	lsrs	r3, r3, #7
 800c56c:	61bb      	str	r3, [r7, #24]
 800c56e:	69bb      	ldr	r3, [r7, #24]
 800c570:	2b7f      	cmp	r3, #127	; 0x7f
 800c572:	d8f0      	bhi.n	800c556 <SEGGER_SYSVIEW_Start+0xce>
 800c574:	69fb      	ldr	r3, [r7, #28]
 800c576:	1c5a      	adds	r2, r3, #1
 800c578:	61fa      	str	r2, [r7, #28]
 800c57a:	69ba      	ldr	r2, [r7, #24]
 800c57c:	b2d2      	uxtb	r2, r2
 800c57e:	701a      	strb	r2, [r3, #0]
 800c580:	69fb      	ldr	r3, [r7, #28]
 800c582:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	617b      	str	r3, [r7, #20]
 800c588:	2300      	movs	r3, #0
 800c58a:	613b      	str	r3, [r7, #16]
 800c58c:	e00b      	b.n	800c5a6 <SEGGER_SYSVIEW_Start+0x11e>
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	b2da      	uxtb	r2, r3
 800c592:	697b      	ldr	r3, [r7, #20]
 800c594:	1c59      	adds	r1, r3, #1
 800c596:	6179      	str	r1, [r7, #20]
 800c598:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c59c:	b2d2      	uxtb	r2, r2
 800c59e:	701a      	strb	r2, [r3, #0]
 800c5a0:	693b      	ldr	r3, [r7, #16]
 800c5a2:	09db      	lsrs	r3, r3, #7
 800c5a4:	613b      	str	r3, [r7, #16]
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	2b7f      	cmp	r3, #127	; 0x7f
 800c5aa:	d8f0      	bhi.n	800c58e <SEGGER_SYSVIEW_Start+0x106>
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	1c5a      	adds	r2, r3, #1
 800c5b0:	617a      	str	r2, [r7, #20]
 800c5b2:	693a      	ldr	r2, [r7, #16]
 800c5b4:	b2d2      	uxtb	r2, r2
 800c5b6:	701a      	strb	r2, [r3, #0]
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800c5bc:	2218      	movs	r2, #24
 800c5be:	6839      	ldr	r1, [r7, #0]
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f7ff f849 	bl	800b658 <_SendPacket>
      RECORD_END();
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800c5cc:	4b08      	ldr	r3, [pc, #32]	; (800c5f0 <SEGGER_SYSVIEW_Start+0x168>)
 800c5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d002      	beq.n	800c5da <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800c5d4:	4b06      	ldr	r3, [pc, #24]	; (800c5f0 <SEGGER_SYSVIEW_Start+0x168>)
 800c5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5d8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800c5da:	f000 f9eb 	bl	800c9b4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800c5de:	f000 f9b1 	bl	800c944 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800c5e2:	f000 fc83 	bl	800ceec <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800c5e6:	bf00      	nop
 800c5e8:	3730      	adds	r7, #48	; 0x30
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop
 800c5f0:	20009a70 	.word	0x20009a70
 800c5f4:	0800e55c 	.word	0x0800e55c
 800c5f8:	20009aa0 	.word	0x20009aa0

0800c5fc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c602:	f3ef 8311 	mrs	r3, BASEPRI
 800c606:	f04f 0120 	mov.w	r1, #32
 800c60a:	f381 8811 	msr	BASEPRI, r1
 800c60e:	607b      	str	r3, [r7, #4]
 800c610:	480b      	ldr	r0, [pc, #44]	; (800c640 <SEGGER_SYSVIEW_Stop+0x44>)
 800c612:	f7fe ff33 	bl	800b47c <_PreparePacket>
 800c616:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800c618:	4b0a      	ldr	r3, [pc, #40]	; (800c644 <SEGGER_SYSVIEW_Stop+0x48>)
 800c61a:	781b      	ldrb	r3, [r3, #0]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d007      	beq.n	800c630 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800c620:	220b      	movs	r2, #11
 800c622:	6839      	ldr	r1, [r7, #0]
 800c624:	6838      	ldr	r0, [r7, #0]
 800c626:	f7ff f817 	bl	800b658 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800c62a:	4b06      	ldr	r3, [pc, #24]	; (800c644 <SEGGER_SYSVIEW_Stop+0x48>)
 800c62c:	2200      	movs	r2, #0
 800c62e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f383 8811 	msr	BASEPRI, r3
}
 800c636:	bf00      	nop
 800c638:	3708      	adds	r7, #8
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	bf00      	nop
 800c640:	20009aa0 	.word	0x20009aa0
 800c644:	20009a70 	.word	0x20009a70

0800c648 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800c648:	b580      	push	{r7, lr}
 800c64a:	b08c      	sub	sp, #48	; 0x30
 800c64c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c64e:	f3ef 8311 	mrs	r3, BASEPRI
 800c652:	f04f 0120 	mov.w	r1, #32
 800c656:	f381 8811 	msr	BASEPRI, r1
 800c65a:	60fb      	str	r3, [r7, #12]
 800c65c:	4845      	ldr	r0, [pc, #276]	; (800c774 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800c65e:	f7fe ff0d 	bl	800b47c <_PreparePacket>
 800c662:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c66c:	4b42      	ldr	r3, [pc, #264]	; (800c778 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c66e:	685b      	ldr	r3, [r3, #4]
 800c670:	62bb      	str	r3, [r7, #40]	; 0x28
 800c672:	e00b      	b.n	800c68c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800c674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c676:	b2da      	uxtb	r2, r3
 800c678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c67a:	1c59      	adds	r1, r3, #1
 800c67c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c67e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c682:	b2d2      	uxtb	r2, r2
 800c684:	701a      	strb	r2, [r3, #0]
 800c686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c688:	09db      	lsrs	r3, r3, #7
 800c68a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c68e:	2b7f      	cmp	r3, #127	; 0x7f
 800c690:	d8f0      	bhi.n	800c674 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800c692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c694:	1c5a      	adds	r2, r3, #1
 800c696:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c698:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c69a:	b2d2      	uxtb	r2, r2
 800c69c:	701a      	strb	r2, [r3, #0]
 800c69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	627b      	str	r3, [r7, #36]	; 0x24
 800c6a6:	4b34      	ldr	r3, [pc, #208]	; (800c778 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c6a8:	689b      	ldr	r3, [r3, #8]
 800c6aa:	623b      	str	r3, [r7, #32]
 800c6ac:	e00b      	b.n	800c6c6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800c6ae:	6a3b      	ldr	r3, [r7, #32]
 800c6b0:	b2da      	uxtb	r2, r3
 800c6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b4:	1c59      	adds	r1, r3, #1
 800c6b6:	6279      	str	r1, [r7, #36]	; 0x24
 800c6b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c6bc:	b2d2      	uxtb	r2, r2
 800c6be:	701a      	strb	r2, [r3, #0]
 800c6c0:	6a3b      	ldr	r3, [r7, #32]
 800c6c2:	09db      	lsrs	r3, r3, #7
 800c6c4:	623b      	str	r3, [r7, #32]
 800c6c6:	6a3b      	ldr	r3, [r7, #32]
 800c6c8:	2b7f      	cmp	r3, #127	; 0x7f
 800c6ca:	d8f0      	bhi.n	800c6ae <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800c6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ce:	1c5a      	adds	r2, r3, #1
 800c6d0:	627a      	str	r2, [r7, #36]	; 0x24
 800c6d2:	6a3a      	ldr	r2, [r7, #32]
 800c6d4:	b2d2      	uxtb	r2, r2
 800c6d6:	701a      	strb	r2, [r3, #0]
 800c6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	61fb      	str	r3, [r7, #28]
 800c6e0:	4b25      	ldr	r3, [pc, #148]	; (800c778 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c6e2:	691b      	ldr	r3, [r3, #16]
 800c6e4:	61bb      	str	r3, [r7, #24]
 800c6e6:	e00b      	b.n	800c700 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800c6e8:	69bb      	ldr	r3, [r7, #24]
 800c6ea:	b2da      	uxtb	r2, r3
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	1c59      	adds	r1, r3, #1
 800c6f0:	61f9      	str	r1, [r7, #28]
 800c6f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c6f6:	b2d2      	uxtb	r2, r2
 800c6f8:	701a      	strb	r2, [r3, #0]
 800c6fa:	69bb      	ldr	r3, [r7, #24]
 800c6fc:	09db      	lsrs	r3, r3, #7
 800c6fe:	61bb      	str	r3, [r7, #24]
 800c700:	69bb      	ldr	r3, [r7, #24]
 800c702:	2b7f      	cmp	r3, #127	; 0x7f
 800c704:	d8f0      	bhi.n	800c6e8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800c706:	69fb      	ldr	r3, [r7, #28]
 800c708:	1c5a      	adds	r2, r3, #1
 800c70a:	61fa      	str	r2, [r7, #28]
 800c70c:	69ba      	ldr	r2, [r7, #24]
 800c70e:	b2d2      	uxtb	r2, r2
 800c710:	701a      	strb	r2, [r3, #0]
 800c712:	69fb      	ldr	r3, [r7, #28]
 800c714:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	617b      	str	r3, [r7, #20]
 800c71a:	2300      	movs	r3, #0
 800c71c:	613b      	str	r3, [r7, #16]
 800c71e:	e00b      	b.n	800c738 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	b2da      	uxtb	r2, r3
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	1c59      	adds	r1, r3, #1
 800c728:	6179      	str	r1, [r7, #20]
 800c72a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c72e:	b2d2      	uxtb	r2, r2
 800c730:	701a      	strb	r2, [r3, #0]
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	09db      	lsrs	r3, r3, #7
 800c736:	613b      	str	r3, [r7, #16]
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	2b7f      	cmp	r3, #127	; 0x7f
 800c73c:	d8f0      	bhi.n	800c720 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	1c5a      	adds	r2, r3, #1
 800c742:	617a      	str	r2, [r7, #20]
 800c744:	693a      	ldr	r2, [r7, #16]
 800c746:	b2d2      	uxtb	r2, r2
 800c748:	701a      	strb	r2, [r3, #0]
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800c74e:	2218      	movs	r2, #24
 800c750:	6879      	ldr	r1, [r7, #4]
 800c752:	68b8      	ldr	r0, [r7, #8]
 800c754:	f7fe ff80 	bl	800b658 <_SendPacket>
  RECORD_END();
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800c75e:	4b06      	ldr	r3, [pc, #24]	; (800c778 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c762:	2b00      	cmp	r3, #0
 800c764:	d002      	beq.n	800c76c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800c766:	4b04      	ldr	r3, [pc, #16]	; (800c778 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c76a:	4798      	blx	r3
  }
}
 800c76c:	bf00      	nop
 800c76e:	3730      	adds	r7, #48	; 0x30
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}
 800c774:	20009aa0 	.word	0x20009aa0
 800c778:	20009a70 	.word	0x20009a70

0800c77c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b092      	sub	sp, #72	; 0x48
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800c784:	f3ef 8311 	mrs	r3, BASEPRI
 800c788:	f04f 0120 	mov.w	r1, #32
 800c78c:	f381 8811 	msr	BASEPRI, r1
 800c790:	617b      	str	r3, [r7, #20]
 800c792:	486a      	ldr	r0, [pc, #424]	; (800c93c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800c794:	f7fe fe72 	bl	800b47c <_PreparePacket>
 800c798:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c79a:	693b      	ldr	r3, [r7, #16]
 800c79c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	647b      	str	r3, [r7, #68]	; 0x44
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681a      	ldr	r2, [r3, #0]
 800c7a6:	4b66      	ldr	r3, [pc, #408]	; (800c940 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800c7a8:	691b      	ldr	r3, [r3, #16]
 800c7aa:	1ad3      	subs	r3, r2, r3
 800c7ac:	643b      	str	r3, [r7, #64]	; 0x40
 800c7ae:	e00b      	b.n	800c7c8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800c7b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7b2:	b2da      	uxtb	r2, r3
 800c7b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7b6:	1c59      	adds	r1, r3, #1
 800c7b8:	6479      	str	r1, [r7, #68]	; 0x44
 800c7ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c7be:	b2d2      	uxtb	r2, r2
 800c7c0:	701a      	strb	r2, [r3, #0]
 800c7c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7c4:	09db      	lsrs	r3, r3, #7
 800c7c6:	643b      	str	r3, [r7, #64]	; 0x40
 800c7c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7ca:	2b7f      	cmp	r3, #127	; 0x7f
 800c7cc:	d8f0      	bhi.n	800c7b0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800c7ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7d0:	1c5a      	adds	r2, r3, #1
 800c7d2:	647a      	str	r2, [r7, #68]	; 0x44
 800c7d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c7d6:	b2d2      	uxtb	r2, r2
 800c7d8:	701a      	strb	r2, [r3, #0]
 800c7da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	689b      	ldr	r3, [r3, #8]
 800c7e6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c7e8:	e00b      	b.n	800c802 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800c7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ec:	b2da      	uxtb	r2, r3
 800c7ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7f0:	1c59      	adds	r1, r3, #1
 800c7f2:	63f9      	str	r1, [r7, #60]	; 0x3c
 800c7f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c7f8:	b2d2      	uxtb	r2, r2
 800c7fa:	701a      	strb	r2, [r3, #0]
 800c7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fe:	09db      	lsrs	r3, r3, #7
 800c800:	63bb      	str	r3, [r7, #56]	; 0x38
 800c802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c804:	2b7f      	cmp	r3, #127	; 0x7f
 800c806:	d8f0      	bhi.n	800c7ea <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800c808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c80a:	1c5a      	adds	r2, r3, #1
 800c80c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c80e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c810:	b2d2      	uxtb	r2, r2
 800c812:	701a      	strb	r2, [r3, #0]
 800c814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c816:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	685b      	ldr	r3, [r3, #4]
 800c81c:	2220      	movs	r2, #32
 800c81e:	4619      	mov	r1, r3
 800c820:	68f8      	ldr	r0, [r7, #12]
 800c822:	f7fe fddb 	bl	800b3dc <_EncodeStr>
 800c826:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800c828:	2209      	movs	r2, #9
 800c82a:	68f9      	ldr	r1, [r7, #12]
 800c82c:	6938      	ldr	r0, [r7, #16]
 800c82e:	f7fe ff13 	bl	800b658 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	637b      	str	r3, [r7, #52]	; 0x34
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681a      	ldr	r2, [r3, #0]
 800c83e:	4b40      	ldr	r3, [pc, #256]	; (800c940 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800c840:	691b      	ldr	r3, [r3, #16]
 800c842:	1ad3      	subs	r3, r2, r3
 800c844:	633b      	str	r3, [r7, #48]	; 0x30
 800c846:	e00b      	b.n	800c860 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800c848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c84a:	b2da      	uxtb	r2, r3
 800c84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c84e:	1c59      	adds	r1, r3, #1
 800c850:	6379      	str	r1, [r7, #52]	; 0x34
 800c852:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c856:	b2d2      	uxtb	r2, r2
 800c858:	701a      	strb	r2, [r3, #0]
 800c85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c85c:	09db      	lsrs	r3, r3, #7
 800c85e:	633b      	str	r3, [r7, #48]	; 0x30
 800c860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c862:	2b7f      	cmp	r3, #127	; 0x7f
 800c864:	d8f0      	bhi.n	800c848 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800c866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c868:	1c5a      	adds	r2, r3, #1
 800c86a:	637a      	str	r2, [r7, #52]	; 0x34
 800c86c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c86e:	b2d2      	uxtb	r2, r2
 800c870:	701a      	strb	r2, [r3, #0]
 800c872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c874:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	68db      	ldr	r3, [r3, #12]
 800c87e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c880:	e00b      	b.n	800c89a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800c882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c884:	b2da      	uxtb	r2, r3
 800c886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c888:	1c59      	adds	r1, r3, #1
 800c88a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c88c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c890:	b2d2      	uxtb	r2, r2
 800c892:	701a      	strb	r2, [r3, #0]
 800c894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c896:	09db      	lsrs	r3, r3, #7
 800c898:	62bb      	str	r3, [r7, #40]	; 0x28
 800c89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c89c:	2b7f      	cmp	r3, #127	; 0x7f
 800c89e:	d8f0      	bhi.n	800c882 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800c8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a2:	1c5a      	adds	r2, r3, #1
 800c8a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c8a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8a8:	b2d2      	uxtb	r2, r2
 800c8aa:	701a      	strb	r2, [r3, #0]
 800c8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	627b      	str	r3, [r7, #36]	; 0x24
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	691b      	ldr	r3, [r3, #16]
 800c8b8:	623b      	str	r3, [r7, #32]
 800c8ba:	e00b      	b.n	800c8d4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800c8bc:	6a3b      	ldr	r3, [r7, #32]
 800c8be:	b2da      	uxtb	r2, r3
 800c8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c2:	1c59      	adds	r1, r3, #1
 800c8c4:	6279      	str	r1, [r7, #36]	; 0x24
 800c8c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c8ca:	b2d2      	uxtb	r2, r2
 800c8cc:	701a      	strb	r2, [r3, #0]
 800c8ce:	6a3b      	ldr	r3, [r7, #32]
 800c8d0:	09db      	lsrs	r3, r3, #7
 800c8d2:	623b      	str	r3, [r7, #32]
 800c8d4:	6a3b      	ldr	r3, [r7, #32]
 800c8d6:	2b7f      	cmp	r3, #127	; 0x7f
 800c8d8:	d8f0      	bhi.n	800c8bc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800c8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8dc:	1c5a      	adds	r2, r3, #1
 800c8de:	627a      	str	r2, [r7, #36]	; 0x24
 800c8e0:	6a3a      	ldr	r2, [r7, #32]
 800c8e2:	b2d2      	uxtb	r2, r2
 800c8e4:	701a      	strb	r2, [r3, #0]
 800c8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	61fb      	str	r3, [r7, #28]
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	61bb      	str	r3, [r7, #24]
 800c8f2:	e00b      	b.n	800c90c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800c8f4:	69bb      	ldr	r3, [r7, #24]
 800c8f6:	b2da      	uxtb	r2, r3
 800c8f8:	69fb      	ldr	r3, [r7, #28]
 800c8fa:	1c59      	adds	r1, r3, #1
 800c8fc:	61f9      	str	r1, [r7, #28]
 800c8fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c902:	b2d2      	uxtb	r2, r2
 800c904:	701a      	strb	r2, [r3, #0]
 800c906:	69bb      	ldr	r3, [r7, #24]
 800c908:	09db      	lsrs	r3, r3, #7
 800c90a:	61bb      	str	r3, [r7, #24]
 800c90c:	69bb      	ldr	r3, [r7, #24]
 800c90e:	2b7f      	cmp	r3, #127	; 0x7f
 800c910:	d8f0      	bhi.n	800c8f4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800c912:	69fb      	ldr	r3, [r7, #28]
 800c914:	1c5a      	adds	r2, r3, #1
 800c916:	61fa      	str	r2, [r7, #28]
 800c918:	69ba      	ldr	r2, [r7, #24]
 800c91a:	b2d2      	uxtb	r2, r2
 800c91c:	701a      	strb	r2, [r3, #0]
 800c91e:	69fb      	ldr	r3, [r7, #28]
 800c920:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800c922:	2215      	movs	r2, #21
 800c924:	68f9      	ldr	r1, [r7, #12]
 800c926:	6938      	ldr	r0, [r7, #16]
 800c928:	f7fe fe96 	bl	800b658 <_SendPacket>
  RECORD_END();
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	f383 8811 	msr	BASEPRI, r3
}
 800c932:	bf00      	nop
 800c934:	3748      	adds	r7, #72	; 0x48
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}
 800c93a:	bf00      	nop
 800c93c:	20009aa0 	.word	0x20009aa0
 800c940:	20009a70 	.word	0x20009a70

0800c944 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800c944:	b580      	push	{r7, lr}
 800c946:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800c948:	4b07      	ldr	r3, [pc, #28]	; (800c968 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c94a:	6a1b      	ldr	r3, [r3, #32]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d008      	beq.n	800c962 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800c950:	4b05      	ldr	r3, [pc, #20]	; (800c968 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c952:	6a1b      	ldr	r3, [r3, #32]
 800c954:	685b      	ldr	r3, [r3, #4]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d003      	beq.n	800c962 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800c95a:	4b03      	ldr	r3, [pc, #12]	; (800c968 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c95c:	6a1b      	ldr	r3, [r3, #32]
 800c95e:	685b      	ldr	r3, [r3, #4]
 800c960:	4798      	blx	r3
  }
}
 800c962:	bf00      	nop
 800c964:	bd80      	pop	{r7, pc}
 800c966:	bf00      	nop
 800c968:	20009a70 	.word	0x20009a70

0800c96c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b086      	sub	sp, #24
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c974:	f3ef 8311 	mrs	r3, BASEPRI
 800c978:	f04f 0120 	mov.w	r1, #32
 800c97c:	f381 8811 	msr	BASEPRI, r1
 800c980:	617b      	str	r3, [r7, #20]
 800c982:	480b      	ldr	r0, [pc, #44]	; (800c9b0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800c984:	f7fe fd7a 	bl	800b47c <_PreparePacket>
 800c988:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c98a:	2280      	movs	r2, #128	; 0x80
 800c98c:	6879      	ldr	r1, [r7, #4]
 800c98e:	6938      	ldr	r0, [r7, #16]
 800c990:	f7fe fd24 	bl	800b3dc <_EncodeStr>
 800c994:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800c996:	220e      	movs	r2, #14
 800c998:	68f9      	ldr	r1, [r7, #12]
 800c99a:	6938      	ldr	r0, [r7, #16]
 800c99c:	f7fe fe5c 	bl	800b658 <_SendPacket>
  RECORD_END();
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	f383 8811 	msr	BASEPRI, r3
}
 800c9a6:	bf00      	nop
 800c9a8:	3718      	adds	r7, #24
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}
 800c9ae:	bf00      	nop
 800c9b0:	20009aa0 	.word	0x20009aa0

0800c9b4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800c9b4:	b590      	push	{r4, r7, lr}
 800c9b6:	b083      	sub	sp, #12
 800c9b8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800c9ba:	4b15      	ldr	r3, [pc, #84]	; (800ca10 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c9bc:	6a1b      	ldr	r3, [r3, #32]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d01a      	beq.n	800c9f8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800c9c2:	4b13      	ldr	r3, [pc, #76]	; (800ca10 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c9c4:	6a1b      	ldr	r3, [r3, #32]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d015      	beq.n	800c9f8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800c9cc:	4b10      	ldr	r3, [pc, #64]	; (800ca10 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c9ce:	6a1b      	ldr	r3, [r3, #32]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	4798      	blx	r3
 800c9d4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800c9d8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800c9da:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c9de:	f04f 0200 	mov.w	r2, #0
 800c9e2:	f04f 0300 	mov.w	r3, #0
 800c9e6:	000a      	movs	r2, r1
 800c9e8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800c9ea:	4613      	mov	r3, r2
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	4621      	mov	r1, r4
 800c9f0:	200d      	movs	r0, #13
 800c9f2:	f7ff fbe7 	bl	800c1c4 <SEGGER_SYSVIEW_RecordU32x2>
 800c9f6:	e006      	b.n	800ca06 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800c9f8:	4b06      	ldr	r3, [pc, #24]	; (800ca14 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	4619      	mov	r1, r3
 800c9fe:	200c      	movs	r0, #12
 800ca00:	f7ff fba4 	bl	800c14c <SEGGER_SYSVIEW_RecordU32>
  }
}
 800ca04:	bf00      	nop
 800ca06:	bf00      	nop
 800ca08:	370c      	adds	r7, #12
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd90      	pop	{r4, r7, pc}
 800ca0e:	bf00      	nop
 800ca10:	20009a70 	.word	0x20009a70
 800ca14:	e0001004 	.word	0xe0001004

0800ca18 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b086      	sub	sp, #24
 800ca1c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800ca1e:	f3ef 8311 	mrs	r3, BASEPRI
 800ca22:	f04f 0120 	mov.w	r1, #32
 800ca26:	f381 8811 	msr	BASEPRI, r1
 800ca2a:	60fb      	str	r3, [r7, #12]
 800ca2c:	4819      	ldr	r0, [pc, #100]	; (800ca94 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800ca2e:	f7fe fd25 	bl	800b47c <_PreparePacket>
 800ca32:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800ca38:	4b17      	ldr	r3, [pc, #92]	; (800ca98 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca40:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	617b      	str	r3, [r7, #20]
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	613b      	str	r3, [r7, #16]
 800ca4a:	e00b      	b.n	800ca64 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	b2da      	uxtb	r2, r3
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	1c59      	adds	r1, r3, #1
 800ca54:	6179      	str	r1, [r7, #20]
 800ca56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ca5a:	b2d2      	uxtb	r2, r2
 800ca5c:	701a      	strb	r2, [r3, #0]
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	09db      	lsrs	r3, r3, #7
 800ca62:	613b      	str	r3, [r7, #16]
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	2b7f      	cmp	r3, #127	; 0x7f
 800ca68:	d8f0      	bhi.n	800ca4c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	1c5a      	adds	r2, r3, #1
 800ca6e:	617a      	str	r2, [r7, #20]
 800ca70:	693a      	ldr	r2, [r7, #16]
 800ca72:	b2d2      	uxtb	r2, r2
 800ca74:	701a      	strb	r2, [r3, #0]
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800ca7a:	2202      	movs	r2, #2
 800ca7c:	6879      	ldr	r1, [r7, #4]
 800ca7e:	68b8      	ldr	r0, [r7, #8]
 800ca80:	f7fe fdea 	bl	800b658 <_SendPacket>
  RECORD_END();
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	f383 8811 	msr	BASEPRI, r3
}
 800ca8a:	bf00      	nop
 800ca8c:	3718      	adds	r7, #24
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop
 800ca94:	20009aa0 	.word	0x20009aa0
 800ca98:	e000ed04 	.word	0xe000ed04

0800ca9c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b082      	sub	sp, #8
 800caa0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800caa2:	f3ef 8311 	mrs	r3, BASEPRI
 800caa6:	f04f 0120 	mov.w	r1, #32
 800caaa:	f381 8811 	msr	BASEPRI, r1
 800caae:	607b      	str	r3, [r7, #4]
 800cab0:	4807      	ldr	r0, [pc, #28]	; (800cad0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800cab2:	f7fe fce3 	bl	800b47c <_PreparePacket>
 800cab6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800cab8:	2203      	movs	r2, #3
 800caba:	6839      	ldr	r1, [r7, #0]
 800cabc:	6838      	ldr	r0, [r7, #0]
 800cabe:	f7fe fdcb 	bl	800b658 <_SendPacket>
  RECORD_END();
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f383 8811 	msr	BASEPRI, r3
}
 800cac8:	bf00      	nop
 800caca:	3708      	adds	r7, #8
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}
 800cad0:	20009aa0 	.word	0x20009aa0

0800cad4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800cada:	f3ef 8311 	mrs	r3, BASEPRI
 800cade:	f04f 0120 	mov.w	r1, #32
 800cae2:	f381 8811 	msr	BASEPRI, r1
 800cae6:	607b      	str	r3, [r7, #4]
 800cae8:	4807      	ldr	r0, [pc, #28]	; (800cb08 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800caea:	f7fe fcc7 	bl	800b47c <_PreparePacket>
 800caee:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800caf0:	2212      	movs	r2, #18
 800caf2:	6839      	ldr	r1, [r7, #0]
 800caf4:	6838      	ldr	r0, [r7, #0]
 800caf6:	f7fe fdaf 	bl	800b658 <_SendPacket>
  RECORD_END();
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f383 8811 	msr	BASEPRI, r3
}
 800cb00:	bf00      	nop
 800cb02:	3708      	adds	r7, #8
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}
 800cb08:	20009aa0 	.word	0x20009aa0

0800cb0c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b082      	sub	sp, #8
 800cb10:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800cb12:	f3ef 8311 	mrs	r3, BASEPRI
 800cb16:	f04f 0120 	mov.w	r1, #32
 800cb1a:	f381 8811 	msr	BASEPRI, r1
 800cb1e:	607b      	str	r3, [r7, #4]
 800cb20:	4807      	ldr	r0, [pc, #28]	; (800cb40 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800cb22:	f7fe fcab 	bl	800b47c <_PreparePacket>
 800cb26:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800cb28:	2211      	movs	r2, #17
 800cb2a:	6839      	ldr	r1, [r7, #0]
 800cb2c:	6838      	ldr	r0, [r7, #0]
 800cb2e:	f7fe fd93 	bl	800b658 <_SendPacket>
  RECORD_END();
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f383 8811 	msr	BASEPRI, r3
}
 800cb38:	bf00      	nop
 800cb3a:	3708      	adds	r7, #8
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}
 800cb40:	20009aa0 	.word	0x20009aa0

0800cb44 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b088      	sub	sp, #32
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800cb4c:	f3ef 8311 	mrs	r3, BASEPRI
 800cb50:	f04f 0120 	mov.w	r1, #32
 800cb54:	f381 8811 	msr	BASEPRI, r1
 800cb58:	617b      	str	r3, [r7, #20]
 800cb5a:	4819      	ldr	r0, [pc, #100]	; (800cbc0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800cb5c:	f7fe fc8e 	bl	800b47c <_PreparePacket>
 800cb60:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800cb66:	4b17      	ldr	r3, [pc, #92]	; (800cbc4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800cb68:	691b      	ldr	r3, [r3, #16]
 800cb6a:	687a      	ldr	r2, [r7, #4]
 800cb6c:	1ad3      	subs	r3, r2, r3
 800cb6e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	61fb      	str	r3, [r7, #28]
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	61bb      	str	r3, [r7, #24]
 800cb78:	e00b      	b.n	800cb92 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800cb7a:	69bb      	ldr	r3, [r7, #24]
 800cb7c:	b2da      	uxtb	r2, r3
 800cb7e:	69fb      	ldr	r3, [r7, #28]
 800cb80:	1c59      	adds	r1, r3, #1
 800cb82:	61f9      	str	r1, [r7, #28]
 800cb84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cb88:	b2d2      	uxtb	r2, r2
 800cb8a:	701a      	strb	r2, [r3, #0]
 800cb8c:	69bb      	ldr	r3, [r7, #24]
 800cb8e:	09db      	lsrs	r3, r3, #7
 800cb90:	61bb      	str	r3, [r7, #24]
 800cb92:	69bb      	ldr	r3, [r7, #24]
 800cb94:	2b7f      	cmp	r3, #127	; 0x7f
 800cb96:	d8f0      	bhi.n	800cb7a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800cb98:	69fb      	ldr	r3, [r7, #28]
 800cb9a:	1c5a      	adds	r2, r3, #1
 800cb9c:	61fa      	str	r2, [r7, #28]
 800cb9e:	69ba      	ldr	r2, [r7, #24]
 800cba0:	b2d2      	uxtb	r2, r2
 800cba2:	701a      	strb	r2, [r3, #0]
 800cba4:	69fb      	ldr	r3, [r7, #28]
 800cba6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800cba8:	2208      	movs	r2, #8
 800cbaa:	68f9      	ldr	r1, [r7, #12]
 800cbac:	6938      	ldr	r0, [r7, #16]
 800cbae:	f7fe fd53 	bl	800b658 <_SendPacket>
  RECORD_END();
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	f383 8811 	msr	BASEPRI, r3
}
 800cbb8:	bf00      	nop
 800cbba:	3720      	adds	r7, #32
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}
 800cbc0:	20009aa0 	.word	0x20009aa0
 800cbc4:	20009a70 	.word	0x20009a70

0800cbc8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b088      	sub	sp, #32
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800cbd0:	f3ef 8311 	mrs	r3, BASEPRI
 800cbd4:	f04f 0120 	mov.w	r1, #32
 800cbd8:	f381 8811 	msr	BASEPRI, r1
 800cbdc:	617b      	str	r3, [r7, #20]
 800cbde:	4819      	ldr	r0, [pc, #100]	; (800cc44 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800cbe0:	f7fe fc4c 	bl	800b47c <_PreparePacket>
 800cbe4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800cbea:	4b17      	ldr	r3, [pc, #92]	; (800cc48 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800cbec:	691b      	ldr	r3, [r3, #16]
 800cbee:	687a      	ldr	r2, [r7, #4]
 800cbf0:	1ad3      	subs	r3, r2, r3
 800cbf2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	61fb      	str	r3, [r7, #28]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	61bb      	str	r3, [r7, #24]
 800cbfc:	e00b      	b.n	800cc16 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800cbfe:	69bb      	ldr	r3, [r7, #24]
 800cc00:	b2da      	uxtb	r2, r3
 800cc02:	69fb      	ldr	r3, [r7, #28]
 800cc04:	1c59      	adds	r1, r3, #1
 800cc06:	61f9      	str	r1, [r7, #28]
 800cc08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cc0c:	b2d2      	uxtb	r2, r2
 800cc0e:	701a      	strb	r2, [r3, #0]
 800cc10:	69bb      	ldr	r3, [r7, #24]
 800cc12:	09db      	lsrs	r3, r3, #7
 800cc14:	61bb      	str	r3, [r7, #24]
 800cc16:	69bb      	ldr	r3, [r7, #24]
 800cc18:	2b7f      	cmp	r3, #127	; 0x7f
 800cc1a:	d8f0      	bhi.n	800cbfe <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800cc1c:	69fb      	ldr	r3, [r7, #28]
 800cc1e:	1c5a      	adds	r2, r3, #1
 800cc20:	61fa      	str	r2, [r7, #28]
 800cc22:	69ba      	ldr	r2, [r7, #24]
 800cc24:	b2d2      	uxtb	r2, r2
 800cc26:	701a      	strb	r2, [r3, #0]
 800cc28:	69fb      	ldr	r3, [r7, #28]
 800cc2a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800cc2c:	2204      	movs	r2, #4
 800cc2e:	68f9      	ldr	r1, [r7, #12]
 800cc30:	6938      	ldr	r0, [r7, #16]
 800cc32:	f7fe fd11 	bl	800b658 <_SendPacket>
  RECORD_END();
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	f383 8811 	msr	BASEPRI, r3
}
 800cc3c:	bf00      	nop
 800cc3e:	3720      	adds	r7, #32
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	20009aa0 	.word	0x20009aa0
 800cc48:	20009a70 	.word	0x20009a70

0800cc4c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b088      	sub	sp, #32
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800cc54:	f3ef 8311 	mrs	r3, BASEPRI
 800cc58:	f04f 0120 	mov.w	r1, #32
 800cc5c:	f381 8811 	msr	BASEPRI, r1
 800cc60:	617b      	str	r3, [r7, #20]
 800cc62:	4819      	ldr	r0, [pc, #100]	; (800ccc8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800cc64:	f7fe fc0a 	bl	800b47c <_PreparePacket>
 800cc68:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800cc6e:	4b17      	ldr	r3, [pc, #92]	; (800cccc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800cc70:	691b      	ldr	r3, [r3, #16]
 800cc72:	687a      	ldr	r2, [r7, #4]
 800cc74:	1ad3      	subs	r3, r2, r3
 800cc76:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	61fb      	str	r3, [r7, #28]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	61bb      	str	r3, [r7, #24]
 800cc80:	e00b      	b.n	800cc9a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800cc82:	69bb      	ldr	r3, [r7, #24]
 800cc84:	b2da      	uxtb	r2, r3
 800cc86:	69fb      	ldr	r3, [r7, #28]
 800cc88:	1c59      	adds	r1, r3, #1
 800cc8a:	61f9      	str	r1, [r7, #28]
 800cc8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cc90:	b2d2      	uxtb	r2, r2
 800cc92:	701a      	strb	r2, [r3, #0]
 800cc94:	69bb      	ldr	r3, [r7, #24]
 800cc96:	09db      	lsrs	r3, r3, #7
 800cc98:	61bb      	str	r3, [r7, #24]
 800cc9a:	69bb      	ldr	r3, [r7, #24]
 800cc9c:	2b7f      	cmp	r3, #127	; 0x7f
 800cc9e:	d8f0      	bhi.n	800cc82 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800cca0:	69fb      	ldr	r3, [r7, #28]
 800cca2:	1c5a      	adds	r2, r3, #1
 800cca4:	61fa      	str	r2, [r7, #28]
 800cca6:	69ba      	ldr	r2, [r7, #24]
 800cca8:	b2d2      	uxtb	r2, r2
 800ccaa:	701a      	strb	r2, [r3, #0]
 800ccac:	69fb      	ldr	r3, [r7, #28]
 800ccae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800ccb0:	2206      	movs	r2, #6
 800ccb2:	68f9      	ldr	r1, [r7, #12]
 800ccb4:	6938      	ldr	r0, [r7, #16]
 800ccb6:	f7fe fccf 	bl	800b658 <_SendPacket>
  RECORD_END();
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	f383 8811 	msr	BASEPRI, r3
}
 800ccc0:	bf00      	nop
 800ccc2:	3720      	adds	r7, #32
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}
 800ccc8:	20009aa0 	.word	0x20009aa0
 800cccc:	20009a70 	.word	0x20009a70

0800ccd0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b08a      	sub	sp, #40	; 0x28
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800ccda:	f3ef 8311 	mrs	r3, BASEPRI
 800ccde:	f04f 0120 	mov.w	r1, #32
 800cce2:	f381 8811 	msr	BASEPRI, r1
 800cce6:	617b      	str	r3, [r7, #20]
 800cce8:	4827      	ldr	r0, [pc, #156]	; (800cd88 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800ccea:	f7fe fbc7 	bl	800b47c <_PreparePacket>
 800ccee:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800ccf4:	4b25      	ldr	r3, [pc, #148]	; (800cd8c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800ccf6:	691b      	ldr	r3, [r3, #16]
 800ccf8:	687a      	ldr	r2, [r7, #4]
 800ccfa:	1ad3      	subs	r3, r2, r3
 800ccfc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	627b      	str	r3, [r7, #36]	; 0x24
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	623b      	str	r3, [r7, #32]
 800cd06:	e00b      	b.n	800cd20 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800cd08:	6a3b      	ldr	r3, [r7, #32]
 800cd0a:	b2da      	uxtb	r2, r3
 800cd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0e:	1c59      	adds	r1, r3, #1
 800cd10:	6279      	str	r1, [r7, #36]	; 0x24
 800cd12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cd16:	b2d2      	uxtb	r2, r2
 800cd18:	701a      	strb	r2, [r3, #0]
 800cd1a:	6a3b      	ldr	r3, [r7, #32]
 800cd1c:	09db      	lsrs	r3, r3, #7
 800cd1e:	623b      	str	r3, [r7, #32]
 800cd20:	6a3b      	ldr	r3, [r7, #32]
 800cd22:	2b7f      	cmp	r3, #127	; 0x7f
 800cd24:	d8f0      	bhi.n	800cd08 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800cd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd28:	1c5a      	adds	r2, r3, #1
 800cd2a:	627a      	str	r2, [r7, #36]	; 0x24
 800cd2c:	6a3a      	ldr	r2, [r7, #32]
 800cd2e:	b2d2      	uxtb	r2, r2
 800cd30:	701a      	strb	r2, [r3, #0]
 800cd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	61fb      	str	r3, [r7, #28]
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	61bb      	str	r3, [r7, #24]
 800cd3e:	e00b      	b.n	800cd58 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800cd40:	69bb      	ldr	r3, [r7, #24]
 800cd42:	b2da      	uxtb	r2, r3
 800cd44:	69fb      	ldr	r3, [r7, #28]
 800cd46:	1c59      	adds	r1, r3, #1
 800cd48:	61f9      	str	r1, [r7, #28]
 800cd4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cd4e:	b2d2      	uxtb	r2, r2
 800cd50:	701a      	strb	r2, [r3, #0]
 800cd52:	69bb      	ldr	r3, [r7, #24]
 800cd54:	09db      	lsrs	r3, r3, #7
 800cd56:	61bb      	str	r3, [r7, #24]
 800cd58:	69bb      	ldr	r3, [r7, #24]
 800cd5a:	2b7f      	cmp	r3, #127	; 0x7f
 800cd5c:	d8f0      	bhi.n	800cd40 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800cd5e:	69fb      	ldr	r3, [r7, #28]
 800cd60:	1c5a      	adds	r2, r3, #1
 800cd62:	61fa      	str	r2, [r7, #28]
 800cd64:	69ba      	ldr	r2, [r7, #24]
 800cd66:	b2d2      	uxtb	r2, r2
 800cd68:	701a      	strb	r2, [r3, #0]
 800cd6a:	69fb      	ldr	r3, [r7, #28]
 800cd6c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800cd6e:	2207      	movs	r2, #7
 800cd70:	68f9      	ldr	r1, [r7, #12]
 800cd72:	6938      	ldr	r0, [r7, #16]
 800cd74:	f7fe fc70 	bl	800b658 <_SendPacket>
  RECORD_END();
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	f383 8811 	msr	BASEPRI, r3
}
 800cd7e:	bf00      	nop
 800cd80:	3728      	adds	r7, #40	; 0x28
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}
 800cd86:	bf00      	nop
 800cd88:	20009aa0 	.word	0x20009aa0
 800cd8c:	20009a70 	.word	0x20009a70

0800cd90 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800cd90:	b480      	push	{r7}
 800cd92:	b083      	sub	sp, #12
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800cd98:	4b04      	ldr	r3, [pc, #16]	; (800cdac <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800cd9a:	691b      	ldr	r3, [r3, #16]
 800cd9c:	687a      	ldr	r2, [r7, #4]
 800cd9e:	1ad3      	subs	r3, r2, r3
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	370c      	adds	r7, #12
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr
 800cdac:	20009a70 	.word	0x20009a70

0800cdb0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b08c      	sub	sp, #48	; 0x30
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800cdba:	4b3b      	ldr	r3, [pc, #236]	; (800cea8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d06d      	beq.n	800ce9e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800cdc2:	4b39      	ldr	r3, [pc, #228]	; (800cea8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800cdc8:	2300      	movs	r3, #0
 800cdca:	62bb      	str	r3, [r7, #40]	; 0x28
 800cdcc:	e008      	b.n	800cde0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800cdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd0:	691b      	ldr	r3, [r3, #16]
 800cdd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800cdd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d007      	beq.n	800cdea <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800cdda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cddc:	3301      	adds	r3, #1
 800cdde:	62bb      	str	r3, [r7, #40]	; 0x28
 800cde0:	79fb      	ldrb	r3, [r7, #7]
 800cde2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d3f2      	bcc.n	800cdce <SEGGER_SYSVIEW_SendModule+0x1e>
 800cde8:	e000      	b.n	800cdec <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800cdea:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800cdec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d055      	beq.n	800ce9e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800cdf2:	f3ef 8311 	mrs	r3, BASEPRI
 800cdf6:	f04f 0120 	mov.w	r1, #32
 800cdfa:	f381 8811 	msr	BASEPRI, r1
 800cdfe:	617b      	str	r3, [r7, #20]
 800ce00:	482a      	ldr	r0, [pc, #168]	; (800ceac <SEGGER_SYSVIEW_SendModule+0xfc>)
 800ce02:	f7fe fb3b 	bl	800b47c <_PreparePacket>
 800ce06:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	627b      	str	r3, [r7, #36]	; 0x24
 800ce10:	79fb      	ldrb	r3, [r7, #7]
 800ce12:	623b      	str	r3, [r7, #32]
 800ce14:	e00b      	b.n	800ce2e <SEGGER_SYSVIEW_SendModule+0x7e>
 800ce16:	6a3b      	ldr	r3, [r7, #32]
 800ce18:	b2da      	uxtb	r2, r3
 800ce1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce1c:	1c59      	adds	r1, r3, #1
 800ce1e:	6279      	str	r1, [r7, #36]	; 0x24
 800ce20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ce24:	b2d2      	uxtb	r2, r2
 800ce26:	701a      	strb	r2, [r3, #0]
 800ce28:	6a3b      	ldr	r3, [r7, #32]
 800ce2a:	09db      	lsrs	r3, r3, #7
 800ce2c:	623b      	str	r3, [r7, #32]
 800ce2e:	6a3b      	ldr	r3, [r7, #32]
 800ce30:	2b7f      	cmp	r3, #127	; 0x7f
 800ce32:	d8f0      	bhi.n	800ce16 <SEGGER_SYSVIEW_SendModule+0x66>
 800ce34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce36:	1c5a      	adds	r2, r3, #1
 800ce38:	627a      	str	r2, [r7, #36]	; 0x24
 800ce3a:	6a3a      	ldr	r2, [r7, #32]
 800ce3c:	b2d2      	uxtb	r2, r2
 800ce3e:	701a      	strb	r2, [r3, #0]
 800ce40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce42:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	61fb      	str	r3, [r7, #28]
 800ce48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce4a:	689b      	ldr	r3, [r3, #8]
 800ce4c:	61bb      	str	r3, [r7, #24]
 800ce4e:	e00b      	b.n	800ce68 <SEGGER_SYSVIEW_SendModule+0xb8>
 800ce50:	69bb      	ldr	r3, [r7, #24]
 800ce52:	b2da      	uxtb	r2, r3
 800ce54:	69fb      	ldr	r3, [r7, #28]
 800ce56:	1c59      	adds	r1, r3, #1
 800ce58:	61f9      	str	r1, [r7, #28]
 800ce5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ce5e:	b2d2      	uxtb	r2, r2
 800ce60:	701a      	strb	r2, [r3, #0]
 800ce62:	69bb      	ldr	r3, [r7, #24]
 800ce64:	09db      	lsrs	r3, r3, #7
 800ce66:	61bb      	str	r3, [r7, #24]
 800ce68:	69bb      	ldr	r3, [r7, #24]
 800ce6a:	2b7f      	cmp	r3, #127	; 0x7f
 800ce6c:	d8f0      	bhi.n	800ce50 <SEGGER_SYSVIEW_SendModule+0xa0>
 800ce6e:	69fb      	ldr	r3, [r7, #28]
 800ce70:	1c5a      	adds	r2, r3, #1
 800ce72:	61fa      	str	r2, [r7, #28]
 800ce74:	69ba      	ldr	r2, [r7, #24]
 800ce76:	b2d2      	uxtb	r2, r2
 800ce78:	701a      	strb	r2, [r3, #0]
 800ce7a:	69fb      	ldr	r3, [r7, #28]
 800ce7c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800ce7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	2280      	movs	r2, #128	; 0x80
 800ce84:	4619      	mov	r1, r3
 800ce86:	68f8      	ldr	r0, [r7, #12]
 800ce88:	f7fe faa8 	bl	800b3dc <_EncodeStr>
 800ce8c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800ce8e:	2216      	movs	r2, #22
 800ce90:	68f9      	ldr	r1, [r7, #12]
 800ce92:	6938      	ldr	r0, [r7, #16]
 800ce94:	f7fe fbe0 	bl	800b658 <_SendPacket>
      RECORD_END();
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800ce9e:	bf00      	nop
 800cea0:	3730      	adds	r7, #48	; 0x30
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}
 800cea6:	bf00      	nop
 800cea8:	20009a98 	.word	0x20009a98
 800ceac:	20009aa0 	.word	0x20009aa0

0800ceb0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b082      	sub	sp, #8
 800ceb4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800ceb6:	4b0c      	ldr	r3, [pc, #48]	; (800cee8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d00f      	beq.n	800cede <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800cebe:	4b0a      	ldr	r3, [pc, #40]	; (800cee8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	68db      	ldr	r3, [r3, #12]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d002      	beq.n	800ced2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	68db      	ldr	r3, [r3, #12]
 800ced0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	691b      	ldr	r3, [r3, #16]
 800ced6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d1f2      	bne.n	800cec4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800cede:	bf00      	nop
 800cee0:	3708      	adds	r7, #8
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop
 800cee8:	20009a98 	.word	0x20009a98

0800ceec <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b086      	sub	sp, #24
 800cef0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800cef2:	f3ef 8311 	mrs	r3, BASEPRI
 800cef6:	f04f 0120 	mov.w	r1, #32
 800cefa:	f381 8811 	msr	BASEPRI, r1
 800cefe:	60fb      	str	r3, [r7, #12]
 800cf00:	4817      	ldr	r0, [pc, #92]	; (800cf60 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800cf02:	f7fe fabb 	bl	800b47c <_PreparePacket>
 800cf06:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	617b      	str	r3, [r7, #20]
 800cf10:	4b14      	ldr	r3, [pc, #80]	; (800cf64 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800cf12:	781b      	ldrb	r3, [r3, #0]
 800cf14:	613b      	str	r3, [r7, #16]
 800cf16:	e00b      	b.n	800cf30 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	b2da      	uxtb	r2, r3
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	1c59      	adds	r1, r3, #1
 800cf20:	6179      	str	r1, [r7, #20]
 800cf22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cf26:	b2d2      	uxtb	r2, r2
 800cf28:	701a      	strb	r2, [r3, #0]
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	09db      	lsrs	r3, r3, #7
 800cf2e:	613b      	str	r3, [r7, #16]
 800cf30:	693b      	ldr	r3, [r7, #16]
 800cf32:	2b7f      	cmp	r3, #127	; 0x7f
 800cf34:	d8f0      	bhi.n	800cf18 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	1c5a      	adds	r2, r3, #1
 800cf3a:	617a      	str	r2, [r7, #20]
 800cf3c:	693a      	ldr	r2, [r7, #16]
 800cf3e:	b2d2      	uxtb	r2, r2
 800cf40:	701a      	strb	r2, [r3, #0]
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800cf46:	221b      	movs	r2, #27
 800cf48:	6879      	ldr	r1, [r7, #4]
 800cf4a:	68b8      	ldr	r0, [r7, #8]
 800cf4c:	f7fe fb84 	bl	800b658 <_SendPacket>
  RECORD_END();
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	f383 8811 	msr	BASEPRI, r3
}
 800cf56:	bf00      	nop
 800cf58:	3718      	adds	r7, #24
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}
 800cf5e:	bf00      	nop
 800cf60:	20009aa0 	.word	0x20009aa0
 800cf64:	20009a9c 	.word	0x20009a9c

0800cf68 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 800cf68:	b40f      	push	{r0, r1, r2, r3}
 800cf6a:	b580      	push	{r7, lr}
 800cf6c:	b082      	sub	sp, #8
 800cf6e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 800cf70:	f107 0314 	add.w	r3, r7, #20
 800cf74:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800cf76:	1d3b      	adds	r3, r7, #4
 800cf78:	461a      	mov	r2, r3
 800cf7a:	2100      	movs	r1, #0
 800cf7c:	6938      	ldr	r0, [r7, #16]
 800cf7e:	f7fe fe7b 	bl	800bc78 <_VPrintTarget>
  va_end(ParamList);
}
 800cf82:	bf00      	nop
 800cf84:	3708      	adds	r7, #8
 800cf86:	46bd      	mov	sp, r7
 800cf88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cf8c:	b004      	add	sp, #16
 800cf8e:	4770      	bx	lr

0800cf90 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b08a      	sub	sp, #40	; 0x28
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800cf98:	f3ef 8311 	mrs	r3, BASEPRI
 800cf9c:	f04f 0120 	mov.w	r1, #32
 800cfa0:	f381 8811 	msr	BASEPRI, r1
 800cfa4:	617b      	str	r3, [r7, #20]
 800cfa6:	4827      	ldr	r0, [pc, #156]	; (800d044 <SEGGER_SYSVIEW_Warn+0xb4>)
 800cfa8:	f7fe fa68 	bl	800b47c <_PreparePacket>
 800cfac:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800cfae:	2280      	movs	r2, #128	; 0x80
 800cfb0:	6879      	ldr	r1, [r7, #4]
 800cfb2:	6938      	ldr	r0, [r7, #16]
 800cfb4:	f7fe fa12 	bl	800b3dc <_EncodeStr>
 800cfb8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	627b      	str	r3, [r7, #36]	; 0x24
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	623b      	str	r3, [r7, #32]
 800cfc2:	e00b      	b.n	800cfdc <SEGGER_SYSVIEW_Warn+0x4c>
 800cfc4:	6a3b      	ldr	r3, [r7, #32]
 800cfc6:	b2da      	uxtb	r2, r3
 800cfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfca:	1c59      	adds	r1, r3, #1
 800cfcc:	6279      	str	r1, [r7, #36]	; 0x24
 800cfce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cfd2:	b2d2      	uxtb	r2, r2
 800cfd4:	701a      	strb	r2, [r3, #0]
 800cfd6:	6a3b      	ldr	r3, [r7, #32]
 800cfd8:	09db      	lsrs	r3, r3, #7
 800cfda:	623b      	str	r3, [r7, #32]
 800cfdc:	6a3b      	ldr	r3, [r7, #32]
 800cfde:	2b7f      	cmp	r3, #127	; 0x7f
 800cfe0:	d8f0      	bhi.n	800cfc4 <SEGGER_SYSVIEW_Warn+0x34>
 800cfe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe4:	1c5a      	adds	r2, r3, #1
 800cfe6:	627a      	str	r2, [r7, #36]	; 0x24
 800cfe8:	6a3a      	ldr	r2, [r7, #32]
 800cfea:	b2d2      	uxtb	r2, r2
 800cfec:	701a      	strb	r2, [r3, #0]
 800cfee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	61fb      	str	r3, [r7, #28]
 800cff6:	2300      	movs	r3, #0
 800cff8:	61bb      	str	r3, [r7, #24]
 800cffa:	e00b      	b.n	800d014 <SEGGER_SYSVIEW_Warn+0x84>
 800cffc:	69bb      	ldr	r3, [r7, #24]
 800cffe:	b2da      	uxtb	r2, r3
 800d000:	69fb      	ldr	r3, [r7, #28]
 800d002:	1c59      	adds	r1, r3, #1
 800d004:	61f9      	str	r1, [r7, #28]
 800d006:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d00a:	b2d2      	uxtb	r2, r2
 800d00c:	701a      	strb	r2, [r3, #0]
 800d00e:	69bb      	ldr	r3, [r7, #24]
 800d010:	09db      	lsrs	r3, r3, #7
 800d012:	61bb      	str	r3, [r7, #24]
 800d014:	69bb      	ldr	r3, [r7, #24]
 800d016:	2b7f      	cmp	r3, #127	; 0x7f
 800d018:	d8f0      	bhi.n	800cffc <SEGGER_SYSVIEW_Warn+0x6c>
 800d01a:	69fb      	ldr	r3, [r7, #28]
 800d01c:	1c5a      	adds	r2, r3, #1
 800d01e:	61fa      	str	r2, [r7, #28]
 800d020:	69ba      	ldr	r2, [r7, #24]
 800d022:	b2d2      	uxtb	r2, r2
 800d024:	701a      	strb	r2, [r3, #0]
 800d026:	69fb      	ldr	r3, [r7, #28]
 800d028:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800d02a:	221a      	movs	r2, #26
 800d02c:	68f9      	ldr	r1, [r7, #12]
 800d02e:	6938      	ldr	r0, [r7, #16]
 800d030:	f7fe fb12 	bl	800b658 <_SendPacket>
  RECORD_END();
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	f383 8811 	msr	BASEPRI, r3
}
 800d03a:	bf00      	nop
 800d03c:	3728      	adds	r7, #40	; 0x28
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
 800d042:	bf00      	nop
 800d044:	20009aa0 	.word	0x20009aa0

0800d048 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d04c:	2200      	movs	r2, #0
 800d04e:	4912      	ldr	r1, [pc, #72]	; (800d098 <MX_USB_DEVICE_Init+0x50>)
 800d050:	4812      	ldr	r0, [pc, #72]	; (800d09c <MX_USB_DEVICE_Init+0x54>)
 800d052:	f7fc fbe7 	bl	8009824 <USBD_Init>
 800d056:	4603      	mov	r3, r0
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d001      	beq.n	800d060 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d05c:	f7f3 fd8c 	bl	8000b78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d060:	490f      	ldr	r1, [pc, #60]	; (800d0a0 <MX_USB_DEVICE_Init+0x58>)
 800d062:	480e      	ldr	r0, [pc, #56]	; (800d09c <MX_USB_DEVICE_Init+0x54>)
 800d064:	f7fc fc0e 	bl	8009884 <USBD_RegisterClass>
 800d068:	4603      	mov	r3, r0
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d001      	beq.n	800d072 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d06e:	f7f3 fd83 	bl	8000b78 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d072:	490c      	ldr	r1, [pc, #48]	; (800d0a4 <MX_USB_DEVICE_Init+0x5c>)
 800d074:	4809      	ldr	r0, [pc, #36]	; (800d09c <MX_USB_DEVICE_Init+0x54>)
 800d076:	f7fc fb45 	bl	8009704 <USBD_CDC_RegisterInterface>
 800d07a:	4603      	mov	r3, r0
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d001      	beq.n	800d084 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d080:	f7f3 fd7a 	bl	8000b78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d084:	4805      	ldr	r0, [pc, #20]	; (800d09c <MX_USB_DEVICE_Init+0x54>)
 800d086:	f7fc fc33 	bl	80098f0 <USBD_Start>
 800d08a:	4603      	mov	r3, r0
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d001      	beq.n	800d094 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d090:	f7f3 fd72 	bl	8000b78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d094:	bf00      	nop
 800d096:	bd80      	pop	{r7, pc}
 800d098:	200000b4 	.word	0x200000b4
 800d09c:	20009b84 	.word	0x20009b84
 800d0a0:	20000020 	.word	0x20000020
 800d0a4:	200000a0 	.word	0x200000a0

0800d0a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	4905      	ldr	r1, [pc, #20]	; (800d0c4 <CDC_Init_FS+0x1c>)
 800d0b0:	4805      	ldr	r0, [pc, #20]	; (800d0c8 <CDC_Init_FS+0x20>)
 800d0b2:	f7fc fb41 	bl	8009738 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d0b6:	4905      	ldr	r1, [pc, #20]	; (800d0cc <CDC_Init_FS+0x24>)
 800d0b8:	4803      	ldr	r0, [pc, #12]	; (800d0c8 <CDC_Init_FS+0x20>)
 800d0ba:	f7fc fb5f 	bl	800977c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d0be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	bd80      	pop	{r7, pc}
 800d0c4:	2000a248 	.word	0x2000a248
 800d0c8:	20009b84 	.word	0x20009b84
 800d0cc:	20009e60 	.word	0x20009e60

0800d0d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d0d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr

0800d0e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	b083      	sub	sp, #12
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	6039      	str	r1, [r7, #0]
 800d0ea:	71fb      	strb	r3, [r7, #7]
 800d0ec:	4613      	mov	r3, r2
 800d0ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d0f0:	79fb      	ldrb	r3, [r7, #7]
 800d0f2:	2b23      	cmp	r3, #35	; 0x23
 800d0f4:	d84a      	bhi.n	800d18c <CDC_Control_FS+0xac>
 800d0f6:	a201      	add	r2, pc, #4	; (adr r2, 800d0fc <CDC_Control_FS+0x1c>)
 800d0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0fc:	0800d18d 	.word	0x0800d18d
 800d100:	0800d18d 	.word	0x0800d18d
 800d104:	0800d18d 	.word	0x0800d18d
 800d108:	0800d18d 	.word	0x0800d18d
 800d10c:	0800d18d 	.word	0x0800d18d
 800d110:	0800d18d 	.word	0x0800d18d
 800d114:	0800d18d 	.word	0x0800d18d
 800d118:	0800d18d 	.word	0x0800d18d
 800d11c:	0800d18d 	.word	0x0800d18d
 800d120:	0800d18d 	.word	0x0800d18d
 800d124:	0800d18d 	.word	0x0800d18d
 800d128:	0800d18d 	.word	0x0800d18d
 800d12c:	0800d18d 	.word	0x0800d18d
 800d130:	0800d18d 	.word	0x0800d18d
 800d134:	0800d18d 	.word	0x0800d18d
 800d138:	0800d18d 	.word	0x0800d18d
 800d13c:	0800d18d 	.word	0x0800d18d
 800d140:	0800d18d 	.word	0x0800d18d
 800d144:	0800d18d 	.word	0x0800d18d
 800d148:	0800d18d 	.word	0x0800d18d
 800d14c:	0800d18d 	.word	0x0800d18d
 800d150:	0800d18d 	.word	0x0800d18d
 800d154:	0800d18d 	.word	0x0800d18d
 800d158:	0800d18d 	.word	0x0800d18d
 800d15c:	0800d18d 	.word	0x0800d18d
 800d160:	0800d18d 	.word	0x0800d18d
 800d164:	0800d18d 	.word	0x0800d18d
 800d168:	0800d18d 	.word	0x0800d18d
 800d16c:	0800d18d 	.word	0x0800d18d
 800d170:	0800d18d 	.word	0x0800d18d
 800d174:	0800d18d 	.word	0x0800d18d
 800d178:	0800d18d 	.word	0x0800d18d
 800d17c:	0800d18d 	.word	0x0800d18d
 800d180:	0800d18d 	.word	0x0800d18d
 800d184:	0800d18d 	.word	0x0800d18d
 800d188:	0800d18d 	.word	0x0800d18d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d18c:	bf00      	nop
  }

  return (USBD_OK);
 800d18e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d190:	4618      	mov	r0, r3
 800d192:	370c      	adds	r7, #12
 800d194:	46bd      	mov	sp, r7
 800d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19a:	4770      	bx	lr

0800d19c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b082      	sub	sp, #8
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d1a6:	6879      	ldr	r1, [r7, #4]
 800d1a8:	4805      	ldr	r0, [pc, #20]	; (800d1c0 <CDC_Receive_FS+0x24>)
 800d1aa:	f7fc fae7 	bl	800977c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d1ae:	4804      	ldr	r0, [pc, #16]	; (800d1c0 <CDC_Receive_FS+0x24>)
 800d1b0:	f7fc fb02 	bl	80097b8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d1b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3708      	adds	r7, #8
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}
 800d1be:	bf00      	nop
 800d1c0:	20009b84 	.word	0x20009b84

0800d1c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	b087      	sub	sp, #28
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	60f8      	str	r0, [r7, #12]
 800d1cc:	60b9      	str	r1, [r7, #8]
 800d1ce:	4613      	mov	r3, r2
 800d1d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d1d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	371c      	adds	r7, #28
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e4:	4770      	bx	lr
	...

0800d1e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b083      	sub	sp, #12
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	6039      	str	r1, [r7, #0]
 800d1f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	2212      	movs	r2, #18
 800d1f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d1fa:	4b03      	ldr	r3, [pc, #12]	; (800d208 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	370c      	adds	r7, #12
 800d200:	46bd      	mov	sp, r7
 800d202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d206:	4770      	bx	lr
 800d208:	200000d0 	.word	0x200000d0

0800d20c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d20c:	b480      	push	{r7}
 800d20e:	b083      	sub	sp, #12
 800d210:	af00      	add	r7, sp, #0
 800d212:	4603      	mov	r3, r0
 800d214:	6039      	str	r1, [r7, #0]
 800d216:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	2204      	movs	r2, #4
 800d21c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d21e:	4b03      	ldr	r3, [pc, #12]	; (800d22c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d220:	4618      	mov	r0, r3
 800d222:	370c      	adds	r7, #12
 800d224:	46bd      	mov	sp, r7
 800d226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22a:	4770      	bx	lr
 800d22c:	200000e4 	.word	0x200000e4

0800d230 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b082      	sub	sp, #8
 800d234:	af00      	add	r7, sp, #0
 800d236:	4603      	mov	r3, r0
 800d238:	6039      	str	r1, [r7, #0]
 800d23a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d23c:	79fb      	ldrb	r3, [r7, #7]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d105      	bne.n	800d24e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d242:	683a      	ldr	r2, [r7, #0]
 800d244:	4907      	ldr	r1, [pc, #28]	; (800d264 <USBD_FS_ProductStrDescriptor+0x34>)
 800d246:	4808      	ldr	r0, [pc, #32]	; (800d268 <USBD_FS_ProductStrDescriptor+0x38>)
 800d248:	f7fd fcfe 	bl	800ac48 <USBD_GetString>
 800d24c:	e004      	b.n	800d258 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d24e:	683a      	ldr	r2, [r7, #0]
 800d250:	4904      	ldr	r1, [pc, #16]	; (800d264 <USBD_FS_ProductStrDescriptor+0x34>)
 800d252:	4805      	ldr	r0, [pc, #20]	; (800d268 <USBD_FS_ProductStrDescriptor+0x38>)
 800d254:	f7fd fcf8 	bl	800ac48 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d258:	4b02      	ldr	r3, [pc, #8]	; (800d264 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3708      	adds	r7, #8
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
 800d262:	bf00      	nop
 800d264:	2000a630 	.word	0x2000a630
 800d268:	0800e4e0 	.word	0x0800e4e0

0800d26c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b082      	sub	sp, #8
 800d270:	af00      	add	r7, sp, #0
 800d272:	4603      	mov	r3, r0
 800d274:	6039      	str	r1, [r7, #0]
 800d276:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d278:	683a      	ldr	r2, [r7, #0]
 800d27a:	4904      	ldr	r1, [pc, #16]	; (800d28c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d27c:	4804      	ldr	r0, [pc, #16]	; (800d290 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d27e:	f7fd fce3 	bl	800ac48 <USBD_GetString>
  return USBD_StrDesc;
 800d282:	4b02      	ldr	r3, [pc, #8]	; (800d28c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d284:	4618      	mov	r0, r3
 800d286:	3708      	adds	r7, #8
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}
 800d28c:	2000a630 	.word	0x2000a630
 800d290:	0800e4f8 	.word	0x0800e4f8

0800d294 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b082      	sub	sp, #8
 800d298:	af00      	add	r7, sp, #0
 800d29a:	4603      	mov	r3, r0
 800d29c:	6039      	str	r1, [r7, #0]
 800d29e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	221a      	movs	r2, #26
 800d2a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d2a6:	f000 f843 	bl	800d330 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d2aa:	4b02      	ldr	r3, [pc, #8]	; (800d2b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3708      	adds	r7, #8
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}
 800d2b4:	200000e8 	.word	0x200000e8

0800d2b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b082      	sub	sp, #8
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	4603      	mov	r3, r0
 800d2c0:	6039      	str	r1, [r7, #0]
 800d2c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d2c4:	79fb      	ldrb	r3, [r7, #7]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d105      	bne.n	800d2d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d2ca:	683a      	ldr	r2, [r7, #0]
 800d2cc:	4907      	ldr	r1, [pc, #28]	; (800d2ec <USBD_FS_ConfigStrDescriptor+0x34>)
 800d2ce:	4808      	ldr	r0, [pc, #32]	; (800d2f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d2d0:	f7fd fcba 	bl	800ac48 <USBD_GetString>
 800d2d4:	e004      	b.n	800d2e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d2d6:	683a      	ldr	r2, [r7, #0]
 800d2d8:	4904      	ldr	r1, [pc, #16]	; (800d2ec <USBD_FS_ConfigStrDescriptor+0x34>)
 800d2da:	4805      	ldr	r0, [pc, #20]	; (800d2f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d2dc:	f7fd fcb4 	bl	800ac48 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d2e0:	4b02      	ldr	r3, [pc, #8]	; (800d2ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3708      	adds	r7, #8
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}
 800d2ea:	bf00      	nop
 800d2ec:	2000a630 	.word	0x2000a630
 800d2f0:	0800e50c 	.word	0x0800e50c

0800d2f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	6039      	str	r1, [r7, #0]
 800d2fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d300:	79fb      	ldrb	r3, [r7, #7]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d105      	bne.n	800d312 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d306:	683a      	ldr	r2, [r7, #0]
 800d308:	4907      	ldr	r1, [pc, #28]	; (800d328 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d30a:	4808      	ldr	r0, [pc, #32]	; (800d32c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d30c:	f7fd fc9c 	bl	800ac48 <USBD_GetString>
 800d310:	e004      	b.n	800d31c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d312:	683a      	ldr	r2, [r7, #0]
 800d314:	4904      	ldr	r1, [pc, #16]	; (800d328 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d316:	4805      	ldr	r0, [pc, #20]	; (800d32c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d318:	f7fd fc96 	bl	800ac48 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d31c:	4b02      	ldr	r3, [pc, #8]	; (800d328 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d31e:	4618      	mov	r0, r3
 800d320:	3708      	adds	r7, #8
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
 800d326:	bf00      	nop
 800d328:	2000a630 	.word	0x2000a630
 800d32c:	0800e518 	.word	0x0800e518

0800d330 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b084      	sub	sp, #16
 800d334:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d336:	4b0f      	ldr	r3, [pc, #60]	; (800d374 <Get_SerialNum+0x44>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d33c:	4b0e      	ldr	r3, [pc, #56]	; (800d378 <Get_SerialNum+0x48>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d342:	4b0e      	ldr	r3, [pc, #56]	; (800d37c <Get_SerialNum+0x4c>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d348:	68fa      	ldr	r2, [r7, #12]
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	4413      	add	r3, r2
 800d34e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d009      	beq.n	800d36a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d356:	2208      	movs	r2, #8
 800d358:	4909      	ldr	r1, [pc, #36]	; (800d380 <Get_SerialNum+0x50>)
 800d35a:	68f8      	ldr	r0, [r7, #12]
 800d35c:	f000 f814 	bl	800d388 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d360:	2204      	movs	r2, #4
 800d362:	4908      	ldr	r1, [pc, #32]	; (800d384 <Get_SerialNum+0x54>)
 800d364:	68b8      	ldr	r0, [r7, #8]
 800d366:	f000 f80f 	bl	800d388 <IntToUnicode>
  }
}
 800d36a:	bf00      	nop
 800d36c:	3710      	adds	r7, #16
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}
 800d372:	bf00      	nop
 800d374:	1fff7a10 	.word	0x1fff7a10
 800d378:	1fff7a14 	.word	0x1fff7a14
 800d37c:	1fff7a18 	.word	0x1fff7a18
 800d380:	200000ea 	.word	0x200000ea
 800d384:	200000fa 	.word	0x200000fa

0800d388 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d388:	b480      	push	{r7}
 800d38a:	b087      	sub	sp, #28
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	60f8      	str	r0, [r7, #12]
 800d390:	60b9      	str	r1, [r7, #8]
 800d392:	4613      	mov	r3, r2
 800d394:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d396:	2300      	movs	r3, #0
 800d398:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d39a:	2300      	movs	r3, #0
 800d39c:	75fb      	strb	r3, [r7, #23]
 800d39e:	e027      	b.n	800d3f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	0f1b      	lsrs	r3, r3, #28
 800d3a4:	2b09      	cmp	r3, #9
 800d3a6:	d80b      	bhi.n	800d3c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	0f1b      	lsrs	r3, r3, #28
 800d3ac:	b2da      	uxtb	r2, r3
 800d3ae:	7dfb      	ldrb	r3, [r7, #23]
 800d3b0:	005b      	lsls	r3, r3, #1
 800d3b2:	4619      	mov	r1, r3
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	440b      	add	r3, r1
 800d3b8:	3230      	adds	r2, #48	; 0x30
 800d3ba:	b2d2      	uxtb	r2, r2
 800d3bc:	701a      	strb	r2, [r3, #0]
 800d3be:	e00a      	b.n	800d3d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	0f1b      	lsrs	r3, r3, #28
 800d3c4:	b2da      	uxtb	r2, r3
 800d3c6:	7dfb      	ldrb	r3, [r7, #23]
 800d3c8:	005b      	lsls	r3, r3, #1
 800d3ca:	4619      	mov	r1, r3
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	440b      	add	r3, r1
 800d3d0:	3237      	adds	r2, #55	; 0x37
 800d3d2:	b2d2      	uxtb	r2, r2
 800d3d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	011b      	lsls	r3, r3, #4
 800d3da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d3dc:	7dfb      	ldrb	r3, [r7, #23]
 800d3de:	005b      	lsls	r3, r3, #1
 800d3e0:	3301      	adds	r3, #1
 800d3e2:	68ba      	ldr	r2, [r7, #8]
 800d3e4:	4413      	add	r3, r2
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d3ea:	7dfb      	ldrb	r3, [r7, #23]
 800d3ec:	3301      	adds	r3, #1
 800d3ee:	75fb      	strb	r3, [r7, #23]
 800d3f0:	7dfa      	ldrb	r2, [r7, #23]
 800d3f2:	79fb      	ldrb	r3, [r7, #7]
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d3d3      	bcc.n	800d3a0 <IntToUnicode+0x18>
  }
}
 800d3f8:	bf00      	nop
 800d3fa:	bf00      	nop
 800d3fc:	371c      	adds	r7, #28
 800d3fe:	46bd      	mov	sp, r7
 800d400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d404:	4770      	bx	lr
	...

0800d408 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b08a      	sub	sp, #40	; 0x28
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d410:	f107 0314 	add.w	r3, r7, #20
 800d414:	2200      	movs	r2, #0
 800d416:	601a      	str	r2, [r3, #0]
 800d418:	605a      	str	r2, [r3, #4]
 800d41a:	609a      	str	r2, [r3, #8]
 800d41c:	60da      	str	r2, [r3, #12]
 800d41e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d428:	d13a      	bne.n	800d4a0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d42a:	2300      	movs	r3, #0
 800d42c:	613b      	str	r3, [r7, #16]
 800d42e:	4b1e      	ldr	r3, [pc, #120]	; (800d4a8 <HAL_PCD_MspInit+0xa0>)
 800d430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d432:	4a1d      	ldr	r2, [pc, #116]	; (800d4a8 <HAL_PCD_MspInit+0xa0>)
 800d434:	f043 0301 	orr.w	r3, r3, #1
 800d438:	6313      	str	r3, [r2, #48]	; 0x30
 800d43a:	4b1b      	ldr	r3, [pc, #108]	; (800d4a8 <HAL_PCD_MspInit+0xa0>)
 800d43c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d43e:	f003 0301 	and.w	r3, r3, #1
 800d442:	613b      	str	r3, [r7, #16]
 800d444:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d446:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d44a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d44c:	2302      	movs	r3, #2
 800d44e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d450:	2300      	movs	r3, #0
 800d452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d454:	2303      	movs	r3, #3
 800d456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d458:	230a      	movs	r3, #10
 800d45a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d45c:	f107 0314 	add.w	r3, r7, #20
 800d460:	4619      	mov	r1, r3
 800d462:	4812      	ldr	r0, [pc, #72]	; (800d4ac <HAL_PCD_MspInit+0xa4>)
 800d464:	f7f4 fa30 	bl	80018c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d468:	4b0f      	ldr	r3, [pc, #60]	; (800d4a8 <HAL_PCD_MspInit+0xa0>)
 800d46a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d46c:	4a0e      	ldr	r2, [pc, #56]	; (800d4a8 <HAL_PCD_MspInit+0xa0>)
 800d46e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d472:	6353      	str	r3, [r2, #52]	; 0x34
 800d474:	2300      	movs	r3, #0
 800d476:	60fb      	str	r3, [r7, #12]
 800d478:	4b0b      	ldr	r3, [pc, #44]	; (800d4a8 <HAL_PCD_MspInit+0xa0>)
 800d47a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d47c:	4a0a      	ldr	r2, [pc, #40]	; (800d4a8 <HAL_PCD_MspInit+0xa0>)
 800d47e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d482:	6453      	str	r3, [r2, #68]	; 0x44
 800d484:	4b08      	ldr	r3, [pc, #32]	; (800d4a8 <HAL_PCD_MspInit+0xa0>)
 800d486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d48c:	60fb      	str	r3, [r7, #12]
 800d48e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d490:	2200      	movs	r2, #0
 800d492:	2100      	movs	r1, #0
 800d494:	2043      	movs	r0, #67	; 0x43
 800d496:	f7f4 f9ed 	bl	8001874 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d49a:	2043      	movs	r0, #67	; 0x43
 800d49c:	f7f4 fa06 	bl	80018ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d4a0:	bf00      	nop
 800d4a2:	3728      	adds	r7, #40	; 0x28
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}
 800d4a8:	40023800 	.word	0x40023800
 800d4ac:	40020000 	.word	0x40020000

0800d4b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b082      	sub	sp, #8
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	4610      	mov	r0, r2
 800d4c8:	f7fc fa5f 	bl	800998a <USBD_LL_SetupStage>
}
 800d4cc:	bf00      	nop
 800d4ce:	3708      	adds	r7, #8
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}

0800d4d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b082      	sub	sp, #8
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	460b      	mov	r3, r1
 800d4de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d4e6:	78fa      	ldrb	r2, [r7, #3]
 800d4e8:	6879      	ldr	r1, [r7, #4]
 800d4ea:	4613      	mov	r3, r2
 800d4ec:	00db      	lsls	r3, r3, #3
 800d4ee:	4413      	add	r3, r2
 800d4f0:	009b      	lsls	r3, r3, #2
 800d4f2:	440b      	add	r3, r1
 800d4f4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d4f8:	681a      	ldr	r2, [r3, #0]
 800d4fa:	78fb      	ldrb	r3, [r7, #3]
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	f7fc fa99 	bl	8009a34 <USBD_LL_DataOutStage>
}
 800d502:	bf00      	nop
 800d504:	3708      	adds	r7, #8
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}

0800d50a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d50a:	b580      	push	{r7, lr}
 800d50c:	b082      	sub	sp, #8
 800d50e:	af00      	add	r7, sp, #0
 800d510:	6078      	str	r0, [r7, #4]
 800d512:	460b      	mov	r3, r1
 800d514:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d51c:	78fa      	ldrb	r2, [r7, #3]
 800d51e:	6879      	ldr	r1, [r7, #4]
 800d520:	4613      	mov	r3, r2
 800d522:	00db      	lsls	r3, r3, #3
 800d524:	4413      	add	r3, r2
 800d526:	009b      	lsls	r3, r3, #2
 800d528:	440b      	add	r3, r1
 800d52a:	334c      	adds	r3, #76	; 0x4c
 800d52c:	681a      	ldr	r2, [r3, #0]
 800d52e:	78fb      	ldrb	r3, [r7, #3]
 800d530:	4619      	mov	r1, r3
 800d532:	f7fc fb32 	bl	8009b9a <USBD_LL_DataInStage>
}
 800d536:	bf00      	nop
 800d538:	3708      	adds	r7, #8
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}

0800d53e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d53e:	b580      	push	{r7, lr}
 800d540:	b082      	sub	sp, #8
 800d542:	af00      	add	r7, sp, #0
 800d544:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d54c:	4618      	mov	r0, r3
 800d54e:	f7fc fc66 	bl	8009e1e <USBD_LL_SOF>
}
 800d552:	bf00      	nop
 800d554:	3708      	adds	r7, #8
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}

0800d55a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d55a:	b580      	push	{r7, lr}
 800d55c:	b084      	sub	sp, #16
 800d55e:	af00      	add	r7, sp, #0
 800d560:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d562:	2301      	movs	r3, #1
 800d564:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	68db      	ldr	r3, [r3, #12]
 800d56a:	2b02      	cmp	r3, #2
 800d56c:	d001      	beq.n	800d572 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d56e:	f7f3 fb03 	bl	8000b78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d578:	7bfa      	ldrb	r2, [r7, #15]
 800d57a:	4611      	mov	r1, r2
 800d57c:	4618      	mov	r0, r3
 800d57e:	f7fc fc10 	bl	8009da2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d588:	4618      	mov	r0, r3
 800d58a:	f7fc fbb8 	bl	8009cfe <USBD_LL_Reset>
}
 800d58e:	bf00      	nop
 800d590:	3710      	adds	r7, #16
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}
	...

0800d598 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b082      	sub	sp, #8
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f7fc fc0b 	bl	8009dc2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	687a      	ldr	r2, [r7, #4]
 800d5b8:	6812      	ldr	r2, [r2, #0]
 800d5ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d5be:	f043 0301 	orr.w	r3, r3, #1
 800d5c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6a1b      	ldr	r3, [r3, #32]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d005      	beq.n	800d5d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d5cc:	4b04      	ldr	r3, [pc, #16]	; (800d5e0 <HAL_PCD_SuspendCallback+0x48>)
 800d5ce:	691b      	ldr	r3, [r3, #16]
 800d5d0:	4a03      	ldr	r2, [pc, #12]	; (800d5e0 <HAL_PCD_SuspendCallback+0x48>)
 800d5d2:	f043 0306 	orr.w	r3, r3, #6
 800d5d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d5d8:	bf00      	nop
 800d5da:	3708      	adds	r7, #8
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}
 800d5e0:	e000ed00 	.word	0xe000ed00

0800d5e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b082      	sub	sp, #8
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f7fc fbfb 	bl	8009dee <USBD_LL_Resume>
}
 800d5f8:	bf00      	nop
 800d5fa:	3708      	adds	r7, #8
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}

0800d600 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b082      	sub	sp, #8
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
 800d608:	460b      	mov	r3, r1
 800d60a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d612:	78fa      	ldrb	r2, [r7, #3]
 800d614:	4611      	mov	r1, r2
 800d616:	4618      	mov	r0, r3
 800d618:	f7fc fc53 	bl	8009ec2 <USBD_LL_IsoOUTIncomplete>
}
 800d61c:	bf00      	nop
 800d61e:	3708      	adds	r7, #8
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}

0800d624 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b082      	sub	sp, #8
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	460b      	mov	r3, r1
 800d62e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d636:	78fa      	ldrb	r2, [r7, #3]
 800d638:	4611      	mov	r1, r2
 800d63a:	4618      	mov	r0, r3
 800d63c:	f7fc fc0f 	bl	8009e5e <USBD_LL_IsoINIncomplete>
}
 800d640:	bf00      	nop
 800d642:	3708      	adds	r7, #8
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}

0800d648 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b082      	sub	sp, #8
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d656:	4618      	mov	r0, r3
 800d658:	f7fc fc65 	bl	8009f26 <USBD_LL_DevConnected>
}
 800d65c:	bf00      	nop
 800d65e:	3708      	adds	r7, #8
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b082      	sub	sp, #8
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d672:	4618      	mov	r0, r3
 800d674:	f7fc fc62 	bl	8009f3c <USBD_LL_DevDisconnected>
}
 800d678:	bf00      	nop
 800d67a:	3708      	adds	r7, #8
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b082      	sub	sp, #8
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	781b      	ldrb	r3, [r3, #0]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d13c      	bne.n	800d70a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d690:	4a20      	ldr	r2, [pc, #128]	; (800d714 <USBD_LL_Init+0x94>)
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	4a1e      	ldr	r2, [pc, #120]	; (800d714 <USBD_LL_Init+0x94>)
 800d69c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d6a0:	4b1c      	ldr	r3, [pc, #112]	; (800d714 <USBD_LL_Init+0x94>)
 800d6a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d6a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d6a8:	4b1a      	ldr	r3, [pc, #104]	; (800d714 <USBD_LL_Init+0x94>)
 800d6aa:	2204      	movs	r2, #4
 800d6ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d6ae:	4b19      	ldr	r3, [pc, #100]	; (800d714 <USBD_LL_Init+0x94>)
 800d6b0:	2202      	movs	r2, #2
 800d6b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d6b4:	4b17      	ldr	r3, [pc, #92]	; (800d714 <USBD_LL_Init+0x94>)
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d6ba:	4b16      	ldr	r3, [pc, #88]	; (800d714 <USBD_LL_Init+0x94>)
 800d6bc:	2202      	movs	r2, #2
 800d6be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d6c0:	4b14      	ldr	r3, [pc, #80]	; (800d714 <USBD_LL_Init+0x94>)
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d6c6:	4b13      	ldr	r3, [pc, #76]	; (800d714 <USBD_LL_Init+0x94>)
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d6cc:	4b11      	ldr	r3, [pc, #68]	; (800d714 <USBD_LL_Init+0x94>)
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d6d2:	4b10      	ldr	r3, [pc, #64]	; (800d714 <USBD_LL_Init+0x94>)
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d6d8:	4b0e      	ldr	r3, [pc, #56]	; (800d714 <USBD_LL_Init+0x94>)
 800d6da:	2200      	movs	r2, #0
 800d6dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d6de:	480d      	ldr	r0, [pc, #52]	; (800d714 <USBD_LL_Init+0x94>)
 800d6e0:	f7f4 fbd4 	bl	8001e8c <HAL_PCD_Init>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d001      	beq.n	800d6ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d6ea:	f7f3 fa45 	bl	8000b78 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d6ee:	2180      	movs	r1, #128	; 0x80
 800d6f0:	4808      	ldr	r0, [pc, #32]	; (800d714 <USBD_LL_Init+0x94>)
 800d6f2:	f7f5 fe2c 	bl	800334e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d6f6:	2240      	movs	r2, #64	; 0x40
 800d6f8:	2100      	movs	r1, #0
 800d6fa:	4806      	ldr	r0, [pc, #24]	; (800d714 <USBD_LL_Init+0x94>)
 800d6fc:	f7f5 fde0 	bl	80032c0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d700:	2280      	movs	r2, #128	; 0x80
 800d702:	2101      	movs	r1, #1
 800d704:	4803      	ldr	r0, [pc, #12]	; (800d714 <USBD_LL_Init+0x94>)
 800d706:	f7f5 fddb 	bl	80032c0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d70a:	2300      	movs	r3, #0
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3708      	adds	r7, #8
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}
 800d714:	2000a830 	.word	0x2000a830

0800d718 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b084      	sub	sp, #16
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d720:	2300      	movs	r3, #0
 800d722:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d724:	2300      	movs	r3, #0
 800d726:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d72e:	4618      	mov	r0, r3
 800d730:	f7f4 fcc9 	bl	80020c6 <HAL_PCD_Start>
 800d734:	4603      	mov	r3, r0
 800d736:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d738:	7bfb      	ldrb	r3, [r7, #15]
 800d73a:	4618      	mov	r0, r3
 800d73c:	f000 f942 	bl	800d9c4 <USBD_Get_USB_Status>
 800d740:	4603      	mov	r3, r0
 800d742:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d744:	7bbb      	ldrb	r3, [r7, #14]
}
 800d746:	4618      	mov	r0, r3
 800d748:	3710      	adds	r7, #16
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}

0800d74e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d74e:	b580      	push	{r7, lr}
 800d750:	b084      	sub	sp, #16
 800d752:	af00      	add	r7, sp, #0
 800d754:	6078      	str	r0, [r7, #4]
 800d756:	4608      	mov	r0, r1
 800d758:	4611      	mov	r1, r2
 800d75a:	461a      	mov	r2, r3
 800d75c:	4603      	mov	r3, r0
 800d75e:	70fb      	strb	r3, [r7, #3]
 800d760:	460b      	mov	r3, r1
 800d762:	70bb      	strb	r3, [r7, #2]
 800d764:	4613      	mov	r3, r2
 800d766:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d768:	2300      	movs	r3, #0
 800d76a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d76c:	2300      	movs	r3, #0
 800d76e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d776:	78bb      	ldrb	r3, [r7, #2]
 800d778:	883a      	ldrh	r2, [r7, #0]
 800d77a:	78f9      	ldrb	r1, [r7, #3]
 800d77c:	f7f5 f99a 	bl	8002ab4 <HAL_PCD_EP_Open>
 800d780:	4603      	mov	r3, r0
 800d782:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d784:	7bfb      	ldrb	r3, [r7, #15]
 800d786:	4618      	mov	r0, r3
 800d788:	f000 f91c 	bl	800d9c4 <USBD_Get_USB_Status>
 800d78c:	4603      	mov	r3, r0
 800d78e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d790:	7bbb      	ldrb	r3, [r7, #14]
}
 800d792:	4618      	mov	r0, r3
 800d794:	3710      	adds	r7, #16
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}

0800d79a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d79a:	b580      	push	{r7, lr}
 800d79c:	b084      	sub	sp, #16
 800d79e:	af00      	add	r7, sp, #0
 800d7a0:	6078      	str	r0, [r7, #4]
 800d7a2:	460b      	mov	r3, r1
 800d7a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d7b4:	78fa      	ldrb	r2, [r7, #3]
 800d7b6:	4611      	mov	r1, r2
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f7f5 f9e3 	bl	8002b84 <HAL_PCD_EP_Close>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7c2:	7bfb      	ldrb	r3, [r7, #15]
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f000 f8fd 	bl	800d9c4 <USBD_Get_USB_Status>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3710      	adds	r7, #16
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}

0800d7d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b084      	sub	sp, #16
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	460b      	mov	r3, r1
 800d7e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d7f2:	78fa      	ldrb	r2, [r7, #3]
 800d7f4:	4611      	mov	r1, r2
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f7f5 fabb 	bl	8002d72 <HAL_PCD_EP_SetStall>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d800:	7bfb      	ldrb	r3, [r7, #15]
 800d802:	4618      	mov	r0, r3
 800d804:	f000 f8de 	bl	800d9c4 <USBD_Get_USB_Status>
 800d808:	4603      	mov	r3, r0
 800d80a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d80c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3710      	adds	r7, #16
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}

0800d816 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d816:	b580      	push	{r7, lr}
 800d818:	b084      	sub	sp, #16
 800d81a:	af00      	add	r7, sp, #0
 800d81c:	6078      	str	r0, [r7, #4]
 800d81e:	460b      	mov	r3, r1
 800d820:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d822:	2300      	movs	r3, #0
 800d824:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d826:	2300      	movs	r3, #0
 800d828:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d830:	78fa      	ldrb	r2, [r7, #3]
 800d832:	4611      	mov	r1, r2
 800d834:	4618      	mov	r0, r3
 800d836:	f7f5 fb00 	bl	8002e3a <HAL_PCD_EP_ClrStall>
 800d83a:	4603      	mov	r3, r0
 800d83c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d83e:	7bfb      	ldrb	r3, [r7, #15]
 800d840:	4618      	mov	r0, r3
 800d842:	f000 f8bf 	bl	800d9c4 <USBD_Get_USB_Status>
 800d846:	4603      	mov	r3, r0
 800d848:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d84a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d84c:	4618      	mov	r0, r3
 800d84e:	3710      	adds	r7, #16
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}

0800d854 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d854:	b480      	push	{r7}
 800d856:	b085      	sub	sp, #20
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
 800d85c:	460b      	mov	r3, r1
 800d85e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d866:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d868:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	da0b      	bge.n	800d888 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d870:	78fb      	ldrb	r3, [r7, #3]
 800d872:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d876:	68f9      	ldr	r1, [r7, #12]
 800d878:	4613      	mov	r3, r2
 800d87a:	00db      	lsls	r3, r3, #3
 800d87c:	4413      	add	r3, r2
 800d87e:	009b      	lsls	r3, r3, #2
 800d880:	440b      	add	r3, r1
 800d882:	333e      	adds	r3, #62	; 0x3e
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	e00b      	b.n	800d8a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d888:	78fb      	ldrb	r3, [r7, #3]
 800d88a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d88e:	68f9      	ldr	r1, [r7, #12]
 800d890:	4613      	mov	r3, r2
 800d892:	00db      	lsls	r3, r3, #3
 800d894:	4413      	add	r3, r2
 800d896:	009b      	lsls	r3, r3, #2
 800d898:	440b      	add	r3, r1
 800d89a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d89e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	3714      	adds	r7, #20
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8aa:	4770      	bx	lr

0800d8ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b084      	sub	sp, #16
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	460b      	mov	r3, r1
 800d8b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d8c6:	78fa      	ldrb	r2, [r7, #3]
 800d8c8:	4611      	mov	r1, r2
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f7f5 f8cd 	bl	8002a6a <HAL_PCD_SetAddress>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8d4:	7bfb      	ldrb	r3, [r7, #15]
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f000 f874 	bl	800d9c4 <USBD_Get_USB_Status>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	3710      	adds	r7, #16
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}

0800d8ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d8ea:	b580      	push	{r7, lr}
 800d8ec:	b086      	sub	sp, #24
 800d8ee:	af00      	add	r7, sp, #0
 800d8f0:	60f8      	str	r0, [r7, #12]
 800d8f2:	607a      	str	r2, [r7, #4]
 800d8f4:	603b      	str	r3, [r7, #0]
 800d8f6:	460b      	mov	r3, r1
 800d8f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8fe:	2300      	movs	r3, #0
 800d900:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d908:	7af9      	ldrb	r1, [r7, #11]
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	687a      	ldr	r2, [r7, #4]
 800d90e:	f7f5 f9e6 	bl	8002cde <HAL_PCD_EP_Transmit>
 800d912:	4603      	mov	r3, r0
 800d914:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d916:	7dfb      	ldrb	r3, [r7, #23]
 800d918:	4618      	mov	r0, r3
 800d91a:	f000 f853 	bl	800d9c4 <USBD_Get_USB_Status>
 800d91e:	4603      	mov	r3, r0
 800d920:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d922:	7dbb      	ldrb	r3, [r7, #22]
}
 800d924:	4618      	mov	r0, r3
 800d926:	3718      	adds	r7, #24
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}

0800d92c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b086      	sub	sp, #24
 800d930:	af00      	add	r7, sp, #0
 800d932:	60f8      	str	r0, [r7, #12]
 800d934:	607a      	str	r2, [r7, #4]
 800d936:	603b      	str	r3, [r7, #0]
 800d938:	460b      	mov	r3, r1
 800d93a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d93c:	2300      	movs	r3, #0
 800d93e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d940:	2300      	movs	r3, #0
 800d942:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d94a:	7af9      	ldrb	r1, [r7, #11]
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	687a      	ldr	r2, [r7, #4]
 800d950:	f7f5 f962 	bl	8002c18 <HAL_PCD_EP_Receive>
 800d954:	4603      	mov	r3, r0
 800d956:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d958:	7dfb      	ldrb	r3, [r7, #23]
 800d95a:	4618      	mov	r0, r3
 800d95c:	f000 f832 	bl	800d9c4 <USBD_Get_USB_Status>
 800d960:	4603      	mov	r3, r0
 800d962:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d964:	7dbb      	ldrb	r3, [r7, #22]
}
 800d966:	4618      	mov	r0, r3
 800d968:	3718      	adds	r7, #24
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}

0800d96e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d96e:	b580      	push	{r7, lr}
 800d970:	b082      	sub	sp, #8
 800d972:	af00      	add	r7, sp, #0
 800d974:	6078      	str	r0, [r7, #4]
 800d976:	460b      	mov	r3, r1
 800d978:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d980:	78fa      	ldrb	r2, [r7, #3]
 800d982:	4611      	mov	r1, r2
 800d984:	4618      	mov	r0, r3
 800d986:	f7f5 f992 	bl	8002cae <HAL_PCD_EP_GetRxCount>
 800d98a:	4603      	mov	r3, r0
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3708      	adds	r7, #8
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}

0800d994 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d994:	b480      	push	{r7}
 800d996:	b083      	sub	sp, #12
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d99c:	4b03      	ldr	r3, [pc, #12]	; (800d9ac <USBD_static_malloc+0x18>)
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	370c      	adds	r7, #12
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a8:	4770      	bx	lr
 800d9aa:	bf00      	nop
 800d9ac:	2000ad3c 	.word	0x2000ad3c

0800d9b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	b083      	sub	sp, #12
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]

}
 800d9b8:	bf00      	nop
 800d9ba:	370c      	adds	r7, #12
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c2:	4770      	bx	lr

0800d9c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	b085      	sub	sp, #20
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d9d2:	79fb      	ldrb	r3, [r7, #7]
 800d9d4:	2b03      	cmp	r3, #3
 800d9d6:	d817      	bhi.n	800da08 <USBD_Get_USB_Status+0x44>
 800d9d8:	a201      	add	r2, pc, #4	; (adr r2, 800d9e0 <USBD_Get_USB_Status+0x1c>)
 800d9da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9de:	bf00      	nop
 800d9e0:	0800d9f1 	.word	0x0800d9f1
 800d9e4:	0800d9f7 	.word	0x0800d9f7
 800d9e8:	0800d9fd 	.word	0x0800d9fd
 800d9ec:	0800da03 	.word	0x0800da03
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	73fb      	strb	r3, [r7, #15]
    break;
 800d9f4:	e00b      	b.n	800da0e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d9f6:	2303      	movs	r3, #3
 800d9f8:	73fb      	strb	r3, [r7, #15]
    break;
 800d9fa:	e008      	b.n	800da0e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d9fc:	2301      	movs	r3, #1
 800d9fe:	73fb      	strb	r3, [r7, #15]
    break;
 800da00:	e005      	b.n	800da0e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800da02:	2303      	movs	r3, #3
 800da04:	73fb      	strb	r3, [r7, #15]
    break;
 800da06:	e002      	b.n	800da0e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800da08:	2303      	movs	r3, #3
 800da0a:	73fb      	strb	r3, [r7, #15]
    break;
 800da0c:	bf00      	nop
  }
  return usb_status;
 800da0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800da10:	4618      	mov	r0, r3
 800da12:	3714      	adds	r7, #20
 800da14:	46bd      	mov	sp, r7
 800da16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1a:	4770      	bx	lr

0800da1c <__errno>:
 800da1c:	4b01      	ldr	r3, [pc, #4]	; (800da24 <__errno+0x8>)
 800da1e:	6818      	ldr	r0, [r3, #0]
 800da20:	4770      	bx	lr
 800da22:	bf00      	nop
 800da24:	20000104 	.word	0x20000104

0800da28 <__libc_init_array>:
 800da28:	b570      	push	{r4, r5, r6, lr}
 800da2a:	4d0d      	ldr	r5, [pc, #52]	; (800da60 <__libc_init_array+0x38>)
 800da2c:	4c0d      	ldr	r4, [pc, #52]	; (800da64 <__libc_init_array+0x3c>)
 800da2e:	1b64      	subs	r4, r4, r5
 800da30:	10a4      	asrs	r4, r4, #2
 800da32:	2600      	movs	r6, #0
 800da34:	42a6      	cmp	r6, r4
 800da36:	d109      	bne.n	800da4c <__libc_init_array+0x24>
 800da38:	4d0b      	ldr	r5, [pc, #44]	; (800da68 <__libc_init_array+0x40>)
 800da3a:	4c0c      	ldr	r4, [pc, #48]	; (800da6c <__libc_init_array+0x44>)
 800da3c:	f000 fcb2 	bl	800e3a4 <_init>
 800da40:	1b64      	subs	r4, r4, r5
 800da42:	10a4      	asrs	r4, r4, #2
 800da44:	2600      	movs	r6, #0
 800da46:	42a6      	cmp	r6, r4
 800da48:	d105      	bne.n	800da56 <__libc_init_array+0x2e>
 800da4a:	bd70      	pop	{r4, r5, r6, pc}
 800da4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800da50:	4798      	blx	r3
 800da52:	3601      	adds	r6, #1
 800da54:	e7ee      	b.n	800da34 <__libc_init_array+0xc>
 800da56:	f855 3b04 	ldr.w	r3, [r5], #4
 800da5a:	4798      	blx	r3
 800da5c:	3601      	adds	r6, #1
 800da5e:	e7f2      	b.n	800da46 <__libc_init_array+0x1e>
 800da60:	0800e5b4 	.word	0x0800e5b4
 800da64:	0800e5b4 	.word	0x0800e5b4
 800da68:	0800e5b4 	.word	0x0800e5b4
 800da6c:	0800e5b8 	.word	0x0800e5b8

0800da70 <memcmp>:
 800da70:	b510      	push	{r4, lr}
 800da72:	3901      	subs	r1, #1
 800da74:	4402      	add	r2, r0
 800da76:	4290      	cmp	r0, r2
 800da78:	d101      	bne.n	800da7e <memcmp+0xe>
 800da7a:	2000      	movs	r0, #0
 800da7c:	e005      	b.n	800da8a <memcmp+0x1a>
 800da7e:	7803      	ldrb	r3, [r0, #0]
 800da80:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800da84:	42a3      	cmp	r3, r4
 800da86:	d001      	beq.n	800da8c <memcmp+0x1c>
 800da88:	1b18      	subs	r0, r3, r4
 800da8a:	bd10      	pop	{r4, pc}
 800da8c:	3001      	adds	r0, #1
 800da8e:	e7f2      	b.n	800da76 <memcmp+0x6>

0800da90 <memcpy>:
 800da90:	440a      	add	r2, r1
 800da92:	4291      	cmp	r1, r2
 800da94:	f100 33ff 	add.w	r3, r0, #4294967295
 800da98:	d100      	bne.n	800da9c <memcpy+0xc>
 800da9a:	4770      	bx	lr
 800da9c:	b510      	push	{r4, lr}
 800da9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800daa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800daa6:	4291      	cmp	r1, r2
 800daa8:	d1f9      	bne.n	800da9e <memcpy+0xe>
 800daaa:	bd10      	pop	{r4, pc}

0800daac <memset>:
 800daac:	4402      	add	r2, r0
 800daae:	4603      	mov	r3, r0
 800dab0:	4293      	cmp	r3, r2
 800dab2:	d100      	bne.n	800dab6 <memset+0xa>
 800dab4:	4770      	bx	lr
 800dab6:	f803 1b01 	strb.w	r1, [r3], #1
 800daba:	e7f9      	b.n	800dab0 <memset+0x4>

0800dabc <sniprintf>:
 800dabc:	b40c      	push	{r2, r3}
 800dabe:	b530      	push	{r4, r5, lr}
 800dac0:	4b17      	ldr	r3, [pc, #92]	; (800db20 <sniprintf+0x64>)
 800dac2:	1e0c      	subs	r4, r1, #0
 800dac4:	681d      	ldr	r5, [r3, #0]
 800dac6:	b09d      	sub	sp, #116	; 0x74
 800dac8:	da08      	bge.n	800dadc <sniprintf+0x20>
 800daca:	238b      	movs	r3, #139	; 0x8b
 800dacc:	602b      	str	r3, [r5, #0]
 800dace:	f04f 30ff 	mov.w	r0, #4294967295
 800dad2:	b01d      	add	sp, #116	; 0x74
 800dad4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dad8:	b002      	add	sp, #8
 800dada:	4770      	bx	lr
 800dadc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800dae0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800dae4:	bf14      	ite	ne
 800dae6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800daea:	4623      	moveq	r3, r4
 800daec:	9304      	str	r3, [sp, #16]
 800daee:	9307      	str	r3, [sp, #28]
 800daf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800daf4:	9002      	str	r0, [sp, #8]
 800daf6:	9006      	str	r0, [sp, #24]
 800daf8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dafc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dafe:	ab21      	add	r3, sp, #132	; 0x84
 800db00:	a902      	add	r1, sp, #8
 800db02:	4628      	mov	r0, r5
 800db04:	9301      	str	r3, [sp, #4]
 800db06:	f000 f869 	bl	800dbdc <_svfiprintf_r>
 800db0a:	1c43      	adds	r3, r0, #1
 800db0c:	bfbc      	itt	lt
 800db0e:	238b      	movlt	r3, #139	; 0x8b
 800db10:	602b      	strlt	r3, [r5, #0]
 800db12:	2c00      	cmp	r4, #0
 800db14:	d0dd      	beq.n	800dad2 <sniprintf+0x16>
 800db16:	9b02      	ldr	r3, [sp, #8]
 800db18:	2200      	movs	r2, #0
 800db1a:	701a      	strb	r2, [r3, #0]
 800db1c:	e7d9      	b.n	800dad2 <sniprintf+0x16>
 800db1e:	bf00      	nop
 800db20:	20000104 	.word	0x20000104

0800db24 <__ssputs_r>:
 800db24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db28:	688e      	ldr	r6, [r1, #8]
 800db2a:	429e      	cmp	r6, r3
 800db2c:	4682      	mov	sl, r0
 800db2e:	460c      	mov	r4, r1
 800db30:	4690      	mov	r8, r2
 800db32:	461f      	mov	r7, r3
 800db34:	d838      	bhi.n	800dba8 <__ssputs_r+0x84>
 800db36:	898a      	ldrh	r2, [r1, #12]
 800db38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800db3c:	d032      	beq.n	800dba4 <__ssputs_r+0x80>
 800db3e:	6825      	ldr	r5, [r4, #0]
 800db40:	6909      	ldr	r1, [r1, #16]
 800db42:	eba5 0901 	sub.w	r9, r5, r1
 800db46:	6965      	ldr	r5, [r4, #20]
 800db48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db50:	3301      	adds	r3, #1
 800db52:	444b      	add	r3, r9
 800db54:	106d      	asrs	r5, r5, #1
 800db56:	429d      	cmp	r5, r3
 800db58:	bf38      	it	cc
 800db5a:	461d      	movcc	r5, r3
 800db5c:	0553      	lsls	r3, r2, #21
 800db5e:	d531      	bpl.n	800dbc4 <__ssputs_r+0xa0>
 800db60:	4629      	mov	r1, r5
 800db62:	f000 fb55 	bl	800e210 <_malloc_r>
 800db66:	4606      	mov	r6, r0
 800db68:	b950      	cbnz	r0, 800db80 <__ssputs_r+0x5c>
 800db6a:	230c      	movs	r3, #12
 800db6c:	f8ca 3000 	str.w	r3, [sl]
 800db70:	89a3      	ldrh	r3, [r4, #12]
 800db72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db76:	81a3      	strh	r3, [r4, #12]
 800db78:	f04f 30ff 	mov.w	r0, #4294967295
 800db7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db80:	6921      	ldr	r1, [r4, #16]
 800db82:	464a      	mov	r2, r9
 800db84:	f7ff ff84 	bl	800da90 <memcpy>
 800db88:	89a3      	ldrh	r3, [r4, #12]
 800db8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800db8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db92:	81a3      	strh	r3, [r4, #12]
 800db94:	6126      	str	r6, [r4, #16]
 800db96:	6165      	str	r5, [r4, #20]
 800db98:	444e      	add	r6, r9
 800db9a:	eba5 0509 	sub.w	r5, r5, r9
 800db9e:	6026      	str	r6, [r4, #0]
 800dba0:	60a5      	str	r5, [r4, #8]
 800dba2:	463e      	mov	r6, r7
 800dba4:	42be      	cmp	r6, r7
 800dba6:	d900      	bls.n	800dbaa <__ssputs_r+0x86>
 800dba8:	463e      	mov	r6, r7
 800dbaa:	6820      	ldr	r0, [r4, #0]
 800dbac:	4632      	mov	r2, r6
 800dbae:	4641      	mov	r1, r8
 800dbb0:	f000 faa8 	bl	800e104 <memmove>
 800dbb4:	68a3      	ldr	r3, [r4, #8]
 800dbb6:	1b9b      	subs	r3, r3, r6
 800dbb8:	60a3      	str	r3, [r4, #8]
 800dbba:	6823      	ldr	r3, [r4, #0]
 800dbbc:	4433      	add	r3, r6
 800dbbe:	6023      	str	r3, [r4, #0]
 800dbc0:	2000      	movs	r0, #0
 800dbc2:	e7db      	b.n	800db7c <__ssputs_r+0x58>
 800dbc4:	462a      	mov	r2, r5
 800dbc6:	f000 fb97 	bl	800e2f8 <_realloc_r>
 800dbca:	4606      	mov	r6, r0
 800dbcc:	2800      	cmp	r0, #0
 800dbce:	d1e1      	bne.n	800db94 <__ssputs_r+0x70>
 800dbd0:	6921      	ldr	r1, [r4, #16]
 800dbd2:	4650      	mov	r0, sl
 800dbd4:	f000 fab0 	bl	800e138 <_free_r>
 800dbd8:	e7c7      	b.n	800db6a <__ssputs_r+0x46>
	...

0800dbdc <_svfiprintf_r>:
 800dbdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbe0:	4698      	mov	r8, r3
 800dbe2:	898b      	ldrh	r3, [r1, #12]
 800dbe4:	061b      	lsls	r3, r3, #24
 800dbe6:	b09d      	sub	sp, #116	; 0x74
 800dbe8:	4607      	mov	r7, r0
 800dbea:	460d      	mov	r5, r1
 800dbec:	4614      	mov	r4, r2
 800dbee:	d50e      	bpl.n	800dc0e <_svfiprintf_r+0x32>
 800dbf0:	690b      	ldr	r3, [r1, #16]
 800dbf2:	b963      	cbnz	r3, 800dc0e <_svfiprintf_r+0x32>
 800dbf4:	2140      	movs	r1, #64	; 0x40
 800dbf6:	f000 fb0b 	bl	800e210 <_malloc_r>
 800dbfa:	6028      	str	r0, [r5, #0]
 800dbfc:	6128      	str	r0, [r5, #16]
 800dbfe:	b920      	cbnz	r0, 800dc0a <_svfiprintf_r+0x2e>
 800dc00:	230c      	movs	r3, #12
 800dc02:	603b      	str	r3, [r7, #0]
 800dc04:	f04f 30ff 	mov.w	r0, #4294967295
 800dc08:	e0d1      	b.n	800ddae <_svfiprintf_r+0x1d2>
 800dc0a:	2340      	movs	r3, #64	; 0x40
 800dc0c:	616b      	str	r3, [r5, #20]
 800dc0e:	2300      	movs	r3, #0
 800dc10:	9309      	str	r3, [sp, #36]	; 0x24
 800dc12:	2320      	movs	r3, #32
 800dc14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc18:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc1c:	2330      	movs	r3, #48	; 0x30
 800dc1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ddc8 <_svfiprintf_r+0x1ec>
 800dc22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc26:	f04f 0901 	mov.w	r9, #1
 800dc2a:	4623      	mov	r3, r4
 800dc2c:	469a      	mov	sl, r3
 800dc2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc32:	b10a      	cbz	r2, 800dc38 <_svfiprintf_r+0x5c>
 800dc34:	2a25      	cmp	r2, #37	; 0x25
 800dc36:	d1f9      	bne.n	800dc2c <_svfiprintf_r+0x50>
 800dc38:	ebba 0b04 	subs.w	fp, sl, r4
 800dc3c:	d00b      	beq.n	800dc56 <_svfiprintf_r+0x7a>
 800dc3e:	465b      	mov	r3, fp
 800dc40:	4622      	mov	r2, r4
 800dc42:	4629      	mov	r1, r5
 800dc44:	4638      	mov	r0, r7
 800dc46:	f7ff ff6d 	bl	800db24 <__ssputs_r>
 800dc4a:	3001      	adds	r0, #1
 800dc4c:	f000 80aa 	beq.w	800dda4 <_svfiprintf_r+0x1c8>
 800dc50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc52:	445a      	add	r2, fp
 800dc54:	9209      	str	r2, [sp, #36]	; 0x24
 800dc56:	f89a 3000 	ldrb.w	r3, [sl]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	f000 80a2 	beq.w	800dda4 <_svfiprintf_r+0x1c8>
 800dc60:	2300      	movs	r3, #0
 800dc62:	f04f 32ff 	mov.w	r2, #4294967295
 800dc66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc6a:	f10a 0a01 	add.w	sl, sl, #1
 800dc6e:	9304      	str	r3, [sp, #16]
 800dc70:	9307      	str	r3, [sp, #28]
 800dc72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc76:	931a      	str	r3, [sp, #104]	; 0x68
 800dc78:	4654      	mov	r4, sl
 800dc7a:	2205      	movs	r2, #5
 800dc7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc80:	4851      	ldr	r0, [pc, #324]	; (800ddc8 <_svfiprintf_r+0x1ec>)
 800dc82:	f7f2 fafd 	bl	8000280 <memchr>
 800dc86:	9a04      	ldr	r2, [sp, #16]
 800dc88:	b9d8      	cbnz	r0, 800dcc2 <_svfiprintf_r+0xe6>
 800dc8a:	06d0      	lsls	r0, r2, #27
 800dc8c:	bf44      	itt	mi
 800dc8e:	2320      	movmi	r3, #32
 800dc90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc94:	0711      	lsls	r1, r2, #28
 800dc96:	bf44      	itt	mi
 800dc98:	232b      	movmi	r3, #43	; 0x2b
 800dc9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc9e:	f89a 3000 	ldrb.w	r3, [sl]
 800dca2:	2b2a      	cmp	r3, #42	; 0x2a
 800dca4:	d015      	beq.n	800dcd2 <_svfiprintf_r+0xf6>
 800dca6:	9a07      	ldr	r2, [sp, #28]
 800dca8:	4654      	mov	r4, sl
 800dcaa:	2000      	movs	r0, #0
 800dcac:	f04f 0c0a 	mov.w	ip, #10
 800dcb0:	4621      	mov	r1, r4
 800dcb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcb6:	3b30      	subs	r3, #48	; 0x30
 800dcb8:	2b09      	cmp	r3, #9
 800dcba:	d94e      	bls.n	800dd5a <_svfiprintf_r+0x17e>
 800dcbc:	b1b0      	cbz	r0, 800dcec <_svfiprintf_r+0x110>
 800dcbe:	9207      	str	r2, [sp, #28]
 800dcc0:	e014      	b.n	800dcec <_svfiprintf_r+0x110>
 800dcc2:	eba0 0308 	sub.w	r3, r0, r8
 800dcc6:	fa09 f303 	lsl.w	r3, r9, r3
 800dcca:	4313      	orrs	r3, r2
 800dccc:	9304      	str	r3, [sp, #16]
 800dcce:	46a2      	mov	sl, r4
 800dcd0:	e7d2      	b.n	800dc78 <_svfiprintf_r+0x9c>
 800dcd2:	9b03      	ldr	r3, [sp, #12]
 800dcd4:	1d19      	adds	r1, r3, #4
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	9103      	str	r1, [sp, #12]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	bfbb      	ittet	lt
 800dcde:	425b      	neglt	r3, r3
 800dce0:	f042 0202 	orrlt.w	r2, r2, #2
 800dce4:	9307      	strge	r3, [sp, #28]
 800dce6:	9307      	strlt	r3, [sp, #28]
 800dce8:	bfb8      	it	lt
 800dcea:	9204      	strlt	r2, [sp, #16]
 800dcec:	7823      	ldrb	r3, [r4, #0]
 800dcee:	2b2e      	cmp	r3, #46	; 0x2e
 800dcf0:	d10c      	bne.n	800dd0c <_svfiprintf_r+0x130>
 800dcf2:	7863      	ldrb	r3, [r4, #1]
 800dcf4:	2b2a      	cmp	r3, #42	; 0x2a
 800dcf6:	d135      	bne.n	800dd64 <_svfiprintf_r+0x188>
 800dcf8:	9b03      	ldr	r3, [sp, #12]
 800dcfa:	1d1a      	adds	r2, r3, #4
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	9203      	str	r2, [sp, #12]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	bfb8      	it	lt
 800dd04:	f04f 33ff 	movlt.w	r3, #4294967295
 800dd08:	3402      	adds	r4, #2
 800dd0a:	9305      	str	r3, [sp, #20]
 800dd0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ddd8 <_svfiprintf_r+0x1fc>
 800dd10:	7821      	ldrb	r1, [r4, #0]
 800dd12:	2203      	movs	r2, #3
 800dd14:	4650      	mov	r0, sl
 800dd16:	f7f2 fab3 	bl	8000280 <memchr>
 800dd1a:	b140      	cbz	r0, 800dd2e <_svfiprintf_r+0x152>
 800dd1c:	2340      	movs	r3, #64	; 0x40
 800dd1e:	eba0 000a 	sub.w	r0, r0, sl
 800dd22:	fa03 f000 	lsl.w	r0, r3, r0
 800dd26:	9b04      	ldr	r3, [sp, #16]
 800dd28:	4303      	orrs	r3, r0
 800dd2a:	3401      	adds	r4, #1
 800dd2c:	9304      	str	r3, [sp, #16]
 800dd2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd32:	4826      	ldr	r0, [pc, #152]	; (800ddcc <_svfiprintf_r+0x1f0>)
 800dd34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd38:	2206      	movs	r2, #6
 800dd3a:	f7f2 faa1 	bl	8000280 <memchr>
 800dd3e:	2800      	cmp	r0, #0
 800dd40:	d038      	beq.n	800ddb4 <_svfiprintf_r+0x1d8>
 800dd42:	4b23      	ldr	r3, [pc, #140]	; (800ddd0 <_svfiprintf_r+0x1f4>)
 800dd44:	bb1b      	cbnz	r3, 800dd8e <_svfiprintf_r+0x1b2>
 800dd46:	9b03      	ldr	r3, [sp, #12]
 800dd48:	3307      	adds	r3, #7
 800dd4a:	f023 0307 	bic.w	r3, r3, #7
 800dd4e:	3308      	adds	r3, #8
 800dd50:	9303      	str	r3, [sp, #12]
 800dd52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd54:	4433      	add	r3, r6
 800dd56:	9309      	str	r3, [sp, #36]	; 0x24
 800dd58:	e767      	b.n	800dc2a <_svfiprintf_r+0x4e>
 800dd5a:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd5e:	460c      	mov	r4, r1
 800dd60:	2001      	movs	r0, #1
 800dd62:	e7a5      	b.n	800dcb0 <_svfiprintf_r+0xd4>
 800dd64:	2300      	movs	r3, #0
 800dd66:	3401      	adds	r4, #1
 800dd68:	9305      	str	r3, [sp, #20]
 800dd6a:	4619      	mov	r1, r3
 800dd6c:	f04f 0c0a 	mov.w	ip, #10
 800dd70:	4620      	mov	r0, r4
 800dd72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd76:	3a30      	subs	r2, #48	; 0x30
 800dd78:	2a09      	cmp	r2, #9
 800dd7a:	d903      	bls.n	800dd84 <_svfiprintf_r+0x1a8>
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d0c5      	beq.n	800dd0c <_svfiprintf_r+0x130>
 800dd80:	9105      	str	r1, [sp, #20]
 800dd82:	e7c3      	b.n	800dd0c <_svfiprintf_r+0x130>
 800dd84:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd88:	4604      	mov	r4, r0
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	e7f0      	b.n	800dd70 <_svfiprintf_r+0x194>
 800dd8e:	ab03      	add	r3, sp, #12
 800dd90:	9300      	str	r3, [sp, #0]
 800dd92:	462a      	mov	r2, r5
 800dd94:	4b0f      	ldr	r3, [pc, #60]	; (800ddd4 <_svfiprintf_r+0x1f8>)
 800dd96:	a904      	add	r1, sp, #16
 800dd98:	4638      	mov	r0, r7
 800dd9a:	f3af 8000 	nop.w
 800dd9e:	1c42      	adds	r2, r0, #1
 800dda0:	4606      	mov	r6, r0
 800dda2:	d1d6      	bne.n	800dd52 <_svfiprintf_r+0x176>
 800dda4:	89ab      	ldrh	r3, [r5, #12]
 800dda6:	065b      	lsls	r3, r3, #25
 800dda8:	f53f af2c 	bmi.w	800dc04 <_svfiprintf_r+0x28>
 800ddac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ddae:	b01d      	add	sp, #116	; 0x74
 800ddb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddb4:	ab03      	add	r3, sp, #12
 800ddb6:	9300      	str	r3, [sp, #0]
 800ddb8:	462a      	mov	r2, r5
 800ddba:	4b06      	ldr	r3, [pc, #24]	; (800ddd4 <_svfiprintf_r+0x1f8>)
 800ddbc:	a904      	add	r1, sp, #16
 800ddbe:	4638      	mov	r0, r7
 800ddc0:	f000 f87a 	bl	800deb8 <_printf_i>
 800ddc4:	e7eb      	b.n	800dd9e <_svfiprintf_r+0x1c2>
 800ddc6:	bf00      	nop
 800ddc8:	0800e578 	.word	0x0800e578
 800ddcc:	0800e582 	.word	0x0800e582
 800ddd0:	00000000 	.word	0x00000000
 800ddd4:	0800db25 	.word	0x0800db25
 800ddd8:	0800e57e 	.word	0x0800e57e

0800dddc <_printf_common>:
 800dddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dde0:	4616      	mov	r6, r2
 800dde2:	4699      	mov	r9, r3
 800dde4:	688a      	ldr	r2, [r1, #8]
 800dde6:	690b      	ldr	r3, [r1, #16]
 800dde8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ddec:	4293      	cmp	r3, r2
 800ddee:	bfb8      	it	lt
 800ddf0:	4613      	movlt	r3, r2
 800ddf2:	6033      	str	r3, [r6, #0]
 800ddf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ddf8:	4607      	mov	r7, r0
 800ddfa:	460c      	mov	r4, r1
 800ddfc:	b10a      	cbz	r2, 800de02 <_printf_common+0x26>
 800ddfe:	3301      	adds	r3, #1
 800de00:	6033      	str	r3, [r6, #0]
 800de02:	6823      	ldr	r3, [r4, #0]
 800de04:	0699      	lsls	r1, r3, #26
 800de06:	bf42      	ittt	mi
 800de08:	6833      	ldrmi	r3, [r6, #0]
 800de0a:	3302      	addmi	r3, #2
 800de0c:	6033      	strmi	r3, [r6, #0]
 800de0e:	6825      	ldr	r5, [r4, #0]
 800de10:	f015 0506 	ands.w	r5, r5, #6
 800de14:	d106      	bne.n	800de24 <_printf_common+0x48>
 800de16:	f104 0a19 	add.w	sl, r4, #25
 800de1a:	68e3      	ldr	r3, [r4, #12]
 800de1c:	6832      	ldr	r2, [r6, #0]
 800de1e:	1a9b      	subs	r3, r3, r2
 800de20:	42ab      	cmp	r3, r5
 800de22:	dc26      	bgt.n	800de72 <_printf_common+0x96>
 800de24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800de28:	1e13      	subs	r3, r2, #0
 800de2a:	6822      	ldr	r2, [r4, #0]
 800de2c:	bf18      	it	ne
 800de2e:	2301      	movne	r3, #1
 800de30:	0692      	lsls	r2, r2, #26
 800de32:	d42b      	bmi.n	800de8c <_printf_common+0xb0>
 800de34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800de38:	4649      	mov	r1, r9
 800de3a:	4638      	mov	r0, r7
 800de3c:	47c0      	blx	r8
 800de3e:	3001      	adds	r0, #1
 800de40:	d01e      	beq.n	800de80 <_printf_common+0xa4>
 800de42:	6823      	ldr	r3, [r4, #0]
 800de44:	68e5      	ldr	r5, [r4, #12]
 800de46:	6832      	ldr	r2, [r6, #0]
 800de48:	f003 0306 	and.w	r3, r3, #6
 800de4c:	2b04      	cmp	r3, #4
 800de4e:	bf08      	it	eq
 800de50:	1aad      	subeq	r5, r5, r2
 800de52:	68a3      	ldr	r3, [r4, #8]
 800de54:	6922      	ldr	r2, [r4, #16]
 800de56:	bf0c      	ite	eq
 800de58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800de5c:	2500      	movne	r5, #0
 800de5e:	4293      	cmp	r3, r2
 800de60:	bfc4      	itt	gt
 800de62:	1a9b      	subgt	r3, r3, r2
 800de64:	18ed      	addgt	r5, r5, r3
 800de66:	2600      	movs	r6, #0
 800de68:	341a      	adds	r4, #26
 800de6a:	42b5      	cmp	r5, r6
 800de6c:	d11a      	bne.n	800dea4 <_printf_common+0xc8>
 800de6e:	2000      	movs	r0, #0
 800de70:	e008      	b.n	800de84 <_printf_common+0xa8>
 800de72:	2301      	movs	r3, #1
 800de74:	4652      	mov	r2, sl
 800de76:	4649      	mov	r1, r9
 800de78:	4638      	mov	r0, r7
 800de7a:	47c0      	blx	r8
 800de7c:	3001      	adds	r0, #1
 800de7e:	d103      	bne.n	800de88 <_printf_common+0xac>
 800de80:	f04f 30ff 	mov.w	r0, #4294967295
 800de84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de88:	3501      	adds	r5, #1
 800de8a:	e7c6      	b.n	800de1a <_printf_common+0x3e>
 800de8c:	18e1      	adds	r1, r4, r3
 800de8e:	1c5a      	adds	r2, r3, #1
 800de90:	2030      	movs	r0, #48	; 0x30
 800de92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800de96:	4422      	add	r2, r4
 800de98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800de9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dea0:	3302      	adds	r3, #2
 800dea2:	e7c7      	b.n	800de34 <_printf_common+0x58>
 800dea4:	2301      	movs	r3, #1
 800dea6:	4622      	mov	r2, r4
 800dea8:	4649      	mov	r1, r9
 800deaa:	4638      	mov	r0, r7
 800deac:	47c0      	blx	r8
 800deae:	3001      	adds	r0, #1
 800deb0:	d0e6      	beq.n	800de80 <_printf_common+0xa4>
 800deb2:	3601      	adds	r6, #1
 800deb4:	e7d9      	b.n	800de6a <_printf_common+0x8e>
	...

0800deb8 <_printf_i>:
 800deb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800debc:	7e0f      	ldrb	r7, [r1, #24]
 800debe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dec0:	2f78      	cmp	r7, #120	; 0x78
 800dec2:	4691      	mov	r9, r2
 800dec4:	4680      	mov	r8, r0
 800dec6:	460c      	mov	r4, r1
 800dec8:	469a      	mov	sl, r3
 800deca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dece:	d807      	bhi.n	800dee0 <_printf_i+0x28>
 800ded0:	2f62      	cmp	r7, #98	; 0x62
 800ded2:	d80a      	bhi.n	800deea <_printf_i+0x32>
 800ded4:	2f00      	cmp	r7, #0
 800ded6:	f000 80d8 	beq.w	800e08a <_printf_i+0x1d2>
 800deda:	2f58      	cmp	r7, #88	; 0x58
 800dedc:	f000 80a3 	beq.w	800e026 <_printf_i+0x16e>
 800dee0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dee4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dee8:	e03a      	b.n	800df60 <_printf_i+0xa8>
 800deea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800deee:	2b15      	cmp	r3, #21
 800def0:	d8f6      	bhi.n	800dee0 <_printf_i+0x28>
 800def2:	a101      	add	r1, pc, #4	; (adr r1, 800def8 <_printf_i+0x40>)
 800def4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800def8:	0800df51 	.word	0x0800df51
 800defc:	0800df65 	.word	0x0800df65
 800df00:	0800dee1 	.word	0x0800dee1
 800df04:	0800dee1 	.word	0x0800dee1
 800df08:	0800dee1 	.word	0x0800dee1
 800df0c:	0800dee1 	.word	0x0800dee1
 800df10:	0800df65 	.word	0x0800df65
 800df14:	0800dee1 	.word	0x0800dee1
 800df18:	0800dee1 	.word	0x0800dee1
 800df1c:	0800dee1 	.word	0x0800dee1
 800df20:	0800dee1 	.word	0x0800dee1
 800df24:	0800e071 	.word	0x0800e071
 800df28:	0800df95 	.word	0x0800df95
 800df2c:	0800e053 	.word	0x0800e053
 800df30:	0800dee1 	.word	0x0800dee1
 800df34:	0800dee1 	.word	0x0800dee1
 800df38:	0800e093 	.word	0x0800e093
 800df3c:	0800dee1 	.word	0x0800dee1
 800df40:	0800df95 	.word	0x0800df95
 800df44:	0800dee1 	.word	0x0800dee1
 800df48:	0800dee1 	.word	0x0800dee1
 800df4c:	0800e05b 	.word	0x0800e05b
 800df50:	682b      	ldr	r3, [r5, #0]
 800df52:	1d1a      	adds	r2, r3, #4
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	602a      	str	r2, [r5, #0]
 800df58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800df5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800df60:	2301      	movs	r3, #1
 800df62:	e0a3      	b.n	800e0ac <_printf_i+0x1f4>
 800df64:	6820      	ldr	r0, [r4, #0]
 800df66:	6829      	ldr	r1, [r5, #0]
 800df68:	0606      	lsls	r6, r0, #24
 800df6a:	f101 0304 	add.w	r3, r1, #4
 800df6e:	d50a      	bpl.n	800df86 <_printf_i+0xce>
 800df70:	680e      	ldr	r6, [r1, #0]
 800df72:	602b      	str	r3, [r5, #0]
 800df74:	2e00      	cmp	r6, #0
 800df76:	da03      	bge.n	800df80 <_printf_i+0xc8>
 800df78:	232d      	movs	r3, #45	; 0x2d
 800df7a:	4276      	negs	r6, r6
 800df7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df80:	485e      	ldr	r0, [pc, #376]	; (800e0fc <_printf_i+0x244>)
 800df82:	230a      	movs	r3, #10
 800df84:	e019      	b.n	800dfba <_printf_i+0x102>
 800df86:	680e      	ldr	r6, [r1, #0]
 800df88:	602b      	str	r3, [r5, #0]
 800df8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800df8e:	bf18      	it	ne
 800df90:	b236      	sxthne	r6, r6
 800df92:	e7ef      	b.n	800df74 <_printf_i+0xbc>
 800df94:	682b      	ldr	r3, [r5, #0]
 800df96:	6820      	ldr	r0, [r4, #0]
 800df98:	1d19      	adds	r1, r3, #4
 800df9a:	6029      	str	r1, [r5, #0]
 800df9c:	0601      	lsls	r1, r0, #24
 800df9e:	d501      	bpl.n	800dfa4 <_printf_i+0xec>
 800dfa0:	681e      	ldr	r6, [r3, #0]
 800dfa2:	e002      	b.n	800dfaa <_printf_i+0xf2>
 800dfa4:	0646      	lsls	r6, r0, #25
 800dfa6:	d5fb      	bpl.n	800dfa0 <_printf_i+0xe8>
 800dfa8:	881e      	ldrh	r6, [r3, #0]
 800dfaa:	4854      	ldr	r0, [pc, #336]	; (800e0fc <_printf_i+0x244>)
 800dfac:	2f6f      	cmp	r7, #111	; 0x6f
 800dfae:	bf0c      	ite	eq
 800dfb0:	2308      	moveq	r3, #8
 800dfb2:	230a      	movne	r3, #10
 800dfb4:	2100      	movs	r1, #0
 800dfb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dfba:	6865      	ldr	r5, [r4, #4]
 800dfbc:	60a5      	str	r5, [r4, #8]
 800dfbe:	2d00      	cmp	r5, #0
 800dfc0:	bfa2      	ittt	ge
 800dfc2:	6821      	ldrge	r1, [r4, #0]
 800dfc4:	f021 0104 	bicge.w	r1, r1, #4
 800dfc8:	6021      	strge	r1, [r4, #0]
 800dfca:	b90e      	cbnz	r6, 800dfd0 <_printf_i+0x118>
 800dfcc:	2d00      	cmp	r5, #0
 800dfce:	d04d      	beq.n	800e06c <_printf_i+0x1b4>
 800dfd0:	4615      	mov	r5, r2
 800dfd2:	fbb6 f1f3 	udiv	r1, r6, r3
 800dfd6:	fb03 6711 	mls	r7, r3, r1, r6
 800dfda:	5dc7      	ldrb	r7, [r0, r7]
 800dfdc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dfe0:	4637      	mov	r7, r6
 800dfe2:	42bb      	cmp	r3, r7
 800dfe4:	460e      	mov	r6, r1
 800dfe6:	d9f4      	bls.n	800dfd2 <_printf_i+0x11a>
 800dfe8:	2b08      	cmp	r3, #8
 800dfea:	d10b      	bne.n	800e004 <_printf_i+0x14c>
 800dfec:	6823      	ldr	r3, [r4, #0]
 800dfee:	07de      	lsls	r6, r3, #31
 800dff0:	d508      	bpl.n	800e004 <_printf_i+0x14c>
 800dff2:	6923      	ldr	r3, [r4, #16]
 800dff4:	6861      	ldr	r1, [r4, #4]
 800dff6:	4299      	cmp	r1, r3
 800dff8:	bfde      	ittt	le
 800dffa:	2330      	movle	r3, #48	; 0x30
 800dffc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e000:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e004:	1b52      	subs	r2, r2, r5
 800e006:	6122      	str	r2, [r4, #16]
 800e008:	f8cd a000 	str.w	sl, [sp]
 800e00c:	464b      	mov	r3, r9
 800e00e:	aa03      	add	r2, sp, #12
 800e010:	4621      	mov	r1, r4
 800e012:	4640      	mov	r0, r8
 800e014:	f7ff fee2 	bl	800dddc <_printf_common>
 800e018:	3001      	adds	r0, #1
 800e01a:	d14c      	bne.n	800e0b6 <_printf_i+0x1fe>
 800e01c:	f04f 30ff 	mov.w	r0, #4294967295
 800e020:	b004      	add	sp, #16
 800e022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e026:	4835      	ldr	r0, [pc, #212]	; (800e0fc <_printf_i+0x244>)
 800e028:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e02c:	6829      	ldr	r1, [r5, #0]
 800e02e:	6823      	ldr	r3, [r4, #0]
 800e030:	f851 6b04 	ldr.w	r6, [r1], #4
 800e034:	6029      	str	r1, [r5, #0]
 800e036:	061d      	lsls	r5, r3, #24
 800e038:	d514      	bpl.n	800e064 <_printf_i+0x1ac>
 800e03a:	07df      	lsls	r7, r3, #31
 800e03c:	bf44      	itt	mi
 800e03e:	f043 0320 	orrmi.w	r3, r3, #32
 800e042:	6023      	strmi	r3, [r4, #0]
 800e044:	b91e      	cbnz	r6, 800e04e <_printf_i+0x196>
 800e046:	6823      	ldr	r3, [r4, #0]
 800e048:	f023 0320 	bic.w	r3, r3, #32
 800e04c:	6023      	str	r3, [r4, #0]
 800e04e:	2310      	movs	r3, #16
 800e050:	e7b0      	b.n	800dfb4 <_printf_i+0xfc>
 800e052:	6823      	ldr	r3, [r4, #0]
 800e054:	f043 0320 	orr.w	r3, r3, #32
 800e058:	6023      	str	r3, [r4, #0]
 800e05a:	2378      	movs	r3, #120	; 0x78
 800e05c:	4828      	ldr	r0, [pc, #160]	; (800e100 <_printf_i+0x248>)
 800e05e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e062:	e7e3      	b.n	800e02c <_printf_i+0x174>
 800e064:	0659      	lsls	r1, r3, #25
 800e066:	bf48      	it	mi
 800e068:	b2b6      	uxthmi	r6, r6
 800e06a:	e7e6      	b.n	800e03a <_printf_i+0x182>
 800e06c:	4615      	mov	r5, r2
 800e06e:	e7bb      	b.n	800dfe8 <_printf_i+0x130>
 800e070:	682b      	ldr	r3, [r5, #0]
 800e072:	6826      	ldr	r6, [r4, #0]
 800e074:	6961      	ldr	r1, [r4, #20]
 800e076:	1d18      	adds	r0, r3, #4
 800e078:	6028      	str	r0, [r5, #0]
 800e07a:	0635      	lsls	r5, r6, #24
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	d501      	bpl.n	800e084 <_printf_i+0x1cc>
 800e080:	6019      	str	r1, [r3, #0]
 800e082:	e002      	b.n	800e08a <_printf_i+0x1d2>
 800e084:	0670      	lsls	r0, r6, #25
 800e086:	d5fb      	bpl.n	800e080 <_printf_i+0x1c8>
 800e088:	8019      	strh	r1, [r3, #0]
 800e08a:	2300      	movs	r3, #0
 800e08c:	6123      	str	r3, [r4, #16]
 800e08e:	4615      	mov	r5, r2
 800e090:	e7ba      	b.n	800e008 <_printf_i+0x150>
 800e092:	682b      	ldr	r3, [r5, #0]
 800e094:	1d1a      	adds	r2, r3, #4
 800e096:	602a      	str	r2, [r5, #0]
 800e098:	681d      	ldr	r5, [r3, #0]
 800e09a:	6862      	ldr	r2, [r4, #4]
 800e09c:	2100      	movs	r1, #0
 800e09e:	4628      	mov	r0, r5
 800e0a0:	f7f2 f8ee 	bl	8000280 <memchr>
 800e0a4:	b108      	cbz	r0, 800e0aa <_printf_i+0x1f2>
 800e0a6:	1b40      	subs	r0, r0, r5
 800e0a8:	6060      	str	r0, [r4, #4]
 800e0aa:	6863      	ldr	r3, [r4, #4]
 800e0ac:	6123      	str	r3, [r4, #16]
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0b4:	e7a8      	b.n	800e008 <_printf_i+0x150>
 800e0b6:	6923      	ldr	r3, [r4, #16]
 800e0b8:	462a      	mov	r2, r5
 800e0ba:	4649      	mov	r1, r9
 800e0bc:	4640      	mov	r0, r8
 800e0be:	47d0      	blx	sl
 800e0c0:	3001      	adds	r0, #1
 800e0c2:	d0ab      	beq.n	800e01c <_printf_i+0x164>
 800e0c4:	6823      	ldr	r3, [r4, #0]
 800e0c6:	079b      	lsls	r3, r3, #30
 800e0c8:	d413      	bmi.n	800e0f2 <_printf_i+0x23a>
 800e0ca:	68e0      	ldr	r0, [r4, #12]
 800e0cc:	9b03      	ldr	r3, [sp, #12]
 800e0ce:	4298      	cmp	r0, r3
 800e0d0:	bfb8      	it	lt
 800e0d2:	4618      	movlt	r0, r3
 800e0d4:	e7a4      	b.n	800e020 <_printf_i+0x168>
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	4632      	mov	r2, r6
 800e0da:	4649      	mov	r1, r9
 800e0dc:	4640      	mov	r0, r8
 800e0de:	47d0      	blx	sl
 800e0e0:	3001      	adds	r0, #1
 800e0e2:	d09b      	beq.n	800e01c <_printf_i+0x164>
 800e0e4:	3501      	adds	r5, #1
 800e0e6:	68e3      	ldr	r3, [r4, #12]
 800e0e8:	9903      	ldr	r1, [sp, #12]
 800e0ea:	1a5b      	subs	r3, r3, r1
 800e0ec:	42ab      	cmp	r3, r5
 800e0ee:	dcf2      	bgt.n	800e0d6 <_printf_i+0x21e>
 800e0f0:	e7eb      	b.n	800e0ca <_printf_i+0x212>
 800e0f2:	2500      	movs	r5, #0
 800e0f4:	f104 0619 	add.w	r6, r4, #25
 800e0f8:	e7f5      	b.n	800e0e6 <_printf_i+0x22e>
 800e0fa:	bf00      	nop
 800e0fc:	0800e589 	.word	0x0800e589
 800e100:	0800e59a 	.word	0x0800e59a

0800e104 <memmove>:
 800e104:	4288      	cmp	r0, r1
 800e106:	b510      	push	{r4, lr}
 800e108:	eb01 0402 	add.w	r4, r1, r2
 800e10c:	d902      	bls.n	800e114 <memmove+0x10>
 800e10e:	4284      	cmp	r4, r0
 800e110:	4623      	mov	r3, r4
 800e112:	d807      	bhi.n	800e124 <memmove+0x20>
 800e114:	1e43      	subs	r3, r0, #1
 800e116:	42a1      	cmp	r1, r4
 800e118:	d008      	beq.n	800e12c <memmove+0x28>
 800e11a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e11e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e122:	e7f8      	b.n	800e116 <memmove+0x12>
 800e124:	4402      	add	r2, r0
 800e126:	4601      	mov	r1, r0
 800e128:	428a      	cmp	r2, r1
 800e12a:	d100      	bne.n	800e12e <memmove+0x2a>
 800e12c:	bd10      	pop	{r4, pc}
 800e12e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e132:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e136:	e7f7      	b.n	800e128 <memmove+0x24>

0800e138 <_free_r>:
 800e138:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e13a:	2900      	cmp	r1, #0
 800e13c:	d044      	beq.n	800e1c8 <_free_r+0x90>
 800e13e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e142:	9001      	str	r0, [sp, #4]
 800e144:	2b00      	cmp	r3, #0
 800e146:	f1a1 0404 	sub.w	r4, r1, #4
 800e14a:	bfb8      	it	lt
 800e14c:	18e4      	addlt	r4, r4, r3
 800e14e:	f000 f913 	bl	800e378 <__malloc_lock>
 800e152:	4a1e      	ldr	r2, [pc, #120]	; (800e1cc <_free_r+0x94>)
 800e154:	9801      	ldr	r0, [sp, #4]
 800e156:	6813      	ldr	r3, [r2, #0]
 800e158:	b933      	cbnz	r3, 800e168 <_free_r+0x30>
 800e15a:	6063      	str	r3, [r4, #4]
 800e15c:	6014      	str	r4, [r2, #0]
 800e15e:	b003      	add	sp, #12
 800e160:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e164:	f000 b90e 	b.w	800e384 <__malloc_unlock>
 800e168:	42a3      	cmp	r3, r4
 800e16a:	d908      	bls.n	800e17e <_free_r+0x46>
 800e16c:	6825      	ldr	r5, [r4, #0]
 800e16e:	1961      	adds	r1, r4, r5
 800e170:	428b      	cmp	r3, r1
 800e172:	bf01      	itttt	eq
 800e174:	6819      	ldreq	r1, [r3, #0]
 800e176:	685b      	ldreq	r3, [r3, #4]
 800e178:	1949      	addeq	r1, r1, r5
 800e17a:	6021      	streq	r1, [r4, #0]
 800e17c:	e7ed      	b.n	800e15a <_free_r+0x22>
 800e17e:	461a      	mov	r2, r3
 800e180:	685b      	ldr	r3, [r3, #4]
 800e182:	b10b      	cbz	r3, 800e188 <_free_r+0x50>
 800e184:	42a3      	cmp	r3, r4
 800e186:	d9fa      	bls.n	800e17e <_free_r+0x46>
 800e188:	6811      	ldr	r1, [r2, #0]
 800e18a:	1855      	adds	r5, r2, r1
 800e18c:	42a5      	cmp	r5, r4
 800e18e:	d10b      	bne.n	800e1a8 <_free_r+0x70>
 800e190:	6824      	ldr	r4, [r4, #0]
 800e192:	4421      	add	r1, r4
 800e194:	1854      	adds	r4, r2, r1
 800e196:	42a3      	cmp	r3, r4
 800e198:	6011      	str	r1, [r2, #0]
 800e19a:	d1e0      	bne.n	800e15e <_free_r+0x26>
 800e19c:	681c      	ldr	r4, [r3, #0]
 800e19e:	685b      	ldr	r3, [r3, #4]
 800e1a0:	6053      	str	r3, [r2, #4]
 800e1a2:	4421      	add	r1, r4
 800e1a4:	6011      	str	r1, [r2, #0]
 800e1a6:	e7da      	b.n	800e15e <_free_r+0x26>
 800e1a8:	d902      	bls.n	800e1b0 <_free_r+0x78>
 800e1aa:	230c      	movs	r3, #12
 800e1ac:	6003      	str	r3, [r0, #0]
 800e1ae:	e7d6      	b.n	800e15e <_free_r+0x26>
 800e1b0:	6825      	ldr	r5, [r4, #0]
 800e1b2:	1961      	adds	r1, r4, r5
 800e1b4:	428b      	cmp	r3, r1
 800e1b6:	bf04      	itt	eq
 800e1b8:	6819      	ldreq	r1, [r3, #0]
 800e1ba:	685b      	ldreq	r3, [r3, #4]
 800e1bc:	6063      	str	r3, [r4, #4]
 800e1be:	bf04      	itt	eq
 800e1c0:	1949      	addeq	r1, r1, r5
 800e1c2:	6021      	streq	r1, [r4, #0]
 800e1c4:	6054      	str	r4, [r2, #4]
 800e1c6:	e7ca      	b.n	800e15e <_free_r+0x26>
 800e1c8:	b003      	add	sp, #12
 800e1ca:	bd30      	pop	{r4, r5, pc}
 800e1cc:	2000af5c 	.word	0x2000af5c

0800e1d0 <sbrk_aligned>:
 800e1d0:	b570      	push	{r4, r5, r6, lr}
 800e1d2:	4e0e      	ldr	r6, [pc, #56]	; (800e20c <sbrk_aligned+0x3c>)
 800e1d4:	460c      	mov	r4, r1
 800e1d6:	6831      	ldr	r1, [r6, #0]
 800e1d8:	4605      	mov	r5, r0
 800e1da:	b911      	cbnz	r1, 800e1e2 <sbrk_aligned+0x12>
 800e1dc:	f000 f8bc 	bl	800e358 <_sbrk_r>
 800e1e0:	6030      	str	r0, [r6, #0]
 800e1e2:	4621      	mov	r1, r4
 800e1e4:	4628      	mov	r0, r5
 800e1e6:	f000 f8b7 	bl	800e358 <_sbrk_r>
 800e1ea:	1c43      	adds	r3, r0, #1
 800e1ec:	d00a      	beq.n	800e204 <sbrk_aligned+0x34>
 800e1ee:	1cc4      	adds	r4, r0, #3
 800e1f0:	f024 0403 	bic.w	r4, r4, #3
 800e1f4:	42a0      	cmp	r0, r4
 800e1f6:	d007      	beq.n	800e208 <sbrk_aligned+0x38>
 800e1f8:	1a21      	subs	r1, r4, r0
 800e1fa:	4628      	mov	r0, r5
 800e1fc:	f000 f8ac 	bl	800e358 <_sbrk_r>
 800e200:	3001      	adds	r0, #1
 800e202:	d101      	bne.n	800e208 <sbrk_aligned+0x38>
 800e204:	f04f 34ff 	mov.w	r4, #4294967295
 800e208:	4620      	mov	r0, r4
 800e20a:	bd70      	pop	{r4, r5, r6, pc}
 800e20c:	2000af60 	.word	0x2000af60

0800e210 <_malloc_r>:
 800e210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e214:	1ccd      	adds	r5, r1, #3
 800e216:	f025 0503 	bic.w	r5, r5, #3
 800e21a:	3508      	adds	r5, #8
 800e21c:	2d0c      	cmp	r5, #12
 800e21e:	bf38      	it	cc
 800e220:	250c      	movcc	r5, #12
 800e222:	2d00      	cmp	r5, #0
 800e224:	4607      	mov	r7, r0
 800e226:	db01      	blt.n	800e22c <_malloc_r+0x1c>
 800e228:	42a9      	cmp	r1, r5
 800e22a:	d905      	bls.n	800e238 <_malloc_r+0x28>
 800e22c:	230c      	movs	r3, #12
 800e22e:	603b      	str	r3, [r7, #0]
 800e230:	2600      	movs	r6, #0
 800e232:	4630      	mov	r0, r6
 800e234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e238:	4e2e      	ldr	r6, [pc, #184]	; (800e2f4 <_malloc_r+0xe4>)
 800e23a:	f000 f89d 	bl	800e378 <__malloc_lock>
 800e23e:	6833      	ldr	r3, [r6, #0]
 800e240:	461c      	mov	r4, r3
 800e242:	bb34      	cbnz	r4, 800e292 <_malloc_r+0x82>
 800e244:	4629      	mov	r1, r5
 800e246:	4638      	mov	r0, r7
 800e248:	f7ff ffc2 	bl	800e1d0 <sbrk_aligned>
 800e24c:	1c43      	adds	r3, r0, #1
 800e24e:	4604      	mov	r4, r0
 800e250:	d14d      	bne.n	800e2ee <_malloc_r+0xde>
 800e252:	6834      	ldr	r4, [r6, #0]
 800e254:	4626      	mov	r6, r4
 800e256:	2e00      	cmp	r6, #0
 800e258:	d140      	bne.n	800e2dc <_malloc_r+0xcc>
 800e25a:	6823      	ldr	r3, [r4, #0]
 800e25c:	4631      	mov	r1, r6
 800e25e:	4638      	mov	r0, r7
 800e260:	eb04 0803 	add.w	r8, r4, r3
 800e264:	f000 f878 	bl	800e358 <_sbrk_r>
 800e268:	4580      	cmp	r8, r0
 800e26a:	d13a      	bne.n	800e2e2 <_malloc_r+0xd2>
 800e26c:	6821      	ldr	r1, [r4, #0]
 800e26e:	3503      	adds	r5, #3
 800e270:	1a6d      	subs	r5, r5, r1
 800e272:	f025 0503 	bic.w	r5, r5, #3
 800e276:	3508      	adds	r5, #8
 800e278:	2d0c      	cmp	r5, #12
 800e27a:	bf38      	it	cc
 800e27c:	250c      	movcc	r5, #12
 800e27e:	4629      	mov	r1, r5
 800e280:	4638      	mov	r0, r7
 800e282:	f7ff ffa5 	bl	800e1d0 <sbrk_aligned>
 800e286:	3001      	adds	r0, #1
 800e288:	d02b      	beq.n	800e2e2 <_malloc_r+0xd2>
 800e28a:	6823      	ldr	r3, [r4, #0]
 800e28c:	442b      	add	r3, r5
 800e28e:	6023      	str	r3, [r4, #0]
 800e290:	e00e      	b.n	800e2b0 <_malloc_r+0xa0>
 800e292:	6822      	ldr	r2, [r4, #0]
 800e294:	1b52      	subs	r2, r2, r5
 800e296:	d41e      	bmi.n	800e2d6 <_malloc_r+0xc6>
 800e298:	2a0b      	cmp	r2, #11
 800e29a:	d916      	bls.n	800e2ca <_malloc_r+0xba>
 800e29c:	1961      	adds	r1, r4, r5
 800e29e:	42a3      	cmp	r3, r4
 800e2a0:	6025      	str	r5, [r4, #0]
 800e2a2:	bf18      	it	ne
 800e2a4:	6059      	strne	r1, [r3, #4]
 800e2a6:	6863      	ldr	r3, [r4, #4]
 800e2a8:	bf08      	it	eq
 800e2aa:	6031      	streq	r1, [r6, #0]
 800e2ac:	5162      	str	r2, [r4, r5]
 800e2ae:	604b      	str	r3, [r1, #4]
 800e2b0:	4638      	mov	r0, r7
 800e2b2:	f104 060b 	add.w	r6, r4, #11
 800e2b6:	f000 f865 	bl	800e384 <__malloc_unlock>
 800e2ba:	f026 0607 	bic.w	r6, r6, #7
 800e2be:	1d23      	adds	r3, r4, #4
 800e2c0:	1af2      	subs	r2, r6, r3
 800e2c2:	d0b6      	beq.n	800e232 <_malloc_r+0x22>
 800e2c4:	1b9b      	subs	r3, r3, r6
 800e2c6:	50a3      	str	r3, [r4, r2]
 800e2c8:	e7b3      	b.n	800e232 <_malloc_r+0x22>
 800e2ca:	6862      	ldr	r2, [r4, #4]
 800e2cc:	42a3      	cmp	r3, r4
 800e2ce:	bf0c      	ite	eq
 800e2d0:	6032      	streq	r2, [r6, #0]
 800e2d2:	605a      	strne	r2, [r3, #4]
 800e2d4:	e7ec      	b.n	800e2b0 <_malloc_r+0xa0>
 800e2d6:	4623      	mov	r3, r4
 800e2d8:	6864      	ldr	r4, [r4, #4]
 800e2da:	e7b2      	b.n	800e242 <_malloc_r+0x32>
 800e2dc:	4634      	mov	r4, r6
 800e2de:	6876      	ldr	r6, [r6, #4]
 800e2e0:	e7b9      	b.n	800e256 <_malloc_r+0x46>
 800e2e2:	230c      	movs	r3, #12
 800e2e4:	603b      	str	r3, [r7, #0]
 800e2e6:	4638      	mov	r0, r7
 800e2e8:	f000 f84c 	bl	800e384 <__malloc_unlock>
 800e2ec:	e7a1      	b.n	800e232 <_malloc_r+0x22>
 800e2ee:	6025      	str	r5, [r4, #0]
 800e2f0:	e7de      	b.n	800e2b0 <_malloc_r+0xa0>
 800e2f2:	bf00      	nop
 800e2f4:	2000af5c 	.word	0x2000af5c

0800e2f8 <_realloc_r>:
 800e2f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2fc:	4680      	mov	r8, r0
 800e2fe:	4614      	mov	r4, r2
 800e300:	460e      	mov	r6, r1
 800e302:	b921      	cbnz	r1, 800e30e <_realloc_r+0x16>
 800e304:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e308:	4611      	mov	r1, r2
 800e30a:	f7ff bf81 	b.w	800e210 <_malloc_r>
 800e30e:	b92a      	cbnz	r2, 800e31c <_realloc_r+0x24>
 800e310:	f7ff ff12 	bl	800e138 <_free_r>
 800e314:	4625      	mov	r5, r4
 800e316:	4628      	mov	r0, r5
 800e318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e31c:	f000 f838 	bl	800e390 <_malloc_usable_size_r>
 800e320:	4284      	cmp	r4, r0
 800e322:	4607      	mov	r7, r0
 800e324:	d802      	bhi.n	800e32c <_realloc_r+0x34>
 800e326:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e32a:	d812      	bhi.n	800e352 <_realloc_r+0x5a>
 800e32c:	4621      	mov	r1, r4
 800e32e:	4640      	mov	r0, r8
 800e330:	f7ff ff6e 	bl	800e210 <_malloc_r>
 800e334:	4605      	mov	r5, r0
 800e336:	2800      	cmp	r0, #0
 800e338:	d0ed      	beq.n	800e316 <_realloc_r+0x1e>
 800e33a:	42bc      	cmp	r4, r7
 800e33c:	4622      	mov	r2, r4
 800e33e:	4631      	mov	r1, r6
 800e340:	bf28      	it	cs
 800e342:	463a      	movcs	r2, r7
 800e344:	f7ff fba4 	bl	800da90 <memcpy>
 800e348:	4631      	mov	r1, r6
 800e34a:	4640      	mov	r0, r8
 800e34c:	f7ff fef4 	bl	800e138 <_free_r>
 800e350:	e7e1      	b.n	800e316 <_realloc_r+0x1e>
 800e352:	4635      	mov	r5, r6
 800e354:	e7df      	b.n	800e316 <_realloc_r+0x1e>
	...

0800e358 <_sbrk_r>:
 800e358:	b538      	push	{r3, r4, r5, lr}
 800e35a:	4d06      	ldr	r5, [pc, #24]	; (800e374 <_sbrk_r+0x1c>)
 800e35c:	2300      	movs	r3, #0
 800e35e:	4604      	mov	r4, r0
 800e360:	4608      	mov	r0, r1
 800e362:	602b      	str	r3, [r5, #0]
 800e364:	f7f2 fd50 	bl	8000e08 <_sbrk>
 800e368:	1c43      	adds	r3, r0, #1
 800e36a:	d102      	bne.n	800e372 <_sbrk_r+0x1a>
 800e36c:	682b      	ldr	r3, [r5, #0]
 800e36e:	b103      	cbz	r3, 800e372 <_sbrk_r+0x1a>
 800e370:	6023      	str	r3, [r4, #0]
 800e372:	bd38      	pop	{r3, r4, r5, pc}
 800e374:	2000af64 	.word	0x2000af64

0800e378 <__malloc_lock>:
 800e378:	4801      	ldr	r0, [pc, #4]	; (800e380 <__malloc_lock+0x8>)
 800e37a:	f000 b811 	b.w	800e3a0 <__retarget_lock_acquire_recursive>
 800e37e:	bf00      	nop
 800e380:	2000af68 	.word	0x2000af68

0800e384 <__malloc_unlock>:
 800e384:	4801      	ldr	r0, [pc, #4]	; (800e38c <__malloc_unlock+0x8>)
 800e386:	f000 b80c 	b.w	800e3a2 <__retarget_lock_release_recursive>
 800e38a:	bf00      	nop
 800e38c:	2000af68 	.word	0x2000af68

0800e390 <_malloc_usable_size_r>:
 800e390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e394:	1f18      	subs	r0, r3, #4
 800e396:	2b00      	cmp	r3, #0
 800e398:	bfbc      	itt	lt
 800e39a:	580b      	ldrlt	r3, [r1, r0]
 800e39c:	18c0      	addlt	r0, r0, r3
 800e39e:	4770      	bx	lr

0800e3a0 <__retarget_lock_acquire_recursive>:
 800e3a0:	4770      	bx	lr

0800e3a2 <__retarget_lock_release_recursive>:
 800e3a2:	4770      	bx	lr

0800e3a4 <_init>:
 800e3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3a6:	bf00      	nop
 800e3a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3aa:	bc08      	pop	{r3}
 800e3ac:	469e      	mov	lr, r3
 800e3ae:	4770      	bx	lr

0800e3b0 <_fini>:
 800e3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3b2:	bf00      	nop
 800e3b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3b6:	bc08      	pop	{r3}
 800e3b8:	469e      	mov	lr, r3
 800e3ba:	4770      	bx	lr
